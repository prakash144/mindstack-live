{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome to My Knowledge Hub","text":"<p>This is a curated collection of notes and resources for software engineering, AI, cloud, and UPSC preparation.</p>"},{"location":"#interview-prep","title":"\ud83d\ude80 Interview Prep","text":"<p>Structured notes to help you ace software engineering interviews:</p> <ul> <li>Interview Prep Overview</li> </ul>"},{"location":"#ai-knowledge-hub","title":"\ud83e\udde0 AI Knowledge Hub","text":"<p>Central hub for AI learning and resources:</p> <ul> <li>AI Knowledge Hub Overview</li> </ul>"},{"location":"#cloud-architect-notes","title":"\u2601\ufe0f Cloud Architect Notes","text":"<p>Insights from AWS and GCP certifications and cloud architecture:</p> <ul> <li>Cloud Architect Notes Overview</li> </ul>"},{"location":"#dev-tech-stacks","title":"\ud83d\udee0\ufe0f Dev Tech Stacks","text":"<p>Comprehensive development technology notes:</p> <ul> <li>Dev Tech Stacks Overview</li> </ul>"},{"location":"#interview-coding-practice","title":"\ud83d\udca1 Interview Coding Practice","text":"<p>Practice coding problems for interviews:</p> <ul> <li>Interview Coding Practice Overview</li> </ul>"},{"location":"#upsc-resources","title":"\ud83c\udfdb\ufe0f UPSC Resources","text":"<p>Resources for UPSC and PSIR preparation:</p> <ul> <li>UPSC Resources Overview</li> </ul> <p>Stay consistent, keep learning, and build every day! \ud83d\ude80</p>"},{"location":"Notes/AI-Knowledge-Hub/","title":"\ud83e\udd16 AI Knowledge Hub","text":"<p>This section serves as a centralized resource for everything related to Artificial Intelligence, Machine Learning, and related technologies. Whether you're a beginner or looking to deepen your understanding, these resources will guide your learning journey.</p>"},{"location":"Notes/AI-Knowledge-Hub/#contents","title":"\ud83d\udcd8 Contents","text":"<ul> <li>Prompt Engineering</li> <li> <p>Enrolled Courses</p> <ul> <li>Complete AI Mastery Course</li> <li>AI course for developers</li> <li>All courses bundle - HTML, CSS, JS, React, Flutter, React Native, DSA, MERN, Next JS, AI, Blockchain</li> </ul> </li> </ul> <p>\ud83e\udde0 Explore the intelligence behind modern systems and stay ahead in the AI-driven world.</p>"},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/","title":"Prompt Engineering","text":""},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/#quick-access-links","title":"Quick Access Links","text":""},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic of Prompt Engineering</li> <li>Generative AI with OpenAI &amp; ChatGPT</li> <li>Generative AI with Google</li> </ol>"},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/#tools","title":"Tools","text":"<ul> <li>ChatGPT</li> <li>claude AI</li> <li>midjourney</li> <li>lexica</li> </ul>"},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/#resources","title":"Resources","text":"<ul> <li>promptingguide</li> <li>openai docs</li> </ul>"},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/1.basic-prompt-engineering/","title":"Prompt Engineering","text":""},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/1.basic-prompt-engineering/#what-is-prompt-engineering","title":"What is Prompt Engineering?","text":"<ul> <li>Field focused on designing/refining prompts for effective communication with AI models.</li> <li>Well-crafted prompts improve accuracy; poor prompts lead to ambiguity.</li> </ul>"},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/1.basic-prompt-engineering/#why-is-prompt-engineering-important","title":"Why is Prompt Engineering Important?","text":"<ul> <li>Maximizes Model Potential: Extracts better answers from models.</li> <li>Reduces Ambiguity: Ensures clear, relevant responses.</li> <li>Cost Efficiency: Fewer interactions lower token-based costs.</li> </ul>"},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/1.basic-prompt-engineering/#techniques-in-prompt-engineering","title":"Techniques in Prompt Engineering","text":"<ol> <li> <p>Explicitness:</p> <ul> <li>Clear prompts yield precise answers.</li> <li>Example: \"Provide nutritional info about apples\" instead of \"Tell me about apples.\"</li> </ul> </li> <li> <p>Prompt Framing:</p> <ul> <li>Question framing influences output.</li> <li>Example: \"Pros and cons of solar energy\" vs. \"Disadvantages of solar energy.\"</li> </ul> </li> <li> <p>Iterative Prompting:</p> <ul> <li>Refine prompts based on initial model response.</li> </ul> </li> <li> <p>Adjust Parameters:</p> <ul> <li>Temperature: Affects randomness of responses.</li> <li>Max Tokens: Limits response length.</li> </ul> </li> </ol>"},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/1.basic-prompt-engineering/#examples-of-prompt-engineering","title":"Examples of Prompt Engineering","text":"<ol> <li> <p>Basic Prompt:</p> <ul> <li>Input: \"Paris\"</li> <li>Output: \"Paris is the capital of France.\"</li> </ul> </li> <li> <p>Explicit Prompt:</p> <ul> <li>Input: \"Provide a detailed history of Paris.\"</li> <li>Output: \"Paris, the capital city of France, has a rich history dating back...\"</li> </ul> </li> <li> <p>Iterative Prompting:</p> <ul> <li>Initial Input: \"Solar energy\"</li> <li>Refined Input: \"What are the applications of solar energy in daily life?\"</li> </ul> </li> </ol>"},{"location":"Notes/AI-Knowledge-Hub/Prompt-Engineering/1.basic-prompt-engineering/#key-takeaway","title":"Key Takeaway","text":"<ul> <li>Prompt engineering is essential for utilizing advanced language models effectively.</li> <li>Mastering this skill enhances interaction quality and efficiency.</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/","title":"\u2601\ufe0f Cloud Architect Notes","text":"<p>Explore comprehensive notes and resources to master cloud architecture, focusing on AWS and GCP.</p>"},{"location":"Notes/Cloud-Architect-Notes/#aws","title":"AWS","text":"<p>Detailed insights and study material for AWS certifications and architecture concepts:</p> <ul> <li>AWS Certification Notes</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/#gcp-google-cloud-platform","title":"GCP (Google Cloud Platform)","text":"<p>Learn the fundamentals and certification guidance for GCP:</p> <ul> <li>GCP Overview</li> </ul> <p>Keep building your cloud expertise step by step! \u2601\ufe0f\ud83d\ude80</p>"},{"location":"Notes/Cloud-Architect-Notes/AWS/","title":"\ud83d\udcc4 AWS Certification - Embedded PDF","text":"This browser does not support embedded PDFs. You can download the PDF instead.  <p>\ud83d\udcc4 Open AWS Certification PDF</p>"},{"location":"Notes/Cloud-Architect-Notes/GCP/","title":"GCP Cloud Architect Notes","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/#_1","title":"GCP Certification","text":"<ul> <li>GCP-28-Minute Boot</li> <li>Cloud-Skill-Boosts</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/Cloud-Skills-Boost/","title":"Index","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/Cloud-Skills-Boost/#cloud-skills-boost-notes","title":"Cloud-Skills-Boost Notes","text":"<ul> <li>Selected for GCP PCA Exam Voucher</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/Cloud-Skills-Boost/#quick-access-links","title":"Quick Access Links","text":"<ul> <li>Official Exam Guide</li> <li>Official Sample Question</li> <li>Contents</li> <li>Cloud Skills Boots Resources</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/Cloud-Skills-Boost/#table-of-contents","title":"Table of Contents","text":"<ul> <li>1. Google Cloud Fundamentals: Core Infrastructure</li> <li>Module 1: Introduction to Google Cloud</li> <li>Module 2: Resources and Access in the Cloud </li> <li>Module 3: Virtual Machines and Networks in the Cloud </li> <li>Module 4: Storage in the Cloud</li> <li>Module 5: Containers in the Cloud </li> <li>Module 6: Applications in the Cloud </li> <li>Module 7: Prompt Engineering </li> <li>Course Summary</li> <li>2. Essential Google Cloud Infrastructure: Foundation</li> <li>Module 0: Course Introduction </li> <li>Module 1: Interacting with Google Cloud </li> <li>Module 2: Virtual Networks </li> <li>Module 3: Virtual Machines</li> <li>3. Essential Google Cloud Infrastructure: Core Services</li> <li>Module 1: Identity and Access Management (IAM)</li> <li>Module 2: Storage and Database Services </li> <li>Module 3: Resource Management </li> <li>Module 4: Resource Monitoring</li> <li>4. Elastic Google Cloud Infrastructure: Scaling and Automation</li> <li>Module 1: Interconnecting Networks</li> <li>Module 2: Load Balancing and Autoscaling </li> <li>Module 3: Infrastructure Automation </li> <li>Module 4: Managed Services</li> <li>5. Reliable Cloud Infrastructure: Design and Process</li> <li>Module 0: Introduction </li> <li>Module 1: Defining Services </li> <li>Module 2: Microservice Design and Architecture </li> <li>Module 3: DevOps Automation </li> <li>Module 4: Choosing Storage Solutions </li> <li>Module 5: Google Cloud and Hybrid Network Architecture </li> <li>Module 6: Deploying Applications to Google Cloud </li> <li>Module 7: Designing Reliable Systems </li> <li>Module 8: Security </li> <li>Module 9: Maintenance and Monitoring</li> <li>0. Leaning Plan &amp; Program Details</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/Cloud-Skills-Boost/#official-resources-by-cloud-skills-boots-resources","title":"Official Resources by Cloud Skills Boots Resources","text":"<ul> <li>Cloud Skills Boots Resources</li> <li>Gmail</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/Cloud-Skills-Boost/#professional-cloud-architect-certification-sample-questions","title":"Professional Cloud Architect Certification Sample Questions","text":"<ul> <li>Professional Cloud Architect Sample Questions</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/Cloud-Skills-Boost/#professional-cloud-architect-certification-exam-guide","title":"Professional Cloud Architect Certification Exam Guide","text":"<ul> <li>Professional Cloud Architect Certification exam guide</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/","title":"Index","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#quick-access-links","title":"Quick Access Links","text":"<ul> <li>Exam Pattern</li> <li>My Notes</li> <li>Notes based on GCP PCA Syllabus</li> <li>Exam Content Distribution</li> <li>Exam Preparation Tips</li> <li>Recommended Resources</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#table-of-contents","title":"Table of Contents","text":"<ul> <li>0. Getting Started</li> <li>1. Regions and Zones</li> <li>2. Compute</li> <li>3. Instance Groups</li> <li>4. Cloud Load Balancing</li> <li>5. Compute Engine &amp; Load Balancing - For Architects</li> <li>6. Gcloud</li> <li>7. Managed Services</li> <li>8. App Engine</li> <li>9. Google Kubernetes Engine (GKE)</li> <li>10. Google Cloud Functions</li> <li>11. Encryption</li> <li>12. Storage</li> <li>13. Object Storage - Cloud Storage</li> <li>14. IAM (Identity and Access Management)</li> <li>15. Database Fundamentals</li> <li>16. Relational Databases</li> <li>17. NoSQL Databases</li> <li>18. Networking</li> <li>19. Cloud Operations</li> <li>20. Organizing GCP Resources</li> <li>21. Exploring Google Compute Engine VMs Further</li> <li>22. Decoupling Applications with Pub/Sub</li> <li>23. Hybrid Cloud</li> <li>24. BigQuery Data Warehouse</li> <li>25. Designing Solutions on Google Cloud Platform</li> <li>26. Caching on Google Cloud Platform</li> <li>27. Evolution: Agile &gt; DevOps &gt; SRE</li> <li>28. Release Management</li> <li>29. Compliance and Regulations</li> <li>30. Migration</li> <li>31. Architects Must Know</li> <li>32. Other Important GCP Services</li> <li>33. Google Cloud Architecture Framework</li> <li>34. Case Studies</li> <li>35. Get Ready</li> <li>36. Quick Revision</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#table-of-contents-based-on-gcp-pca-syllabus","title":"Table of Contents [Based on GCP PCA Syllabus]","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-1-designing-and-planning-a-cloud-solution-architecture","title":"Section 1: Designing and Planning a Cloud Solution Architecture","text":"<ul> <li>(0) Getting Started</li> <li>(1) Regions and Zones</li> <li>(2) Compute</li> <li>(3) Instance Groups</li> <li>(4) Cloud Load Balancing</li> <li>(5) Compute Engine &amp; Load Balancing - For Architects</li> <li>(12) Storage</li> <li>(13) Object Storage - Cloud Storage</li> <li>(22) Decoupling Applications with Pub/Sub</li> <li>(24) BigQuery Data Warehouse</li> <li>(25) Designing Solutions on Google Cloud Platform</li> <li>(30) Migration</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-2-managing-and-provisioning-a-solution-infrastructure","title":"Section 2: Managing and Provisioning a Solution Infrastructure","text":"<ul> <li>(6) Gcloud</li> <li>(7) Managed Services</li> <li>(8) App Engine</li> <li>(9) Google Kubernetes Engine (GKE)</li> <li>(10) Google Cloud Functions</li> <li>(18) Networking</li> <li>(20) Organizing GCP Resources</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-3-designing-for-security-and-compliance","title":"Section 3: Designing for Security and Compliance","text":"<ul> <li>(11) Encryption</li> <li>(14) IAM (Identity and Access Management)</li> <li>(29) Compliance and Regulations</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-4-analyzing-and-optimizing-technical-and-business-processes","title":"Section 4: Analyzing and Optimizing Technical and Business Processes","text":"<ul> <li>(26) Caching on Google Cloud Platform</li> <li>(27) Evolution: Agile &gt; DevOps &gt; SRE</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-5-managing-implementation","title":"Section 5: Managing Implementation","text":"<ul> <li>(28) Release Management</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-6-ensuring-solution-and-operations-reliability","title":"Section 6: Ensuring Solution and Operations Reliability","text":"<ul> <li>(19) Cloud Operations</li> <li>(21) Exploring Google Compute Engine VMs Further</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#additional-important-concepts-and-resources","title":"Additional Important Concepts and Resources","text":"<ul> <li>(15) Database Fundamentals</li> <li>(16) Relational Databases</li> <li>(17) NoSQL Databases</li> <li>(23) Hybrid Cloud</li> <li>(31) Architects Must Know</li> <li>(32) Other Important GCP Services</li> <li>(33) Google Cloud Architecture Framework</li> <li>(34) Case Studies</li> <li>(35) Get Ready</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#professional-cloud-architect-certification-exam-guide","title":"Professional Cloud Architect Certification Exam Guide","text":"<p>A Google Cloud Certified Professional Cloud Architect enables organizations to leverage Google Cloud technologies. Through an understanding of cloud architecture and Google technology, this individual designs, develops, and manages robust, secure, scalable, highly available, and dynamic solutions to drive business objectives.</p> <p>The Cloud Architect should be proficient in all aspects of enterprise cloud strategy, solution design, and architectural best practices. The Cloud Architect should also be experienced in software development methodologies and approaches, including multi-tiered distributed applications that span multicloud or hybrid environments.</p>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#case-studies","title":"Case Studies","text":"<p>During the exam, some questions may refer to a case study describing a fictitious business and solution concept. These case studies are intended to provide context to help answer questions effectively. Review these case studies before the exam:</p> <ul> <li>EHR Healthcare</li> <li>Helicopter Racing League</li> <li>Mountkirk Games</li> <li>TerramEarth</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-1-designing-and-planning-a-cloud-solution-architecture-24-of-the-exam","title":"Section 1: Designing and Planning a Cloud Solution Architecture (~24% of the exam)","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#11-designing-a-solution-infrastructure-that-meets-business-requirements","title":"1.1 Designing a solution infrastructure that meets business requirements","text":"<ul> <li>Business use cases and product strategy</li> <li>Cost optimization</li> <li>Supporting application design</li> <li>Integration with external systems</li> <li>Data movement</li> <li>Design decision trade-offs</li> <li>Build, buy, modify, or deprecate</li> <li>Success measurements (e.g., KPI, ROI, metrics)</li> <li>Compliance and observability</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#12-designing-a-solution-infrastructure-that-meets-technical-requirements","title":"1.2 Designing a solution infrastructure that meets technical requirements","text":"<ul> <li>High availability and failover design</li> <li>Elasticity of cloud resources (quotas, limits)</li> <li>Scalability to meet growth requirements</li> <li>Performance and latency</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#13-designing-network-storage-and-compute-resources","title":"1.3 Designing network, storage, and compute resources","text":"<ul> <li>Integration with on-premises/multicloud environments</li> <li>Cloud-native networking (VPC, peering, firewalls, container networking)</li> <li>Selecting data processing technologies</li> <li>Choosing appropriate storage types (object, file, databases)</li> <li>Choosing compute resources (preemptible, custom machine type, specialized workload)</li> <li>Mapping compute needs to platform products</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#14-creating-a-migration-plan","title":"1.4 Creating a migration plan","text":"<ul> <li>Integrating solutions with existing systems</li> <li>Migrating systems and data to support the solution</li> <li>Software license mapping</li> <li>Network planning</li> <li>Testing and proofs of concept</li> <li>Dependency management planning</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#15-envisioning-future-solution-improvements","title":"1.5 Envisioning future solution improvements","text":"<ul> <li>Cloud and technology advancements</li> <li>Evolving business needs</li> <li>Evangelism and advocacy</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-2-managing-and-provisioning-a-solution-infrastructure-15-of-the-exam","title":"Section 2: Managing and Provisioning a Solution Infrastructure (~15% of the exam)","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#21-configuring-network-topologies","title":"2.1 Configuring network topologies","text":"<ul> <li>Extending to on-premises environments (hybrid networking)</li> <li>Extending to a multicloud environment, including Google Cloud to Google Cloud communication</li> <li>Security protection (intrusion protection, access control, firewalls)</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#22-configuring-individual-storage-systems","title":"2.2 Configuring individual storage systems","text":"<ul> <li>Data storage allocation</li> <li>Data processing/compute provisioning</li> <li>Security and access management</li> <li>Network configuration for data transfer and latency</li> <li>Data retention and data lifecycle management</li> <li>Data growth planning</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#23-configuring-compute-systems","title":"2.3 Configuring compute systems","text":"<ul> <li>Compute resource provisioning</li> <li>Compute volatility configuration (preemptible vs. standard)</li> <li>Network configuration for compute resources (GCE, GKE, serverless networking)</li> <li>Infrastructure orchestration, resource configuration, patch management</li> <li>Container orchestration</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-3-designing-for-security-and-compliance-18-of-the-exam","title":"Section 3: Designing for Security and Compliance (~18% of the exam)","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#31-designing-for-security","title":"3.1 Designing for security","text":"<ul> <li>Identity and access management (IAM)</li> <li>Resource hierarchy (organizations, folders, projects)</li> <li>Data security (key management, encryption, secret management)</li> <li>Separation of duties (SoD)</li> <li>Security controls (auditing, VPC Service Controls, context-aware access, organization policy)</li> <li>Managing customer-managed encryption keys with Cloud Key Management Service</li> <li>Remote access</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#32-designing-for-compliance","title":"3.2 Designing for compliance","text":"<ul> <li>Legislation (e.g., health record privacy, children\u2019s privacy, data privacy, ownership)</li> <li>Commercial requirements (sensitive data like credit card handling, PII)</li> <li>Industry certifications (e.g., SOC 2)</li> <li>Audits (including logs)</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-4-analyzing-and-optimizing-technical-and-business-processes-18-of-the-exam","title":"Section 4: Analyzing and Optimizing Technical and Business Processes (~18% of the exam)","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#41-analyzing-and-defining-technical-processes","title":"4.1 Analyzing and defining technical processes","text":"<ul> <li>Software development life cycle (SDLC)</li> <li>Continuous integration / continuous deployment (CI/CD)</li> <li>Troubleshooting / root cause analysis best practices</li> <li>Testing and validation of software and infrastructure</li> <li>Service catalog and provisioning</li> <li>Business continuity and disaster recovery</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#42-analyzing-and-defining-business-processes","title":"4.2 Analyzing and defining business processes","text":"<ul> <li>Stakeholder management (influencing and facilitation)</li> <li>Change management</li> <li>Team assessment / skills readiness</li> <li>Decision-making processes</li> <li>Customer success management</li> <li>Cost optimization / resource optimization (capex / opex)</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#43-developing-procedures-to-ensure-solution-reliability-in-production","title":"4.3 Developing procedures to ensure solution reliability in production","text":"<ul> <li>Techniques include chaos engineering and penetration testing</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-5-managing-implementation-11-of-the-exam","title":"Section 5: Managing Implementation (~11% of the exam)","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#51-advising-developmentoperation-teams-to-ensure-successful-deployment","title":"5.1 Advising development/operation teams to ensure successful deployment","text":"<ul> <li>Application development</li> <li>API best practices</li> <li>Testing frameworks (load/unit/integration)</li> <li>Data and system migration and management tooling</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#52-interacting-with-google-cloud-programmatically","title":"5.2 Interacting with Google Cloud programmatically","text":"<ul> <li>Google Cloud Shell</li> <li>Google Cloud SDK (gcloud, gsutil, and bq)</li> <li>Cloud Emulators (e.g., Cloud Bigtable, Datastore, Spanner, Pub/Sub, Firestore)</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#section-6-ensuring-solution-and-operations-reliability-14-of-the-exam","title":"Section 6: Ensuring Solution and Operations Reliability (~14% of the exam)","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#61-monitoringloggingprofilingalerting-solutions","title":"6.1 Monitoring/logging/profiling/alerting solutions","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#62-deployment-and-release-management","title":"6.2 Deployment and release management","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#63-assisting-with-the-support-of-deployed-solutions","title":"6.3 Assisting with the support of deployed solutions","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#64-evaluating-quality-control-measures","title":"6.4 Evaluating quality control measures","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#exam-pattern","title":"Exam Pattern","text":"<ul> <li>Type: Multiple-choice and multiple-select questions</li> <li>Length: 2 hours</li> <li>Available Languages: English, Japanese, Spanish, Portuguese, French, German, Korean, Chinese (Simplified)</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#exam-content-distribution","title":"Exam Content Distribution","text":"<ul> <li>Designing and Planning a Cloud Solution Architecture - 24%</li> <li>Managing and Provisioning a Solution Infrastructure - 15%</li> <li>Designing for Security and Compliance - 18%</li> <li>Analyzing and Optimizing Technical and Business Processes - 18%</li> <li>Managing Implementation - 11%</li> <li>Ensuring Solution and Operations Reliability - 14%</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#exam-preparation-tips","title":"Exam Preparation Tips","text":"<ul> <li>Review the GCP documentation for each relevant topic.</li> <li>Take practice exams and sample questions.</li> <li>Engage in hands-on labs to solidify your understanding.</li> <li>Collaborate with others preparing for the exam.</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/#recommended-resources","title":"Recommended Resources","text":"<ul> <li>Google Cloud training courses</li> <li>Official GCP documentation</li> <li>Practice exams available online</li> </ul>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/Notes/36.%20Quick%20Revision/","title":"36. Quick Revision","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/Notes/Examples-Code/commands-executed/","title":"Commands executed","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/Notes/Examples-Code/commands-executed/#commands-executed","title":"Commands Executed","text":""},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/Notes/Examples-Code/commands-executed/#compute-engine","title":"Compute Engine","text":"<pre><code>sudo su\napt update \napt install apache2\nls /var/www/html\necho \"Hello World!\"\necho \"Hello World!\" &gt; /var/www/html/index.html\necho $(hostname)\necho $(hostname -i)\necho \"Hello World from $(hostname)\"\necho \"Hello World from $(hostname) $(hostname -i)\"\necho \"Hello world from $(hostname) $(hostname -i)\" &gt; /var/www/html/index.html\nsudo service apache2 start\n\n\n#!/bin/bash\napt update \napt -y install apache2\necho \"Hello world from $(hostname) $(hostname -I)\" &gt; /var/www/html/index.html\n\n\n#!/bin/bash\necho \"Hello world from $(hostname) $(hostname -I)\" &gt; /var/www/html/index.html\nservice apache2 start\n\n\ngcloud config list project\ngcloud config configurations list\ngcloud compute instances list\ngcloud compute instances create\ngcloud compute instances create my-first-instance-from-gcloud\ngcloud compute instances describe my-first-instance-from-gcloud\ngcloud compute instances delete my-first-instance-from-gcloud\ngcloud compute zones list\ngcloud compute regions list\ngcloud compute machine-types list\n\ngcloud compute machine-types list --filter zone:asia-southeast2-b\ngcloud compute machine-types list --filter \"zone:(asia-southeast2-b asia-southeast2-c)\"\ngcloud compute zones list --filter=region:us-west2\ngcloud compute zones list --sort-by=region\ngcloud compute zones list --sort-by=~region\ngcloud compute zones list --uri\ngcloud compute regions describe us-west4\n</code></pre>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/Notes/Examples-Code/commands-executed/#app-engine","title":"App Engine","text":"<pre><code>cd default-service\ngcloud app deploy\ngcloud app services list\ngcloud app versions list\ngcloud app instances list\ngcloud app deploy --version=v2\ngcloud app versions list\ngcloud app browse\ngcloud app browse --version 20210215t072907\ngcloud app deploy --version=v3 --no-promote\ngcloud app browse --version v3\ngcloud app services set-traffic split=v3=.5,v2=.5\ngcloud app services set-traffic splits=v3=.5,v2=.5\nwatch curl https://melodic-furnace-304906.uc.r.appspot.com/\ngcloud app services set-traffic --splits=v3=.5,v2=.5 --split-by=random\n\ncd ../my-first-service/\ngcloud app deploy\ngcloud app browse --service=my-first-service\n\ngcloud app services list\ngcloud app regions list\n</code></pre>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/Notes/Examples-Code/commands-executed/#kubernetes","title":"Kubernetes","text":"<pre><code>gcloud config set project my-kubernetes-project-304910\ngcloud container clusters get-credentials my-cluster --zone us-central1-c --project my-kubernetes-project-304910\nkubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE\nkubectl get deployment\nkubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080\nkubectl get services\nkubectl get services --watch\ncurl 35.184.204.214:8080/hello-world\nkubectl scale deployment hello-world-rest-api --replicas=3\ngcloud container clusters resize my-cluster --node-pool default-pool --num-nodes=2 --zone=us-central1-c\nkubectl autoscale deployment hello-world-rest-api --max=4 --cpu-percent=70\nkubectl get hpa\nkubectl create configmap hello-world-config --from-literal=RDS_DB_NAME=todos\nkubectl get configmap\nkubectl describe configmap hello-world-config\nkubectl create secret generic hello-world-secrets-1 --from-literal=RDS_PASSWORD=dummytodos\nkubectl get secret\nkubectl describe secret hello-world-secrets-1\nkubectl apply -f deployment.yaml\ngcloud container node-pools list --zone=us-central1-c --cluster=my-cluster\nkubectl get pods -o wide\n\nkubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE\nkubectl get services\nkubectl get replicasets\nkubectl get pods\nkubectl delete pod hello-world-rest-api-58dc9d7fcc-8pv7r\n\nkubectl scale deployment hello-world-rest-api --replicas=1\nkubectl get replicasets\ngcloud projects list\n\nkubectl delete service hello-world-rest-api\nkubectl delete deployment hello-world-rest-api\ngcloud container clusters delete my-cluster --zone us-central1-c\n</code></pre>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/Notes/Examples-Code/commands-executed/#cloud-storage","title":"Cloud Storage","text":"<pre><code>gcloud --version\ngsutil mb gs://my_bucket_in28minutes_shell\ngcloud config set project glowing-furnace-304608\ngsutil mb gs://my_bucket_in28minutes_shell\ngsutil ls gs://my_bucket_in28minutes_shell\n</code></pre>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/Notes/Examples-Code/commands-executed/#iam","title":"IAM","text":"<pre><code>gcloud compute project-info describe\ngcloud auth list\ngcloud projects get-iam-policy glowing-furnace-304608\ngcloud projects add-iam-policy-binding glowing-furnace-304608 --member=user:in28minutes@gmail.com --role=roles/storage.objectAdmin\ngcloud projects remove-iam-policy-binding glowing-furnace-304608 --member=user:in28minutes@gmail.com --role=roles/storage.objectAdmin\ngcloud iam roles describe roles/storage.objectAdmin\ngcloud iam roles copy --source=roles/storage.objectAdmin --destination=my.custom.role --dest-project=glowing-furnace-304608\n</code></pre>"},{"location":"Notes/Cloud-Architect-Notes/GCP/GCP-28Minutes-Notes/Notes/Examples-Code/commands-executed/#databases-cloud-sql-cloud-spanner-and-cloud-bigtable","title":"Databases - Cloud SQL, Cloud Spanner and Cloud BigTable","text":"<pre><code># Cloud SQL\ngcloud sql connect my-first-cloud-sql-instance --user=root --quiet\ngcloud config set project glowing-furnace-304608\ngcloud sql connect my-first-cloud-sql-instance --user=root --quiet\nuse todos\ncreate table user (id integer, username varchar(30) );\ndescribe user;\ninsert into user values (1, 'Ranga');\nselect * from user;\n\n# Cloud Spanner\nCREATE TABLE Users (\n  UserId   INT64 NOT NULL,\n  UserName  STRING(1024)\n) PRIMARY KEY(UserId);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/","title":"Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/#table-of-contents","title":"Table of Contents","text":"<ul> <li>CSE Core Subjects</li> <li>Java</li> <li>Python</li> <li>Golang</li> <li>DevOps</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/","title":"Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Computer Networks</li> <li>Operating System</li> <li>DBMS</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/","title":"Computer Networks","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#1-computer-networks","title":"1\ufe0f\u20e3 Computer Networks","text":"<ul> <li>\ud83d\udcd6 Introduction to Computer Networks</li> <li>\ud83c\udf10 Types of Networks and Interconnected Networks</li> <li>\ud83d\udd04 Network and Logical Topologies</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#2-networking-models","title":"2\ufe0f\u20e3 Networking Models","text":"<ul> <li>\ud83d\udcdc OSI Model and Layers</li> <li>\ud83d\udce1 TCP/IP Model and Its Components</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#3-networking-fundamentals-and-basics","title":"3\ufe0f\u20e3 Networking Fundamentals and Basics","text":"<ul> <li>\ud83d\udd0c Network Cabling and Connectors</li> <li>\ud83d\udcdf Network Devices</li> <li>\ud83d\udce6 Ethernet Frame Structure, ARP, and NAC</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#4-network-protocols-and-communication","title":"4\ufe0f\u20e3 Network Protocols and Communication","text":"<ul> <li>\ud83d\udd17 Network Protocols</li> <li>\ud83d\udce1 Application Layer Protocols (HTTP, FTP, SMTP, SNMP)</li> <li>\ud83d\udee0 Layer Functions</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#5-ip-addressing-and-subnetting","title":"5\ufe0f\u20e3 IP Addressing and Subnetting","text":"<ul> <li>\ud83c\udf0d IP Addressing (IPv4 and IPv6)</li> <li>\ud83c\udff7\ufe0f Subnetting, Supernetting, and Classful vs Classless Addressing</li> <li>\ud83d\udd04 Network Address Translation (NAT)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#6-routing-and-switching","title":"6\ufe0f\u20e3 Routing and Switching","text":"<ul> <li>\ud83d\uddfa\ufe0f Routing Algorithms</li> <li>\ud83d\udce1 Distance Vector and Link State Routing Protocols</li> <li>\ud83c\udf0d Border Gateway Protocol (BGP), Interior Gateway Protocols (IGRP, EIGRP, OSPF)</li> <li>\ud83d\udd04 Switching Techniques</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#7-network-technologies-and-standards","title":"7\ufe0f\u20e3 Network Technologies and Standards","text":"<ul> <li>\ud83d\udce1 Ethernet Standards (IEEE 802.3) and Wireless Networking (IEEE 802.11)</li> <li>\ud83d\udcca Ethernet Switching and VLANs</li> <li>\ud83d\udd17 Data Link Protocols and Spanning Tree Protocol</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#8-network-security","title":"8\ufe0f\u20e3 Network Security","text":"<ul> <li>\ud83d\udd10 Network Security Fundamentals</li> <li>\ud83d\udea7 Firewall and Their Types</li> <li>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Intrusion Detection and Prevention Systems</li> <li>\ud83d\udd11 Virtual Private Networks (VPNs) and Public Key Infrastructure (PKI)</li> <li>\ud83d\udd0f Cryptography Basics (Symmetric and Asymmetric Encryption)</li> <li>\ud83d\udd12 Transport Layer Security (TLS) and SSL</li> <li>\ud83d\udd25 Network Layer and Application Layer Firewalls</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#9-network-management-and-monitoring","title":"9\ufe0f\u20e3 Network Management and Monitoring","text":"<ul> <li>\ud83d\udea6 Traffic Management Techniques</li> <li>\ud83d\udcf6 Quality of Service (QoS), Bandwidth and Latency, Network Congestion and Control Mechanisms</li> <li>\ud83d\udcca Network Performance Metrics</li> <li>\ud83d\udd0d Network Troubleshooting Techniques</li> <li>\ud83d\udda5\ufe0f Network Monitoring and Management</li> <li>\ud83d\udee0 Network Protocol Analysis Tools (Wireshark, tcpdump)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#advanced-networking-concepts","title":"\ud83d\udd1f Advanced Networking Concepts","text":"<ul> <li>\ud83c\udfdb\ufe0f Client-Server Vs Peer-to-Peer Architectures</li> <li>\ud83d\udcd0 Network Design Principles and Considerations</li> <li>\u2696\ufe0f Load Balancing Techniques, Content Delivery Networks (CDNs)</li> <li>\ud83c\udf10 Network Virtualization</li> <li>\ud83d\udda5\ufe0f Software-Defined Networking (SDN)</li> <li>\ud83d\udd04 Network Reliability and Fault Tolerance</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/#resources","title":"Resources:","text":"<ul> <li>https://takeuforward.org/plus/computer-networks/</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/","title":"\ud83d\udce1 Computer Networks","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83d\udd0d What are Computer Networks?</li> <li>\u23f3 History of Computer Networks</li> <li>\ud83c\udfaf Goals of Networking</li> <li>\ud83c\udfd7\ufe0f Components of a Network</li> <li>\ud83c\udfc6 Advantages of Networking</li> <li>\u26a0\ufe0f Challenges of Networking</li> <li>\ud83c\udf10 Types of Networks</li> <li>\ud83c\udf0e Internet</li> <li>\ud83d\udce1 Routing and Switching</li> <li>\ud83d\udd17 Network Protocols</li> <li>\ud83d\udd0d Network Topologies</li> <li>\ud83c\udfaf Conclusion</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#what-are-computer-networks","title":"\ud83d\udd0d What are Computer Networks?","text":"<p>A computer network is a system where multiple computers or devices are connected to share resources, data, and applications via wired or wireless communication channels.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#definition","title":"\ud83d\udcdd Definition","text":"<p>A computer network is a group of interconnected devices that communicate and exchange data, enabling users to share files, applications, and processing power.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#real-life-analogy","title":"\ud83d\udccc Real-Life Analogy","text":"<p>Think of a postal system: - \ud83d\udcec Post offices (computers) are connected by roads (communication channels). - \ud83d\udce9 They send and receive letters (data) efficiently.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#example","title":"\ud83c\udf0d Example","text":"<p>The Internet is the largest computer network, connecting billions of devices worldwide.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#history-of-computer-networks","title":"\u23f3 History of Computer Networks","text":"<p>Computer networks have evolved significantly since their inception in the mid-20th century.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#key-milestones","title":"\ud83d\udcc5 Key Milestones","text":"Year Milestone Description 1950s Early Concept Computational resource sharing concept. 1969 ARPANET First packet-switching network. 1973 Ethernet Introduction of Local Area Networks (LANs). 1983 TCP/IP Adoption Standard protocol suite for global connectivity. 1990s World Wide Web Internet became widely accessible. 2000s+ Wireless Revolution Expansion of mobile and wireless networking."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#goals-of-networking","title":"\ud83c\udfaf Goals of Networking","text":"<p>\u2705 Resource Sharing: Shared printers, storage devices, internet access. \u2705 Data Accessibility: Real-time access to shared data and databases. \u2705 Communication: Email, messaging, video conferencing. \u2705 Scalability: Easily add new devices or users. \u2705 Reliability: Uninterrupted access through redundancy.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#components-of-a-network","title":"\ud83c\udfd7\ufe0f Components of a Network","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#1-hardware-components","title":"\ud83d\udd29 1. Hardware Components","text":"<ul> <li>\ud83d\udda5\ufe0f Nodes (End Devices): Computers, smartphones, servers.</li> <li>\ud83d\udd0c Transmission Media:</li> <li>Wired: Ethernet cables, fiber optics.</li> <li>Wireless: Wi-Fi, Bluetooth.</li> <li>\ud83d\udce1 Network Interface Card (NIC): Enables network connectivity.</li> <li>\ud83d\udd00 Switches &amp; Routers:</li> <li>Switch: Connects devices within a LAN.</li> <li>Router: Connects multiple networks and directs data packets.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#2-software-components","title":"\ud83d\udcbe 2. Software Components","text":"<ul> <li>\ud83d\udcdc Protocols: Communication rules (e.g., TCP/IP, HTTP, FTP).</li> <li>\ud83d\udda5\ufe0f Network Operating System (NOS): Manages network resources (e.g., Windows Server, Linux).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#advantages-of-networking","title":"\ud83c\udfc6 Advantages of Networking","text":"<p>\u2705 Resource Sharing: Efficient use of hardware &amp; software. \u2705 Data Accessibility: Centralized and real-time access. \u2705 Cost Efficiency: Reduces individual hardware requirements. \u2705 Enhanced Communication: Enables collaboration via emails, chats, video calls. \u2705 Scalability: New devices can be added easily. \u2705 Reliability: Ensures continuous access through backup systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#challenges-of-networking","title":"\u26a0\ufe0f Challenges of Networking","text":"<p>\ud83d\udea8 Security Risks: Vulnerable to data breaches &amp; cyber threats. \ud83d\udcb0 High Setup Costs: Infrastructure and equipment are expensive. \ud83d\udd27 Maintenance: Requires regular updates &amp; monitoring. \u23f3 Network Downtime: Productivity loss during failures.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#types-of-networks","title":"\ud83c\udf10 Types of Networks","text":"Feature \ud83c\udfe0 LAN \ud83c\udf0d WAN \ud83c\udfd9\ufe0f MAN \ud83d\udcf1 PAN Scope Small (Building/Campus) Large (Continents) Medium (City) Very Small (Personal Space) Speed High Moderate Moderate High Cost Low High Moderate Low Examples Home/Office network Internet Cable TV networks Bluetooth connections"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#internet","title":"\ud83c\udf0e Internet","text":"<p>The Internet is a vast, decentralized network enabling global data exchange.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#key-features","title":"\ud83d\udd11 Key Features","text":"<ul> <li>\ud83c\udf0d Global connectivity for all users.</li> <li>\ud83d\udcdc Uses open standards &amp; protocols.</li> <li>\ud83d\udd04 Decentralized architecture ensures reliability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#components","title":"\ud83c\udfd7\ufe0f Components","text":"<ul> <li>\ud83d\udcf1 Client Devices: Smartphones, laptops, desktops.</li> <li>\ud83d\udcbe Servers: Host websites, applications, and databases.</li> <li>\ud83d\udee4\ufe0f Backbone Networks: High-capacity fiber optic cables.</li> <li>\ud83c\udf10 ISPs (Internet Service Providers): Gateways for users.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#routing-and-switching","title":"\ud83d\udce1 Routing and Switching","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#1-routing","title":"\ud83d\uddfa\ufe0f 1. Routing","text":"<ul> <li>\ud83d\udee4\ufe0f Determines the best path for data transmission.</li> <li>\ud83d\udcdc Uses routing tables &amp; protocols (e.g., OSPF, BGP).</li> <li>\ud83d\uded1 Operates at Layer 3 (Network Layer).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#2-switching","title":"\ud83d\udd04 2. Switching","text":"<ul> <li>\ud83d\udd01 Transfers data within a network.</li> <li>\ud83c\udfd7\ufe0f Operates at Layer 2 (Data Link Layer).</li> <li>\ud83c\udff7\ufe0f Uses MAC addresses for communication.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#network-protocols","title":"\ud83d\udd17 Network Protocols","text":"Protocol \ud83c\udfaf Function TCP/IP End-to-end data transfer HTTP Web communication SMTP Email delivery FTP File transfer DNS Domain name resolution"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#network-topologies","title":"\ud83d\udd0d Network Topologies","text":"<p>Network topology defines how devices are arranged in a network.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#1-star-topology","title":"\u2b50 1. Star Topology","text":"<ul> <li>\u2b50 All devices connect to a central hub.   \u2705 Pros: Easy to manage, scalable.   \u274c Cons: Hub failure affects the network.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#2-bus-topology","title":"\ud83d\ude8c 2. Bus Topology","text":"<ul> <li>\ud83d\ude8c All devices share a common communication line.   \u2705 Pros: Cost-effective, simple setup.   \u274c Cons: Cable failure disrupts the network.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#3-ring-topology","title":"\ud83d\udd04 3. Ring Topology","text":"<ul> <li>\ud83d\udd04 Devices are connected in a circular structure.   \u2705 Pros: Predictable data flow.   \u274c Cons: A single failure disrupts the entire network.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#4-mesh-topology","title":"\ud83d\udd78\ufe0f 4. Mesh Topology","text":"<ul> <li>\ud83d\udd78\ufe0f Devices are directly interconnected.   \u2705 Pros: High reliability, multiple paths.   \u274c Cons: Expensive and complex setup.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/1-Introduction/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>Computer networks are the backbone of modern communication and data exchange. By understanding networking fundamentals, we can build secure, efficient, and scalable systems to drive innovation. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/","title":"\ud83d\udce1 Network Architecture &amp; Design - Quick Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>\ud83d\udd39 Introduction</li> <li>\ud83d\udda5\ufe0f Client-Server Architecture</li> <li>\ud83d\udd04 Peer-to-Peer (P2P) Architecture</li> <li>\u2696\ufe0f Client-Server vs Peer-to-Peer</li> <li>\ud83d\udd00 Hybrid Architectures</li> <li>\ud83c\udf0d Real-World Applications</li> <li>\ud83d\udcd0 Network Design Principles</li> <li>\ud83c\udfd7\ufe0f Network Design Models</li> <li>\ud83d\udee0\ufe0f Tools for Network Design</li> <li>\u2705 Best Practices</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#introduction","title":"\ud83d\udd39 Introduction","text":"<p>Network architectures define how devices communicate and share resources. The two primary models are: - Client-Server \ud83d\udda5\ufe0f: Centralized model where a server provides services to clients. - Peer-to-Peer (P2P) \ud83d\udd04: Decentralized model where each peer acts as both client and server.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#client-server-architecture","title":"\ud83d\udda5\ufe0f Client-Server Architecture","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#features","title":"\ud83d\udd27 Features:","text":"<p>\u2714\ufe0f Centralized Control - Managed by a dedicated server. \u2714\ufe0f Dedicated Server - Optimized to handle client requests. \u2714\ufe0f Scalable - Requires upgrading the server for expansion.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#advantages","title":"\u2705 Advantages:","text":"<p>\ud83d\udd39 Efficient resource management \ud83d\udd39 Strong data security \ud83d\udd39 High reliability with backups &amp; redundancy</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#disadvantages","title":"\u274c Disadvantages:","text":"<p>\ud83d\udd3b Single point of failure \ud83d\udd3b High setup &amp; maintenance costs \ud83d\udd3b Scalability depends on server capacity</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#applications","title":"\ud83c\udf0d Applications:","text":"<p>\ud83c\udf10 Web services (Hosting, Email servers) \ud83c\udfe2 Enterprise networks (Databases, Shared resources)</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#peer-to-peer-p2p-architecture","title":"\ud83d\udd04 Peer-to-Peer (P2P) Architecture","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#features_1","title":"\ud83d\udd27 Features:","text":"<p>\u2714\ufe0f Decentralized - No central authority. \u2714\ufe0f Dynamic - Peers can join or leave anytime. \u2714\ufe0f Equal Responsibility - All peers share resources.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#advantages_1","title":"\u2705 Advantages:","text":"<p>\ud83d\udd39 Cost-effective (No need for dedicated servers) \ud83d\udd39 Fault-tolerant (No single point of failure) \ud83d\udd39 Scalable (Adding peers increases capacity)</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#disadvantages_1","title":"\u274c Disadvantages:","text":"<p>\ud83d\udd3b Security risks due to lack of control \ud83d\udd3b Performance varies based on peer availability \ud83d\udd3b Data synchronization challenges</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#applications_1","title":"\ud83c\udf0d Applications:","text":"<p>\ud83d\udcc2 File sharing (BitTorrent, Napster) \ud83d\udd17 Decentralized apps (Blockchain, Cryptocurrency)</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#client-server-vs-peer-to-peer","title":"\u2696\ufe0f Client-Server vs Peer-to-Peer","text":"Feature Client-Server \ud83d\udda5\ufe0f Peer-to-Peer \ud83d\udd04 Control Centralized Decentralized Scalability Limited (Server-dependent) High (More peers = More capacity) Security Easier to enforce policies Harder to secure Reliability Server failure affects clients Peer failure has minimal impact Cost High (Dedicated hardware) Low (Uses existing devices) Use Cases Web services, Databases File sharing, Blockchain"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#hybrid-architectures","title":"\ud83d\udd00 Hybrid Architectures","text":"<p>Combines Client-Server &amp; P2P for better efficiency.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#examples","title":"\ud83c\udfc6 Examples:","text":"<ul> <li>CDNs (Content Delivery Networks) - Central servers distribute content, peers assist in delivery.</li> <li>Hybrid Cloud - Combines private and public clouds.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#advantages_2","title":"\u2705 Advantages:","text":"<p>\u2714\ufe0f Balanced control &amp; scalability \u2714\ufe0f Improved performance &amp; fault tolerance \u2714\ufe0f Efficient resource utilization</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#real-world-applications","title":"\ud83c\udf0d Real-World Applications","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#client-server-architecture_1","title":"\ud83d\udda5\ufe0f Client-Server Architecture:","text":"<p>\ud83c\udfe6 Banking Systems - Centralized transaction processing. \ud83d\uded2 E-commerce - Order &amp; inventory management.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#peer-to-peer-architecture","title":"\ud83d\udd04 Peer-to-Peer Architecture:","text":"<p>\ud83d\udcac Decentralized Social Media - Ensures privacy. \ud83e\uddec Distributed Computing - SETI@home, Folding@home.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#network-design-principles","title":"\ud83d\udcd0 Network Design Principles","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#scalability","title":"\ud83d\udd39 Scalability \ud83c\udfd7\ufe0f","text":"<ul> <li>Modular design (VLANs, subnets)</li> <li>Scalable hardware (Switches, Routers)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#reliability","title":"\ud83d\udd39 Reliability \ud83d\udd04","text":"<ul> <li>Redundant components (Routers, Links)</li> <li>High-availability protocols (HSRP, VRRP)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#performance","title":"\ud83d\udd39 Performance \u26a1","text":"<ul> <li>Bandwidth optimization</li> <li>QoS policies (Prioritize VoIP, video streaming)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#security","title":"\ud83d\udd39 Security \ud83d\udd12","text":"<ul> <li>Firewalls, IDS/IPS, VPNs</li> <li>Multi-factor authentication (MFA)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#manageability","title":"\ud83d\udd39 Manageability \ud83d\udd27","text":"<ul> <li>Centralized monitoring (NMS)</li> <li>Automated backups &amp; updates</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#network-design-models","title":"\ud83c\udfd7\ufe0f Network Design Models","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#hierarchical-design-model","title":"\ud83c\udfe2 Hierarchical Design Model","text":"<p>\ud83d\udd39 Core Layer - High-speed backbone \ud83d\udd39 Distribution Layer - Routing &amp; policy enforcement \ud83d\udd39 Access Layer - Connects end devices</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#flat-network-design","title":"\ud83d\udd00 Flat Network Design","text":"<p>\u2714\ufe0f Simple &amp; cost-effective \u274c Poor scalability &amp; performance</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#software-defined-networking-sdn","title":"\ud83d\udda5\ufe0f Software-Defined Networking (SDN)","text":"<p>\u2714\ufe0f Centralized control plane \u2714\ufe0f Automates configurations \ud83d\udccc Used in data centers &amp; cloud networks</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#tools-for-network-design","title":"\ud83d\udee0\ufe0f Tools for Network Design","text":"Tool \ud83d\udd27 Description \ud83d\udcdd Example Use \ud83d\udccc Cisco Packet Tracer Simulates network topologies Training &amp; troubleshooting SolarWinds NPM Monitors network performance Real-world network optimization NetSim Analyzes network protocols Testing under different scenarios"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.1-Network%20Architecture%20%26%20Design/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Document Everything - Maintain topology diagrams &amp; configurations. \u2714\ufe0f Plan for Future Growth - Use scalable hardware &amp; SDN. \u2714\ufe0f Implement Redundancy - Prevent failures with backups. \u2714\ufe0f Enhance Security - Use firewalls, encryption, &amp; authentication. \u2714\ufe0f Regularly Monitor &amp; Optimize - Use NMS for real-time insights.</p> <p>\ud83d\udccc Quick Recap - Client-Server: Centralized, secure, but costly. - Peer-to-Peer: Decentralized, cost-effective, but harder to manage. - Hybrid: Best of both worlds! - Scalable, Reliable, Secure network designs ensure efficient communication.</p> <p>\ud83d\ude80 Happy Learning! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/","title":"Load Balancing &amp; Content Delivery Networks (CDNs) \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>Introduction</li> <li>Load Balancing<ul> <li>Key Techniques</li> <li>Benefits</li> </ul> </li> <li>Content Delivery Networks (CDNs)<ul> <li>How CDNs Work</li> <li>Benefits of CDNs</li> </ul> </li> <li>Comparison: Load Balancing vs. CDNs</li> <li>Best Practices</li> <li>Conclusion</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#introduction","title":"\ud83d\udcd6 Introduction","text":"<p>Load Balancing and Content Delivery Networks (CDNs) are critical techniques for optimizing performance, reliability, and scalability in modern networking. They enhance resource utilization and ensure a seamless user experience, especially for high-traffic applications.</p> <p>Why are they important? - Load Balancing: Distributes traffic across multiple servers to prevent overload and improve response times. - CDNs: Cache and distribute content across geographically dispersed servers to minimize latency and load times.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#load-balancing","title":"\u2696\ufe0f Load Balancing","text":"<p>Load balancing ensures even distribution of network traffic across multiple servers, preventing any single server from becoming overwhelmed.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#key-techniques","title":"\ud83d\udd39 Key Techniques","text":"<ol> <li> <p>Round Robin \ud83d\udd04</p> <ul> <li>\u2705 Simple, sequential request distribution.</li> <li>\u274c Not efficient for servers with different capacities.</li> <li>\ud83d\udccc Best for small-scale, uniform server environments.</li> </ul> </li> <li> <p>Least Connections \ud83d\udd0d</p> <ul> <li>\u2705 Directs traffic to servers with the fewest active connections.</li> <li>\u274c May not consider server processing capacity.</li> <li>\ud83d\udccc Best for e-commerce, video conferencing.</li> </ul> </li> <li> <p>IP Hashing \ud83d\udd11</p> <ul> <li>\u2705 Ensures session persistence by mapping users to specific servers.</li> <li>\u274c Can lead to uneven traffic distribution.</li> <li>\ud83d\udccc Best for financial transactions, shopping carts.</li> </ul> </li> <li> <p>Weighted Round Robin \u2696\ufe0f</p> <ul> <li>\u2705 Considers server capacity for proportional distribution.</li> <li>\u274c Requires manual configuration.</li> <li>\ud83d\udccc Best for heterogeneous cloud environments.</li> </ul> </li> <li> <p>Dynamic Load Balancing \ud83d\udcca</p> <ul> <li>\u2705 Uses real-time metrics (CPU, memory, response times) for traffic distribution.</li> <li>\u274c Complex implementation.</li> <li>\ud83d\udccc Best for enterprise systems &amp; unpredictable traffic.</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#benefits","title":"\ud83c\udfaf Benefits","text":"<ul> <li>Prevents Overload: Avoids server crashes due to excessive traffic.</li> <li>Enhances Scalability: Adapts to increasing demand by adding servers.</li> <li>Improves Reliability: Redirects traffic if a server fails.</li> <li>Optimizes User Experience: Reduces latency and improves response times.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#content-delivery-networks-cdns","title":"\ud83c\udf0e Content Delivery Networks (CDNs)","text":"<p>CDNs improve content delivery speed and reliability by caching data across multiple geographically distributed servers.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#how-cdns-work","title":"\ud83d\udd39 How CDNs Work","text":"<ol> <li>Content Distribution \ud83d\udce6: Origin server content is replicated across global edge servers.</li> <li>Request Handling \ud83d\udd01: User requests are routed to the nearest edge server.</li> <li>Caching \ud83d\uddc4\ufe0f: Frequently accessed content is stored closer to users.</li> <li>Internal Load Balancing \u26a1: CDNs distribute requests among edge servers efficiently.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#benefits-of-cdns","title":"\ud83c\udfaf Benefits of CDNs","text":"<ul> <li>\ud83d\ude80 Faster Load Times: Delivers content from the closest edge server.</li> <li>\ud83d\udd04 Reduced Load on Origin Servers: Caches static &amp; dynamic content.</li> <li>\u2705 Improved Reliability: Provides redundancy for uninterrupted access.</li> <li>\ud83d\udce1 Scalability: Handles sudden traffic spikes effortlessly.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#common-use-cases","title":"\ud83d\udca1 Common Use Cases","text":"<ul> <li>Streaming Platforms \ud83c\udfa5 (Netflix, YouTube, Spotify)</li> <li>E-commerce Websites \ud83d\uded2 (Fast-loading product pages)</li> <li>Web Hosting \ud83c\udf10 (Accelerating website load times)</li> <li>Software Distribution \ud83d\udcbe (Efficient updates &amp; patches)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#comparison-load-balancing-vs-cdns","title":"\u2694\ufe0f Comparison: Load Balancing vs. CDNs","text":"Feature Load Balancing CDNs Purpose Distributes traffic among servers Delivers cached content from edge servers Focus Server-side performance &amp; availability User-side experience &amp; latency reduction Scope Data centers, server clusters Global distributed networks Best For Enterprise apps, databases, online transactions Web hosting, media streaming, content delivery"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#best-practices","title":"\ud83d\udccc Best Practices","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#load-balancing_1","title":"\u2705 Load Balancing","text":"<ul> <li>Monitor Performance: Implement dynamic load balancing for adaptive traffic distribution.</li> <li>Enable Redundancy: Use backup load balancers to prevent single points of failure.</li> <li>Plan for Growth: Ensure scalability by designing for future traffic surges.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#cdns","title":"\u2705 CDNs","text":"<ul> <li>Choose the Right Provider: Opt for a CDN with a strong global presence.</li> <li>Optimize Caching: Define caching policies for static &amp; dynamic content.</li> <li>Analyze Performance: Track hit rates, response times, and latency metrics.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.2-Load%20Balancing-CDN/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>Load balancing and CDNs complement each other in modern networking. While load balancing ensures optimal server-side performance, CDNs optimize user-side content delivery. Together, they enhance scalability, reliability, and efficiency, making them essential for handling high-traffic applications and global user bases.</p> <p>\ud83d\ude80 Invest in both technologies for a seamless, high-performance network experience!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/","title":"\ud83d\udccc Software-Defined Networking (SDN) - Quick Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83d\ude80 Introduction</li> <li>\ud83d\udee0\ufe0f Key Components</li> <li>\u2699\ufe0f How SDN Works</li> <li>\ud83c\udfaf Benefits of SDN</li> <li>\ud83c\udf0d Use Cases</li> <li>\u26a0\ufe0f Challenges</li> <li>\ud83d\udd27 Tools &amp; Technologies</li> <li>\ud83d\udcca Traditional Networking vs SDN</li> <li>\u2705 Best Practices</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#introduction","title":"\ud83d\ude80 Introduction","text":"<p>Software-Defined Networking (SDN) separates the control plane (logic) from the data plane (packet forwarding), enabling centralized, programmable, and dynamic network management.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#importance","title":"\ud83d\udd39 Importance","text":"<p>\u2705 Simplifies network configuration through automation. \u2705 Enhances flexibility for dynamic traffic patterns. \u2705 Improves security with centralized policy enforcement.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#key-components","title":"\ud83d\udee0\ufe0f Key Components","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#control-plane","title":"\ud83c\udf9b Control Plane","text":"<ul> <li>Centralized decision-making for network routing.</li> <li>Implements routing, traffic engineering, and security policies.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#data-plane","title":"\ud83d\udce6 Data Plane","text":"<ul> <li>Executes instructions from the control plane.</li> <li>Forwards traffic at high speeds via physical/virtual switches.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#application-plane","title":"\ud83c\udfd7 Application Plane","text":"<ul> <li>Network applications define policies &amp; automate management.</li> <li>Examples: Firewalls, IDS, QoS management, Load balancing.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#sdn-controller","title":"\ud83c\udfaf SDN Controller","text":"<ul> <li>Acts as the \"brain\" of SDN, managing communication between planes.</li> <li>Examples: OpenDaylight, Cisco APIC-EM, ONOS, VMware NSX.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#how-sdn-works","title":"\u2699\ufe0f How SDN Works","text":"<p>\u2705 Separation of planes \u2013 Decouples control &amp; data planes. \u2705 Centralized control \u2013 SDN controller manages policies &amp; traffic. \u2705 Programmable network \u2013 Uses APIs for automation. \u2705 Interacts with devices \u2013 Uses protocols like OpenFlow.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#benefits-of-sdn","title":"\ud83c\udfaf Benefits of SDN","text":"<p>\ud83d\udccc Centralized Control \u2013 Single point of management. \ud83d\udccc Improved Scalability \u2013 Adapts to growing demands. \ud83d\udccc Cost Efficiency \u2013 Reduces dependency on expensive hardware. \ud83d\udccc Enhanced Security \u2013 Enables better threat detection. \ud83d\udccc Automation \u2013 Reduces manual effort with programmable APIs.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#use-cases","title":"\ud83c\udf0d Use Cases","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#data-centers","title":"\ud83c\udfe2 Data Centers","text":"<ul> <li>Automates resource provisioning.</li> <li>Optimizes workload distribution.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#cloud-networks","title":"\u2601\ufe0f Cloud Networks","text":"<ul> <li>Supports hybrid cloud environments.</li> <li>Enables seamless orchestration of virtual resources.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#iot-networks","title":"\ud83c\udf10 IoT Networks","text":"<ul> <li>Manages large-scale IoT deployments.</li> <li>Optimizes bandwidth for IoT applications.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#wide-area-networks-wans","title":"\ud83c\udf0e Wide Area Networks (WANs)","text":"<ul> <li>Uses SD-WAN for optimized data traffic.</li> <li>Reduces costs by leveraging broadband connections.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#challenges","title":"\u26a0\ufe0f Challenges","text":"<p>\ud83d\udea7 Complex Implementation \u2013 Requires expertise for migration. \ud83d\udd13 Security Risks \u2013 Centralized controllers can be attack targets. \ud83d\udd04 Compatibility Issues \u2013 Integration with legacy systems can be challenging. \ud83d\uded1 Controller Redundancy \u2013 Backup controllers are needed for failover.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#tools-technologies","title":"\ud83d\udd27 Tools &amp; Technologies","text":"\ud83d\udee0 Tool \ud83d\udcdd Description OpenFlow Protocol for SDN controller-device communication. OpenDaylight Open-source SDN controller. Cisco ACI Policy-driven SDN for enterprises. VMware NSX Network virtualization platform."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#traditional-networking-vs-sdn","title":"\ud83d\udcca Traditional Networking vs SDN","text":"\ud83d\udd0d Aspect \ud83c\udfdb Traditional Networking \ud83c\udf10 Software-Defined Networking Control &amp; Data Planes Integrated Separated &amp; centralized Flexibility Static Dynamic &amp; programmable Scalability Limited Highly scalable Management Manual Automated &amp; unified Cost High (proprietary hardware) Lower (software-based)"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/10.3-Software-Defined%20Networking%20%28SDN%29/#best-practices","title":"\u2705 Best Practices","text":"<p>\ud83d\udd39 Start Small \u2013 Pilot SDN before large-scale deployment. \ud83d\udd39 Ensure Redundancy \u2013 Deploy backup controllers. \ud83d\udd39 Focus on Security \u2013 Protect the control plane with encryption &amp; access controls. \ud83d\udd39 Train IT Teams \u2013 Educate staff on SDN tools &amp; protocols. \ud83d\udd39 Monitor Performance \u2013 Use analytics for optimization.</p> <p>\ud83d\udd39 Conclusion: SDN revolutionizes networking with centralized control, automation, and flexibility, making it essential for modern data centers, cloud services, IoT, and WANs. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/","title":"\ud83c\udf10 OSI &amp; TCP/IP Model - A Comprehensive Guide","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>Introduction to OSI Model</li> <li>Purpose of OSI Model</li> <li>Real-Life Analogy</li> <li>7 Layers of OSI Model</li> <li>Detailed Layer Breakdown</li> <li>Applications of OSI Model</li> <li>Introduction to TCP/IP Model</li> <li>Layers of TCP/IP Model</li> <li>OSI vs. TCP/IP Model</li> <li>Conclusion</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#introduction-to-the-osi-model","title":"\ud83c\udf10 Introduction to the OSI Model","text":"<p>The OSI (Open Systems Interconnection) Model is a conceptual framework that standardizes network communication into seven layers to ensure interoperability between different systems and technologies.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>\ud83d\udd0d Simplifies troubleshooting by categorizing network functionalities.</li> <li>\ud83d\udee0\ufe0f Facilitates protocol development and technology evolution.</li> <li>\ud83d\udd04 Ensures interoperability across different vendors.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#real-life-analogy","title":"\ud83d\udce6 Real-Life Analogy","text":"<p>The OSI model is like a postal system \ud83c\udfe4: - Application Layer - Writing the letter \u270d\ufe0f - Physical Layer - Delivering the letter \ud83d\ude9a</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#the-7-layers-of-osi","title":"\ud83d\udd22 The 7 Layers of OSI","text":"Layer Description Layer 7: Application \ud83d\udda5\ufe0f User interface &amp; high-level services (e.g., HTTP, FTP) Layer 6: Presentation \ud83c\udfa8 Data formatting, encryption, compression Layer 5: Session \ud83d\udd04 Manages connections (e.g., authentication, sessions) Layer 4: Transport \ud83d\ude80 Ensures reliable data delivery (TCP/UDP) Layer 3: Network \ud83c\udf0d Routing &amp; addressing (IP, IPv6) Layer 2: Data Link \ud83d\udd17 Error detection &amp; MAC addressing Layer 1: Physical \u26a1 Raw data transmission (Ethernet, Wi-Fi)"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#layer-breakdown","title":"\u26a1 Layer Breakdown","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#layer-1-physical-layer","title":"\ud83d\udd39 Layer 1: Physical Layer","text":"<ul> <li>Defines hardware (cables, switches, connectors).</li> <li>Converts digital data into electrical/optical/radio signals.</li> <li>Example: Ethernet cables, Wi-Fi signals \ud83d\udcf6.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#layer-2-data-link-layer","title":"\ud83d\udd39 Layer 2: Data Link Layer","text":"<ul> <li>MAC (Media Access Control) \ud83c\udff7\ufe0f \u2013 Controls device access to the network.</li> <li>Error Detection \u274c \u2013 Identifies and corrects frame errors.</li> <li>Example: Switches, MAC addresses.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#layer-3-network-layer","title":"\ud83d\udd39 Layer 3: Network Layer","text":"<ul> <li>Logical Addressing \ud83c\udfe0 \u2013 Assigns IP addresses.</li> <li>Routing \ud83d\udea6 \u2013 Determines the best path for data.</li> <li>Example: Routers, IPv4/IPv6.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#layer-4-transport-layer","title":"\ud83d\udd39 Layer 4: Transport Layer","text":"<ul> <li>Segmentation &amp; Reassembly \ud83d\udd04 \u2013 Splits and reassembles data.</li> <li>Error Recovery \ud83d\udee0\ufe0f \u2013 Uses acknowledgments &amp; retransmissions.</li> <li>Protocols: TCP (Reliable) \ud83c\udfc6, UDP (Fast) \u26a1.</li> <li>Example: Streaming (UDP), File Transfer (TCP).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#layer-5-session-layer","title":"\ud83d\udd39 Layer 5: Session Layer","text":"<ul> <li>Session Management \ud83c\udfa7 \u2013 Establishes &amp; terminates sessions.</li> <li>Synchronization \ud83d\udd01 \u2013 Ensures data recovery on failure.</li> <li>Example: Video streaming sessions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#layer-6-presentation-layer","title":"\ud83d\udd39 Layer 6: Presentation Layer","text":"<ul> <li>Data Translation \ud83c\udf0e \u2013 Converts formats (e.g., JPEG, MP4).</li> <li>Encryption \ud83d\udd12 \u2013 Protects data (SSL/TLS).</li> <li>Example: JPEG, MP4, TLS encryption.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#layer-7-application-layer","title":"\ud83d\udd39 Layer 7: Application Layer","text":"<ul> <li>User Interface \ud83c\udfc1 \u2013 Connects apps with the network.</li> <li>Example: HTTP, SMTP, FTP.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#applications-of-osi-model","title":"\ud83d\udd17 Applications of OSI Model","text":"<ul> <li>\ud83d\udd0d Protocol Development \u2013 Standardizes network communication.</li> <li>\ud83d\udee0\ufe0f Troubleshooting \u2013 Isolates issues layer by layer.</li> <li>\ud83d\udcda Education \u2013 Helps understand networking concepts.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#introduction-to-the-tcpip-model","title":"\ud83c\udf10 Introduction to the TCP/IP Model","text":"<p>A practical framework used for internet communication with four layers.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#layers-of-tcpip-model","title":"\ud83d\udd22 Layers of TCP/IP Model","text":"<p>1\ufe0f\u20e3 Network Interface Layer \u2013 Handles physical transmission. 2\ufe0f\u20e3 Internet Layer \u2013 Manages IP addressing &amp; routing. 3\ufe0f\u20e3 Transport Layer \u2013 Ensures reliable data delivery. 4\ufe0f\u20e3 Application Layer \u2013 Provides user-facing services.</p> <p>\ud83d\udd39 Real-Life Analogy: Postal Service \ud83d\udcec - Application Layer (Writing the letter \u270d\ufe0f) - Transport Layer (Placing it in an envelope \ud83d\udce6) - Internet Layer (Adding address \ud83c\udfe0) - Network Interface (Delivery \ud83d\ude9a)</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#1-network-interface-layer","title":"\ud83d\udce1 1. Network Interface Layer","text":"<ul> <li>Converts data to signals (electrical, radio).</li> <li>Handles error detection.</li> <li>Example: Ethernet, Wi-Fi.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#2-internet-layer","title":"\ud83c\udf0e 2. Internet Layer","text":"<ul> <li>Uses IP addresses for device identification.</li> <li>Defines network boundaries.</li> <li>Example: Routers, IPv4/IPv6.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#3-transport-layer","title":"\ud83d\ude80 3. Transport Layer","text":"<ul> <li>Segmentation &amp; Reassembly \ud83d\udd04.</li> <li>Error Recovery \ud83d\udee0\ufe0f.</li> <li>Protocols: TCP (Reliable) \ud83c\udfc6, UDP (Fast) \u26a1.</li> <li>Example: TCP for file downloads, UDP for streaming.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#4-application-layer","title":"\ud83d\udda5\ufe0f 4. Application Layer","text":"<ul> <li>Email \ud83d\udce7 (SMTP, IMAP)</li> <li>Web Browsing \ud83c\udf10 (HTTP/HTTPS)</li> <li>File Transfer \ud83d\udcc1 (FTP)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#osi-vs-tcpip-model","title":"\ud83d\udd0d OSI vs TCP/IP Model","text":"Aspect OSI Model \ud83c\udfdb\ufe0f TCP/IP Model \ud83c\udf0e Layers 7 4 Presentation Layer Explicit Integrated into Application Layer Session Layer Explicit Integrated into Application Layer Flexibility Conceptual, rigid Practical, flexible Usage Rarely implemented Widely used"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/2-OSI-Model/#conclusion","title":"\ud83d\udccc Conclusion","text":"<ul> <li>OSI Model is a conceptual reference.</li> <li>TCP/IP Model is a practical implementation used in networking today.</li> <li>Understanding both helps in troubleshooting, development, and learning networking concepts effectively.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/","title":"\ud83d\udce1 Network Cabling and Connectors","text":"<p>Network cabling provides the physical medium for data transfer, while connectors link cables to devices for seamless signal transmission.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>\ud83d\udce2 Importance</li> <li>\ud83d\udd17 Twisted Pair Cables</li> <li>\ud83d\udca1 Fiber Optic Cables</li> <li>\ud83d\udd0c Coaxial Cables</li> <li>\ud83d\udda7 Network Devices</li> <li>\u2696\ufe0f Comparison of Network Devices</li> <li>\u2705 Quick Revision Summary</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#importance","title":"\ud83d\udce2 Importance","text":"<ul> <li>\u2714\ufe0f Foundation for network communication \ud83c\udfd7\ufe0f</li> <li>\u2714\ufe0f Determines speed, reliability, and scalability \u26a1</li> <li>\u2714\ufe0f Impacts performance &amp; security \ud83d\udd12</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#twisted-pair-cables","title":"\ud83d\udd17 Twisted Pair Cables","text":"<p>Two insulated copper wires twisted to reduce electromagnetic interference (EMI) and crosstalk.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#types","title":"\ud83d\udd0d Types","text":"Type Features Use Case UTP (Unshielded Twisted Pair) No shielding, cost-effective Common in Ethernet networks STP (Shielded Twisted Pair) Shielded for better interference resistance Industrial/high-noise environments"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#pros-cons","title":"\u2705 Pros &amp; \u274c Cons","text":"<p>\u2714\ufe0f Cost-effective, easy to install \u2714\ufe0f Suitable for short to medium distances \u274c Susceptible to interference (UTP) \u274c Lower bandwidth than fiber optics</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#common-connectors","title":"\ud83d\udd0c Common Connectors","text":"<ul> <li>RJ45 \u2013 Standard for Ethernet networking</li> <li>RJ11 \u2013 Used for telephone connections</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#fiber-optic-cables","title":"\ud83d\udca1 Fiber Optic Cables","text":"<p>Transmit data as light signals through glass or plastic fibers for high-speed, long-distance communication.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#types_1","title":"\ud83d\udd0d Types","text":"Type Features Use Case SMF (Single-Mode Fiber) Uses a single light wave Long-distance communication (ISP backbones) MMF (Multi-Mode Fiber) Uses multiple light waves Short-distance networks (campuses, buildings)"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#pros-cons_1","title":"\u2705 Pros &amp; \u274c Cons","text":"<p>\u2714\ufe0f High bandwidth &amp; speed \ud83d\ude80 \u2714\ufe0f Immune to EMI \ud83d\udee1\ufe0f \u2714\ufe0f Ideal for long distances \ud83c\udf0d \u274c Expensive to install &amp; maintain \ud83d\udcb0 \u274c Fragile compared to copper cables \u26a0\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#common-connectors_1","title":"\ud83d\udd0c Common Connectors","text":"<ul> <li>LC (Lucent Connector) \u2013 High-density networks, data centers</li> <li>SC (Subscriber Connector) \u2013 Enterprise networks, push-pull mechanism</li> <li>ST (Straight Tip) \u2013 Older industrial networks</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#coaxial-cables","title":"\ud83d\udd0c Coaxial Cables","text":"<p>A central conductor with shielding for low-interference data transmission.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#uses","title":"\ud83d\udd0d Uses","text":"<p>\u2714\ufe0f Cable TV, broadband internet \u2714\ufe0f Older Ethernet networks</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#pros-cons_2","title":"\u2705 Pros &amp; \u274c Cons","text":"<p>\u2714\ufe0f EMI-resistant due to shielding \u2714\ufe0f Durable for moderate distances \u274c Bulkier and less flexible than twisted pair \u274c Limited speed and bandwidth</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#common-connectors_2","title":"\ud83d\udd0c Common Connectors","text":"<ul> <li>BNC (Bayonet Neill\u2013Concelman) \u2013 Security cameras, legacy Ethernet</li> <li>F-Type \u2013 Cable TV, broadband</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#network-devices","title":"\ud83d\udda7 Network Devices","text":"<p>Manage communication, routing, and data transfer in networks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#importance_1","title":"\ud83d\udccc Importance","text":"<p>\u2714\ufe0f Facilitates data routing &amp; switching \ud83d\udd00 \u2714\ufe0f Improves network performance &amp; scalability \ud83d\udcca \u2714\ufe0f Ensures security &amp; data integrity \ud83d\udd12</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#devices-overview","title":"\ud83d\udd0d Devices Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#router","title":"\ud83d\udce1 Router","text":"<ul> <li>Routes data between different networks \ud83c\udf0e</li> <li>Provides firewall, NAT, and security \ud83d\udd10</li> <li>Use Case: Homes, offices, ISPs</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#switch","title":"\ud83d\udd04 Switch","text":"<ul> <li>Connects multiple devices within a network \ud83c\udfe2</li> <li>Layer 2 (Data Link Layer) device \ud83d\udce1</li> <li>Use Case: LANs, servers, printers</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#hub","title":"\u26a1 Hub","text":"<ul> <li>Broadcasts data to all connected devices \ud83d\udce2</li> <li>Layer 1 (Physical Layer) device \ud83d\udee0\ufe0f</li> <li>Use Case: Small networks</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#bridge","title":"\ud83c\udf09 Bridge","text":"<ul> <li>Connects and segments networks \ud83d\udd17</li> <li>Filters traffic based on MAC addresses \ud83c\udf9b\ufe0f</li> <li>Use Case: LAN expansion</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#repeater","title":"\ud83d\udcf6 Repeater","text":"<ul> <li>Amplifies &amp; regenerates signals to extend network range \ud83d\udce1</li> <li>Layer 1 (Physical Layer) device \ud83d\udd0b</li> <li>Use Case: Long-distance communication, Wi-Fi extension</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#comparison-of-network-devices","title":"\u2696\ufe0f Comparison of Network Devices","text":"Device Layer Key Function Use Case Router Network Layer Routes data between networks Internet access, WANs Switch Data Link Layer Forwards data to specific devices LAN communication Hub Physical Layer Broadcasts data to all devices Small networks Bridge Data Link Layer Connects and segments networks LAN expansion Repeater Physical Layer Amplifies and regenerates signals Extending network range"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.1-Network_Cabling_And_Devices/#quick-revision-summary","title":"\u2705 Quick Revision Summary","text":"<ul> <li>\u2714\ufe0f Twisted Pair Cables \u2013 Cost-effective, used in Ethernet networks (UTP, STP).</li> <li>\u2714\ufe0f Fiber Optic Cables \u2013 High-speed, long-distance (SMF, MMF), used in ISPs, data centers.</li> <li>\u2714\ufe0f Coaxial Cables \u2013 Used in cable TV, older networks, moderate speeds.</li> <li>\u2714\ufe0f Router \u2013 Routes data between networks, connects LANs to the Internet.</li> <li>\u2714\ufe0f Switch \u2013 Connects multiple devices in LANs, reducing congestion.</li> <li>\u2714\ufe0f Hub \u2013 Basic, inefficient, used in small networks.</li> <li>\u2714\ufe0f Bridge \u2013 Segments networks for better traffic management.</li> <li>\u2714\ufe0f Repeater \u2013 Amplifies signals for long-distance transmission.</li> </ul> <p>\ud83d\udccc Keep learning and stay connected! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/","title":"\ud83d\ude80 Ethernet Frame Structure","text":"<p>Ethernet frames are the foundation of network communication, ensuring structured, efficient, and reliable data transfer across devices.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>\ud83d\udd39 Purpose of Ethernet Frames</li> <li>\ud83d\udd39 Components of an Ethernet Frame</li> <li>\ud83d\udd39 Ethernet Frame Variants</li> <li>\ud83d\udd39 Key Functions of Ethernet Frames</li> <li>\ud83d\udd39 Address Resolution Protocol (ARP)</li> <li>\ud83d\udd39 Security Concerns in ARP</li> <li>\ud83d\udd39 Comparison: ARP vs. RARP</li> <li>\ud83d\udd39 Applications of ARP</li> <li>\ud83d\udd39 Network Access Control (NAC)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#purpose-of-ethernet-frames","title":"\ud83d\udd39 Purpose of Ethernet Frames","text":"<p>\u2714 Standardized Transmission: Ensures consistency in network communication. \u2714 Metadata Inclusion: Contains MAC addresses, error detection, and protocol info for accuracy.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#components-of-an-ethernet-frame","title":"\ud83d\udd39 Components of an Ethernet Frame","text":"Component Size (Bytes) Description Preamble 7 Synchronizes sender and receiver clocks. Start Frame Delimiter (SFD) 1 Marks the start of the frame. Destination MAC Address 6 Identifies the receiving device. Source MAC Address 6 Identifies the sender. EtherType/Length 2 Specifies protocol type or payload size. Data/Payload 46-1500 Contains the actual transmitted data. Frame Check Sequence (FCS) 4 Ensures integrity via CRC error checking."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#ethernet-frame-variants","title":"\ud83d\udd39 Ethernet Frame Variants","text":"<p>\ud83d\udfe2 Ethernet II Frame: Most common, uses EtherType to specify protocol. \ud83d\udfe2 IEEE 802.3 Frame: Uses length instead of EtherType, found in legacy systems. \ud83d\udfe2 VLAN Tagging: Adds a 4-byte VLAN tag for segmentation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#key-functions-of-ethernet-frames","title":"\ud83d\udd39 Key Functions of Ethernet Frames","text":"<p>\u2705 Data Encapsulation: Packages data for transmission. \u2705 Error Detection: CRC-based integrity checks. \u2705 Addressing: Uses MAC addresses for routing. \u2705 Flow Control: Reduces congestion and optimizes traffic.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#address-resolution-protocol-arp","title":"\ud83d\udd39 Address Resolution Protocol (ARP)","text":"<p>\ud83d\udd0d ARP maps IP addresses to MAC addresses for local communication.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#how-arp-works","title":"\ud83d\udee0 How ARP Works","text":"<p>1\ufe0f\u20e3 Request: Device broadcasts ARP query. 2\ufe0f\u20e3 Response: Target sends back its MAC address. 3\ufe0f\u20e3 Cache Storage: Stores mappings for efficiency.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#types-of-arp","title":"\ud83d\uddc2 Types of ARP","text":"<ul> <li>\ud83d\udce2 Gratuitous ARP: Updates address tables.</li> <li>\ud83d\udd04 Proxy ARP: Routers respond on behalf of others.</li> <li>\ud83d\udd19 Reverse ARP (RARP): Legacy systems map MAC to IP.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#security-concerns-in-arp","title":"\ud83d\udd39 Security Concerns in ARP","text":"Threat Description Impact ARP Spoofing Fake ARP replies redirect traffic. MITM attacks, data theft. Cache Poisoning Malicious entries disrupt routing. Network instability."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#comparison-arp-vs-rarp","title":"\ud83d\udd39 Comparison: ARP vs. RARP","text":"Feature ARP RARP Purpose Resolves IP to MAC Resolves MAC to IP Direction Forward Reverse Use Case LAN communication Legacy/diskless devices"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#applications-of-arp","title":"\ud83d\udd39 Applications of ARP","text":"<p>\ud83d\udce1 Local Communication: Enables direct IP-to-MAC resolution. \ud83d\udccd Router Assistance: Helps forward packets efficiently. \ud83c\udf10 VLAN &amp; Proxy ARP: Facilitates communication across networks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#network-access-control-nac","title":"\ud83d\udd39 Network Access Control (NAC)","text":"<p>NAC strengthens security by verifying and controlling network access.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#purpose-of-nac","title":"\ud83d\udd11 Purpose of NAC","text":"<p>\ud83d\udd39 Enhances Security: Prevents unauthorized access. \ud83d\udd39 Ensures Compliance: Enforces security policies. \ud83d\udd39 Provides Visibility: Monitors network activity.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/3.2-Ethernet-Frame-Structure/#how-nac-works","title":"\u2699\ufe0f How NAC Works","text":"<p>1\ufe0f\u20e3 Authentication: Verifies user identity (e.g., passwords, biometrics). 2\ufe0f\u20e3 Authorization: Grants access based on role. 3\ufe0f\u20e3 Compliance Check: Ensures security measures (e.g., patches, antivirus). 4\ufe0f\u20e3 Enforcement: Monitors and restricts access if needed.</p> <p>By structuring Ethernet frames, ARP, and NAC efficiently, networks achieve high security, optimized performance, and seamless communication. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/","title":"\ud83d\udce1 Network Protocols","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ul> <li>\ud83d\udcd6 Definition</li> <li>\ud83d\udca1 Importance</li> <li>\ud83d\udccc Types of Network Protocols</li> <li>\u2699\ufe0f Protocol Functions</li> <li>\ud83d\uddc2 Protocol Layers</li> <li>\u2705 Advantages of Standardized Protocols</li> <li>\ud83c\udf10 Applications of Network Protocols</li> <li>\ud83d\udd1d Application Layer Protocols</li> <li>\ud83d\udcca Comparison of Application Layer Protocols</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#definition","title":"\ud83d\udcd6 Definition","text":"<p>A network protocol is a set of rules governing data transmission and communication between devices in a network. These protocols ensure proper data exchange, security, and interoperability across different systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#importance","title":"\ud83d\udca1 Importance","text":"<ul> <li>\ud83d\udcf6 Enables seamless communication between diverse systems.</li> <li>\ud83c\udfaf Standardizes addressing, routing, and error handling for reliable data exchange.</li> <li>\ud83d\udd17 Ensures interoperability between different hardware and software vendors.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#types-of-network-protocols","title":"\ud83d\udccc Types of Network Protocols","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#1-communication-protocols","title":"\ud83d\udde8\ufe0f 1. Communication Protocols","text":"<p>Define message formats and exchange procedures. - \ud83c\udf10 HTTP/HTTPS: Web browsing &amp; secure data exchange. - \ud83d\udce7 SMTP/IMAP/POP3: Email communication. - \ud83d\udcc2 FTP: Reliable file transfers.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#2-routing-protocols","title":"\ud83d\udee3 2. Routing Protocols","text":"<p>Determine optimal data packet paths. - \ud83d\udccd OSPF: Link-state protocol for dynamic routing. - \ud83d\udd04 BGP: Manages routing between autonomous systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#3-transport-protocols","title":"\ud83d\udd04 3. Transport Protocols","text":"<p>Ensure reliable data delivery. - \ud83d\udd17 TCP: Connection-oriented communication. - \ud83d\ude80 UDP: Fast, connectionless communication.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#4-network-layer-protocols","title":"\ud83c\udfdb 4. Network Layer Protocols","text":"<p>Manage addressing and routing. - \ud83c\udff7 IP: Defines addressing (IPv4, IPv6) and routing. - \ud83d\udee0 ICMP: Diagnoses network issues and reports errors.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#5-security-protocols","title":"\ud83d\udd10 5. Security Protocols","text":"<p>Protect data and communication channels. - \ud83d\udd12 SSL/TLS: Encrypts web traffic. - \ud83d\udd11 IPSec: Provides encryption at the IP layer.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#protocol-functions","title":"\u2699\ufe0f Protocol Functions","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#1-addressing","title":"\ud83d\udccc 1. Addressing","text":"<p>Assigns unique addresses to devices. - Examples: IP addresses, MAC addresses.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#2-error-detection-correction","title":"\u26a0\ufe0f 2. Error Detection &amp; Correction","text":"<p>Identifies and corrects transmission errors. - Examples: TCP retransmissions, CRC checks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#3-flow-control","title":"\u23f3 3. Flow Control","text":"<p>Regulates data transmission rates. - Example: TCP's sliding window mechanism.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#4-routing","title":"\ud83d\udee3 4. Routing","text":"<p>Determines optimal data transfer paths. - Examples: OSPF, BGP.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#protocol-layers","title":"\ud83d\uddc2 Protocol Layers","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#1-application-layer","title":"\ud83c\udfad 1. Application Layer","text":"<p>User-facing protocols providing specific functionalities. - Examples: HTTP, FTP, SMTP.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#2-transport-layer","title":"\ud83d\ude9a 2. Transport Layer","text":"<p>Manages data segmentation, reliability, and error recovery. - Examples: TCP, UDP.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#3-network-layer","title":"\ud83c\udf0d 3. Network Layer","text":"<p>Handles logical addressing and packet delivery. - Examples: IP, ICMP.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#4-data-link-layer","title":"\ud83d\udd0c 4. Data Link Layer","text":"<p>Ensures reliable data transfer over physical links. - Examples: Ethernet, PPP.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#advantages-of-standardized-protocols","title":"\u2705 Advantages of Standardized Protocols","text":"<ul> <li>\ud83d\udd04 Interoperability: Seamless communication across devices.</li> <li>\ud83d\udcc8 Scalability: Supports network growth.</li> <li>\ud83d\ude80 Efficiency: Optimized transmission and resource management.</li> <li>\ud83d\udd12 Security: Strong data protection measures.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#applications-of-network-protocols","title":"\ud83c\udf10 Applications of Network Protocols","text":"<ul> <li>\ud83c\udf0d Web Browsing: HTTP/HTTPS for accessing websites.</li> <li>\ud83d\udce7 Email Communication: SMTP, IMAP, POP3 for emails.</li> <li>\ud83d\udcc2 File Sharing: FTP for large data transfers.</li> <li>\ud83c\udfa5 Streaming: RTP and RTSP for real-time content.</li> <li>\ud83d\udd11 Remote Access: SSH for secure device management.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#application-layer-protocols","title":"\ud83d\udd1d Application Layer Protocols","text":"<p>Enable communication between applications over a network, ensuring proper data formatting, transmission, and interpretation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#importance_1","title":"\ud83c\udfaf Importance","text":"<ul> <li>\ud83d\udccf Standardizes data exchange between diverse systems.</li> <li>\ud83d\udd04 Ensures cross-platform compatibility.</li> <li>\ud83c\udf0d Supports web browsing, email services, and file transfers.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#1-http-hypertext-transfer-protocol","title":"\ud83c\udf10 1. HTTP (Hypertext Transfer Protocol)","text":"<p>Foundation of web communication. - Port: 80. - \ud83d\udced Stateless Protocol: Requires additional mechanisms for session management. - \ud83d\udd00 Methods: GET (retrieve), POST (send data), PUT (update), DELETE (remove). - \ud83d\udd12 Secure Version: HTTPS (SSL/TLS encryption).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#2-ftp-file-transfer-protocol","title":"\ud83d\udcc2 2. FTP (File Transfer Protocol)","text":"<p>Transfers files between client and server. - Ports: 20 (data), 21 (control). - \ud83d\udd04 Modes: Active (server initiates connection), Passive (client initiates connection). - \ud83d\udd12 Secure Version: SFTP (SSH-based encryption).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#3-smtp-simple-mail-transfer-protocol","title":"\ud83d\udce7 3. SMTP (Simple Mail Transfer Protocol)","text":"<p>Handles email sending. - Ports: 25, 465, 587. - \ud83d\udd12 Secure Version: Secure SMTP.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#4-snmp-simple-network-management-protocol","title":"\ud83d\udda5 4. SNMP (Simple Network Management Protocol)","text":"<p>Monitors and manages network devices. - Ports: 161 (query), 162 (alerts). - \ud83d\udd12 Secure Version: SNMPv3 (Encryption).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#comparison-of-application-layer-protocols","title":"\ud83d\udcca Comparison of Application Layer Protocols","text":"\ud83d\udee0 Protocol \ud83c\udfaf Purpose \ud83d\udd0c Port \ud83d\udd12 Secure Version HTTP Web browsing 80 HTTPS (SSL/TLS) FTP File transfer 20, 21 SFTP (SSH) SMTP Email sending 25, 465, 587 Secure SMTP SNMP Network monitoring 161, 162 SNMPv3 (Encryption)"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.1-Network%20Protocols/#summary","title":"\ud83c\udfc6 Summary","text":"<p>This structured overview provides a clear understanding of network protocols, their functions, and applications in modern networking. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/","title":"\ud83c\udf10 Application Layer Protocols","text":"<p>Application layer protocols define the rules, standards, and methodologies enabling communication between applications over a network. They operate at the topmost layer of the OSI and TCP/IP models, ensuring proper data formatting, transmission, and interpretation for seamless interaction between diverse applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>\ud83d\udd39 Importance</li> <li>\ud83d\udd39 HTTP (Hypertext Transfer Protocol)</li> <li>\ud83d\udd39 FTP (File Transfer Protocol)</li> <li>\ud83d\udd39 SMTP (Simple Mail Transfer Protocol)</li> <li>\ud83d\udd39 SNMP (Simple Network Management Protocol)</li> <li>\ud83d\udd39 Protocol Comparison</li> <li>\ud83d\udd39 Other Network Layers &amp; Their Protocols</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#importance","title":"\ud83c\udf1f Importance","text":"<p>\u2705 Standardized communication between applications. \u2705 Ensures compatibility across platforms and networks. \u2705 Supports critical functionalities like web browsing, email, and file transfers.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#1-http-hypertext-transfer-protocol","title":"\ud83c\udf0d 1. HTTP (Hypertext Transfer Protocol)","text":"<p>HTTP enables the transfer of hypertext data (HTML, images, videos) between a client (browser) and a server.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#key-features","title":"\ud83d\udd39 Key Features","text":"<ul> <li>\ud83d\udccc Port 80: Default communication port.</li> <li>\ud83d\udccc Stateless Protocol: Each transaction is independent; mechanisms like cookies maintain session state.</li> <li>\ud83d\udccc Request Methods:<ul> <li>\ud83d\udfe2 GET: Retrieve information without modifying data.</li> <li>\ud83d\udfe1 POST: Send data to a server.</li> <li>\ud83d\udd35 PUT: Update or replace a resource.</li> <li>\ud83d\udd34 DELETE: Remove a resource.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#applications","title":"\ud83d\udd39 Applications","text":"<ul> <li>\ud83c\udf10 Web browsing.</li> <li>\ud83d\udd04 API communication.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#secure-version","title":"\ud83d\udd12 Secure Version","text":"<p>HTTPS (Hypertext Transfer Protocol Secure): Adds SSL/TLS encryption for secure data transmission.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#2-ftp-file-transfer-protocol","title":"\ud83d\udcc2 2. FTP (File Transfer Protocol)","text":"<p>FTP facilitates file transfers between a client and a server.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#key-features_1","title":"\ud83d\udd39 Key Features","text":"<ul> <li>\ud83d\udccc Ports 20 &amp; 21: Port 21 for control commands; Port 20 for data transfer.</li> <li>\ud83d\udccc Modes:<ul> <li>\ud83d\udfe2 Active: Client opens a port; server connects to it.</li> <li>\ud83d\udd35 Passive: Server opens a port; client connects (firewall-friendly).</li> </ul> </li> <li>\ud83d\udccc Authentication: Uses usernames and passwords; anonymous FTP allows public access.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#applications_1","title":"\ud83d\udd39 Applications","text":"<ul> <li>\ud83d\udcc1 Large file transfers.</li> <li>\ud83d\udcbe Data backups.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#secure-version_1","title":"\ud83d\udd12 Secure Version","text":"<p>SFTP (SSH File Transfer Protocol): Uses SSH for encryption.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#3-smtp-simple-mail-transfer-protocol","title":"\ud83d\udce7 3. SMTP (Simple Mail Transfer Protocol)","text":"<p>SMTP is used for sending emails between mail servers.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#key-features_2","title":"\ud83d\udd39 Key Features","text":"<ul> <li>\ud83d\udccc Port Numbers: 25 (standard), 465 &amp; 587 (secure connections).</li> <li>\ud83d\udccc Email Sending: Only handles message transmission; retrieval is done via POP3 or IMAP.</li> <li>\ud83d\udccc Relaying: Forwards emails across mail servers.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#applications_2","title":"\ud83d\udd39 Applications","text":"<ul> <li>\ud83d\udce9 Personal and enterprise email systems.</li> <li>\ud83d\udce2 Email automation (notifications, newsletters).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#4-snmp-simple-network-management-protocol","title":"\ud83d\udce1 4. SNMP (Simple Network Management Protocol)","text":"<p>SNMP facilitates network monitoring, management, and configuration.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#key-features_3","title":"\ud83d\udd39 Key Features","text":"<ul> <li>\ud83d\udccc Ports 161 &amp; 162: Queries (161), Alerts (162).</li> <li>\ud83d\udccc Components:<ul> <li>\ud83d\udda5\ufe0f Managed Devices: Routers, servers, etc.</li> <li>\ud83d\udce1 SNMP Agents: Collect and send device data.</li> <li>\ud83d\udcca SNMP Manager: Central system for monitoring.</li> </ul> </li> <li>\ud83d\udccc Versions: SNMPv1 (basic), SNMPv2 (enhanced), SNMPv3 (secure).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#applications_3","title":"\ud83d\udd39 Applications","text":"<ul> <li>\ud83d\udcf6 Network monitoring.</li> <li>\ud83d\udd0d Fault detection.</li> <li>\ud83d\udd27 Device management.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#protocol-comparison","title":"\ud83d\udcca Protocol Comparison","text":"Protocol Purpose Port Secure Version \ud83c\udf10 HTTP Web browsing 80 HTTPS (SSL/TLS) \ud83d\udcc2 FTP File transfer 20, 21 SFTP (SSH) \ud83d\udce7 SMTP Email sending 25, 465, 587 Secure SMTP \ud83d\udce1 SNMP Network monitoring 161, 162 SNMPv3 (Encryption)"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#other-network-layers-their-protocols","title":"\ud83c\udfdb Other Network Layers &amp; Their Protocols","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#1-network-layer-functions-protocols","title":"\ud83d\udcf6 1. Network Layer Functions &amp; Protocols","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#functions","title":"\ud83d\udee0 Functions","text":"<ul> <li>\ud83c\udff7\ufe0f Addressing: Assigns logical IP addresses.</li> <li>\ud83d\udccd Routing: Determines optimal paths for data.</li> <li>\ud83d\udce4 Packet Forwarding: Transfers packets based on routing tables.</li> <li>\ud83d\udce6 Fragmentation &amp; Reassembly: Splits large packets and reassembles them.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#protocols","title":"\ud83d\udd39 Protocols","text":"<ul> <li>\ud83c\udf0d IP (Internet Protocol): Handles addressing and routing.<ul> <li>\ud83d\udce1 IPv4: 32-bit, limited addresses.</li> <li>\ud83d\udd22 IPv6: 128-bit, expanded capacity.</li> </ul> </li> <li>\ud83d\udd0d ICMP (Internet Control Message Protocol): Network diagnostics (ping).</li> <li>\ud83d\udd04 ARP (Address Resolution Protocol): Maps IP to MAC addresses.</li> <li>\ud83d\udea6 BGP (Border Gateway Protocol): Internet-scale routing.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#2-transport-layer-functions-protocols","title":"\ud83c\udf9b 2. Transport Layer Functions &amp; Protocols","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#functions_1","title":"\ud83d\udee0 Functions","text":"<ul> <li>\ud83e\udde9 Segmentation &amp; Reassembly: Breaks/reconstructs data for transmission.</li> <li>\u2705 Error Detection &amp; Recovery: Ensures data integrity.</li> <li>\ud83d\udea6 Flow Control: Prevents congestion.</li> <li>\ud83d\udd22 Port Addressing: Identifies services (e.g., web on port 80, email on port 25).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#protocols_1","title":"\ud83d\udd39 Protocols","text":"<ul> <li>\ud83d\udd04 TCP (Transmission Control Protocol): Reliable, connection-oriented.</li> <li>\u26a1 UDP (User Datagram Protocol): Fast, connectionless.</li> <li>\ud83d\udd17 SCTP (Stream Control Transmission Protocol): Combines TCP &amp; UDP features.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#3-connection-oriented-vs-connectionless-protocols","title":"\ud83d\udd04 3. Connection-Oriented vs. Connectionless Protocols","text":"Feature Connection-Oriented Connectionless \u2705 Reliability Ensured (acknowledgments, retransmissions) No delivery guarantees \ud83d\udd0c Setup Requires connection establishment No setup required \ud83d\udcca Overhead High Low \ud83d\udccc Use Case File transfers, email, web browsing Streaming, gaming, DNS queries"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/4.2-Application-layer-Protocol/#conclusion","title":"\ud83c\udfc6 Conclusion","text":"<p>This document provides a structured overview of key network protocols, ensuring efficient communication across applications, devices, and networks. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/","title":"\ud83d\udccc IP Addressing (IPv4 &amp; IPv6)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ol> <li>\ud83d\udcd6 Overview</li> <li>\ud83c\udfaf Purpose</li> <li>\ud83c\udfdb\ufe0f IPv4 Addressing</li> <li>\ud83c\udfdb\ufe0f IPv6 Addressing</li> <li>\ud83d\udd04 IPv4 vs IPv6 Comparison</li> <li>\ud83c\udfd7\ufe0f IP Addressing Techniques</li> <li>\ud83c\udf0d Applications</li> <li>\ud83c\udfc1 Conclusion</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#overview","title":"\ud83d\udcd6 Overview","text":"<ul> <li>\ud83c\udf10 Unique identifier for devices in a network.</li> <li>\ud83d\ude80 Ensures efficient data transmission &amp; routing.</li> <li>\ud83d\udce1 Functions at Network Layer of OSI &amp; TCP/IP models.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>\ud83c\udd94 Identifies devices uniquely.</li> <li>\ud83d\udce6 Routes data packets efficiently.</li> <li>\ud83d\udd17 Differentiates devices across LANs, WANs, &amp; the Internet.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#ipv4-addressing","title":"\ud83c\udfdb\ufe0f IPv4 Addressing","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#structure","title":"\ud83d\udccc Structure","text":"<ul> <li>\ud83d\udd22 32-bit address, dotted decimal notation (e.g., <code>192.168.1.1</code>).</li> <li>\ud83d\udcca Composed of 4 octets (8 bits each), range 0-255 per octet.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#ipv4-header-components","title":"\ud83c\udfd7\ufe0f IPv4 Header Components","text":"<ul> <li>\ud83c\udff7\ufe0f Version: Identifies IP version (4).</li> <li>\ud83c\udfc1 Header Length: Marks start of payload.</li> <li>\ud83c\udfaf Type of Service (ToS): Defines priority &amp; QoS.</li> <li>\ud83d\udccf Total Length: Max 65,535 bytes.</li> <li>\ud83d\udd04 Fragmentation Fields: Identification, Flags, Fragment Offset.</li> <li>\u23f3 TTL: Prevents infinite looping.</li> <li>\ud83d\udee0\ufe0f Protocol: Identifies transport-layer protocol (TCP/6, UDP/17).</li> <li>\ud83d\udd0d Header Checksum: Ensures integrity.</li> <li>\ud83d\udccc Source &amp; Destination Address: Identifies sender &amp; receiver.</li> <li>\u2699\ufe0f Options (Optional): Adds routing preferences.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#address-classes","title":"\ud83d\udcca Address Classes","text":"<ul> <li>\ud83c\udd70\ufe0f Class A: Large networks (1.0.0.0 \u2013 126.255.255.255).</li> <li>\ud83c\udd71\ufe0f Class B: Medium networks (128.0.0.0 \u2013 191.255.255.255).</li> <li>\ud83c\udd72\ufe0f Class C: Small networks (192.0.0.0 \u2013 223.255.255.255).</li> <li>\ud83c\udd73\ufe0f Class D: Multicast (224.0.0.0 \u2013 239.255.255.255).</li> <li>\ud83c\udd74\ufe0f Class E: Experimental (240.0.0.0 \u2013 255.255.255.255).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#limitations","title":"\u274c Limitations","text":"<ul> <li>\ud83d\udcc9 Address Exhaustion: Limited to ~4.3 billion addresses.</li> <li>\ud83d\udd13 Security Risks: No built-in encryption.</li> <li>\ud83d\udce1 Scalability Issues: Requires NAT &amp; subnetting.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#ipv6-addressing","title":"\ud83c\udfdb\ufe0f IPv6 Addressing","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#structure_1","title":"\ud83d\udccc Structure","text":"<ul> <li>\ud83d\udd22 128-bit address, colon-hexadecimal notation (e.g., <code>2001:db8::1</code>).</li> <li>\ud83e\udde9 Eight 16-bit segments, separated by colons.</li> <li>\u26a1 Supports shorthand notation for zero segments.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#ipv6-header-components","title":"\ud83c\udfd7\ufe0f IPv6 Header Components","text":"<ul> <li>\ud83c\udff7\ufe0f Version: Identifies IP version (6).</li> <li>\ud83d\udea6 Traffic Class: Defines priority &amp; QoS.</li> <li>\ud83d\udd04 Flow Label: Optimizes routing.</li> <li>\ud83d\udce6 Payload Length: Size of transmitted data.</li> <li>\ud83d\udee0\ufe0f Next Header: Identifies next protocol.</li> <li>\u23f3 Hop Limit: Prevents infinite looping (TTL equivalent).</li> <li>\ud83d\udccc Source &amp; Destination Address: Identifies sender &amp; receiver.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#features","title":"\u2b50 Features","text":"<ul> <li>\ud83d\udcc8 Vast Address Space: ~340 undecillion addresses.</li> <li>\ud83d\udd12 Built-in Security: Supports IPsec.</li> <li>\ud83e\udd16 Auto-Configuration: Devices generate their own addresses.</li> <li>\ud83d\ude80 Efficient Routing: Reduces routing table sizes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#compatibility","title":"\ud83d\udd04 Compatibility","text":"<ul> <li>\u26a1 Dual-stack (IPv4 + IPv6) &amp; Tunneling for transition.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#ipv4-vs-ipv6-comparison","title":"\ud83d\udd04 IPv4 vs IPv6 Comparison","text":"Feature IPv4 IPv6 Address Length 32-bit 128-bit Notation Dotted decimal (<code>192.168.1.1</code>) Colon-hexadecimal (<code>2001:db8::1</code>) Address Space ~4.3 billion ~340 undecillion Security No built-in encryption Supports IPsec Header Size 20 bytes 40 bytes Fragmentation Done by routers Done by source device Routing Efficiency Less efficient More efficient"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#ip-addressing-techniques","title":"\ud83c\udfd7\ufe0f IP Addressing Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#subnetting","title":"\ud83d\udee0 Subnetting","text":"<ul> <li>\ud83c\udff7\ufe0f Definition: Splitting a large network into smaller subnets.</li> <li>\ud83c\udfaf Purpose:<ul> <li>\ud83d\udea6 Reduces network congestion.</li> <li>\ud83d\udd10 Enhances security.</li> <li>\ud83d\udcca Optimizes address allocation.</li> </ul> </li> <li>\ud83d\udd22 Method:<ul> <li>Uses subnet masks (e.g., <code>255.255.255.0</code> or <code>/24</code> in CIDR notation).</li> <li>\ud83c\udfd7 Example:<ul> <li>Original: <code>192.168.1.0/24</code> (254 usable IPs).</li> <li>Subnets: <code>192.168.1.0/26</code>, <code>192.168.1.64/26</code>, etc.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#supernetting","title":"\ud83d\udcc8 Supernetting","text":"<ul> <li>\ud83c\udff7\ufe0f Definition: Merging smaller networks into a larger one.</li> <li>\ud83c\udfaf Purpose:<ul> <li>\ud83d\udcc9 Reduces routing table size.</li> <li>\ud83d\ude80 Improves efficiency.</li> </ul> </li> <li>\ud83d\udd22 Method:<ul> <li>Uses CIDR (e.g., <code>192.168.0.0/22</code> aggregates multiple <code>/24</code> subnets).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#address-allocation-methods","title":"\u26a1 Address Allocation Methods","text":"<ul> <li>\ud83c\udfdb\ufe0f Classful Addressing: Uses predefined network classes.</li> <li>\ud83d\udd17 Classless Addressing (CIDR): Allows flexible subnetting.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#applications","title":"\ud83c\udf0d Applications","text":"<ul> <li>\ud83c\udfe2 IPv4: Legacy systems, private networks, small-scale deployments.</li> <li>\ud83d\ude80 IPv6: IoT, large-scale networks, modern internet.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.1-IP_Addressing/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<p>\u2705 IP addressing enables device identification &amp; communication. \u2705 IPv4 remains widely used, but IPv6 is essential for future scalability. \u2705 Subnetting &amp; supernetting optimize address allocation &amp; network performance.</p> <p>\ud83d\udccc Keep Learning, Keep Building! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/","title":"\ud83c\udf10 Networking Fundamentals: NAT, DHCP, and DNS","text":"<p>Networking enables seamless communication between devices. Three key technologies\u2014Network Address Translation (NAT), Dynamic Host Configuration Protocol (DHCP), and Domain Name System (DNS)\u2014help manage IP address allocation, automate network configuration, and simplify internet navigation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ol> <li>\ud83c\udfe0 Network Address Translation (NAT)</li> <li>\u26a1 Dynamic Host Configuration Protocol (DHCP)</li> <li>\ud83c\udf0d Domain Name System (DNS)</li> <li>\ud83d\udcca Comparison of NAT, DHCP, and DNS</li> <li>\ud83d\ude80 Real-World Applications</li> <li>\ud83c\udfaf Interview Readiness: Key Takeaways</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#1-network-address-translation-nat","title":"\ud83c\udfe0 1. Network Address Translation (NAT)","text":"<p>Purpose: Enables multiple devices in a private network to share a single public IP address, optimizing IPv4 usage and enhancing security.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#types-of-nat","title":"\ud83d\udd04 Types of NAT","text":"<ul> <li>\ud83d\udd39 Static NAT: One-to-one mapping between private and public IPs (e.g., web servers).</li> <li>\ud83d\udd39 Dynamic NAT: Maps private IPs to a pool of public IPs dynamically.</li> <li>\ud83d\udd39 Port Address Translation (PAT) (NAT Overload): Maps multiple private IPs to a single public IP using port numbers (common in homes and small offices).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#advantages","title":"\u2705 Advantages","text":"<p>\u2714 Conserves Public IPs \u2192 Reduces IPv4 exhaustion. \u2714 Enhances Security \u2192 Hides internal network structure. \u2714 Facilitates Internet Access \u2192 Enables private networks to communicate with public networks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#limitations","title":"\u274c Limitations","text":"<p>\u274c Latency Overhead \u2192 Address translation introduces delays. \u274c Breaks End-to-End Connectivity \u2192 Some protocols (VoIP, P2P, VPN) struggle with NAT. \u274c Limits Some Applications \u2192 NAT traversal is needed for direct communication.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#2-dynamic-host-configuration-protocol-dhcp","title":"\u26a1 2. Dynamic Host Configuration Protocol (DHCP)","text":"<p>Purpose: Automates IP address assignment and network configuration, reducing manual work.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#how-dhcp-works","title":"\ud83d\udd01 How DHCP Works","text":"<p>1\ufe0f\u20e3 Discovery \u2192 Client device broadcasts a request for an IP. 2\ufe0f\u20e3 Offer \u2192 DHCP server responds with an available IP. 3\ufe0f\u20e3 Request \u2192 Client formally requests the offered IP lease. 4\ufe0f\u20e3 Acknowledgment \u2192 Server confirms and assigns the IP for a lease period.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#key-components","title":"\ud83d\udda5 Key Components","text":"<ul> <li>\ud83d\udd39 DHCP Server \u2192 Assigns and manages IP addresses.</li> <li>\ud83d\udd39 DHCP Client \u2192 Device requesting an IP.</li> <li>\ud83d\udd39 Lease Time \u2192 Defines how long an IP is valid.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#advantages_1","title":"\u2705 Advantages","text":"<p>\u2714 Automates IP Management \u2192 No manual configuration required. \u2714 Reduces Errors \u2192 Prevents IP conflicts and misconfigurations. \u2714 Scalable \u2192 Supports large networks efficiently.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#limitations_1","title":"\u274c Limitations","text":"<p>\u274c Single Point of Failure \u2192 If DHCP server fails, devices cannot obtain IPs. \u274c Security Risks \u2192 Rogue DHCP servers can cause network disruptions. \u274c IP Address Exhaustion \u2192 Long lease times can waste unused addresses.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#3-domain-name-system-dns","title":"\ud83c\udf0d 3. Domain Name System (DNS)","text":"<p>Purpose: Translates human-readable domain names (e.g., <code>www.example.com</code>) into machine-readable IP addresses (e.g., <code>93.184.216.34</code>).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#how-dns-works","title":"\ud83d\udd0d How DNS Works","text":"<p>1\ufe0f\u20e3 User enters a domain (e.g., <code>www.google.com</code>). 2\ufe0f\u20e3 Recursive Resolver queries DNS servers (root, TLD, authoritative). 3\ufe0f\u20e3 Authoritative DNS Server returns the IP address. 4\ufe0f\u20e3 Browser uses the IP to connect to the web server.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#types-of-dns-records","title":"\ud83d\udcdc Types of DNS Records","text":"<ul> <li>\ud83d\udd39 A Record \u2192 Maps a domain to an IPv4 address.</li> <li>\ud83d\udd39 AAAA Record \u2192 Maps a domain to an IPv6 address.</li> <li>\ud83d\udd39 CNAME Record \u2192 Aliases one domain to another.</li> <li>\ud83d\udd39 MX Record \u2192 Specifies mail servers for email routing.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#advantages_2","title":"\u2705 Advantages","text":"<p>\u2714 Simplifies Internet Navigation \u2192 No need to remember IPs. \u2714 Scalability \u2192 Supports billions of devices. \u2714 Redundancy &amp; Load Balancing \u2192 Distributes traffic efficiently.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#limitations_2","title":"\u274c Limitations","text":"<p>\u274c Vulnerable to Attacks \u2192 DNS spoofing and cache poisoning. \u274c Downtime Risks \u2192 DNS server failures stop domain resolution. \u274c Latency in Propagation \u2192 Changes take time to update globally.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#4-comparison-of-nat-dhcp-and-dns","title":"\ud83d\udcca 4. Comparison of NAT, DHCP, and DNS","text":"Feature NAT DHCP DNS Function Translates IPs Assigns IPs dynamically Resolves domain names Key Benefit Conserves public IPs Automates IP allocation Simplifies internet navigation Use Case Internet sharing Dynamic corporate networks Accessing websites Security Concerns Breaks end-to-end security Rogue DHCP attacks DNS poisoning attacks"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#5-real-world-applications","title":"\ud83d\ude80 5. Real-World Applications","text":"<p>\ud83d\udccc NAT \u2192 Home routers, corporate firewalls, ISP networks. \ud83d\udccc DHCP \u2192 Enterprise networks, data centers, Wi-Fi hotspots. \ud83d\udccc DNS \u2192 Internet browsing, email services, cloud applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/5.2-Networking%20Fundamentals/#6-interview-readiness-key-takeaways","title":"\ud83c\udfaf 6. Interview Readiness: Key Takeaways","text":"<p>\u2714 Be ready to explain NAT, DHCP, and DNS with real-world examples. \u2714 Discuss NAT's role in IPv4 conservation and security trade-offs. \u2714 Understand how DHCP works in enterprise environments and troubleshooting scenarios. \u2714 Be aware of DNS security threats and mitigation strategies (e.g., DNSSEC).</p> <p>\ud83d\ude80 This structured approach ensures a quick revision before interviews while providing deep insights for expert-level discussions. Let me know if you need refinements! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/","title":"\ud83d\ude80 Routing Algorithms","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#overview","title":"\ud83d\udccc Overview","text":"<p>Routing algorithms form the backbone of data delivery in computer networks, ensuring efficient, reliable, and optimized communication across interconnected systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>\ud83d\udcd6 Definition</li> <li>\ud83c\udfaf Purpose of Routing Algorithms</li> <li>\ud83d\udee0\ufe0f Types of Routing<ul> <li>\ud83d\udccd Static Routing</li> <li>\ud83d\udd04 Dynamic Routing</li> </ul> </li> <li>\u2696\ufe0f Static vs. Dynamic Routing</li> <li>\ud83e\udde0 Common Routing Algorithms</li> <li>\ud83d\ude80 Applications</li> <li>\ud83d\udce1 Routing Protocols</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#definition","title":"\ud83d\udcd6 Definition","text":"<p>Routing algorithms are mathematical techniques used by routers to determine the best path for data packets. They analyze network conditions like: - Distance - Link quality - Traffic patterns</p> <p>These calculations ensure speed, reliability, and efficiency in data transmission.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#purpose-of-routing-algorithms","title":"\ud83c\udfaf Purpose of Routing Algorithms","text":"<p>Routing algorithms enhance network performance by: \u2705 Efficient Data Delivery \u2013 Choosing the shortest/least congested path. \u2705 Optimizing Network Resources \u2013 Preventing bottlenecks &amp; balancing traffic. \u2705 Providing Load Balancing \u2013 Ensuring even distribution of network traffic.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#types-of-routing","title":"\ud83d\udee0\ufe0f Types of Routing","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#static-routing","title":"\ud83d\udccd Static Routing","text":"<p>A manually configured routing method that does not change dynamically.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#key-features","title":"\u2728 Key Features","text":"<ul> <li>\ud83c\udfd7\ufe0f Predictability \u2013 Predefined routes for consistent behavior.</li> <li>\ud83d\ude80 No Overhead \u2013 No extra bandwidth usage for updates.</li> <li>\ud83d\udee0 Manual Configuration \u2013 Requires administrative updates.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#advantages","title":"\u2705 Advantages","text":"<ul> <li>\ud83d\udee1 Security \u2013 Routes are not advertised, reducing exposure.</li> <li>\u26a1 Performance \u2013 No processing overhead from routing updates.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#disadvantages","title":"\u274c Disadvantages","text":"<ul> <li>\ud83d\udcc9 Not Scalable \u2013 Impractical for large networks.</li> <li>\ud83d\udeab No Adaptability \u2013 Cannot respond to link failures automatically.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#use-case","title":"\ud83c\udfe2 Use Case","text":"<p>Ideal for small, stable networks like home or office environments.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#dynamic-routing","title":"\ud83d\udd04 Dynamic Routing","text":"<p>Automatically updates routing tables based on network conditions using protocols.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#key-features_1","title":"\u2728 Key Features","text":"<ul> <li>\ud83d\udd04 Adaptive \u2013 Responds to network changes.</li> <li>\ud83d\udce1 Protocol-Based \u2013 Uses RIP, OSPF, BGP, etc.</li> <li>\ud83d\udcf6 Periodic Updates \u2013 Continuous exchange of routing data.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#advantages_1","title":"\u2705 Advantages","text":"<ul> <li>\ud83d\udd0d Scalability \u2013 Suitable for large networks.</li> <li>\ud83d\udd04 Resilience \u2013 Automatically adapts to failures.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#disadvantages_1","title":"\u274c Disadvantages","text":"<ul> <li>\ud83d\udcca Bandwidth Consumption \u2013 Routing updates use bandwidth.</li> <li>\ud83c\udfd7 Complex Configuration \u2013 Requires expertise.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#use-case_1","title":"\ud83c\udfe2 Use Case","text":"<p>Essential for large, dynamic networks such as ISPs, data centers, and enterprises.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#static-vs-dynamic-routing","title":"\u2696\ufe0f Static vs. Dynamic Routing","text":"Feature Static Routing Dynamic Routing \ud83c\udfd7 Configuration Manual Automatic \ud83d\udcc8 Scalability Limited High \ud83d\udd04 Adaptability No Yes \ud83d\udce1 Overhead None Consumes bandwidth \u2699\ufe0f Complexity Simple Complex \ud83c\udfe2 Use Case Small, stable networks Large, dynamic networks"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#common-routing-algorithms","title":"\ud83e\udde0 Common Routing Algorithms","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#distance-vector-routing","title":"\ud83d\udd22 Distance Vector Routing","text":"<ul> <li>\ud83d\udccf Chooses the best path based on hop count.</li> <li>\ud83d\udce1 Example: RIP (Routing Information Protocol)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#link-state-routing","title":"\ud83c\udf0d Link State Routing","text":"<ul> <li>\ud83d\uddfa Builds a complete network topology.</li> <li>\ud83c\udfc6 Uses Dijkstra's algorithm.</li> <li>\ud83d\udce1 Example: OSPF (Open Shortest Path First)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#hybrid-routing","title":"\ud83d\udd04 Hybrid Routing","text":"<ul> <li>\ud83c\udfdb Combines distance vector and link state.</li> <li>\ud83d\udce1 Example: EIGRP (Enhanced Interior Gateway Routing Protocol)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#applications","title":"\ud83d\ude80 Applications","text":"<p>\ud83d\udccc Static Routing \u2013 Small office/home networks. \ud83d\udccc Dynamic Routing \u2013 Enterprises, ISPs, and large-scale infrastructures. \ud83d\udccc Routing Algorithms \u2013 Ensuring scalable, efficient networking in modern systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#routing-protocols","title":"\ud83d\udce1 Routing Protocols","text":"<p>Routing protocols define how routers exchange information to determine optimal paths.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#1-distance-vector-routing-protocols","title":"1\ufe0f\u20e3 Distance Vector Routing Protocols","text":"<p>\ud83d\udd39 Key Features: Periodic updates, metric-based decisions. \ud83d\udd39 Pros: Simple, low resource usage. \ud83d\udd39 Cons: Slow convergence, count-to-infinity problem. \ud83d\udd39 Examples: - RIP \u2013 Uses hop count, max 15 hops. - EIGRP \u2013 Hybrid protocol, multi-metric.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#2-link-state-routing-protocols","title":"2\ufe0f\u20e3 Link State Routing Protocols","text":"<p>\ud83d\udd39 Key Features: Global topology awareness, fast updates. \ud83d\udd39 Pros: Faster convergence, scalability. \ud83d\udd39 Cons: Higher resource usage, complexity. \ud83d\udd39 Examples: - OSPF \u2013 Uses Dijkstra's shortest path algorithm. - IS-IS \u2013 Common in ISP environments.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.1-Routing-And-Switching/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>Routing algorithms are essential for modern networks, ensuring efficient and reliable data transmission. Understanding these algorithms and protocols helps in designing robust network infrastructures.</p> <p>\ud83d\ude80 Mastering routing techniques is key to optimizing network performance!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/","title":"\ud83d\ude80 Routing Protocols: A Comprehensive Guide","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>Introduction</li> <li>Types of Routing Protocols<ul> <li>Distance Vector Routing Protocols</li> <li>Link State Routing Protocols</li> </ul> </li> <li>Comparison: Distance Vector vs. Link State</li> <li>Exterior Gateway Protocols (EGPs)<ul> <li>Border Gateway Protocol (BGP)</li> </ul> </li> <li>Interior Gateway Protocols (IGPs)<ul> <li>IGRP</li> <li>EIGRP</li> </ul> </li> <li>Conclusion</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#introduction","title":"\ud83c\udf0d Introduction","text":"<p>Routing protocols are crucial in modern networking, ensuring efficient and reliable data transmission. They enable routers to determine the best path for data packets, dynamically adapting to network changes.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#types-of-routing-protocols","title":"\ud83d\udd17 Types of Routing Protocols","text":"<p>Routing protocols are broadly classified into:</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#distance-vector-routing-protocols","title":"\ud83d\udce1 Distance Vector Routing Protocols","text":"<p>\ud83d\udd39 Operate by sharing routing tables with directly connected neighbors. \ud83d\udd39 Use simple metrics like hop count for path selection. \ud83d\udd39 Examples: RIP, EIGRP.</p> <p>\u2705 Advantages: - Easy to configure \ud83d\udee0\ufe0f - Low CPU and memory usage \ud83d\udcbe</p> <p>\u274c Disadvantages: - Slow convergence \ud83d\udc22 - Count-to-infinity problem \ud83d\udd04</p> <p>\u2708\ufe0f Applications:  Suitable for small, less dynamic networks with limited resources. Commonly used in small businesses and simpler routing environments.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#link-state-routing-protocols","title":"\ud83c\udf0d Link State Routing Protocols","text":"<p>\ud83d\udd39 Each router builds a complete map of the network topology. \ud83d\udd39 Uses Dijkstra's Algorithm for shortest path calculation. \ud83d\udd39 Examples: OSPF, IS-IS.</p> <p>\u2705 Advantages: - Faster convergence \u26a1 - Highly scalable \ud83d\udcc8</p> <p>\u274c Disadvantages: - Requires more memory and processing power \ud83d\udd0b - Complex configuration \ud83c\udf9b\ufe0f</p> <p>\u2708\ufe0f Applications:  Preferred for large, dynamic networks like enterprise environments, data centers, and ISPs, where scalability and fast convergence are critical.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#comparison-distance-vector-vs-link-state","title":"\u2696\ufe0f Comparison: Distance Vector vs. Link State","text":"Feature Distance Vector Link State Routing Information Neighbors only Entire topology Convergence Speed Slow \ud83d\udc0c Fast \u26a1 Memory Usage Low \ud83d\udcbe High \ud83d\udd0b Scalability Limited \ud83d\udcc9 High \ud83d\udcc8 Examples RIP, EIGRP OSPF, IS-IS"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#exterior-gateway-protocols-egps","title":"\ud83c\udf0d Exterior Gateway Protocols (EGPs)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#border-gateway-protocol-bgp","title":"\ud83c\udf10 Border Gateway Protocol (BGP)","text":"<p>\ud83d\udd39 Used for global internet routing between Autonomous Systems (AS). \ud83d\udd39 Employs policy-based routing and path vector mechanism. \ud83d\udd39 Runs on TCP port 179.</p> <p>\u2705 Advantages: - Highly scalable \ud83c\udf0d - Enables granular route control \ud83c\udf9b\ufe0f</p> <p>\u274c Disadvantages: - Complex to configure \ud83d\udd04 - Slow convergence \ud83d\udc0c</p> <p>\u2708\ufe0f Applications: Used by ISPs and large enterprises for internet backbone routing.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#interior-gateway-protocols-igps","title":"\ud83d\udd04 Interior Gateway Protocols (IGPs)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#igrp-interior-gateway-routing-protocol","title":"\ud83d\udd39 IGRP (Interior Gateway Routing Protocol)","text":"<ul> <li>Developed by Cisco.</li> <li>Uses multiple metrics (bandwidth, delay, load) for routing decisions.</li> <li>Legacy protocol, replaced by EIGRP.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#eigrp-enhanced-interior-gateway-routing-protocol","title":"\ud83d\ude80 EIGRP (Enhanced Interior Gateway Routing Protocol)","text":"<ul> <li>Hybrid protocol combining Distance Vector &amp; Link State features.</li> <li>Supports faster convergence and loop-free paths.</li> <li>Uses DUAL (Diffusing Update Algorithm) for route selection.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.2-Routing%20Protocols/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<p>Routing protocols are the backbone of networking, ensuring efficient data transfer across interconnected networks. Choosing the right protocol depends on factors like scalability, performance, and resource constraints.</p> <p>\ud83d\udca1 Key Takeaways: - Distance Vector is simple and resource-efficient but slow. - Link State is fast and scalable but requires more resources. - BGP governs global routing, while IGPs manage internal network traffic.</p> <p>\ud83d\udcda Keep learning, and optimize your networks! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/","title":"\ud83d\ude80 Switching Techniques in Communication Networks","text":"<p>Switching techniques are fundamental to communication networks, ensuring efficient, reliable, and scalable data transmission. Different techniques cater to diverse needs, from real-time communication to dynamic, packet-based data transfer.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#table-of-contents","title":"\ud83d\udcdc Table of Contents","text":"<ul> <li>Introduction</li> <li>Purpose</li> <li>Types of Switching Techniques<ul> <li>\u26a1 Circuit Switching</li> <li>\ud83d\udce6 Packet Switching</li> <li>\ud83d\udce8 Message Switching</li> </ul> </li> <li>\ud83d\udcca Comparison Table</li> <li>\u2705 Conclusion</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#introduction","title":"\ud83c\udfc6 Introduction","text":"<p>Switching techniques define how data flows through a network, optimizing resource utilization and ensuring seamless communication. Each technique is suited for different applications, from real-time calls to asynchronous data transfers.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>\u2705 Facilitate Efficient Data Transfer: Ensures minimal delay and maximum throughput. \u2705 Optimize Network Resources: Dynamically allocates bandwidth to prevent wastage. \u2705 Support Various Communication Types: From real-time voice/video to asynchronous emails.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#types-of-switching-techniques","title":"\ud83d\udd04 Types of Switching Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#circuit-switching","title":"\u26a1 Circuit Switching","text":"<p>A dedicated communication path is established before data transfer, ensuring continuous and uninterrupted transmission.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#key-features","title":"\ud83d\udd39 Key Features","text":"<ul> <li>Dedicated Path: Fixed route between sender and receiver.</li> <li>Continuous Connection: No interruptions in data flow.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#advantages","title":"\u2705 Advantages","text":"<ul> <li>Reliable Communication: No delays or data loss.</li> <li>Guaranteed Bandwidth: Exclusive resource allocation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#disadvantages","title":"\u274c Disadvantages","text":"<ul> <li>Inefficient Resource Usage: Resources remain reserved even during inactivity.</li> <li>High Setup Time: Requires signaling before data transfer.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#applications","title":"\ud83d\udccc Applications","text":"<ul> <li>\u260e\ufe0f Telephone Networks \u2013 Traditional landline systems.</li> <li>\ud83c\udfa5 Video Conferencing \u2013 Corporate meetings requiring low latency.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#packet-switching","title":"\ud83d\udce6 Packet Switching","text":"<p>Data is divided into packets, which travel independently and are reassembled at the destination.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#key-features_1","title":"\ud83d\udd39 Key Features","text":"<ul> <li>Dynamic Path: Packets take the most efficient route.</li> <li>Stateless Communication: No need for a dedicated path.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#advantages_1","title":"\u2705 Advantages","text":"<ul> <li>Efficient Resource Utilization: Shared network infrastructure.</li> <li>Scalability &amp; Resilience: Adapts to network congestion and failures.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#disadvantages_1","title":"\u274c Disadvantages","text":"<ul> <li>Out-of-Order Delivery: Packets may arrive in different sequences.</li> <li>Variable Delay: Network congestion affects delivery times.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#applications_1","title":"\ud83d\udccc Applications","text":"<ul> <li>\ud83c\udf0d Internet Communication \u2013 HTTP, FTP, email.</li> <li>\ud83c\udfac Streaming &amp; File Transfers \u2013 Video streaming, gaming.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#message-switching","title":"\ud83d\udce8 Message Switching","text":"<p>Entire messages are stored at intermediate nodes before forwarding, making it suitable for non-real-time applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#key-features_2","title":"\ud83d\udd39 Key Features","text":"<ul> <li>Store-and-Forward: Messages are held before transmission.</li> <li>No Dedicated Path: Dynamic routing based on availability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#advantages_2","title":"\u2705 Advantages","text":"<ul> <li>Ideal for Non-Real-Time Communication: Efficient for emails.</li> <li>Handles Congestion Well: Prevents packet loss.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#disadvantages_2","title":"\u274c Disadvantages","text":"<ul> <li>High Latency: Delayed delivery due to storage at intermediate nodes.</li> <li>Storage Overhead: Requires large storage capacity.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#applications_2","title":"\ud83d\udccc Applications","text":"<ul> <li>\ud83d\udce7 Email Systems \u2013 Messages stored and forwarded.</li> <li>\ud83d\udcc2 File Sharing \u2013 Reliable document transmission.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#comparison-table","title":"\ud83d\udcca Comparison Table","text":"Feature \u26a1 Circuit Switching \ud83d\udce6 Packet Switching \ud83d\udce8 Message Switching Path Dedicated Dynamic Dynamic Delay Low Variable High Resource Usage Inefficient Efficient Moderate Real-Time Use \u2705 Yes \u2705 Yes (QoS) \u274c No Applications Telephony, Video Calls Internet, Streaming Emails, File Sharing"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/6.3-Switching%20Techniques/#conclusion","title":"\u2705 Conclusion","text":"<p>Switching techniques play a vital role in networking: - Circuit Switching provides reliability and low latency for real-time applications. - Packet Switching offers flexibility and scalability for dynamic communication. - Message Switching is useful for non-real-time applications like emails.</p> <p>Understanding these techniques is crucial for designing and optimizing modern network infrastructures. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/","title":"\ud83c\udf10 Networking Essentials: Ethernet &amp; Wireless Technologies","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ol> <li>Ethernet Technology and Standards (IEEE 802.3)</li> <li>Wireless Networking Standards (IEEE 802.11)</li> <li>Comparison of Ethernet and Wireless Networking</li> <li>Ethernet Switching &amp; VLANs</li> <li>Summary</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#1-ethernet-technology-and-standards-ieee-8023","title":"1\ufe0f\u20e3 Ethernet Technology and Standards (IEEE 802.3)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#overview","title":"\ud83d\udcdd Overview","text":"<p>Ethernet is a wired networking technology commonly used in Local Area Networks (LANs). Governed by the IEEE 802.3 standard, it ensures structured and reliable communication.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#key-features","title":"\u26a1 Key Features","text":"<ul> <li>\ud83d\udd04 OSI Layer Operations: Functions at Layer 1 (Physical) and Layer 2 (Data Link)</li> <li>\ud83d\udce1 Device Identification: Uses MAC addresses for unique device recognition</li> <li>\ud83d\ude80 Scalability: Supports speeds from 10 Mbps to 400 Gbps</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#how-ethernet-works","title":"\ud83d\udd0d How Ethernet Works","text":"<ul> <li>\ud83d\udce6 Frame Structure: Includes source &amp; destination MAC addresses, payload, and CRC for error detection</li> <li>\u2696\ufe0f Access Control: Uses CSMA/CD (Carrier Sense Multiple Access with Collision Detection) for collision prevention</li> <li>\ud83d\udee0\ufe0f Transmission Media: Twisted-pair cables, coaxial cables, fiber optics</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#ethernet-standards","title":"\ud83d\udcca Ethernet Standards","text":"Standard Speed Medium Year Introduced 10BASE-T 10 Mbps Twisted Pair 1990 100BASE-TX 100 Mbps Twisted Pair 1995 1000BASE-T 1 Gbps Twisted Pair 1999 10GBASE-T 10 Gbps Twisted Pair 2006 40GBASE-T 40 Gbps Fiber Optics 2010 100GBASE-T 100 Gbps Fiber Optics 2013"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#advantages","title":"\u2705 Advantages","text":"<ul> <li>\ud83d\udcaa Reliability: Low latency and high consistency</li> <li>\ud83d\udcc8 Scalability: Supports modern network expansion</li> <li>\ud83d\udcb0 Cost-Effective: Reduces infrastructure and maintenance costs</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#applications","title":"\ud83d\udccc Applications","text":"<ul> <li>\ud83c\udfe2 Enterprise LANs</li> <li>\ud83d\udda5\ufe0f Data Centers</li> <li>\ud83c\udfe0 Home Networks</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#2-wireless-networking-standards-ieee-80211","title":"2\ufe0f\u20e3 Wireless Networking Standards (IEEE 802.11)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#overview_1","title":"\ud83d\udcdd Overview","text":"<p>Wireless networking (Wi-Fi) enables device connectivity via radio waves, eliminating the need for physical cables.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#key-features_1","title":"\u26a1 Key Features","text":"<ul> <li>\ud83d\udd04 OSI Layer Operations: Functions at Layer 1 (Physical) &amp; Layer 2 (Data Link)</li> <li>\ud83d\udcf6 Frequency Bands: Operates at 2.4 GHz, 5 GHz, and 6 GHz</li> <li>\ud83d\udce1 Mobility: Allows seamless roaming within network coverage</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#how-wireless-networking-works","title":"\ud83d\udd0d How Wireless Networking Works","text":"<ul> <li>\ud83d\udce1 Access Points (APs): Connect wired and wireless networks</li> <li>\ud83d\udce1 Transmission: Uses electromagnetic waves over different frequency bands</li> <li>\ud83d\udd10 Security: Implements WPA2 and WPA3 encryption for secure communication</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#wi-fi-standards","title":"\ud83d\udcca Wi-Fi Standards","text":"Standard Frequency Speed Year Introduced 802.11b 2.4 GHz 11 Mbps 1999 802.11g 2.4 GHz 54 Mbps 2003 802.11n 2.4/5 GHz 600 Mbps 2009 802.11ac 5 GHz 6.9 Gbps 2013 802.11ax 2.4/5 GHz 9.6 Gbps 2019 802.11be 6 GHz 40+ Gbps Upcoming"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#advantages_1","title":"\u2705 Advantages","text":"<ul> <li>\ud83d\udce1 Mobility: Enables seamless movement</li> <li>\ud83d\udd0c No Physical Cabling: Simplifies setup</li> <li>\ud83d\udcc8 Scalability: Supports multiple devices efficiently</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#applications_1","title":"\ud83d\udccc Applications","text":"<ul> <li>\ud83c\udfe0 Home Networks</li> <li>\ud83c\udfd9\ufe0f Public Hotspots</li> <li>\ud83c\udf10 IoT Connectivity</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#3-comparison-of-ethernet-and-wireless-networking","title":"3\ufe0f\u20e3 Comparison of Ethernet and Wireless Networking","text":"Feature Ethernet (IEEE 802.3) Wi-Fi (IEEE 802.11) Medium \ud83d\udee0\ufe0f Wired (cables) \ud83d\udce1 Wireless (radio waves) Mobility \ud83d\udeab Limited \u2705 High Speed \ud83d\ude80 Higher (up to 400 Gbps) \u26a1 Lower (up to 40 Gbps) Reliability \u2705 More reliable \u26a0\ufe0f Prone to interference Setup Complexity \ud83d\udd27 Requires cabling \ud83d\udd0c Easier to set up Use Cases \ud83c\udfe2 Enterprise, Data Centers \ud83c\udfe0 Home, IoT, Offices"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<ul> <li>Ethernet excels in speed and reliability, ideal for enterprises.</li> <li>Wi-Fi offers flexibility and mobility, making it indispensable for homes and public spaces.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#4-ethernet-switching-vlans","title":"4\ufe0f\u20e3 Ethernet Switching &amp; VLANs","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#41-ethernet-switching","title":"\ud83c\udfe2 4.1 Ethernet Switching","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#overview_2","title":"\ud83d\udcdd Overview","text":"<p>Ethernet Switching connects multiple devices within a LAN, forwarding data intelligently based on MAC addresses.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#how-it-works","title":"\ud83d\udd0d How it Works","text":"<ul> <li>\ud83d\udcdc MAC Address Table: Maps MAC addresses to switch ports</li> <li>\ud83d\udce1 Frame Forwarding:<ul> <li>\ud83d\udd04 Unicast: Direct frame delivery</li> <li>\ud83d\udce3 Broadcast: Sent to all devices</li> <li>\ud83c\udfaf Multicast: Sent to specific groups</li> </ul> </li> <li>\ud83d\udee1\ufe0f Loop Avoidance: Uses Spanning Tree Protocol (STP) to prevent redundant loops</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#types-of-switches","title":"\u2699\ufe0f Types of Switches","text":"<ul> <li>\ud83d\udda5\ufe0f Unmanaged Switches: Plug-and-play, no configuration needed</li> <li>\ud83d\udcca Managed Switches: Supports VLANs, QoS, and advanced controls</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#advantages_2","title":"\u2705 Advantages","text":"<ul> <li>\u26a1 Network Efficiency: Reduces broadcast traffic</li> <li>\ud83d\udd10 Security: Enhances data isolation</li> <li>\ud83d\udcc8 Scalability: Expands networks efficiently</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#applications_2","title":"\ud83d\udccc Applications","text":"<ul> <li>\ud83c\udfe0 Home Networks</li> <li>\ud83c\udfe2 Enterprise LANs</li> <li>\ud83d\udda5\ufe0f Data Centers</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#42-vlans-virtual-local-area-networks","title":"\ud83c\udfe2 4.2 VLANs (Virtual Local Area Networks)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#overview_3","title":"\ud83d\udcdd Overview","text":"<p>VLANs logically segment networks, improving security and efficiency.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#how-vlans-work","title":"\ud83d\udd0d How VLANs Work","text":"<ul> <li>\ud83d\udccc Segmentation: Devices within a VLAN share the same broadcast domain</li> <li>\ud83c\udff7\ufe0f Tagging: VLAN IDs added to Ethernet frames (IEEE 802.1Q standard)</li> <li>\ud83c\udf10 Inter-VLAN Routing: Enables communication between VLANs using Layer 3 devices</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#advantages_3","title":"\u2705 Advantages","text":"<ul> <li>\ud83d\udd10 Improved Security: Isolates sensitive data traffic</li> <li>\u26a1 Better Performance: Reduces broadcast domains</li> <li>\ud83d\udcca Simplified Network Management: Logical grouping of networks</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#applications_3","title":"\ud83d\udccc Applications","text":"<ul> <li>\ud83c\udfe2 Enterprise Networks</li> <li>\ud83d\udda5\ufe0f Data Centers</li> <li>\ud83c\udf0d Service Provider Networks</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.1-Ethernet%20%26%20Wireless%20Technologies/#summary","title":"\ud83c\udfaf Summary","text":"<ul> <li>\ud83d\udee0\ufe0f Ethernet: Reliable, high-speed communication with structured cabling.</li> <li>\ud83d\udce1 Wi-Fi: Flexible, wireless connectivity with scalability.</li> <li>\ud83d\udd00 Ethernet Switching: Enhances network performance by directing traffic efficiently.</li> <li>\ud83c\udff7\ufe0f VLANs: Improve network security and manageability through segmentation.</li> </ul> <p>\ud83d\ude80 Master these networking essentials to build efficient and secure networks!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/","title":"\ud83d\udce1 Data Link Layer Protocols (Layer 2) - OSI Model","text":"<p>The Data Link Layer (Layer 2) of the OSI model ensures reliable communication between directly connected devices. It plays a crucial role in:</p> <ul> <li>\ud83d\udce6 Framing - Structuring data into frames for transmission</li> <li>\ud83d\udd0d Error Detection - Ensuring data integrity</li> <li>\ud83d\udea6 Flow Control - Regulating data transfer speed</li> <li>\ud83c\udf10 Media Access Management - Controlling access to shared communication channels</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ul> <li>1\ufe0f\u20e3 Point-to-Point Protocol (PPP)</li> <li>2\ufe0f\u20e3 High-Level Data Link Control (HDLC)</li> <li>3\ufe0f\u20e3 Spanning Tree Protocol (STP)</li> <li>\ud83d\udcca Comparison of PPP, HDLC, and STP</li> <li>\u2705 Conclusion</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#1-point-to-point-protocol-ppp","title":"1\ufe0f\u20e3 Point-to-Point Protocol (PPP)","text":"<p>\ud83d\udce1 PPP is a versatile data link protocol used for direct connections between two nodes, supporting multiple network layer protocols like IPv4 and IPv6.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#key-features","title":"\ud83d\udd39 Key Features","text":"<ul> <li>\ud83d\udce6 Encapsulation - Supports multi-protocol transmission over serial links.</li> <li>\ud83d\udd10 Authentication - Uses PAP (Password Authentication Protocol) and CHAP (Challenge Handshake Authentication Protocol).</li> <li>\u2705 Error Detection - Ensures data integrity via CRC (Cyclic Redundancy Check).</li> <li>\ud83d\udd17 Multilink Support - Combines multiple physical links (MLPPP).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#applications","title":"\ud83c\udfaf Applications","text":"<ul> <li>\ud83c\udfe0 Dial-Up Connections - Enables home users to connect to ISPs.</li> <li>\ud83c\udf0d DSL Connections - Used for broadband communication.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#2-high-level-data-link-control-hdlc","title":"2\ufe0f\u20e3 High-Level Data Link Control (HDLC)","text":"<p>\ud83d\udda7 HDLC is a bit-oriented protocol used for synchronous communication in point-to-point and multipoint links.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#key-features_1","title":"\ud83d\udd39 Key Features","text":"<ul> <li>\ud83d\udccf Frame Structure:<ul> <li>Flag Field - Marks frame boundaries.</li> <li>Address Field - Identifies the recipient.</li> <li>Control Field - Manages flow control.</li> <li>Payload - Contains actual data.</li> <li>CRC - Provides error detection.</li> </ul> </li> <li>\ud83d\udd01 Communication Modes:<ul> <li>NRM (Normal Response Mode) - Master-slave communication.</li> <li>ABM (Asynchronous Balanced Mode) - Peer-to-peer communication.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#applications_1","title":"\ud83c\udfaf Applications","text":"<ul> <li>\ud83d\udce1 Leased Lines - Used in dedicated circuit communication.</li> <li>\ud83c\udfed Industrial Systems - Ensures reliable automation communication.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#3-spanning-tree-protocol-stp","title":"3\ufe0f\u20e3 Spanning Tree Protocol (STP)","text":"<p>\ud83d\udd00 STP prevents loops in Ethernet networks while maintaining redundancy for failover. Defined by IEEE 802.1D.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#how-it-works","title":"\ud83d\udd39 How It Works","text":"<ol> <li>\ud83c\udfc6 Bridge ID Election - Switches exchange BPDUs to elect the Root Bridge.</li> <li>\ud83d\udcc9 Path Cost Calculation - Determines the shortest path to the Root Bridge.</li> <li>\ud83d\udd04 Port Roles:<ul> <li>\ud83d\udfe2 Root Port - Shortest path to Root Bridge.</li> <li>\ud83d\udfe1 Designated Port - Forwards traffic.</li> <li>\ud83d\udd34 Blocked Port - Prevents loops.</li> </ul> </li> <li>\ud83d\udd04 Topology Updates - Switches dynamically adapt via BPDUs.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#applications_2","title":"\ud83c\udfaf Applications","text":"<ul> <li>\ud83c\udfe2 Enterprise Networks - Ensures loop-free networking.</li> <li>\ud83c\udfec Data Centers - Provides high-availability configurations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#comparison-of-ppp-hdlc-and-stp","title":"\ud83d\udcca Comparison of PPP, HDLC, and STP","text":"Feature \ud83d\udef0\ufe0f PPP \ud83d\udd17 HDLC \ud83c\udf33 STP Purpose Point-to-point communication Synchronous link communication Loop prevention in Ethernet Error Detection \u2705 CRC \u2705 CRC \ud83d\udd04 Loop handling Encapsulation Multiprotocol Bit-oriented Frames BPDUs Use Case Dial-up, DSL links Leased lines Redundant Ethernet networks"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/7.2-Data%20Link%20Layer%20Protocols/#conclusion","title":"\u2705 Conclusion","text":"<p>\ud83d\ude80 PPP, HDLC, and STP are essential Layer 2 protocols, each addressing distinct networking needs:</p> <ul> <li>PPP &amp; HDLC \u2192 Ensure reliable point-to-point and synchronous data transmission.</li> <li>STP \u2192 Maintains loop-free Ethernet topologies for stable networking.</li> </ul> <p>Together, they enable efficient and robust network communication across diverse scenarios. \ud83c\udf0d\ud83d\udd17</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/","title":"\ud83d\udd10 Network Security Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>\ud83d\udcd6 Introduction</li> <li>\ud83c\udfaf Importance of Network Security</li> <li>\ud83d\udee1\ufe0f Core Concepts of Network Security</li> <li>\u26a0\ufe0f Types of Network Security Threats</li> <li>\ud83d\udee0\ufe0f Common Network Security Technologies</li> <li>\u2705 Network Security Best Practices</li> <li>\ud83c\udf0d Applications of Network Security</li> <li>\ud83d\udea7 Firewalls in Network Security</li> <li>\ud83d\udcca Comparison: Packet Filtering vs. Stateful Inspection Firewalls</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#introduction","title":"\ud83d\udcd6 Introduction","text":"<p>Network security encompasses the practices, technologies, and strategies used to protect data, devices, and infrastructure from cyber threats. It ensures:</p> <p>\u2714\ufe0f Safe communication between systems \u2714\ufe0f Prevention of unauthorized access \u2714\ufe0f Protection against cyber attacks</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#importance-of-network-security","title":"\ud83c\udfaf Importance of Network Security","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#why-it-matters","title":"\ud83d\udd0d Why It Matters?","text":"<ul> <li>\ud83d\uded1 Protects Sensitive Data: Prevents unauthorized access to financial, personal, and corporate data.</li> <li>\ud83d\udd04 Ensures Availability: Keeps networks operational by mitigating DDoS and other attacks.</li> <li>\ud83d\udcb0 Prevents Financial Loss: Reduces risk of breaches, downtime, and reputational damage.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#core-concepts-of-network-security","title":"\ud83d\udee1\ufe0f Core Concepts of Network Security","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#1-confidentiality","title":"\ud83d\udd10 1. Confidentiality","text":"<ul> <li>\ud83d\udd12 Encryption: Converts data using AES, RSA, etc.</li> <li>\ud83d\udc65 Access Controls: Uses passwords, biometrics, and RBAC.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#2-integrity","title":"\ud83d\udd04 2. Integrity","text":"<ul> <li>\ud83e\uddee Hashing: Uses SHA-256 to maintain data authenticity.</li> <li>\u2705 Checksums: Detects transmission errors.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#3-availability","title":"\ud83d\udcf6 3. Availability","text":"<ul> <li>\ud83d\udd04 Redundancy: Implements failover servers.</li> <li>\ud83d\udea8 DDoS Protection: Uses rate limiting and filtering.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#4-authentication","title":"\ud83d\udc64 4. Authentication","text":"<ul> <li>\ud83d\udd11 Multi-Factor Authentication (MFA): Combines passwords, biometrics, and OTPs.</li> <li>\ud83d\udd10 Public Key Infrastructure (PKI): Ensures secure communications.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#5-authorization","title":"\ud83d\udd13 5. Authorization","text":"<ul> <li>\ud83c\udfad Role-Based Access Control (RBAC): Grants permissions based on user roles.</li> <li>\ud83d\udcdc Access Policies: Defines security rules.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#6-accountability","title":"\ud83d\udcdc 6. Accountability","text":"<ul> <li>\ud83d\udcca Audit Logs: Tracks user activities.</li> <li>\ud83d\uded1 Anomaly Detection: Identifies suspicious behavior.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#types-of-network-security-threats","title":"\u26a0\ufe0f Types of Network Security Threats","text":"Threat Type Description Example \ud83e\udda0 Malware Malicious software that disrupts operations. Ransomware, Worms \ud83c\udfa3 Phishing Deceptive attempts to steal credentials. Fake login pages \u26d4 Denial of Service Overloads a server to make it unavailable. DDoS attacks \ud83d\udd75\ufe0f Man-in-the-Middle Intercepts &amp; manipulates communication. Eavesdropping \ud83c\udfe2 Insider Threats Security risks from within an organization. Data leaks"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#common-network-security-technologies","title":"\ud83d\udee0\ufe0f Common Network Security Technologies","text":"<ul> <li>\ud83d\udd25 Firewalls: Filters network traffic based on predefined rules.</li> <li>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Intrusion Detection &amp; Prevention Systems (IDPS): Monitors and blocks threats.</li> <li>\ud83d\udd10 Virtual Private Networks (VPNs): Encrypts remote communication.</li> <li>\ud83d\udee1\ufe0f Encryption: Uses SSL/TLS, IPsec for secure data transmission.</li> <li>\ud83d\udd11 Network Access Control (NAC): Enforces security policies.</li> <li>\ud83d\udcf1 Endpoint Security: Protects individual devices.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#network-security-best-practices","title":"\u2705 Network Security Best Practices","text":"<p>\u2714\ufe0f Regular Updates: Patch vulnerabilities promptly. \u2714\ufe0f Strong Authentication: Implement MFA and password policies. \u2714\ufe0f Network Segmentation: Isolate critical assets. \u2714\ufe0f Data Backup: Ensure recoverability from attacks. \u2714\ufe0f Employee Training: Educate on cybersecurity threats. \u2714\ufe0f Continuous Monitoring: Detect and respond to anomalies.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#applications-of-network-security","title":"\ud83c\udf0d Applications of Network Security","text":"<p>\ud83c\udfe2 Corporate Networks: Protects sensitive business data. \ud83d\udcf6 Public Wi-Fi: Secures connections in open networks. \ud83c\udfdb Government Infrastructure: Safeguards national security. \u2601\ufe0f Cloud Security: Ensures safe access to cloud resources.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#firewalls-in-network-security","title":"\ud83d\udea7 Firewalls in Network Security","text":"<p>Firewalls act as a security barrier, filtering traffic between trusted and untrusted networks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#types-of-firewalls","title":"\ud83d\uded1 Types of Firewalls","text":"<p>1\ufe0f\u20e3 Packet Filtering Firewalls (Layer 3) - \ud83d\udccb Inspects packet headers (IP, port, protocol) - \u2705 Simple, low resource usage - \u274c Limited to static rules</p> <p>2\ufe0f\u20e3 Stateful Inspection Firewalls (Layer 4) - \ud83d\udcdc Tracks active connections - \ud83d\uded1 Blocks unauthorized traffic dynamically - \u274c Higher resource consumption</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#comparison-packet-filtering-vs-stateful-inspection-firewalls","title":"\ud83d\udcca Comparison: Packet Filtering vs. Stateful Inspection Firewalls","text":"Feature Packet Filtering Firewall Stateful Inspection Firewall \ud83d\udd0d Layer of Operation Network (Layer 3) Transport (Layer 4) \ud83c\udfaf Traffic Inspection Static rules Tracks connection states \ud83d\udee1\ufe0f Security Level Basic Advanced \u26a1 Performance High (low overhead) Moderate (higher usage) \ud83c\udfe2 Use Case Small networks Enterprise networks"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.1-Network-Security-Firewalls/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<p>Network security is essential in the modern digital world. By implementing multi-layered security, using advanced firewalls, and fostering cyber awareness, organizations can effectively mitigate threats and protect their data, users, and infrastructure from evolving cyber risks.</p> <p>\ud83d\ude80 Stay Secure, Stay Protected! \ud83d\udd12</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/","title":"\ud83d\udccc Intrusion Detection and Prevention Systems (IDPS)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83d\udd0d Introduction</li> <li>\ud83c\udfaf Purpose of IDPS</li> <li>\ud83d\udee0 Components of IDPS</li> <li>\ud83d\udd75\ufe0f Detection Techniques</li> <li>\ud83d\udccc IDPS Deployment Strategies</li> <li>\u2705 IDPS Best Practices</li> <li>\ud83c\udf0d Applications of IDPS</li> <li>\u2696\ufe0f Comparison: IDS vs. IPS</li> <li>\ud83d\udd10 Virtual Private Networks (VPNs)</li> <li>\ud83d\udd11 Public Key Infrastructure (PKI)</li> <li>\u2696\ufe0f Comparison: VPNs vs. PKI</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#introduction","title":"\ud83d\udd0d Introduction","text":"<p>Intrusion Detection and Prevention Systems (IDPS) are essential tools for network security. These systems: - Detect, analyze, and mitigate cyber threats. - Monitor traffic for malicious activities. - Strengthen overall security posture.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#purpose-of-idps","title":"\ud83c\udfaf Purpose of IDPS","text":"<ul> <li>\ud83d\udd0e Threat Detection: Identifies suspicious activities and security breaches.</li> <li>\ud83d\udeab Threat Prevention: Blocks malicious traffic in real-time.</li> <li>\ud83d\udcca Enhanced Visibility: Provides insights into network behavior and vulnerabilities.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#components-of-idps","title":"\ud83d\udee0 Components of IDPS","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#intrusion-detection-system-ids","title":"\ud83d\udce1 Intrusion Detection System (IDS)","text":"<ul> <li>\ud83d\uded1 Passive Monitoring: Observes and alerts without taking action.</li> <li>\ud83d\udccd Types:<ul> <li>\ud83c\udf10 Network-Based IDS (NIDS): Monitors entire network traffic.</li> <li>\ud83d\udcbb Host-Based IDS (HIDS): Runs on individual devices, monitoring system changes.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#intrusion-prevention-system-ips","title":"\ud83d\udd25 Intrusion Prevention System (IPS)","text":"<ul> <li>\ud83d\ude80 Active Protection: Detects and prevents threats in real-time.</li> <li>\ud83d\udd27 Capabilities:<ul> <li>\ud83d\uded1 Real-Time Blocking: Stops malicious packets.</li> <li>\ud83d\udd17 Connection Termination: Ends harmful sessions.</li> <li>\ud83d\udce2 Threat Reporting: Generates alerts and logs.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#detection-techniques","title":"\ud83d\udd75\ufe0f Detection Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#signature-based-detection","title":"\ud83d\udcdc Signature-Based Detection","text":"<p>\u2714 Accurate for known threats \u2705 | \u274c Requires frequent updates \u274c</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#anomaly-based-detection","title":"\ud83d\udcca Anomaly-Based Detection","text":"<p>\u2714 Effective against new threats \u2705 | \u274c Higher false positives \u274c</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#hybrid-detection","title":"\u26a1 Hybrid Detection","text":"<p>\u2714 Combines both methods for better accuracy \u2705</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#idps-deployment-strategies","title":"\ud83d\udccc IDPS Deployment Strategies","text":"Strategy Description Use Case \ud83d\udd17 Inline Mode (IPS) Monitors &amp; blocks threats in real-time Preventing malware propagation \ud83d\udc40 Passive Mode (IDS) Observes and generates alerts Policy enforcement &amp; monitoring \ud83c\udf10 Distributed Deployment Multiple sensors across network Large-scale monitoring"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#idps-best-practices","title":"\u2705 IDPS Best Practices","text":"<ul> <li>\ud83d\udd04 Regular Updates: Keep signatures and algorithms up to date.</li> <li>\ud83d\udcc8 Baseline Analysis: Define normal traffic for anomaly detection.</li> <li>\ud83d\udd17 Security Tool Integration: Combine IDPS with firewalls and SIEM.</li> <li>\ud83d\udea8 Incident Response Planning: Develop and test response plans.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#applications-of-idps","title":"\ud83c\udf0d Applications of IDPS","text":"<ul> <li>\ud83c\udfe2 Corporate Networks: Protects against external/internal threats.</li> <li>\u2601\ufe0f Cloud Environments: Monitors cloud-based infrastructures.</li> <li>\ud83d\udce1 IoT Networks: Secures connected devices.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#comparison-ids-vs-ips","title":"\u2696\ufe0f Comparison: IDS vs. IPS","text":"Feature IDS IPS \ud83d\udee0 Function Detects &amp; alerts Detects &amp; prevents \u2699 Deployment Passive Inline \u23f3 Impact No latency May introduce latency \ud83c\udfe2 Use Case Policy monitoring Threat mitigation"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#virtual-private-networks-vpns","title":"\ud83d\udd10 Virtual Private Networks (VPNs)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#key-features","title":"\ud83d\udd11 Key Features","text":"<ul> <li>\ud83d\udd12 Encryption: Protects data using IPSec, SSL/TLS.</li> <li>\ud83d\udd11 Authentication: Ensures secure access via MFA, certificates.</li> <li>\ud83d\udee0 Tunneling: Encapsulates data for secure transmission.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#how-vpns-work","title":"\u2699 How VPNs Work","text":"<p>1\ufe0f\u20e3 User connects to a VPN client. 2\ufe0f\u20e3 Secure tunnel is established. 3\ufe0f\u20e3 Data transmission is encrypted. 4\ufe0f\u20e3 VPN server forwards the traffic securely.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#types-of-vpns","title":"\ud83d\udd0d Types of VPNs","text":"Type Description Use Case \ud83c\udf0d Remote Access VPN Secure access for individuals Employees working remotely \ud83c\udfe2 Site-to-Site VPN Connects multiple networks Branch office connectivity \ud83c\udf10 SSL/TLS VPN Browser-based secure access Web application security \ud83d\udd11 IPSec VPN Encrypts IP traffic Secure corporate communications"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#advantages","title":"\u2705 Advantages","text":"<p>\u2714 Data Privacy | \u2714 Remote Access | \u2714 Anonymity</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#disadvantages","title":"\u274c Disadvantages","text":"<p>\u274c Performance Overhead | \u274c Provider Dependency | \u274c Misconfigurations</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#public-key-infrastructure-pki","title":"\ud83d\udd11 Public Key Infrastructure (PKI)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#key-components","title":"\ud83d\udd0d Key Components","text":"<ul> <li>\ud83c\udfdb Certificate Authority (CA): Issues &amp; revokes certificates.</li> <li>\ud83d\udcdc Registration Authority (RA): Verifies identities.</li> <li>\ud83d\udd10 Public &amp; Private Keys: Enable encryption &amp; authentication.</li> <li>\ud83d\udcc4 Digital Certificates: Bind public keys to identities.</li> <li>\ud83d\udeab Certificate Revocation List (CRL): Tracks revoked certificates.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#how-pki-works","title":"\ud83d\udee0 How PKI Works","text":"<p>1\ufe0f\u20e3 User requests a digital certificate. 2\ufe0f\u20e3 RA verifies identity &amp; forwards to CA. 3\ufe0f\u20e3 CA issues certificate. 4\ufe0f\u20e3 Public-private key pairs secure communication.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#applications-of-pki","title":"\ud83c\udf0d Applications of PKI","text":"Application Description Example \ud83d\udce9 Secure Email Encrypts &amp; signs emails PGP, S/MIME \ud83d\udd12 Website Security Enables HTTPS Banking &amp; e-commerce \u270d Digital Signatures Verifies authenticity Legal contracts \ud83d\ude80 Secure Access Enhances authentication VPN &amp; system login"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#advantages_1","title":"\u2705 Advantages","text":"<p>\u2714 Secure Communication | \u2714 Identity Verification | \u2714 Scalability</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#disadvantages_1","title":"\u274c Disadvantages","text":"<p>\u274c Complexity | \u274c Trust Dependency | \u274c Vulnerability to CA attacks</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#comparison-vpns-vs-pki","title":"\u2696\ufe0f Comparison: VPNs vs. PKI","text":"Feature VPNs PKI \ud83d\udee0 Purpose Secure communication Authentication &amp; encryption \ud83d\udccd Use Case Remote access, secure browsing Digital signatures, authentication \ud83d\udd17 Technology Tunneling, encryption protocols Digital certificates, cryptographic keys \ud83c\udf0d Scope End-to-end encryption Broad authentication &amp; trust"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.2-IDPS-VPN/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<ul> <li>IDPS is essential for modern cybersecurity \ud83d\udee1</li> <li>VPNs secure communication, while PKI provides authentication &amp; encryption \ud83d\udd12</li> <li>Organizations should implement both based on their security needs \ud83d\udd11\u2705</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/","title":"\ud83d\udd10 Cryptography &amp; Secure Communication","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#table-of-contents","title":"\ud83d\udcdc Table of Contents","text":"<ul> <li>Introduction to Cryptography</li> <li>Types of Cryptographic Encryption<ul> <li>\ud83d\udd11 Symmetric Encryption</li> <li>\ud83d\udd10 Asymmetric Encryption</li> </ul> </li> <li>\u2696\ufe0f Comparison: Symmetric vs Asymmetric Encryption</li> <li>\ud83d\udd04 Hybrid Encryption</li> <li>\ud83d\udca1 Applications of Cryptography</li> <li>\ud83c\udf0d Introduction to TLS and SSL</li> <li>\ud83d\udd11 Key Features of TLS/SSL</li> <li>\u2699\ufe0f How TLS/SSL Works</li> <li>\ud83d\udcdc Versions of TLS and SSL</li> <li>\u2696\ufe0f Comparison: TLS vs SSL</li> <li>\ud83d\udd12 Applications of TLS/SSL</li> <li>\u2705 Best Practices for Using TLS/SSL</li> <li>\ud83c\udfc1 Conclusion</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#introduction-to-cryptography","title":"\ud83d\udd10 Introduction to Cryptography","text":"<p>Cryptography is the science of securing communication against adversaries by transforming data into an unreadable format to ensure privacy, integrity, and authentication.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#core-objectives","title":"\ud83c\udfaf Core Objectives:","text":"<ul> <li>Confidentiality \ud83d\udd0f: Prevents unauthorized access using encryption.</li> <li>Integrity \u2705: Ensures data is unchanged via hashing/MAC.</li> <li>Authentication \ud83d\udc64: Verifies identities using digital signatures.</li> <li>Non-Repudiation \ud83d\udcdd: Prevents denial of actions with digital proof.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#symmetric-encryption","title":"\ud83d\udd11 Symmetric Encryption","text":"<p>Uses the same key for both encryption &amp; decryption</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#how-it-works","title":"\ud83d\udd39 How It Works:","text":"<ol> <li>Sender encrypts plaintext using a secret key.</li> <li>Ciphertext is sent to the receiver.</li> <li>Receiver decrypts using the same key.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#popular-algorithms","title":"\ud83d\udd25 Popular Algorithms:","text":"<ul> <li>AES (Advanced Encryption Standard) \ud83d\udd25</li> <li>3DES (Triple DES)</li> <li>Blowfish &amp; RC4</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#advantages","title":"\u2705 Advantages:","text":"<p>\u2714\ufe0f Fast &amp; efficient \ud83d\ude80 \u2714\ufe0f Simpler implementation \u2705</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#disadvantages","title":"\u274c Disadvantages:","text":"<p>\u274c Key Distribution Problem \ud83d\udd11 \u274c Complex Key Management \u26a0\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#applications","title":"\ud83d\udca1 Applications:","text":"<ul> <li>Encrypting files &amp; databases \ud83d\udcc2</li> <li>VPNs &amp; Wireless Security \ud83d\udd17</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#asymmetric-encryption","title":"\ud83d\udd10 Asymmetric Encryption","text":"<p>Uses a public key for encryption &amp; a private key for decryption</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#how-it-works_1","title":"\ud83d\udd39 How It Works:","text":"<ol> <li>Sender encrypts plaintext using the recipient\u2019s public key.</li> <li>Ciphertext is transmitted.</li> <li>Recipient decrypts using their private key.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#popular-algorithms_1","title":"\ud83d\udd25 Popular Algorithms:","text":"<ul> <li>RSA (Rivest-Shamir-Adleman) \ud83d\udd10</li> <li>ECC (Elliptic Curve Cryptography) \ud83d\udcc8</li> <li>DSA (Digital Signature Algorithm) \ud83d\udd8a\ufe0f</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#advantages_1","title":"\u2705 Advantages:","text":"<p>\u2714\ufe0f Secure key exchange \ud83d\udd04 \u2714\ufe0f Enables digital signatures \u2705</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#disadvantages_1","title":"\u274c Disadvantages:","text":"<p>\u274c Slower than symmetric encryption \u23f3 \u274c Higher computational cost \u26a0\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#applications_1","title":"\ud83d\udca1 Applications:","text":"<ul> <li>Secure Email \ud83d\udce7</li> <li>SSL/TLS Encryption \ud83c\udf0d</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#comparison-symmetric-vs-asymmetric-encryption","title":"\u2696\ufe0f Comparison: Symmetric vs Asymmetric Encryption","text":"Feature Symmetric Encryption Asymmetric Encryption Key Usage Same key for encryption &amp; decryption Public key for encryption, private key for decryption Speed Faster \ud83d\ude80 Slower \u23f3 Security Requires key exchange \ud83d\udd11 Eliminates secure key exchange risk \u2705 Use Cases Data storage, VPNs Digital signatures, SSL/TLS"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#hybrid-encryption","title":"\ud83d\udd04 Hybrid Encryption","text":"<p>Combines symmetric &amp; asymmetric encryption for efficiency &amp; security</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#benefits","title":"\ud83c\udfaf Benefits:","text":"<ul> <li>Efficient \ud83d\ude80: Uses symmetric encryption for data.</li> <li>Secure \ud83d\udd12: Uses asymmetric encryption for key exchange.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#examples","title":"\ud83d\udd25 Examples:","text":"<ul> <li>TLS (Transport Layer Security) \ud83d\udd17</li> <li>PGP (Pretty Good Privacy) \ud83d\udee1\ufe0f</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#applications-of-cryptography","title":"\ud83d\udca1 Applications of Cryptography","text":"<p>\u2714\ufe0f Data Security \ud83d\udd0f \u2714\ufe0f Authentication \ud83d\udc64 \u2714\ufe0f Digital Signatures \ud83d\udd8a\ufe0f \u2714\ufe0f Secure Communications (VPNs, HTTPS, Encrypted Messaging) \ud83d\udd12</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#introduction-to-tls-and-ssl","title":"\ud83c\udf0d Introduction to TLS and SSL","text":"<p>TLS (Transport Layer Security) &amp; SSL (Secure Sockets Layer) are cryptographic protocols securing network communication.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#objectives","title":"\ud83c\udfaf Objectives:","text":"<ul> <li>Confidentiality \ud83d\udd0f: Encrypts data in transit.</li> <li>Integrity \u2705: Ensures data is unaltered.</li> <li>Authentication \ud83d\udc64: Uses certificates for identity verification.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#key-features-of-tlsssl","title":"\ud83d\udd11 Key Features of TLS/SSL","text":"<p>\u2714\ufe0f Encryption \ud83d\udd12: Prevents eavesdropping. \u2714\ufe0f Authentication \ud83d\udd11: Uses digital certificates. \u2714\ufe0f Integrity \u2705: Detects tampering via hashing (SHA-256, SHA-3).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#how-tlsssl-works","title":"\u2699\ufe0f How TLS/SSL Works","text":"<ol> <li>Handshake \ud83e\udd1d: Negotiates cryptographic parameters.</li> <li>Authentication \ud83d\udd8a\ufe0f: Verifies server (optional client verification).</li> <li>Key Exchange \ud83d\udd11: Establishes a session key.</li> <li>Data Encryption \ud83d\udd12: Uses symmetric encryption for data transfer.</li> <li>Termination \ud83d\udeaa: Discards session keys.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#versions-of-tls-and-ssl","title":"\ud83d\udcdc Versions of TLS and SSL","text":"Protocol Description Status SSL 2.0 &amp; 3.0 Early versions, vulnerable. \u274c Deprecated TLS 1.0 &amp; 1.1 Improved security but outdated. \u274c Deprecated TLS 1.2 Strong encryption, widely used. \u2705 Active TLS 1.3 Enhanced security &amp; performance. \u2705 Current Standard"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#comparison-tls-vs-ssl","title":"\u2696\ufe0f Comparison: TLS vs SSL","text":"Feature SSL TLS Security Weak \ud83d\udd34 Stronger \ud83d\udd35 Performance Slower \ud83d\udc22 Faster \ud83d\ude80 Cipher Suites Legacy, insecure Modern, robust Usage Legacy systems Web security, HTTPS"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#applications-of-tlsssl","title":"\ud83d\udd12 Applications of TLS/SSL","text":"<p>\u2714\ufe0f Web Security (HTTPS) \ud83c\udf0d \u2714\ufe0f Email Security \ud83d\udce7 \u2714\ufe0f VPNs \ud83d\udd17 \u2714\ufe0f Online Transactions \ud83d\udcb3</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#best-practices-for-using-tlsssl","title":"\u2705 Best Practices for Using TLS/SSL","text":"<p>\u2714\ufe0f Use TLS 1.3 \ud83d\udd25 \u2714\ufe0f Employ 2048-bit RSA or ECC keys \ud83d\udd11 \u2714\ufe0f Update server software regularly \ud83d\udcc5 \u2714\ufe0f Disable outdated protocols (SSL 2.0, SSL 3.0) \ud83d\udeab \u2714\ufe0f Implement HSTS (HTTP Strict Transport Security) \ud83d\udce1</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.3-Cryptography%20%26%20Secure%20Communication/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<p>Cryptography, TLS, and SSL play a crucial role in securing digital communication. By understanding and implementing strong encryption practices, organizations can enhance security, protect sensitive data, and ensure trust in online transactions. \ud83d\udd10\ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/","title":"\ud83d\udce1 Network Layer &amp; Security Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83c\udf0d Network Layer Functions<ul> <li>\ud83d\udee0 Logical Addressing</li> <li>\ud83d\udea6 Routing</li> <li>\ud83d\udce6 Packet Forwarding</li> <li>\ud83d\udd17 Fragmentation &amp; Reassembly</li> <li>\u26a0\ufe0f Error Handling</li> </ul> </li> <li>\ud83d\uded1 Key Network Layer Protocols</li> <li>\ud83d\udee1\ufe0f Application Layer Firewalls<ul> <li>\ud83d\udd0d Features</li> <li>\u2699\ufe0f How They Work</li> <li>\u2705 Advantages &amp; \u274c Disadvantages</li> </ul> </li> <li>\u2696\ufe0f Comparison: Network vs Application Layer Firewalls</li> <li>\ud83c\udfe2 Applications of Application Layer Firewalls</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#network-layer-functions","title":"\ud83c\udf0d Network Layer Functions","text":"<p>The Network Layer (Layer 3) is responsible for packet delivery, routing, and logical addressing between devices across networks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#logical-addressing","title":"\ud83d\udee0 Logical Addressing","text":"<ul> <li>Utilizes IP addresses for unique device identification.</li> <li>IPv4 &amp; IPv6: IPv6 resolves IPv4's address space limitations.</li> <li>Hierarchical structure allows efficient routing &amp; network management.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#routing","title":"\ud83d\udea6 Routing","text":"<ul> <li>Determines the optimal path for data packets.</li> <li>Uses dynamic routing protocols:<ul> <li>OSPF (Open Shortest Path First)</li> <li>BGP (Border Gateway Protocol)</li> <li>RIP (Routing Information Protocol)</li> </ul> </li> <li>Routers analyze headers &amp; forward data accordingly.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#packet-forwarding","title":"\ud83d\udce6 Packet Forwarding","text":"<ul> <li>Ensures low latency by transmitting packets efficiently.</li> <li>Uses destination IP &amp; routing tables for next-hop decisions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#fragmentation-reassembly","title":"\ud83d\udd17 Fragmentation &amp; Reassembly","text":"<ul> <li>Splits large packets when MTU (Maximum Transmission Unit) is exceeded.</li> <li>Ensures data integrity by reassembling fragments at the destination.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#error-handling","title":"\u26a0\ufe0f Error Handling","text":"<ul> <li>Detects packet loss, duplication, and corruption.</li> <li>ICMP (Internet Control Message Protocol) reports errors (e.g., unreachable hosts, congestion).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#key-network-layer-protocols","title":"\ud83d\uded1 Key Network Layer Protocols","text":"Protocol Description Use Case IP (IPv4/IPv6) Primary protocol for end-to-end data communication. Internet &amp; network connectivity. ICMP Used for network diagnostics &amp; error reporting. Tools like <code>ping</code> &amp; <code>traceroute</code>. ARP Resolves IP to MAC addresses in local networks. Essential for LAN communication. NAT Translates private to public IP addresses. Enables multiple devices to access the internet. GRE Encapsulates packets for VPN tunnels. Used for secure remote communication."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#application-layer-firewalls","title":"\ud83d\udee1\ufe0f Application Layer Firewalls","text":"<p>Application Layer Firewalls (Layer 7) enhance security by inspecting traffic beyond headers.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#features","title":"\ud83d\udd0d Features","text":"<ul> <li>\ud83e\uddd0 Deep Packet Inspection (DPI): Analyzes full packet contents.</li> <li>\ud83d\udce1 Protocol Awareness: Understands HTTP, FTP, SMTP, DNS for better filtering.</li> <li>\ud83d\udd11 Authentication: Verifies users &amp; applications before granting access.</li> <li>\ud83d\udcdc Content Filtering: Blocks malicious/inappropriate data.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#how-they-work","title":"\u2699\ufe0f How They Work","text":"<ul> <li>Inspects packet headers, payloads, and metadata.</li> <li>Enforces security rules to restrict malicious traffic.</li> <li>Generates alerts for potential security breaches.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#advantages-disadvantages","title":"\u2705 Advantages &amp; \u274c Disadvantages","text":"<p>\u2705 Advantages - Provides detailed control &amp; visibility. - Detects sophisticated attacks like SQL injection, XSS, ransomware. - Enhances overall network security.</p> <p>\u274c Disadvantages - High resource consumption due to deep inspection. - May introduce latency in network performance.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#comparison-network-vs-application-layer-firewalls","title":"\u2696\ufe0f Comparison: Network vs Application Layer Firewalls","text":"Feature Network Layer Firewall Application Layer Firewall Layer of Operation Layer 3 (Network Layer) Layer 7 (Application Layer) Inspection Depth Headers only Headers + Payload Protocol Awareness Limited to IP-based filtering Filters based on application protocols Security Basic filtering (IP-based) Advanced detection (malware, SQLi, XSS) Performance Fast (minimal processing) Slower (deep analysis)"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#applications-of-application-layer-firewalls","title":"\ud83c\udfe2 Applications of Application Layer Firewalls","text":"<ul> <li>\ud83c\udfe2 Enterprise Networks: Protects sensitive data &amp; ensures compliance.</li> <li>\u2601\ufe0f Cloud Environments: Secures cloud-hosted applications &amp; APIs.</li> <li>\ud83d\udecd\ufe0f E-Commerce: Safeguards transactions &amp; payment gateways.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/8.4-Network%20Layer%20%26%20Security/#summary","title":"\ud83d\ude80 Summary","text":"<p>The Network Layer enables efficient packet delivery across networks, while Application Layer Firewalls provide robust security against application-specific threats. Together, they ensure a secure &amp; reliable networking environment. \ud83d\udd10\ud83c\udf0e</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/","title":"\ud83d\ude80 Traffic Management: Optimizing Network Performance","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83d\udd39 Introduction</li> <li>\ud83c\udfaf Purpose</li> <li>\u2699\ufe0f Key Traffic Management Techniques<ul> <li>\ud83d\udcca Bandwidth Management</li> <li>\u2696\ufe0f Load Balancing</li> <li>\ud83d\udea6 Congestion Control</li> <li>\ud83d\udce1 Quality of Service (QoS)</li> <li>\ud83d\udee0\ufe0f Traffic Monitoring and Analysis</li> </ul> </li> <li>\ud83c\udfaf Benefits of Traffic Management</li> <li>\u26a0\ufe0f Challenges in Traffic Management</li> <li>\ud83c\udfdb\ufe0f Applications of Traffic Management</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#introduction","title":"\ud83d\udd39 Introduction","text":"<p>Traffic management refers to the processes, tools, and techniques used to optimize, control, and monitor data flow across a network. It ensures efficient, reliable, and secure communication, especially as traffic volumes increase with application and service usage.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>\u2714\ufe0f Maximize Network Efficiency: Prevent congestion, optimize bandwidth, and ensure minimal packet loss. \u2714\ufe0f Improve Quality of Service (QoS): Prioritize critical applications (VoIP, video conferencing, financial transactions) for smooth performance. \u2714\ufe0f Ensure Fair Resource Allocation: Distribute bandwidth equitably among users and applications to prevent monopolization.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#key-traffic-management-techniques","title":"\u2699\ufe0f Key Traffic Management Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#bandwidth-management","title":"\ud83d\udcca Bandwidth Management","text":"<p>Ensures effective resource allocation so critical applications operate smoothly.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#methods","title":"\ud83d\udd39 Methods:","text":"<ul> <li>Traffic Shaping: Regulates non-critical traffic to maintain bandwidth for essential services.</li> <li>Rate Limiting: Imposes data transfer limits to prevent overconsumption.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#applications","title":"\ud83d\udd39 Applications:","text":"<ul> <li>Corporate networks prioritizing business applications.</li> <li>ISPs managing fair bandwidth distribution among users.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#load-balancing","title":"\u2696\ufe0f Load Balancing","text":"<p>Distributes network traffic across multiple servers to enhance reliability and performance.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#how-it-works","title":"\ud83d\udd39 How It Works:","text":"<ul> <li>Uses algorithms like Round Robin, Least Connections, and IP Hashing for fair distribution.</li> <li>Ensures redundancy and failover in case of server failure.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#advantages","title":"\ud83d\udd39 Advantages:","text":"<p>\u2705 Reduces server bottlenecks and response times. \u2705 Increases system reliability and scalability.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#applications_1","title":"\ud83d\udd39 Applications:","text":"<ul> <li>Web hosting services ensuring uninterrupted access.</li> <li>Data centers handling large-scale web traffic.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#congestion-control","title":"\ud83d\udea6 Congestion Control","text":"<p>Prevents network overload by managing traffic during high data loads.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#techniques","title":"\ud83d\udd39 Techniques:","text":"<ul> <li>Traffic Prioritization: Assigns higher priority to latency-sensitive applications.</li> <li>Buffering: Temporarily stores excess packets to smooth out traffic bursts.</li> <li>Window Adjustment: Dynamically modifies TCP congestion window size.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#applications_2","title":"\ud83d\udd39 Applications:","text":"<ul> <li>Real-time services (gaming, VoIP) needing low latency.</li> <li>Streaming platforms requiring uninterrupted data delivery.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#quality-of-service-qos","title":"\ud83d\udce1 Quality of Service (QoS)","text":"<p>Guarantees performance levels for critical applications using prioritization and scheduling.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#key-features","title":"\ud83d\udd39 Key Features:","text":"<ul> <li>Classification: Categorizes traffic into priority levels (voice, video, best-effort).</li> <li>Policing: Enforces bandwidth limits and drops excessive traffic.</li> <li>Scheduling: Uses algorithms like Weighted Fair Queuing (WFQ) to balance traffic.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#applications_3","title":"\ud83d\udd39 Applications:","text":"<ul> <li>Enterprise networks prioritizing VoIP and video calls.</li> <li>ISPs ensuring premium service levels for high-priority customers.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#traffic-monitoring-and-analysis","title":"\ud83d\udee0\ufe0f Traffic Monitoring and Analysis","text":"<p>Provides insights into network performance, security threats, and usage patterns.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#examples","title":"\ud83d\udd39 Examples:","text":"<ul> <li>NetFlow: Analyzes IP traffic to detect anomalies.</li> <li>SNMP: Monitors device performance and bandwidth usage.</li> <li>Deep Packet Inspection (DPI): Inspects packet contents for security threats.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#applications_4","title":"\ud83d\udd39 Applications:","text":"<ul> <li>Identifying and mitigating DDoS attacks.</li> <li>Detecting network bottlenecks and optimizing traffic flow.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#benefits-of-traffic-management","title":"\ud83c\udfaf Benefits of Traffic Management","text":"<p>\u2714\ufe0f Enhanced Network Performance: Reduces latency and packet loss. \u2714\ufe0f Improved User Experience: Ensures seamless VoIP, video conferencing, and gaming. \u2714\ufe0f Better Resource Utilization: Minimizes costs by optimizing bandwidth usage. \u2714\ufe0f Increased Security: Detects malicious traffic patterns through advanced monitoring.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#challenges-in-traffic-management","title":"\u26a0\ufe0f Challenges in Traffic Management","text":"<p>\u26a1 Dynamic Network Demands: Traffic patterns can be unpredictable. \ud83d\udcc8 Scalability: Managing traffic across large, global networks is complex. \ud83d\udee0\ufe0f Technical Complexity: Requires expertise in advanced techniques like QoS and DPI. \ud83d\udd0f Privacy Concerns: DPI-based monitoring may raise ethical issues.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#applications-of-traffic-management","title":"\ud83c\udfdb\ufe0f Applications of Traffic Management","text":"<p>\ud83c\udfe2 Enterprise Networks: Ensures smooth operation of business applications. \u2601\ufe0f Cloud Services: Distributes requests efficiently to cloud data centers. \ud83c\udf10 ISPs: Allocates bandwidth fairly among users. \ud83c\udfd9\ufe0f Smart Cities: Supports IoT traffic, emergency systems, and urban planning.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.1-Traffic%20Management/#conclusion","title":"\ud83d\udd39 Conclusion","text":"<p>Traffic management techniques such as bandwidth management, load balancing, QoS, and monitoring are essential for network reliability, security, and efficiency. Organizations leverage these methods to optimize resource usage, enhance user experience, and tackle growing network demands.</p> <p>\ud83c\udf1f Optimized networks lead to seamless digital experiences! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/","title":"\ud83d\udccc Network Performance Metrics &amp; Troubleshooting","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83d\udcdc Introduction</li> <li>\ud83d\udcca Key Network Performance Metrics</li> <li>\ud83d\udee0 Tools for Measuring Network Performance</li> <li>\ud83d\ude80 Importance of Network Performance Metrics</li> <li>\u26a0\ufe0f Challenges in Measuring Network Performance</li> <li>\ud83c\udf0d Applications of Network Performance Metrics</li> <li>\ud83d\udd0d Common Network Issues</li> <li>\ud83d\udd27 Network Troubleshooting Techniques</li> <li>\ud83d\udcdd Best Practices in Network Troubleshooting</li> <li>\ud83c\udfc1 Conclusion</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#introduction","title":"\ud83d\udcdc Introduction","text":"<p>Network performance metrics provide essential insights into network efficiency, reliability, and quality. These metrics help identify bottlenecks, optimize performance, and ensure compliance with Service Level Agreements (SLAs).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#key-network-performance-metrics","title":"\ud83d\udcca Key Network Performance Metrics","text":"<ul> <li>\ud83d\ude80 Bandwidth: Maximum data transfer rate (bps).<ul> <li>\ud83d\udccc Higher bandwidth = faster data transfer.</li> <li>\ud83d\udccc Essential for HD streaming, backups, and large file transfers.</li> </ul> </li> <li>\u23f3 Latency: Time taken for a data packet to reach its destination (ms).<ul> <li>\ud83d\udd39 Affects VoIP, gaming, and financial transactions.</li> <li>\ud83d\udd39 Components: Propagation, Transmission, Processing, Queuing delays.</li> </ul> </li> <li>\ud83d\udcc8 Throughput: Actual amount of data transmitted successfully.<ul> <li>\ud83d\udd39 Impacted by congestion, packet loss, and protocol overhead.</li> </ul> </li> <li>\u274c Packet Loss: Percentage of lost data packets.<ul> <li>\ud83d\udd39 Caused by congestion, faulty hardware, or poor signal quality.</li> </ul> </li> <li>\u26a1 Jitter: Variation in time intervals between packet arrivals.<ul> <li>\ud83d\udd39 Affects VoIP, video streaming, and real-time applications.</li> </ul> </li> <li>\ud83d\uded1 Error Rate: Proportion of corrupted packets.<ul> <li>\ud83d\udd39 Indicates hardware faults, interference, or medium degradation.</li> </ul> </li> <li>\u23f1 Availability: Uptime percentage (e.g., 99.99%).<ul> <li>\ud83d\udd39 Critical for banking, healthcare, and e-commerce.</li> </ul> </li> <li>\ud83d\udd04 Round-Trip Time (RTT): Time taken for data to travel to and from a destination.<ul> <li>\ud83d\udd39 Affects interactive applications like video calls and cloud services.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#tools-for-measuring-network-performance","title":"\ud83d\udee0 Tools for Measuring Network Performance","text":"Tool Purpose Example Metric \ud83d\udce1 Ping Measures RTT &amp; packet loss Latency, Packet Loss \ud83d\udee4 Traceroute Tracks packet paths and hop delays Latency, Routing Paths \ud83d\udcf6 iPerf Tests bandwidth and throughput Bandwidth, Jitter \ud83d\udcca NetFlow Monitors network traffic patterns Throughput, Packet Loss \ud83d\udce1 SNMP Collects network device performance data Error Rate, Availability"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#importance-of-network-performance-metrics","title":"\ud83d\ude80 Importance of Network Performance Metrics","text":"<ul> <li>\ud83d\udd75\ufe0f Identifies bottlenecks and inefficiencies.</li> <li>\ud83d\udcdc Ensures SLA compliance.</li> <li>\ud83d\udd04 Optimizes bandwidth and resource allocation.</li> <li>\ud83d\udc68\u200d\ud83d\udcbb Enhances user experience for real-time applications.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#challenges-in-measuring-network-performance","title":"\u26a0\ufe0f Challenges in Measuring Network Performance","text":"<ul> <li>\ud83c\udf10 Dynamic network conditions: Traffic fluctuations impact measurements.</li> <li>\ud83c\udfd7 Complex architectures: Multi-device networks require advanced monitoring.</li> <li>\ud83d\udcca Data overload: Large datasets make decision-making difficult.</li> <li>\ud83d\udd10 Security concerns: Ensuring sensitive data remains protected during analysis.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#applications-of-network-performance-metrics","title":"\ud83c\udf0d Applications of Network Performance Metrics","text":"<ul> <li>\ud83c\udfe2 Enterprise Networks: Ensures smooth inter-branch communication.</li> <li>\ud83d\udce1 Service Providers: Monitors bandwidth, SLAs, and user experience.</li> <li>\u2601\ufe0f Cloud Environments: Supports high-performance virtual applications.</li> <li>\ud83d\udcf6 IoT Networks: Maintains connectivity in smart cities and industries.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#common-network-issues","title":"\ud83d\udd0d Common Network Issues","text":"Issue Description Example \ud83d\udeab Connectivity Devices cannot access the network. Faulty cables, inactive ports \u23f3 High Latency Slow data transmission. Lag in VoIP calls, slow loading \u274c Packet Loss Data packets fail to reach their destination. Choppy VoIP calls \ud83d\uded1 Bandwidth Bottlenecks Insufficient bandwidth to meet traffic demand. Slow file transfers \u26a0\ufe0f IP Conflicts Multiple devices assigned the same IP. Network access failures \ud83c\udf0d DNS Failures Domain names fail to resolve. Inability to load websites"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#network-troubleshooting-techniques","title":"\ud83d\udd27 Network Troubleshooting Techniques","text":"<ul> <li>\ud83d\udd0d Basic Connectivity Checks:<ul> <li>Ping: Tests reachability (e.g., <code>ping 8.8.8.8</code>).</li> <li>Traceroute: Tracks packet paths (e.g., <code>tracert google.com</code>).</li> </ul> </li> <li>\ud83d\udd0c Verify Physical Connections:<ul> <li>Inspect cables, ports, and hardware.</li> </ul> </li> <li>\ud83d\udcdc Analyze Network Configuration:<ul> <li>IP Addressing: Check with <code>ipconfig</code> or <code>ifconfig</code>.</li> <li>DNS Resolution: Test with <code>nslookup google.com</code>.</li> </ul> </li> <li>\ud83d\udce1 Monitor Network Traffic:<ul> <li>Wireshark: Captures and analyzes packets.</li> <li>NetFlow: Monitors bandwidth usage.</li> </ul> </li> <li>\ud83d\udcd1 Check Routing Issues:<ul> <li>Verify routes (<code>route print</code> or <code>netstat -rn</code>).</li> </ul> </li> <li>\ud83d\udcc4 Inspect Device Logs:<ul> <li>Use Syslog, Splunk, or ELK Stack for error tracking.</li> </ul> </li> <li>\ud83d\udd04 Restart Devices:<ul> <li>Resolves temporary glitches.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#best-practices-in-network-troubleshooting","title":"\ud83d\udcdd Best Practices in Network Troubleshooting","text":"<ul> <li>\ud83d\udcdd Document everything: Maintain detailed records.</li> <li>\ud83e\udd16 Use automation: Deploy monitoring tools.</li> <li>\ud83d\udc68\u200d\ud83d\udcbb Train staff: Ensure expertise in diagnostic tools.</li> <li>\ud83d\udd0d Segment networks: Simplifies troubleshooting.</li> <li>\ud83d\udd04 Stay updated: Regularly update firmware and configurations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.2-Network%20Performance/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<p>Effective monitoring and troubleshooting of network performance ensure minimal downtime, optimized resource allocation, and a seamless user experience. By leveraging key metrics and best practices, organizations can maintain a robust and high-performing network.</p> <p>\ud83d\ude80 Keep your network running efficiently! \ud83d\udcbb\ud83d\udce1</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/","title":"\ud83d\udce1 Network Monitoring &amp; Management","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83d\ude80 Introduction</li> <li>\ud83c\udfaf Importance</li> <li>\ud83d\udda5\ufe0f Network Monitoring<ul> <li>\ud83d\udcca Key Objectives</li> <li>\ud83d\udcc8 Key Metrics</li> <li>\ud83d\udee0\ufe0f Tools</li> </ul> </li> <li>\ud83d\udee1\ufe0f Network Management<ul> <li>\ud83d\udd27 Functions</li> <li>\ud83d\udcc2 Types of NMS</li> </ul> </li> <li>\u2699\ufe0f Workflow</li> <li>\u2705 Best Practices</li> <li>\ud83d\udd75\ufe0f Protocol Analysis Tools<ul> <li>\ud83d\udcdc Overview</li> <li>\ud83c\udf10 Wireshark</li> <li>\ud83d\udd0d tcpdump</li> <li>\u2696\ufe0f Comparison</li> <li>\ud83d\udccc Best Practices</li> <li>\u26a0\ufe0f Challenges</li> <li>\ud83c\udfaf Applications</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#introduction","title":"\ud83d\ude80 Introduction","text":"<p>Network monitoring and management involve continuous observation, analysis, and control of network performance, reliability, and security. These processes help maintain seamless connectivity and ensure optimal operation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#importance","title":"\ud83c\udfaf Importance","text":"<ul> <li>\ud83d\udee0\ufe0f Proactive Issue Detection: Identifies latency, packet loss, and hardware failures before they escalate.</li> <li>\ud83d\ude80 Performance Optimization: Ensures efficient network utilization for applications like video conferencing.</li> <li>\ud83d\udee1\ufe0f Security Maintenance: Detects unauthorized access, security breaches, and malicious activities.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#network-monitoring","title":"\ud83d\udda5\ufe0f Network Monitoring","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#key-objectives","title":"\ud83d\udcca Key Objectives","text":"<ul> <li>\ud83d\udcc8 Performance Analysis: Monitors metrics like bandwidth, latency, and packet loss.</li> <li>\u26a0\ufe0f Fault Detection: Identifies hardware/software failures with real-time alerts.</li> <li>\ud83d\udd0e Traffic Insights: Analyzes patterns and detects anomalies.</li> <li>\ud83d\udccb Compliance: Ensures adherence to industry standards and regulations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#key-metrics-for-monitoring","title":"\ud83d\udcc8 Key Metrics for Monitoring","text":"Metric Description Importance \ud83d\udcca Bandwidth Usage Measures network capacity utilization Prevents bottlenecks \u23f3 Latency Time taken for data travel Ensures low delay for real-time apps \u274c Packet Loss Percentage of dropped packets Affects VoIP and file transfers \ud83d\udcc9 Jitter Variation in packet arrival time Critical for voice/video quality \u26a0\ufe0f Error Rate Corrupted packets vs. total transmitted Indicates hardware/signal issues \ud83d\udd04 Availability Percentage of uptime Ensures system reliability"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#tools-for-network-monitoring","title":"\ud83d\udee0\ufe0f Tools for Network Monitoring","text":"Tool Purpose Example Metrics \ud83c\udfc6 Nagios Monitors network devices &amp; servers Uptime, latency \ud83d\udcca Zabbix Real-time performance monitoring Bandwidth usage, CPU load \ud83d\udd0d Wireshark Packet-level traffic analysis Traffic anomalies, error rates \ud83c\udf0d PRTG Network Monitor Monitors network health &amp; performance Bandwidth, latency"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#network-management","title":"\ud83d\udee1\ufe0f Network Management","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#functions-of-network-management","title":"\ud83d\udd27 Functions of Network Management","text":"<ul> <li>\ud83d\udee0\ufe0f Fault Management: Detects and resolves network failures (Tools: SNMP traps, Syslog).</li> <li>\ud83d\ude80 Performance Management: Optimizes network efficiency (Tools: NetFlow, sFlow).</li> <li>\u2699\ufe0f Configuration Management: Tracks and updates network configurations.</li> <li>\ud83d\udd12 Security Management: Protects against cyber threats (Tools: IDS/IPS, firewalls).</li> <li>\ud83d\udcca Accounting Management: Monitors resource usage for billing &amp; analysis.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#types-of-network-management-systems-nms","title":"\ud83d\udcc2 Types of Network Management Systems (NMS)","text":"Type Description Example \ud83d\udd27 Fault NMS Detects &amp; resolves network faults Nagios, SolarWinds NPM \ud83d\udcc8 Performance NMS Monitors &amp; optimizes performance Zabbix, PRTG \u2699\ufe0f Configuration NMS Tracks network configurations RANCID, SolarWinds NCM \ud83d\udd12 Security NMS Monitors &amp; ensures security Splunk, SIEM"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#network-monitoring-and-management-workflow","title":"\u2699\ufe0f Network Monitoring and Management Workflow","text":"<p>1\ufe0f\u20e3 Data Collection: Gather performance data (SNMP, NetFlow). 2\ufe0f\u20e3 Analysis: Detect patterns, anomalies, or faults. 3\ufe0f\u20e3 Alerts &amp; Notifications: Automate alerts for critical events. 4\ufe0f\u20e3 Response &amp; Resolution: Fix issues &amp; optimize configurations. 5\ufe0f\u20e3 Documentation &amp; Reporting: Maintain logs &amp; compliance records.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#best-practices-for-network-monitoring-and-management","title":"\u2705 Best Practices for Network Monitoring and Management","text":"<p>\u2714 Automate Monitoring: Set up real-time alerts. \u2714 Network Segmentation: Divide large networks into manageable parts. \u2714 Regular Audits: Review configurations &amp; security policies. \u2714 Implement Redundancy: Ensure failover mechanisms. \u2714 Staff Training: Keep IT teams updated with new techniques.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#protocol-analysis-tools","title":"\ud83d\udd75\ufe0f Protocol Analysis Tools","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#overview-of-key-protocol-analysis-tools","title":"\ud83d\udcdc Overview of Key Protocol Analysis Tools","text":"Tool Description Use Case \ud83c\udf0d Wireshark Graphical packet analyzer Debugging, protocol analysis \ud83d\udcdf tcpdump Command-line packet analyzer Quick diagnostics, troubleshooting"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#wireshark","title":"\ud83c\udf10 Wireshark","text":"<ul> <li>Type: GUI-based network protocol analyzer.</li> <li>Purpose: Captures &amp; visualizes packets.</li> <li>Key Features:<ul> <li>\ud83d\udd75\ufe0f Packet Capture (Ethernet, Wi-Fi, etc.).</li> <li>\ud83d\udcca Protocol Decoding (Supports 100s of protocols).</li> <li>\ud83c\udfaf Advanced Filters.</li> <li>\ud83d\udcc8 Traffic Visualization.</li> <li>\ud83d\udcbe Export &amp; Reporting.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#tcpdump","title":"\ud83d\udd0d tcpdump","text":"<ul> <li>Type: CLI-based packet analyzer.</li> <li>Purpose: Captures network packets in real-time.</li> <li>Key Features:<ul> <li>\u26a1 Live Packet Capture.</li> <li>\ud83d\udd0d BPF Filters.</li> <li>\ud83c\udfaf Custom Output Formatting.</li> <li>\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f Lightweight Resource Usage.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#comparison-wireshark-vs-tcpdump","title":"\u2696\ufe0f Comparison: Wireshark vs tcpdump","text":"Feature Wireshark tcpdump \ud83c\udfa8 Interface GUI CLI \ud83c\udfc6 Ease of Use Beginner-friendly Requires CLI knowledge \ud83c\udfaf Filtering Advanced Precise but complex \ud83d\udd0b Resource Usage Higher Lower \ud83d\udee0\ufe0f Best For Protocol Analysis Quick Diagnostics"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#best-practices-for-protocol-analysis","title":"\ud83d\udccc Best Practices for Protocol Analysis","text":"<p>\u2714 Use Filters: Capture only relevant traffic. \u2714 Monitor in Controlled Environments: Avoid sensitive data leaks. \u2714 Enable Timestamps: For precise sequence analysis. \u2714 Secure Captures: Store data safely.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#challenges-in-protocol-analysis","title":"\u26a0\ufe0f Challenges in Protocol Analysis","text":"<p>\u274c Data Overload: Large captures are complex to analyze. \u274c Protocol Complexity: Requires deep understanding. \u274c Privacy Concerns: Captured data may contain sensitive info.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/Computer%20Networks/9.3-Network%20Monitoring/#applications-of-protocol-analysis-tools","title":"\ud83c\udfaf Applications of Protocol Analysis Tools","text":"<ul> <li>\ud83d\udee0\ufe0f Troubleshooting: Fix network issues.</li> <li>\ud83d\udee1\ufe0f Security: Detect suspicious activities.</li> <li>\ud83d\ude80 Optimization: Improve network efficiency.</li> </ul> <p>\ud83d\udd17 By leveraging advanced tools and best practices, organizations can proactively manage networks, detect issues, and ensure seamless operations. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/DBMS/","title":"DBMS","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/DBMS/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>\ud83d\udcd6 Follow TUF+ DBMS Course - \ud83d\udd17 link</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/DBMS/#resources","title":"Resources:","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/","title":"Operating Systems","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#operating-system-concepts-table-of-contents","title":"\ud83d\udcd8 Operating System Concepts \u2013 Table of Contents","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#1-basics-of-operating-systems","title":"1\ufe0f\u20e3 Basics of Operating Systems","text":"<ul> <li>\ud83d\udda5\ufe0f Operating System Introduction, Multiprocessing OS and Real-time OS</li> <li>\ud83d\udda5\ufe0f Distributed, Clustered, and Embedded OS, Batch OS, Multiprogramming OS, and Multitasking OS</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#2-process-management","title":"2\ufe0f\u20e3 Process Management","text":"<ul> <li>\u26a1 Process and Its States, PCB</li> <li>\u26a1 Context Switching, User Mode and Kernel Mode</li> <li>\u26a1 Scheduling Queues and Schedulers</li> <li>\u26a1 Process Scheduling Algorithms (Preemptive vs. Non-Preemptive)</li> <li>\u26a1 Threads in OS &amp; Multithreading Models</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#3-synchronization-and-concurrency","title":"3\ufe0f\u20e3 Synchronization and Concurrency","text":"<ul> <li>\ud83d\udd04 Process Synchronization and Its Tools, Critical Section Problem</li> <li>\ud83d\udd04 Semaphores and Their Types, Producer-Consumer Problem</li> <li>\ud83d\udd04 Deadlock &amp; Prevention Methods (Banker's Algorithm), Starvation and Aging</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#4-memory-management","title":"4\ufe0f\u20e3 Memory Management","text":"<ul> <li>\ud83e\udde0 Memory Management Techniques (First Fit, Best Fit, Worst Fit), Contiguous Allocation, Paging, and Segmentation</li> <li>\ud83e\udde0 Virtual Memory &amp; Page Fault, Page Replacement Algorithms (LRU, Optimal, FIFO), Belady's Anomaly</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#5-file-systems","title":"5\ufe0f\u20e3 File Systems","text":"<ul> <li>\ud83d\udcc2 File System and Its Components, Types of File Systems</li> <li>\ud83d\udcc2 File Allocation, Deallocation &amp; Fragmentation, File Control Blocks (FCB) &amp; Access Control Lists (ACLs)</li> <li>\ud83d\udd10 Encryption Techniques in File Systems, User Authentication Mechanisms</li> <li>\ud83d\udcdc File System Journaling, Backup and Recovery Mechanisms</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#6-disk-management-and-scheduling","title":"6\ufe0f\u20e3 Disk Management and Scheduling","text":"<ul> <li>\ud83d\udcbd Disk Scheduling, Disk Scheduling Algorithms</li> <li>\ud83d\udcbd RAID (Redundant Array of Independent Disks)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#7-inter-process-communication-ipc","title":"7\ufe0f\u20e3 Inter-Process Communication (IPC)","text":"<ul> <li>\ud83d\udde8\ufe0f IPC Mechanisms: Message Passing &amp; Shared Memory, Signals</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#8-system-and-performance","title":"8\ufe0f\u20e3 System and Performance","text":"<ul> <li>\ud83d\udd27 System Calls and Their Categories, System Boot Process</li> <li>\ud83d\udd27 Software and Hardware Interrupts, Event-Driven Programming in OS</li> <li>\ud83d\udd27 Resource Management, Priority Inversion</li> <li>\u2696\ufe0f Load Balancing in OS, Performance Measurement &amp; Tuning</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#9-advanced-topics","title":"9\ufe0f\u20e3 Advanced Topics","text":"<ul> <li>\ud83d\ude80 Cache Mapping: Direct &amp; Associative, Virtual Machines &amp; Hypervisors</li> <li>\ud83c\udf10 Network File Systems (NFS), Thread Safety &amp; Reentrancy</li> <li>\ud83d\udee1\ufe0f Operating System Security Mechanisms, Future Trends in OS</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/#resources","title":"Resources:","text":"<ul> <li>https://takeuforward.org/plus/operating-system/</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/","title":"\ud83d\ude80 Operating System (OS) - Quick Revision Guide","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>Introduction</li> <li>Core Components</li> <li>Boot Process</li> <li>Importance of Learning OS</li> <li>Multiprocessing OS<ul> <li>Symmetric Multiprocessing (SMP)</li> <li>Asymmetric Multiprocessing (AMP)</li> <li>Distributed Multiprocessing</li> </ul> </li> <li>Real-Time Operating System (RTOS)<ul> <li>Key Features</li> <li>Types of RTOS</li> <li>Use Cases</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#introduction","title":"\ud83d\udda5\ufe0f Introduction","text":"<p>An Operating System (OS) is the software layer that manages hardware and software resources, acting as a bridge between the user and the system.</p> <p>\ud83d\udca1 Analogy: Think of an OS as an event coordinator at a concert: - Ensures performers (apps) get resources (stage, mics, instruments). - Manages crowd flow (CPU &amp; memory) to prevent chaos. - Handles logistics like security &amp; scheduling (system security &amp; process management).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#core-components","title":"\ud83d\udd11 Core Components","text":"<p>When loaded into memory, the OS provides key functionalities: - \ud83d\udee0\ufe0f Process Management: Creates, schedules, and terminates processes. - \ud83e\udde0 Memory Management: Allocates/deallocates memory, ensuring efficiency. - \ud83d\udcc2 File System Management: Organizes data in files and folders. - \ud83d\udce1 Device Management: Coordinates input/output hardware devices. - \ud83d\udd10 Security &amp; Access Control: Protects against unauthorized access.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#boot-process","title":"\u2699\ufe0f Boot Process","text":"<p>When you power on your computer, the OS follows these steps: 1. BIOS/UEFI performs initial hardware checks. 2. Bootloader locates and loads the OS into memory. 3. OS initializes core components and presents a GUI/CLI.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#importance-of-learning-os","title":"\ud83c\udfaf Importance of Learning OS","text":"<p>Understanding OS concepts boosts your IT expertise: - \ud83e\udde9 Foundational Knowledge: Bridges hardware &amp; software interaction. - \ud83d\udee0\ufe0f Problem-Solving: Helps diagnose &amp; optimize system performance. - \ud83d\ude80 Career Growth: Crucial for roles in system design &amp; development. - \ud83d\udca1 Resource Efficiency: Enables writing optimized programs.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#multiprocessing-os","title":"\u26a1 Multiprocessing OS","text":"<p>A Multiprocessing OS allows multiple CPUs to execute tasks simultaneously, improving performance and reliability.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#symmetric-multiprocessing-smp","title":"\ud83c\udfc5 Symmetric Multiprocessing (SMP)","text":"<p>\ud83d\udca1 Analogy: Multiple chefs in a kitchen sharing the same tools &amp; ingredients. - All processors share memory &amp; are equally capable. - Tasks are dynamically distributed. - Pros: Efficient task allocation, ideal for multi-threading. - Cons: Performance issues if memory access becomes a bottleneck.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#asymmetric-multiprocessing-amp","title":"\ud83c\udfd7\ufe0f Asymmetric Multiprocessing (AMP)","text":"<p>\ud83d\udca1 Analogy: A manager delegates work to employees with specific tasks. - One processor acts as master, others as slaves. - Used in real-time applications &amp; specialized tasks. - Pros: Simpler implementation. - Cons: Master processor failure can halt the system.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#distributed-multiprocessing","title":"\ud83c\udf0d Distributed Multiprocessing","text":"<p>\ud83d\udca1 Analogy: Remote freelancers collaborating on a shared project. - Processors are located in different physical locations, connected via a network. - Pros: High fault tolerance, scalability. - Cons: Network dependency can cause failures.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#real-time-operating-system-rtos","title":"\u23f3 Real-Time Operating System (RTOS)","text":"<p>An OS designed to execute tasks within strict time constraints.</p> <p>\ud83d\udca1 Analogy: A restaurant kitchen where the chef ensures each dish is ready on time.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#key-features","title":"\ud83d\udd0d Key Features","text":"<ul> <li>\u23f1\ufe0f Deterministic Timing: Guaranteed execution time.</li> <li>\ud83d\udcca Task Scheduling: Preemptive/cooperative multitasking.</li> <li>\u26a1 Low Latency: Quick response time.</li> <li>\ud83d\udd04 Resource Sharing: Manages CPU, memory, and I/O efficiently.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#types-of-rtos","title":"\ud83d\udcc2 Types of RTOS","text":"<ul> <li>\ud83c\udfaf Hard RTOS: Missing deadlines = catastrophic failure (e.g., Pacemakers, Flight Systems).</li> <li>\ud83c\udfae Soft RTOS: Performance degrades if deadlines are missed (e.g., Video Streaming, Gaming).</li> <li>\ud83c\udfe6 Firm RTOS: Deadlines are crucial but non-fatal (e.g., Banking Systems).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.1-Basic-OS/#use-cases","title":"\ud83d\udd25 Use Cases","text":"<ul> <li>\ud83d\ude97 Automotive: Airbags, ABS, engine control.</li> <li>\ud83c\udfed Industrial Automation: Real-time robotic control.</li> <li>\u2708\ufe0f Aerospace: Flight control systems.</li> </ul> <p>\ud83d\udccc Keep Revising! Master OS concepts for interviews &amp; real-world applications! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/","title":"\ud83d\udccc Distributed Operating Systems - Quick Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>Introduction</li> <li>Distributed Operating System</li> <li>Clustered Operating System</li> <li>Embedded Operating System</li> <li>Batch Operating System</li> <li>Multiprogramming Operating System</li> <li>Multitasking Operating System</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#introduction","title":"\ud83c\udfd7 Introduction","text":"<p>An Operating System (OS) manages hardware and software resources, providing services to applications. Specialized OS types include Distributed, Clustered, Embedded, Batch, Multiprogramming, and Multitasking OS.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#distributed-operating-system","title":"\ud83c\udf10 Distributed Operating System","text":"<p>A Distributed OS (DOS) manages multiple independent computers, making them appear as a single system.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#real-life-analogy","title":"\ud83d\ude96 Real-Life Analogy","text":"<ul> <li>Similar to Uber/Ola, where drivers (computers) work under a central system.</li> <li>Tasks (rides) are assigned dynamically.</li> <li>If one driver (machine) fails, another takes over seamlessly.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#key-features","title":"\ud83d\udd11 Key Features","text":"<ul> <li>Transparency: Users don\u2019t need to know where resources are located.</li> <li>Resource Sharing: Efficient use of processors, memory, and files.</li> <li>Fault Tolerance: Other machines take over if one fails.</li> <li>Scalability: More machines can be added to enhance performance.</li> <li>Concurrency: Supports simultaneous execution of processes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#benefits","title":"\ud83c\udfaf Benefits","text":"<p>\u2705 Higher Performance \u2705 Fault Tolerance \u2705 Scalable Growth \u2705 Cost-Effective</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#real-world-examples","title":"\ud83c\udf0d Real-World Examples","text":"<ul> <li>Google's Infrastructure (Search, Email, Cloud Services)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#clustered-operating-system","title":"\ud83c\udfe2 Clustered Operating System","text":"<p>A Clustered OS manages a collection of independent computers (nodes) working together as one system.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#key-features_1","title":"\ud83d\udd11 Key Features","text":"<ul> <li>Resource Sharing: Nodes share CPU, memory, and storage.</li> <li>High Availability: Ensures uptime even if one node fails.</li> <li>Load Balancing: Even workload distribution.</li> <li>Scalability: New nodes can be added.</li> <li>Fault Tolerance: Redundant components prevent failures.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#components","title":"\ud83d\udda5 Components","text":"<ul> <li>Cluster Manager: Controls coordination.</li> <li>Shared Storage: Centralized (e.g., NAS, SAN).</li> <li>Interconnection Network: High-speed communication.</li> <li>Nodes: Individual computers in the cluster.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#types","title":"\ud83c\udfd7 Types","text":"<ul> <li>Hardware Clusters (e.g., Data Centers)</li> <li>Software Clusters (e.g., Kubernetes, Hadoop HDFS)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#advantages","title":"\u2705 Advantages","text":"<p>\u2714 Parallel task execution \u2714 Redundant nodes ensure uptime \u2714 Easy scalability \u2714 Cost-effective with commodity hardware</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#disadvantages","title":"\u274c Disadvantages","text":"<p>\u274c Complex setup and maintenance \u274c High interconnection costs \u274c Consistency management challenges</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#embedded-operating-system","title":"\u2699\ufe0f Embedded Operating System","text":"<p>An Embedded OS is designed for specialized devices with limited resources.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#key-features_2","title":"\ud83d\udd11 Key Features","text":"<ul> <li>Real-Time Operation (Critical applications like airbags)</li> <li>Small Footprint (Minimal resource usage)</li> <li>Highly Reliable (Runs continuously)</li> <li>Task-Specific (Optimized for a single function)</li> <li>Low Power Consumption (Ideal for IoT and portable devices)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#components_1","title":"\ud83d\udda5 Components","text":"<ul> <li>Kernel: Core resource manager.</li> <li>Task Scheduler: Manages execution priorities.</li> <li>Device Drivers: Interfaces with hardware.</li> <li>Memory Management: Optimizes limited storage.</li> <li>Communication Stack: Supports network protocols (e.g., Bluetooth, Wi-Fi).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#examples","title":"\ud83d\udd0d Examples","text":"<ul> <li>Smart TVs (Google TV, WebOS)</li> <li>Automotive Systems (ECUs, Airbags)</li> <li>IoT Devices (Smart locks, Thermostats)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#batch-operating-system","title":"\ud83d\udcc2 Batch Operating System","text":"<p>A Batch OS groups similar jobs into batches and executes them sequentially.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#real-life-analogy_1","title":"\ud83e\uddfa Real-Life Analogy","text":"<ul> <li>Like doing laundry in batches (whites, darks, delicates).</li> <li>Efficient processing without manual intervention.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#key-features_3","title":"\ud83d\udd11 Key Features","text":"<ul> <li>Job Scheduling: Groups similar tasks for execution.</li> <li>Automated Execution: Runs without user interaction.</li> <li>Queue Processing: Jobs wait in a queue before execution.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#advantages_1","title":"\u2705 Advantages","text":"<p>\u2714 Efficient CPU utilization \u2714 Reduces manual intervention \u2714 Ideal for large-scale computations</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#disadvantages_1","title":"\u274c Disadvantages","text":"<p>\u274c No real-time interaction \u274c Error handling is slow (re-submission required) \u274c Execution delays due to job queueing</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#examples_1","title":"\ud83c\udf0d Examples","text":"<ul> <li>Payroll Processing (Salaries calculated at month-end)</li> <li>Bank Statements (Generated in batches)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#multiprogramming-operating-system","title":"\ud83d\udd04 Multiprogramming Operating System","text":"<p>A Multiprogramming OS allows multiple programs to run simultaneously by efficiently utilizing the CPU.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#real-life-analogy_2","title":"\ud83c\udf7d Real-Life Analogy","text":"<ul> <li>A chef (CPU) prepares multiple dishes (programs) by switching tasks efficiently.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#key-features_4","title":"\ud83d\udd11 Key Features","text":"<ul> <li>Maximizes CPU Utilization: Reduces idle time.</li> <li>Multiple Programs in Memory: Loads several programs at once.</li> <li>Context Switching: Efficiently switches between tasks.</li> <li>Concurrency: Ensures parallel progress of tasks.</li> <li>Job Scheduling: Allocates CPU time fairly.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#advantages_2","title":"\u2705 Advantages","text":"<p>\u2714 Higher throughput \u2714 Better resource utilization \u2714 Faster program execution</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#example","title":"\ud83c\udf0d Example","text":"<ul> <li>Compiling a program while browsing the web and listening to music</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#multitasking-operating-system","title":"\ud83d\udda5 Multitasking Operating System","text":"<p>A Multitasking OS allows a single CPU to handle multiple tasks by rapidly switching between them.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#real-life-analogy_3","title":"\u2328\ufe0f Real-Life Analogy","text":"<ul> <li>Working on a laptop: Typing an email, listening to music, printing a document simultaneously.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#key-features_5","title":"\ud83d\udd11 Key Features","text":"<ul> <li>CPU Time Sharing: Divides CPU time among tasks.</li> <li>Process Isolation: Ensures each task runs independently.</li> <li>Preemptive &amp; Cooperative Multitasking: OS interrupts or waits for tasks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#advantages_3","title":"\u2705 Advantages","text":"<p>\u2714 Smooth user experience \u2714 Faster execution \u2714 Efficient use of system resources</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#example_1","title":"\ud83c\udf0d Example","text":"<ul> <li>Running a code editor, web browser, and media player together</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/1.2-Distributed_Operating_Systems/#conclusion","title":"\ud83d\ude80 Conclusion","text":"<p>Understanding different Operating Systems is crucial for designing scalable and efficient systems. Each type has its own advantages and use cases: - Distributed OS (Google Cloud, AWS) - Clustered OS (Data Centers, Kubernetes) - Embedded OS (IoT, Smart Devices) - Batch OS (Payroll, Bank Statements) - Multiprogramming OS (Efficient CPU Utilization) - Multitasking OS (Seamless User Experience)</p> <p>\u26a1 Mastering these concepts will enhance your expertise in system architecture and operating systems!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/","title":"\ud83d\udccc Process and Its States","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#table-of-contents","title":"\ud83d\udcdc Table of Contents","text":"<ol> <li>Introduction</li> <li>Process in Memory</li> <li>Creation of a Process</li> <li>Process States</li> <li>State Transitions</li> <li>Advantages of Process Management</li> <li>Process Control Block (PCB)</li> <li>Advanced Perspective</li> <li>Conclusion</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#introduction","title":"\ud83d\udd39 Introduction","text":"<ul> <li>A process is a program in execution, utilizing system resources like CPU, memory, and I/O devices.</li> <li>Each process has a Process Control Block (PCB) storing its execution details.</li> <li>\ud83c\udfe0 Real-Life Analogy: A recipe \ud83d\udcdd (program) becomes a dish being cooked \ud83c\udf73 (process) when a chef (CPU) executes it.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#process-in-memory","title":"\ud83d\udd39 Process in Memory","text":"<p>When a user runs a program, it is loaded into memory as a process with: - \ud83d\udcc4 Text Segment: Executable code. - \ud83d\udcca Data Segment: Global &amp; static variables. - \ud83d\udce6 Heap: Dynamic memory allocation. - \ud83d\uddc2\ufe0f Stack: Local variables, function calls, return addresses.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#creation-of-a-process","title":"\ud83d\udd39 Creation of a Process","text":"<p>\ud83d\udee0\ufe0f Steps when a program is launched: 1. OS loads the program into main memory. 2. OS assigns a unique Process ID (PID). 3. A Process Control Block (PCB) is created, storing:     - Process state     - Registers &amp; program counter     - Allocated resources</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#process-states","title":"\ud83d\udd39 Process States","text":"<p>A process transitions between various states during its lifecycle: - \ud83c\udd95 New: Being created; not yet ready to run. - \u2705 Ready: Loaded into memory, waiting for CPU. - \u26a1 Running: Currently being executed by the CPU. - \u23f3 Waiting (Blocked): Waiting for I/O or resource availability. - \ud83d\uded1 Suspended: Temporarily paused/swapped to disk. - \u274c Terminated: Completed execution, resources released.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#state-transitions","title":"\ud83d\udd39 State Transitions","text":"Transition Description New \u2192 Ready Process creation completed, ready to run. Ready \u2192 Running CPU assigned by the scheduler. Running \u2192 Waiting Waiting for I/O or resource. Running \u2192 Ready Preempted by scheduler (e.g., time slice ends). Waiting \u2192 Ready I/O completed, resource available. Running \u2192 Terminated Process execution completed. Ready/Waiting \u2192 Suspended Process paused/swapped to disk. Suspended \u2192 Ready/Waiting Process brought back into memory."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#advantages-of-process-management","title":"\ud83d\udd39 Advantages of Process Management","text":"<p>\u2705 Efficient CPU Utilization: Balances workload using scheduling. \u2705 Multitasking &amp; Resource Sharing: Enables smooth parallel execution. \u2705 Improved System Responsiveness: Manages waiting processes efficiently.</p> <p>\ud83d\udccc Example: - \ud83c\udfa5 Video Player Application     - Running: Decoding video.     - Waiting: Fetching file from disk.     - Ready: Resuming playback after loading.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#process-control-block-pcb","title":"\ud83d\udd39 Process Control Block (PCB)","text":"<p>\ud83d\uddc2\ufe0f The PCB is a data structure storing all necessary process details: - \ud83d\udccd Process State: Ready, running, waiting, etc. - \ud83d\udd22 Process ID (PID): Unique identifier. - \ud83d\udccc Program Counter (PC): Next instruction address. - \u2699\ufe0f CPU Registers: Accumulators, stack pointers, condition codes. - \ud83d\uddc3\ufe0f Memory Management Info: Base/limit registers, page tables. - \ud83d\udcca Scheduling Info: CPU usage, priority, wait times. - \ud83d\udcc1 I/O Status: Open files, devices in use.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#advanced-perspective","title":"\ud83d\udd39 Advanced Perspective","text":"<p>\ud83d\udd39 Modern OS Features: - Multi-core Scheduling: Each core accesses process PCBs. - Priority-based Scheduling: Processes assigned priority levels. - Load Balancing: Distributes workloads efficiently. - Security &amp; Access Control: Process permissions managed via PCB.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.1-Process_States/#conclusion","title":"\ud83d\udd39 Conclusion","text":"<ul> <li>\u2705 The Process Control Block (PCB) is the backbone of process management.</li> <li>\u2705 Process states &amp; transitions enable efficient multitasking &amp; CPU usage.</li> <li>\u2705 Advanced OS techniques leverage PCBs for better scheduling, security, and performance.</li> </ul> <p>\ud83d\udccc Key Takeaway: Understanding processes and their states is critical for mastering OS concepts and designing efficient computing systems! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/","title":"\ud83d\udccc Process Context &amp; Context Switching","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>\ud83d\udd39 Process Context</li> <li>\ud83d\udd39 Context Switching<ul> <li>\ud83d\udd04 Events During Context Switching</li> <li>\ud83d\udcca Diagram of Context Switching</li> <li>\ud83d\udee0 Key Components Involved</li> <li>\u2705 Advantages &amp; \u274c Disadvantages</li> </ul> </li> <li>\ud83d\udd39 Kernel Mode vs. User Mode<ul> <li>\ud83d\udee0 Key Features</li> <li>\ud83d\udd04 Mode Change Events</li> <li>\ud83d\udcca Differences Between User &amp; Kernel Mode</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#process-context","title":"\ud83d\udd39 Process Context","text":"<p>The context of a process contains all the necessary information for the CPU to execute it efficiently. This enables the OS to manage multiple processes seamlessly.</p> <p>\ud83d\udccc Includes: - \ud83d\udccc CPU Registers (Program counter, stack pointer, etc.) - \ud83d\udee0 Process State (Running, Ready, Blocked, etc.) - \ud83d\udcc2 Memory-Management Info (Page tables, segment tables)</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#context-switching","title":"\ud83d\udd39 Context Switching","text":"<p>Context Switching allows the CPU to switch between processes efficiently, enabling multitasking.</p> <p>\ud83c\udf93 Real-Life Analogy: Imagine a teacher checking multiple students' assignments, switching between them while remembering where they left off\u2014just like the CPU does with processes!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#events-during-context-switching","title":"\ud83d\udd04 Events During Context Switching","text":"<ol> <li>Interrupt/System Call \u23e9 OS takes control.</li> <li>Save Current Process State \ud83d\udce5 (Program counter, registers stored in PCB).</li> <li>Load Next Process State \ud83d\udce4 (Retrieve the next process state from its PCB).</li> <li>Resume Execution \ud83d\udd04 The new process starts executing.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#diagram-of-context-switching","title":"\ud83d\udcca Diagram of Context Switching","text":"<p>\ud83d\udd04 Process P0 \u2192 \u23f8 Save State (PCB0) \u2192 \ud83d\udda5 Load P1 (PCB1) \u2192 \u25b6\ufe0f Execute P1 \u2192 \ud83d\udd01 Switch Back to P0</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#key-components-involved","title":"\ud83d\udee0 Key Components Involved","text":"<ul> <li>\ud83d\udcc2 Process Control Block (PCB): Stores process info.</li> <li>\ud83c\udf9b CPU Registers: Saved &amp; restored during switching.</li> <li>\u26a1 Interrupts: Trigger switching (I/O, timer interrupts).</li> <li>\ud83c\udfaf Scheduler: Decides the next process to execute.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#advantages-disadvantages","title":"\u2705 Advantages &amp; \u274c Disadvantages","text":"<p>\u2705 Advantages: - \ud83d\udcc8 Efficient CPU Utilization - \ud83d\udd00 Multitasking &amp; Fair Scheduling - \ud83d\udd27 Flexibility in workload handling</p> <p>\u274c Disadvantages: - \u23f3 Overhead (Time/resource consumption) - \ud83d\udcc9 Performance Impact (Frequent switching reduces efficiency) - \u2699\ufe0f Complexity (Requires managing PCBs &amp; scheduling algorithms)</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#kernel-mode-vs-user-mode","title":"\ud83d\udd39 Kernel Mode vs. User Mode","text":"<p>Modern OS use dual-mode operation to enhance security and stability.</p> <p>\ud83c\udf93 Real-Life Analogy: - \ud83c\udfe6 User Mode \u2192 Public Area: Limited access, no direct control over core system resources. - \ud83d\udd12 Kernel Mode \u2192 Restricted Area: Full control over system operations.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#key-features","title":"\ud83d\udee0 Key Features","text":"<p>\ud83d\udd39 User Mode (\ud83d\udc64 Restricted Access) - \ud83d\uded1 No direct hardware access. - \ud83d\udeab Errors don\u2019t crash the system. - \ud83d\udcde Uses system calls to request services.</p> <p>\ud83d\udd39 Kernel Mode (\ud83d\udda5\ufe0f Full Access) - \u2705 Direct access to CPU &amp; hardware. - \u26a0\ufe0f Errors may crash the system. - \ud83c\udfd7 Executes core functions like scheduling &amp; memory management.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#mode-change-events","title":"\ud83d\udd04 Mode Change Events","text":"<ul> <li>System Calls (E.g., file I/O, networking requests)</li> <li>Interrupts (E.g., timer, hardware interrupts)</li> <li>Faults (E.g., page faults)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.2-Process_Context_AND_Context_Switching/#differences-between-user-kernel-mode","title":"\ud83d\udcca Differences Between User &amp; Kernel Mode","text":"Feature User Mode \ud83d\udc64 Kernel Mode \ud83d\udda5\ufe0f Access Level Restricted Full Hardware Access \ud83d\udeab No \u2705 Yes Privileged Instructions \u274c Not Allowed \u2705 Allowed Error Impact \u274c App Crash \u26a0\ufe0f System Crash <p>\ud83d\udccc Conclusion: - Context Switching enables multitasking but comes with overhead. - User &amp; Kernel Modes ensure security and resource efficiency. - Efficient OS design balances performance, security, and multitasking.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/","title":"Process Scheduling in Operating Systems \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ol> <li>Introduction</li> <li>Scheduling Queues<ul> <li>Types of Scheduling Queues</li> <li>Flow of Processes</li> </ul> </li> <li>Schedulers<ul> <li>Types of Schedulers</li> <li>Key Functions of Schedulers</li> </ul> </li> <li>Process Scheduling<ul> <li>Need for Process Scheduling</li> <li>Factors Considered During Scheduling</li> </ul> </li> <li>Scheduling Algorithms<ul> <li>Preemptive Scheduling</li> <li>Non-Preemptive Scheduling</li> <li>Comparison: Preemptive vs. Non-Preemptive</li> <li>Uses of Different Scheduling Approaches</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#introduction","title":"\ud83c\udfc1 Introduction","text":"<p>Process scheduling ensures optimal CPU and resource utilization by efficiently managing process execution. It involves: - Queue management \ud83d\udccb - Process prioritization \ud83c\udfaf - Efficient CPU allocation \u26a1</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#scheduling-queues","title":"\ud83d\udcc2 Scheduling Queues","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#types-of-scheduling-queues","title":"\ud83c\udff7\ufe0f Types of Scheduling Queues","text":"<ul> <li>Job Queue: Contains all system processes waiting for execution.</li> <li>Ready Queue: Holds processes in main memory, ready for CPU allocation.</li> <li>Device Queue: Contains processes waiting for specific I/O devices.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#flow-of-processes","title":"\ud83d\udd04 Flow of Processes","text":"<ol> <li>New Process \u2192 Placed in Ready Queue.</li> <li>Dispatched for execution \u2192 Moves to CPU.</li> <li>Possible States:<ul> <li>Requests I/O \u2192 Moves to Device Queue.</li> <li>Creates a child process \u2192 Waits for completion.</li> <li>Interrupted \u2192 Returns to Ready Queue.</li> </ul> </li> <li>Process Completion \u2192 Removed from all queues.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#schedulers","title":"\ud83c\udfaf Schedulers","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#types-of-schedulers","title":"\ud83d\udee0\ufe0f Types of Schedulers","text":"<ol> <li>Long-Term Scheduler (Job Scheduler) \ud83d\udd52<ul> <li>Selects processes for execution from Job Queue.</li> <li>Controls degree of multiprogramming.</li> <li>Ensures a balanced mix of I/O-bound &amp; CPU-bound processes.</li> </ul> </li> <li>Short-Term Scheduler (CPU Scheduler) \u26a1<ul> <li>Selects processes from Ready Queue.</li> <li>Executes frequently (~100ms).</li> <li>Minimizes CPU idle time.</li> </ul> </li> <li>Medium-Term Scheduler \ud83d\udd04<ul> <li>Temporarily removes processes from memory (swapping).</li> <li>Manages memory overcommitment.</li> <li>Reintroduces processes when resources are available.</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#key-functions-of-schedulers","title":"\ud83c\udfaf Key Functions of Schedulers","text":"<ul> <li>Resource Allocation \ud83d\udda5\ufe0f: CPU, memory, and I/O devices.</li> <li>Load Balancing \u2696\ufe0f: Avoids system bottlenecks.</li> <li>Process Prioritization \u23eb: Critical tasks execute first.</li> <li>Performance Optimization \ud83d\ude80: Improves responsiveness and throughput.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#process-scheduling","title":"\ud83c\udfce\ufe0f Process Scheduling","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#need-for-process-scheduling","title":"\u2753 Need for Process Scheduling","text":"<ul> <li>Efficient CPU Utilization \ud83d\udda5\ufe0f</li> <li>Handling Multiple Processes \ud83e\uddd1\u200d\ud83d\udcbb</li> <li>Avoiding Deadlock &amp; Starvation \u274c</li> <li>Meeting Real-Time Deadlines \u23f3</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#factors-considered-during-scheduling","title":"\ud83d\udcca Factors Considered During Scheduling","text":"<ul> <li>Process Priority \ud83c\udf96\ufe0f: High-priority executes first.</li> <li>Arrival Time \u23f0: When process enters Ready Queue.</li> <li>Burst Time \ud83d\udd25: Required CPU execution time.</li> <li>I/O or CPU-Bound Nature \ud83c\udfc3\u200d\u2642\ufe0f: I/O-bound may wait; CPU-bound executes immediately.</li> <li>Deadline \u23f3: Strict constraints for real-time systems.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#scheduling-algorithms","title":"\ud83d\udd22 Scheduling Algorithms","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#preemptive-scheduling","title":"\u26a1 Preemptive Scheduling","text":"<p>\ud83d\udd04 Interrupts ongoing processes to assign CPU to higher-priority tasks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#real-life-analogy","title":"\ud83c\udff7\ufe0f Real-Life Analogy:","text":"<p>\ud83d\udc68\u200d\ud83d\udcbc A manager assigns an urgent task, pausing the current work.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#advantages","title":"\u2705 Advantages:","text":"<ul> <li>Improves responsiveness \ud83d\ude80</li> <li>Prevents starvation for time-critical processes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#disadvantages","title":"\u274c Disadvantages:","text":"<ul> <li>Frequent context switching increases overhead.</li> <li>Complex implementation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#used-in","title":"\ud83d\udccc Used In:","text":"<ul> <li>Real-time Systems \u23f3 (Embedded Systems, OS Handling Multiple Inputs)</li> <li>Interactive Environments \ud83d\udda5\ufe0f</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#non-preemptive-scheduling","title":"\ud83d\udeb6 Non-Preemptive Scheduling","text":"<p>\ud83d\udeab No interruptions; process executes till completion.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#real-life-analogy_1","title":"\ud83c\udff7\ufe0f Real-Life Analogy:","text":"<p>\ud83d\uded2 A customer completes checkout before the next one is served.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#advantages_1","title":"\u2705 Advantages:","text":"<ul> <li>Low overhead \ud83d\ude80 (No frequent context switching)</li> <li>Simple implementation \ud83d\udee0\ufe0f</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#disadvantages_1","title":"\u274c Disadvantages:","text":"<ul> <li>Starvation possible for low-priority processes.</li> <li>Less responsive to urgent tasks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#used-in_1","title":"\ud83d\udccc Used In:","text":"<ul> <li>Batch Processing Systems \ud83d\uddc2\ufe0f</li> <li>Applications with No Timing Constraints \ud83d\udd70\ufe0f</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#comparison-preemptive-vs-non-preemptive","title":"\u2696\ufe0f Comparison: Preemptive vs. Non-Preemptive","text":"Aspect Preemptive Scheduling Non-Preemptive Scheduling Interruptions \u2705 Allowed \u274c Not Allowed Responsiveness \u26a1 High \ud83d\udc22 Low Complexity \ud83d\udee0\ufe0f High \ud83d\udce6 Low Overhead \ud83d\udd04 High \u26a1 Low"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#uses-of-different-scheduling-approaches","title":"\ud83c\udfaf Uses of Different Scheduling Approaches","text":"<ul> <li>Preemptive Scheduling: \ud83d\ude80<ul> <li>Real-time systems \u23f3</li> <li>Interactive environments \ud83c\udfae</li> </ul> </li> <li>Non-Preemptive Scheduling: \ud83d\udce6<ul> <li>Batch processing systems \ud83d\uddc2\ufe0f</li> <li>Simple, low-overhead applications \u26a1</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.3-Process_Scheduling/#conclusion","title":"\ud83c\udf93 Conclusion","text":"<p>Process scheduling plays a crucial role in optimizing CPU usage, ensuring fairness, and balancing system workloads. By implementing efficient scheduling algorithms, an OS can maximize responsiveness and prevent performance bottlenecks. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/","title":"\ud83d\udccc Process Scheduling in Operating Systems","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>Introduction</li> <li>CPU Scheduling Algorithms<ul> <li>First Come First Serve (FCFS)</li> <li>Shortest Job First (SJF)</li> <li>Shortest Remaining Time First (SRTF)</li> <li>Highest Response Ratio Next (HRRN)</li> <li>Round Robin (RR)</li> <li>Priority-Based Scheduling (PBS)</li> <li>Multilevel Queue (MLQ)</li> <li>Multilevel Feedback Queue (MLFQ)</li> </ul> </li> <li>Comparison Table</li> <li>Conclusion</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#introduction","title":"\ud83d\udccc Introduction","text":"<ul> <li>CPU scheduling ensures efficient process execution by deciding which process runs next.</li> <li>Goals:<ul> <li>Maximize CPU utilization \u23f3</li> <li>Minimize waiting &amp; response time \ud83d\udd50</li> <li>Ensure fairness \u2696\ufe0f</li> </ul> </li> <li>Used in multi-tasking &amp; time-sharing systems.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#cpu-scheduling-algorithms","title":"\ud83d\ude80 CPU Scheduling Algorithms","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#1-first-come-first-serve-fcfs","title":"1\ufe0f\u20e3 First Come First Serve (FCFS)","text":"<p>\ud83d\uded2 Analogy: A grocery store queue \u2013 First in, First out.</p> <p>\u2714 Pros: - Simple &amp; easy to implement \u2705 - Fair execution order \ud83c\udfaf</p> <p>\u274c Cons: - \u2757 Convoy Effect: Slow process delays all others. - \ud83d\udeab Not suitable for time-sharing systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#2-shortest-job-first-sjf","title":"2\ufe0f\u20e3 Shortest Job First (SJF)","text":"<p>\ud83c\udf7d Analogy: A restaurant serves shortest orders first.</p> <p>\u2714 Pros: - \ud83c\udfc6 Optimal average waiting time. - \ud83c\udfaf Best for batch processing.</p> <p>\u274c Cons: - \u2757 Starvation: Long processes may wait indefinitely. - \ud83d\udd0d Requires precise burst time estimation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#3-shortest-remaining-time-first-srtf","title":"3\ufe0f\u20e3 Shortest Remaining Time First (SRTF)","text":"<p>\ud83d\udcec Analogy: A post office prioritizing small tasks first.</p> <p>\u2714 Pros: - \u26a1 Faster turnaround time. - \u23f3 Minimizes waiting time.</p> <p>\u274c Cons: - \u2757 Starvation risk for long processes. - \ud83d\udd04 High context-switching overhead.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#4-highest-response-ratio-next-hrrn","title":"4\ufe0f\u20e3 Highest Response Ratio Next (HRRN)","text":"<p>\ud83c\udf9f Analogy: A ticket counter prioritizing long-waiting customers.</p> <p>\ud83d\udcca Formula: [ \\text{Response Ratio} = \\frac{\\text{Waiting Time} + \\text{Burst Time}}{\\text{Burst Time}} ]</p> <p>\u2714 Pros: - \u2696\ufe0f Balances fairness &amp; efficiency. - \ud83d\udee1 Prevents starvation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#5-round-robin-rr","title":"5\ufe0f\u20e3 Round Robin (RR)","text":"<p>\ud83c\udfae Analogy: A multiplayer game \u2013 each player gets a turn.</p> <p>\u2714 Pros: - \u23f1 Time-sharing ensures fairness. - \ud83d\ude80 Good for interactive systems.</p> <p>\u274c Cons: - \u2699\ufe0f Performance depends on time slice. - \ud83d\udd04 More context-switching overhead.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#6-priority-based-scheduling-pbs","title":"6\ufe0f\u20e3 Priority-Based Scheduling (PBS)","text":"<p>\ud83c\udfe5 Analogy: A hospital prioritizing emergency patients.</p> <p>\u2714 Pros: - \ud83c\udfaf Efficient for critical tasks. - \ud83d\udd04 Can be preemptive or non-preemptive.</p> <p>\u274c Cons: - \u2757 Starvation: Low-priority tasks may never execute. - \ud83d\udcca Requires a priority assignment mechanism.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#7-multilevel-queue-mlq","title":"7\ufe0f\u20e3 Multilevel Queue (MLQ)","text":"<p>\ud83d\udec2 Analogy: Airport check-in queues (VIPs, Economy, etc.).</p> <p>\u2714 Pros: - \u2705 Different scheduling policies per queue. - \ud83c\udfaf Efficient for diverse workloads.</p> <p>\u274c Cons: - \ud83d\udd04 Rigid queue structure reduces flexibility. - \u2699\ufe0f Complex to implement.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#8-multilevel-feedback-queue-mlfq","title":"8\ufe0f\u20e3 Multilevel Feedback Queue (MLFQ)","text":"<p>\ud83c\udfeb Analogy: Student groups that adjust based on performance.</p> <p>\u2714 Pros: - \ud83d\udd04 Adaptive priority adjustment. - \u23f3 Minimizes starvation.</p> <p>\u274c Cons: - \u2699\ufe0f Complex to manage multiple queues. - \ud83d\udcc9 High scheduling overhead.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#comparison-table","title":"\ud83d\udcca Comparison Table","text":"Algorithm Preemptive Starvation Fairness Best For FCFS \u274c No \u274c No \u2705 Yes Batch Processing SJF \u274c No \u26a0\ufe0f Yes \u274c No Shortest Tasks SRTF \u2705 Yes \u26a0\ufe0f Yes \u274c No Fast Execution HRRN \u274c No \u274c No \u2705 Yes Balanced Scheduling RR \u2705 Yes \u274c No \u2705 Yes Time-sharing PBS \u2705/\u274c Both \u26a0\ufe0f Yes \u274c No Critical Tasks MLQ \u2705/\u274c Both \u26a0\ufe0f Yes \u274c No Categorized Workloads MLFQ \u2705 Yes \u274c No \u2705 Yes Adaptive Systems"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.4-Scheduling-Algo/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<ul> <li>FCFS: Simple but inefficient in high-load systems.</li> <li>SJF &amp; SRTF: Optimize waiting time but cause starvation.</li> <li>HRRN: Balances efficiency &amp; fairness.</li> <li>RR: Best for time-sharing, but time slice selection is crucial.</li> <li>PBS: Efficient but needs priority handling.</li> <li>MLQ &amp; MLFQ: Best for complex scheduling, but hard to manage.</li> </ul> <p>\ud83d\ude80 Choosing the right algorithm depends on system requirements!</p> <p>\ud83d\udd17 Further Reading - \ud83d\udd39 OS Scheduling in-depth - \ud83d\udd39 Process Scheduling Algorithms</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/","title":"\ud83d\udccc Threads in Operating Systems","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>Introduction</li> <li>Real-Life Analogy</li> <li>Uses of Threads</li> <li>Types of Threads</li> <li>Advantages &amp; Disadvantages</li> <li>Applications of Threads</li> <li>Threads vs. Processes</li> <li>User-Level vs. Kernel-Level Threads</li> <li>Thread Mapping Models</li> <li>Comparison Table</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#introduction","title":"\ud83d\udd0d Introduction","text":"<ul> <li>A thread is the smallest unit of execution within a process.</li> <li>Enables concurrent execution of multiple tasks within the same process.</li> <li>Improves system efficiency by leveraging multi-core CPUs.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#real-life-analogy","title":"\ud83c\udf7d\ufe0f Real-Life Analogy","text":"<p>A restaurant kitchen: - The chef (process) manages cooking tasks. - Each dish (thread) represents an independent task. - The chef cooks multiple dishes at once, optimizing time.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#uses-of-threads","title":"\ud83c\udfaf Uses of Threads","text":"<ul> <li>\u26a1 Concurrency: Enables multiple tasks to run simultaneously.</li> <li>\ud83d\udce4 Resource Sharing: Threads share memory/resources, reducing overhead.</li> <li>\ud83d\ude80 Performance Boost: Utilizes CPU cores effectively.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#types-of-threads","title":"\ud83d\udee0\ufe0f Types of Threads","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#1-user-level-threads-ults","title":"1\ufe0f\u20e3 User-Level Threads (ULTs)","text":"<ul> <li>Managed by user-space libraries.</li> <li>Faster and requires no kernel intervention.</li> <li>\ud83d\udea8 Limitation: If one thread blocks, the entire process may block.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#2-kernel-level-threads-klts","title":"2\ufe0f\u20e3 Kernel-Level Threads (KLTs)","text":"<ul> <li>Managed by the operating system.</li> <li>Supports true parallelism on multi-core CPUs.</li> <li>\ud83d\udd04 Higher overhead due to kernel intervention.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#advantages-disadvantages","title":"\u2696\ufe0f Advantages &amp; Disadvantages","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#advantages","title":"\u2705 Advantages","text":"<ul> <li>\u26a1 Faster Context Switching (compared to processes).</li> <li>\ud83d\udccc Efficient Resource Sharing (same memory space).</li> <li>\ud83d\ude80 Better Scalability (multi-core CPU utilization).</li> <li>\ud83d\udda5\ufe0f Responsive Applications (separate UI &amp; processing threads).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#disadvantages","title":"\u274c Disadvantages","text":"<ul> <li>\ud83d\udc1e Complex Debugging (due to concurrency issues).</li> <li>\ud83d\udd04 Synchronization Overhead (locks, semaphores needed).</li> <li>\u26a0\ufe0f Deadlocks Risk (improper resource handling).</li> <li>\ud83d\udccc OS Dependency (behavior varies across platforms).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#applications-of-threads","title":"\ud83c\udf0d Applications of Threads","text":"<ul> <li>\ud83c\udf10 Web Servers \u2013 Handle multiple client requests simultaneously.</li> <li>\ud83c\udfa5 Video Streaming \u2013 Threads manage buffering, decoding, playback.</li> <li>\ud83d\udcf1 Interactive Apps \u2013 Ensures UI remains responsive.</li> <li>\ud83c\udfae Gaming Engines \u2013 AI, physics, and rendering handled by separate threads.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#threads-vs-processes","title":"\ud83d\udd04 Threads vs. Processes","text":"Aspect Threads Processes Weight Lightweight Heavyweight Resource Sharing Shares memory &amp; resources Independent memory space Creation Speed Faster Slower Inter-communication Easier (shared memory) Requires IPC (pipes, message queues) Isolation Not isolated (affects shared memory) Fully isolated"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#user-level-vs-kernel-level-threads","title":"\u2694\ufe0f User-Level vs. Kernel-Level Threads","text":"Feature User-Level Threads (ULTs) Kernel-Level Threads (KLTs) Management Handled by user-space libraries Managed by OS kernel Context Switching Faster Slower (involves system calls) Blocking Impact If one thread blocks, all block Other threads continue execution Concurrency Limited on multi-core CPUs True parallelism Implementation Simpler More complex"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#thread-mapping-models","title":"\ud83d\udd17 Thread Mapping Models","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#1-many-to-one-m1","title":"1\ufe0f\u20e3 Many-to-One (M:1)","text":"<ul> <li>Multiple user threads mapped to one kernel thread.</li> <li>\ud83d\ude80 Pros: Fast context switching (all in user space).</li> <li>\u26a0\ufe0f Cons: If one thread blocks, all threads block.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#2-one-to-one-11","title":"2\ufe0f\u20e3 One-to-One (1:1)","text":"<ul> <li>Each user thread has one kernel thread.</li> <li>\ud83d\ude80 Pros: True parallelism on multi-core CPUs.</li> <li>\u26a0\ufe0f Cons: Higher overhead for context switching.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#3-many-to-many-mn","title":"3\ufe0f\u20e3 Many-to-Many (M:N)","text":"<ul> <li>Multiple user threads mapped to multiple kernel threads.</li> <li>\ud83d\ude80 Pros: Balance between parallelism &amp; resource efficiency.</li> <li>\u26a0\ufe0f Cons: Complex implementation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/2.5-Threads/#conclusion","title":"\ud83d\udd1a Conclusion","text":"<ul> <li>Threads enable concurrency within a process, improving efficiency.</li> <li>ULTs are faster but have limited parallelism, whereas KLTs allow true concurrency.</li> <li>Different mapping models (M:1, 1:1, M:N) offer trade-offs between speed and parallelism.</li> <li>Choosing between threads vs. processes depends on resource sharing needs, performance, and isolation requirements.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/","title":"\ud83d\udccc Process Synchronization in Operating Systems","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>\ud83d\udd39 Introduction</li> <li>\ud83d\udea6 Real-Life Analogy</li> <li>\ud83d\udccc Need for Process Synchronization</li> <li>\u2699\ufe0f Tools for Process Synchronization</li> <li>\u26a0\ufe0f Challenges in Process Synchronization</li> <li>\u2705 Advantages &amp; \u274c Disadvantages</li> <li>\ud83d\udca1 Examples of Process Synchronization</li> <li>\ud83d\udd11 Critical Section Problem</li> <li>\ud83d\udd0d Approaches to Solve Critical Section Problem</li> <li>\ud83d\udccc Conclusion</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#introduction","title":"\ud83d\udd39 Introduction","text":"<p>Process synchronization ensures multiple processes execute concurrently without interfering or corrupting shared resources (critical section). It prevents race conditions and maintains data integrity.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#real-life-analogy","title":"\ud83d\udea6 Real-Life Analogy","text":"<p>Imagine a four-way intersection \ud83d\ude97\ud83d\udea6: - Vehicles (processes) arrive and need to follow traffic signals (synchronization mechanisms) to prevent collisions (race conditions). - The signals ensure only one direction moves at a time, avoiding congestion and ensuring safety.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#need-for-process-synchronization","title":"\ud83d\udccc Need for Process Synchronization","text":"<ul> <li>\ud83d\udee0\ufe0f Shared Resource Management: Prevents conflicts over shared memory, files, and devices.</li> <li>\u26a1 Preventing Race Conditions: Avoids simultaneous access issues.</li> <li>\ud83d\udd04 Ensuring Data Consistency: Updates occur in a controlled manner.</li> <li>\ud83d\uded1 Deadlock &amp; Starvation Avoidance: Ensures fair access and prevents indefinite waiting.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#tools-for-process-synchronization","title":"\u2699\ufe0f Tools for Process Synchronization","text":"\ud83d\udd27 Tool \ud83d\udcdd Description \ud83d\udfe2 Semaphores Integer-based synchronization mechanism with <code>wait()</code> &amp; <code>signal()</code>. Types: Binary (0/1) &amp; Counting (range of values). \ud83d\udd10 Mutexes (Mutual Exclusion) A lock allowing only one process at a time in a critical section. Prevents concurrent execution. \ud83d\udce6 Monitors High-level construct encapsulating shared resources &amp; managing access. Ensures single-thread execution inside. \u23f3 Barriers Synchronizes multiple processes by pausing until all reach a defined point. Used in parallel computing."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#challenges-in-process-synchronization","title":"\u26a0\ufe0f Challenges in Process Synchronization","text":"<ul> <li>\ud83d\udd04 Deadlocks: Processes indefinitely waiting for each other.</li> <li>\ud83d\udeab Starvation: Low-priority processes never get access to resources.</li> <li>\u26a1 Race Conditions: Uncontrolled execution leading to inconsistent results.</li> <li>\u23f3 Priority Inversion: Higher-priority process blocked by a lower-priority process.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#advantages-disadvantages","title":"\u2705 Advantages &amp; \u274c Disadvantages","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#advantages","title":"\u2705 Advantages","text":"<p>\u2714\ufe0f Prevents conflicts and ensures correct execution. \u2714\ufe0f Improves resource utilization and system efficiency. \u2714\ufe0f Enables safe concurrency without data corruption.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#disadvantages","title":"\u274c Disadvantages","text":"<p>\u274c Can add overhead and impact performance. \u274c Improper implementation may lead to deadlocks &amp; starvation. \u274c More complex to design in distributed systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#examples-of-process-synchronization","title":"\ud83d\udca1 Examples of Process Synchronization","text":"<ul> <li>\ud83e\udd5b Producer-Consumer Problem: Prevents producer from overwriting buffer and consumer from reading empty data.</li> <li>\ud83d\udcd6 Readers-Writers Problem: Ensures safe access for multiple readers &amp; writers.</li> <li>\ud83c\udf7d\ufe0f Dining Philosophers Problem: Prevents deadlocks when multiple processes (philosophers) share resources (chopsticks).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#critical-section-problem","title":"\ud83d\udd11 Critical Section Problem","text":"<p>Definition: Occurs when multiple processes try to access shared resources simultaneously, leading to data corruption.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#real-life-analogy-bank-teller-system","title":"\ud83c\udfe6 Real-Life Analogy: Bank Teller System","text":"<ul> <li>Customers (Processes) want to interact with Teller (Shared Resource).</li> <li>Only one customer at a time can access the counter to prevent transaction errors.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#key-components","title":"\ud83d\udd39 Key Components","text":"<ol> <li>\ud83d\udd11 Entry Section: Request access to critical section.</li> <li>\ud83d\udcdd Critical Section: Execute code that accesses shared resources.</li> <li>\ud83d\udeaa Exit Section: Release access for other processes.</li> <li>\ud83d\udee4\ufe0f Remainder Section: Non-critical execution outside shared resource.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#approaches-to-solve-critical-section-problem","title":"\ud83d\udd0d Approaches to Solve Critical Section Problem","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#software-solutions","title":"\ud83d\udda5\ufe0f Software Solutions","text":"<ul> <li>\ud83d\udee1\ufe0f Peterson\u2019s Algorithm: Uses flags &amp; turn variables for mutual exclusion.</li> <li>\u2699\ufe0f Dekker\u2019s Algorithm: Uses busy waiting and turn-based access.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#hardware-solutions","title":"\ud83d\udd29 Hardware Solutions","text":"<ul> <li>\ud83d\udd04 TestAndSet: Atomic instruction to prevent multiple accesses.</li> <li>\ud83d\udd01 CompareAndSwap: Ensures safe updates without race conditions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#os-level-solutions","title":"\ud83d\udda5\ufe0f OS-Level Solutions","text":"<ul> <li>\ud83d\udd12 Semaphores &amp; Mutexes for controlled access.</li> <li>\ud83d\udce6 Monitors &amp; Condition Variables for structured synchronization.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.1-Process_Synchronization/#conclusion","title":"\ud83d\udccc Conclusion","text":"<ul> <li>Process synchronization ensures stability &amp; correctness in concurrent execution.</li> <li>Tools like semaphores, mutexes, and monitors help manage synchronization.</li> <li>Proper implementation prevents issues like race conditions, deadlocks, and starvation.</li> </ul> <p>\ud83d\ude80 Mastering process synchronization is crucial for efficient multi-threaded systems! \ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/","title":"\ud83d\udccc Semaphores &amp; Synchronization Cheatsheet","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>\ud83d\udd39 What is a Semaphore?</li> <li>\ud83d\udea6 Real-Life Analogy</li> <li>\ud83d\udcca Types of Semaphores</li> <li>\u2699\ufe0f Working of Semaphores</li> <li>\ud83d\udccc Critical Section Illustration</li> <li>\u2705 Advantages</li> <li>\u26a0\ufe0f Disadvantages</li> <li>\ud83d\udccd Semaphore Use Cases</li> <li>\ud83d\udd04 Counting vs. Binary Semaphores</li> <li>\ud83c\udf5e Producer-Consumer Problem</li> <li>\ud83d\udee0 Solutions to Producer-Consumer Problem</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#what-is-a-semaphore","title":"\ud83d\udd39 What is a Semaphore?","text":"<p>A semaphore is a synchronization tool used in OS to manage concurrent processes and prevent race conditions. - Acts as a counter that controls access to shared resources. - Used in multi-threading to avoid conflicts.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#real-life-analogy","title":"\ud83d\udea6 Real-Life Analogy","text":"<p>Imagine a single-lane bridge \ud83d\ude97\ud83d\ude95: - A traffic light (semaphore) allows one direction to pass at a time. - Prevents collisions and ensures safe resource utilization.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#types-of-semaphores","title":"\ud83d\udcca Types of Semaphores","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#counting-semaphore","title":"\ud83d\udd22 Counting Semaphore","text":"<p>\u2714\ufe0f Allows multiple resources to be shared. \u2714\ufe0f The counter is incremented or decremented dynamically. \u2714\ufe0f Example: Managing multiple printers in a printing service.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#binary-semaphore","title":"\ud83d\udd12 Binary Semaphore","text":"<p>\u2714\ufe0f Only two values: <code>0</code> (locked) and <code>1</code> (available). \u2714\ufe0f Acts as a simple lock. \u2714\ufe0f Example: Managing file access in a system.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#working-of-semaphores","title":"\u2699\ufe0f Working of Semaphores","text":"<p>A semaphore (S) is an integer variable accessed through atomic operations:</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#wait-p-operation","title":"\u23f3 Wait (P) Operation","text":"<p>\ud83d\udcc9 Decreases semaphore value by <code>1</code> (if &gt; 0). \ud83d\uded1 If 0, process waits until resource is available.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#signal-v-operation","title":"\u2705 Signal (V) Operation","text":"<p>\ud83d\udcc8 Increases semaphore value by <code>1</code>. \ud83d\udd13 Signals that a resource is released.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#critical-section-illustration","title":"\ud83d\udccc Critical Section Illustration","text":"<ul> <li>Ensures only one thread accesses a resource at a time.</li> <li>Prevents race conditions in concurrent execution.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#advantages","title":"\u2705 Advantages","text":"<p>\u2714\ufe0f Prevents race conditions. \u2714\ufe0f Ensures safe shared resource access. \u2714\ufe0f Facilitates Inter-Process Communication (IPC). \u2714\ufe0f Supports both single &amp; multiple resource management.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#disadvantages","title":"\u26a0\ufe0f Disadvantages","text":"<p>\u274c Deadlocks or resource starvation if misused. \u274c Complex implementation. \u274c System performance degradation with excessive semaphore usage.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#semaphore-use-cases","title":"\ud83d\udccd Semaphore Use Cases","text":"<p>\ud83d\ude80 Producer-Consumer Problem: Synchronizing buffer access. \ud83d\udcd6 Readers-Writers Problem: Preventing data inconsistency. \ud83d\udea6 Traffic Light Control: Managing multiple lanes at intersections.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#counting-vs-binary-semaphores","title":"\ud83d\udd04 Counting vs. Binary Semaphores","text":"Feature Counting Semaphore Binary Semaphore Resource Count Multiple Single (0/1) Usage Scenario Multiple shared resources (e.g., printers) Critical sections (e.g., file access) Value Range <code>0 to N</code> <code>0 or 1</code>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#producer-consumer-problem","title":"\ud83c\udf5e Producer-Consumer Problem","text":"<p>A classic synchronization problem where: \ud83d\udc68\u200d\ud83c\udf73 Producer generates data \u279d places in buffer. \ud83d\udecd\ufe0f Consumer retrieves data \u279d processes it.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#problem-statement","title":"\ud83c\udfaf Problem Statement","text":"<p>\ud83d\udd04 Shared buffer has limited size. \u26a0\ufe0f Producer waits if buffer is full. \u26a0\ufe0f Consumer waits if buffer is empty.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#solutions-to-producer-consumer-problem","title":"\ud83d\udee0 Solutions to Producer-Consumer Problem","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#using-semaphores","title":"\ud83d\udfe2 Using Semaphores","text":"<ul> <li>Full Semaphore: Tracks filled buffer slots.</li> <li>Empty Semaphore: Tracks available slots.</li> <li>Mutex: Ensures only one accesses the buffer at a time.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#using-monitors","title":"\ud83d\udfe1 Using Monitors","text":"<ul> <li>Encapsulates synchronization logic.</li> <li>Simplifies access to the buffer.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.2-Semaphores/#using-message-passing","title":"\ud83d\udd35 Using Message Passing","text":"<ul> <li>Avoids shared memory by using inter-process communication.</li> <li>Reduces synchronization complexity.</li> </ul> <p>\ud83c\udfaf Real-World Examples \ud83d\udce9 Message Queues: Asynchronous communication. \ud83d\udce5 Multi-threaded Downloaders: Data fetching vs. processing.</p> <p>\ud83d\udccc Master these concepts to ace OS &amp; Concurrency questions in tech interviews! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/","title":"\ud83d\ude80 Deadlock &amp; Scheduling in Operating Systems","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83d\udd17 Deadlock in OS<ul> <li>\ud83d\udd04 Real-Life Analogy</li> <li>\u26a0\ufe0f Conditions for Deadlock</li> <li>\ud83d\udee1\ufe0f Deadlock Handling Strategies</li> <li>\ud83c\udfe6 Banker's Algorithm</li> <li>\ud83d\udcca Deadlock Prevention vs Avoidance</li> </ul> </li> <li>\ud83d\udd52 Starvation &amp; Aging in OS<ul> <li>\ud83e\udd76 Starvation</li> <li>\ud83d\udcc8 Aging (Solution to Starvation)</li> <li>\u2696\ufe0f Starvation vs Aging</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#deadlock-in-os","title":"\ud83d\udd17 Deadlock in OS","text":"<p>A deadlock occurs when two or more processes are stuck waiting for resources held by each other, leading to an infinite waiting loop.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#real-life-analogy","title":"\ud83d\udd04 Real-Life Analogy","text":"<p>\ud83d\udee3\ufe0f Two drivers on a single-lane bridge: - Driver A waits for Driver B to move back. - Driver B waits for Driver A to move back. - \u274c Neither can proceed \u2192 Deadlock!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#conditions-for-deadlock","title":"\u26a0\ufe0f Conditions for Deadlock","text":"<p>A deadlock occurs if all four conditions hold simultaneously: 1\ufe0f\u20e3 Mutual Exclusion: At least one resource is non-shareable. 2\ufe0f\u20e3 Hold and Wait: A process holding resources waits for more. 3\ufe0f\u20e3 No Preemption: Resources cannot be forcibly taken. 4\ufe0f\u20e3 Circular Wait: A closed chain of processes waiting for each other.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#deadlock-handling-strategies","title":"\ud83d\udee1\ufe0f Deadlock Handling Strategies","text":"<p>\u2705 Prevention: Proactively break at least one deadlock condition. - \ud83d\udd04 Remove Mutual Exclusion: Make resources shareable. - \ud83d\udeab Avoid Hold and Wait: Request all resources at once. - \ud83d\udd04 Allow Preemption: Take resources forcibly if needed. - \ud83d\udd01 Break Circular Wait: Impose an ordering of resource allocation.</p> <p>\u2705 Avoidance: Dynamically check resource requests before granting. - \ud83c\udfe6 Uses Banker's Algorithm to maintain a safe state.</p> <p>\u2705 Detection &amp; Recovery: Allow deadlock, then resolve it. - \ud83d\udd0d Detect deadlocked processes. - \u274c Terminate or preempt resources to break deadlock.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#bankers-algorithm","title":"\ud83c\udfe6 Banker's Algorithm","text":"<p>A deadlock avoidance algorithm that ensures safe resource allocation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#real-life-analogy_1","title":"\ud83c\udfe6 Real-Life Analogy","text":"<p>\ud83d\udcb0 A bank granting loans: - The bank ensures it has enough funds before approving a loan. - Only loans that won\u2019t cause insolvency are granted.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#steps-in-bankers-algorithm","title":"\ud83c\udfe6 Steps in Banker's Algorithm","text":"<p>1\ufe0f\u20e3 Resource Request: - Check if requested resources are within the declared maximum. - Allocate only if the system remains in a safe state.</p> <p>2\ufe0f\u20e3 Safety Check: - Simulate allocation &amp; verify if a safe sequence exists. - If safe \u2705 \u2192 Allocate resources. - If unsafe \u274c \u2192 Process must wait.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#deadlock-prevention-vs-avoidance","title":"\ud83d\udcca Deadlock Prevention vs Avoidance","text":"\ud83d\udd39 Feature \ud83d\udee1\ufe0f Prevention \ud83c\udfe6 Avoidance Strategy Remove deadlock conditions Dynamically check before allocating Complexity Lower Higher (requires checking) Efficiency Less efficient Ensures optimal resource usage"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#starvation-aging-in-os","title":"\ud83d\udd52 Starvation &amp; Aging in OS","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#starvation","title":"\ud83e\udd76 Starvation","text":"<p>\ud83d\uded1 A process waits indefinitely due to resource priority policies.</p> <p>\ud83d\udca1 Real-Life Analogy: \ud83d\uded2 Grocery Store Queue: - A shy customer (low-priority process) keeps letting others go ahead. - Never gets served = Starvation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#causes-of-starvation","title":"\ud83d\udd39 Causes of Starvation","text":"<ul> <li>Strict priority-based scheduling.</li> <li>Excessive resource use by high-priority processes.</li> <li>Lack of fairness mechanisms.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#solutions-to-starvation","title":"\ud83d\udd39 Solutions to Starvation","text":"<p>\u2705 Aging: Gradually increase the priority of waiting processes. \u2705 Fair Scheduling Algorithms: Use Round Robin or Fair Share. \u2705 Limit Resource Holding Time: Restrict how long a process can hold a resource.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#aging-solution-to-starvation","title":"\ud83d\udcc8 Aging (Solution to Starvation)","text":"<p>\ud83d\ude80 A technique that prevents starvation by dynamically increasing a process's priority over time.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#how-aging-works","title":"\ud83d\udd39 How Aging Works","text":"<ul> <li>Each process starts with an initial priority.</li> <li>Priority increases the longer it waits.</li> <li>Eventually, the waiting process gains enough priority to execute.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#advantages-of-aging","title":"\ud83d\udd39 Advantages of Aging","text":"<p>\u2714\ufe0f Ensures fairness and prevents indefinite waiting. \u2714\ufe0f Improves system responsiveness.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#disadvantages-of-aging","title":"\ud83d\udd39 Disadvantages of Aging","text":"<p>\u274c Scheduling overhead increases complexity. \u274c High-priority processes may get delayed.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#starvation-vs-aging","title":"\u2696\ufe0f Starvation vs Aging","text":"\ud83d\udd39 Feature \ud83e\udd76 Starvation \ud83d\udcc8 Aging (Solution) Definition A process waits indefinitely due to prioritization. Gradually increases priority to prevent starvation. Cause Strict priority scheduling. Implemented as a fairness mechanism. Outcome Process may never execute. Ensures all processes eventually execute."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/3.3-Deadlock_AND_Scheduling/#summary","title":"\ud83c\udfaf Summary","text":"<ul> <li>Deadlocks occur when processes wait indefinitely due to resource dependencies.</li> <li>Banker's Algorithm ensures safe resource allocation to prevent deadlocks.</li> <li>Starvation happens when low-priority processes are indefinitely delayed.</li> <li>Aging prevents starvation by gradually increasing priority over time.</li> </ul> <p>\ud83d\ude80 Mastering these concepts is essential for system design &amp; OS efficiency! </p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/","title":"\ud83d\ude80 Memory Management in Operating Systems","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>Introduction</li> <li>Memory Allocation Techniques<ul> <li>First Fit</li> <li>Best Fit</li> <li>Worst Fit</li> </ul> </li> <li>Contiguous Allocation</li> <li>Paging</li> <li>Segmentation</li> <li>Comparison of Techniques</li> <li>Conclusion</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#introduction","title":"\ud83d\udd0d Introduction","text":"<p>Memory management is a fundamental aspect of operating systems, ensuring efficient allocation of memory resources. Various allocation strategies exist, including First Fit, Best Fit, and Worst Fit, each with different trade-offs.</p> <p>\ud83d\udccc Real-Life Analogy: Imagine a library with differently sized shelves (memory blocks) and books (processes): - First Fit \ud83d\udccc: Place the book on the first available shelf that fits. - Best Fit \ud83c\udfaf: Find the smallest shelf that fits the book perfectly. - Worst Fit \ud83d\udccf: Place the book on the largest shelf to leave more space for future books.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#memory-allocation-techniques","title":"\ud83d\udee0\ufe0f Memory Allocation Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#1-first-fit","title":"1\ufe0f\u20e3 First Fit","text":"<p>\ud83d\udd39 How It Works: - Scans memory blocks sequentially and assigns the first suitable block. - Leaves remaining space as free.</p> <p>\u2705 Advantages: - Fast allocation \u23e9 - Simple implementation \ud83d\udee0\ufe0f</p> <p>\u274c Disadvantages: - Leads to external fragmentation \ud83d\udea7 - May not utilize memory efficiently \ud83d\udcc9</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#2-best-fit","title":"2\ufe0f\u20e3 Best Fit","text":"<p>\ud83d\udd39 How It Works: - Searches for the smallest available memory block that fits the process. - Minimizes leftover space.</p> <p>\u2705 Advantages: - Reduces wasted space \ud83d\udccf - Efficient for systems with many small processes \ud83d\udcca</p> <p>\u274c Disadvantages: - Higher computational overhead \u23f3 - Can still cause fragmentation \ud83d\udd0d</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#3-worst-fit","title":"3\ufe0f\u20e3 Worst Fit","text":"<p>\ud83d\udd39 How It Works: - Allocates the largest available block to a process. - Leaves a large amount of free space.</p> <p>\u2705 Advantages: - Can reduce fragmentation in some cases \ud83d\udd04 - Good for systems with large processes \ud83c\udfd7\ufe0f</p> <p>\u274c Disadvantages: - Inefficient for small processes \ud83d\udcc9 - Higher computational overhead \ud83d\udcbb</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#contiguous-allocation","title":"\ud83d\udccc Contiguous Allocation","text":"<p>Allocates a single continuous block of memory for each process.</p> <p>\ud83d\udcd6 Real-Life Analogy: Imagine placing books on a shelf without gaps. If a new book doesn\u2019t fit, you must rearrange the shelf or find another space.</p> <p>\u2705 Advantages: - Simple implementation \ud83d\udee0\ufe0f - Fast memory access \u26a1</p> <p>\u274c Disadvantages: - External fragmentation \ud83d\udea7 - Difficult to find large enough memory blocks \ud83d\udccf</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#paging","title":"\ud83d\udcda Paging","text":"<p>A method that divides memory into fixed-size pages and maps them to physical memory frames.</p> <p>\ud83d\udcd6 Real-Life Analogy: A book split into numbered pages, stored on different shelves (frames). An index (page table) helps locate them.</p> <p>\ud83d\udd39 How It Works: 1. Process is divided into pages \ud83d\udcc4 2. Main memory is divided into frames \ud83d\udd32 3. A page table maps pages to frames \ud83d\udd17</p> <p>\u2705 Advantages: - Eliminates external fragmentation \u2705 - More flexible allocation \ud83d\udcc2</p> <p>\u274c Disadvantages: - Internal fragmentation (unused space in frames) \ud83d\udd33 - Address translation adds overhead \ud83d\udd04</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#segmentation","title":"\ud83c\udfd7\ufe0f Segmentation","text":"<p>A memory management technique where a process is divided into logical segments like code, data, and stack.</p> <p>\ud83d\udcd6 Real-Life Analogy: Storing different project files in separate folders based on their type (e.g., code files, documents, images).</p> <p>\ud83d\udd39 How It Works: 1. Process is divided into variable-sized segments \ud83d\udcc2 2. A segment table stores base addresses and lengths \ud83d\udccb 3. CPU references segment number + offset for memory access \ud83d\udd22</p> <p>\u2705 Advantages: - Logical memory organization \ud83d\uddc2\ufe0f - Independent growth of segments \ud83d\udcc8</p> <p>\u274c Disadvantages: - External fragmentation \ud83d\udccf - Finding space for variable-sized segments is complex \ud83d\udd0d</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#comparison-of-techniques","title":"\u2696\ufe0f Comparison of Techniques","text":"Technique Advantages Disadvantages First Fit Fast, simple \u2705 Prone to fragmentation \ud83d\udea7 Best Fit Minimizes wasted space \ud83c\udfaf Higher computational overhead \u23f3 Worst Fit Leaves large free spaces \ud83d\udd32 Inefficient for small processes \ud83d\udcc9 Paging Eliminates external fragmentation \u2705 Requires page table, adds overhead \ud83d\udd04 Segmentation Logical organization \ud83c\udfd7\ufe0f Causes external fragmentation \ud83d\udccf Contiguous Allocation Fast access \u26a1 Prone to external fragmentation \ud83d\udea7"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.1-Memory_Management/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<p>Choosing the right memory management technique depends on system requirements: - First Fit is fast and simple \u2705 - Best Fit optimizes memory usage \ud83d\udcca - Worst Fit works better for large process allocations \ud83c\udfd7\ufe0f - Paging eliminates fragmentation but has overhead \ud83d\udd04 - Segmentation organizes memory logically but may cause fragmentation \ud83d\udd0d - Contiguous Allocation is straightforward but inefficient long-term \ud83d\udccf</p> <p>Understanding these techniques is crucial for designing efficient operating systems. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/","title":"Virtual Memory &amp; Page Replacement Algorithms \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>Virtual Memory</li> <li>How Virtual Memory Works</li> <li>Advantages &amp; Disadvantages</li> <li>Page Faults</li> <li>Minimizing Page Faults</li> <li>Page Replacement Algorithms<ul> <li>FIFO (First-In, First-Out)</li> <li>LRU (Least Recently Used)</li> <li>Optimal Page Replacement</li> </ul> </li> <li>Comparison of Algorithms</li> <li>Belady's Anomaly</li> <li>Thrashing</li> <li>Dynamic Binding</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#virtual-memory","title":"\ud83d\udccc Virtual Memory","text":"<p>\ud83d\udd39 Definition: A memory management technique that provides the illusion of a larger RAM using secondary storage (disk) as an extension.</p> <p>\ud83d\udd39 Real-Life Analogy: A small desk (RAM) with bookshelves (disk). You keep frequently used books on the desk and swap them when needed.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#how-virtual-memory-works","title":"\ud83d\udee0 How Virtual Memory Works","text":"<p>\u2705 Logical &amp; Physical Address Separation: Programs use logical addresses, which the OS maps to physical addresses. \u2705 Paging Mechanism: Memory is divided into pages (logical) and frames (physical). \u2705 Page Tables: Store mappings between logical pages and physical frames.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#advantages-disadvantages","title":"\u2705 Advantages &amp; \u274c Disadvantages","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#advantages","title":"\u2705 Advantages:","text":"<p>\u2714 Efficient memory utilization \u2013 Run programs larger than RAM. \u2714 Process isolation \u2013 Each process gets its own address space. \u2714 Multitasking support \u2013 Run multiple applications smoothly.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#disadvantages","title":"\u274c Disadvantages:","text":"<p>\u2718 Performance overhead \u2013 Disk access is slower than RAM. \u2718 Thrashing \u2013 Frequent paging can slow down the system. \u2718 Extra memory usage \u2013 Page tables consume additional memory.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#page-faults","title":"\u26a0 Page Faults","text":"<p>\ud83d\udd39 Definition: Occurs when a required page is not in RAM, forcing the OS to fetch it from the disk.</p> <p>\ud83d\udd39 Real-Life Analogy: You need a book that\u2019s on the bookshelf, not on your desk, so you go fetch it.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#causes","title":"\ud83d\udd0d Causes:","text":"<ul> <li>First-time access to a page</li> <li>Page swapped out due to memory constraints</li> <li>Invalid access (segmentation fault)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#handling","title":"\ud83d\udd04 Handling:","text":"<ol> <li>Detect fault and pause process.</li> <li>Retrieve the page from disk.</li> <li>Update the page table.</li> <li>Resume execution.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#minimizing-page-faults","title":"\ud83d\udcc9 Minimizing Page Faults","text":"<p>\u2705 Optimized memory management: Use algorithms like LRU &amp; Optimal Replacement. \u2705 Increase RAM: More RAM = fewer disk accesses. \u2705 Efficient coding: Structure applications to reduce unnecessary memory swaps.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#page-replacement-algorithms","title":"\ud83d\udd04 Page Replacement Algorithms","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#fifo-first-in-first-out","title":"\ud83d\udccc FIFO (First-In, First-Out)","text":"<p>\ud83d\udd39 Concept: The oldest page in memory is removed first. \ud83d\udd39 Real-Life Analogy: Removing the first book you placed on the shelf.</p> <p>\u2705 Pros: \u2714 Simple and easy to implement. \u274c Cons: \u2718 May remove frequently used pages (Belady\u2019s Anomaly).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#lru-least-recently-used","title":"\ud83d\udccc LRU (Least Recently Used)","text":"<p>\ud83d\udd39 Concept: Removes the least recently used page. \ud83d\udd39 Real-Life Analogy: Discarding the book you haven\u2019t read in the longest time.</p> <p>\u2705 Pros: \u2714 Generally provides better performance than FIFO. \u274c Cons: \u2718 Requires extra hardware/software to track page usage.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#optimal-page-replacement","title":"\ud83d\udccc Optimal Page Replacement","text":"<p>\ud83d\udd39 Concept: Removes the page that won\u2019t be needed for the longest time. \ud83d\udd39 Real-Life Analogy: If you knew exactly when you'd need each book, you\u2019d remove the one needed farthest in the future.</p> <p>\u2705 Pros: \u2714 Lowest possible page faults (benchmark algorithm). \u274c Cons: \u2718 Requires future knowledge, which is impractical.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#comparison-of-algorithms","title":"\u2696 Comparison of Algorithms","text":"Algorithm Performance Complexity Practicality FIFO \u274c Poor \u2705 Simple \u2705 Easy LRU \u2705 Good \u274c Higher \u2705 Practical Optimal \u2705 Best \u274c High \u274c Unrealistic"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":"<p>\u2714 Virtual Memory enables efficient multitasking and memory management. \u2714 Page Faults slow down performance but can be minimized. \u2714 FIFO is simple but inefficient, LRU is practical, and Optimal is ideal but unrealistic.</p> <p>\ud83d\ude80 Mastering these concepts is essential for System Design Interviews &amp; OS Optimization! \ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#beladys-anomaly","title":"\ud83d\udd39 Belady's Anomaly","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#what-is-it","title":"\ud83d\udcd6 What is it?","text":"<p>Belady's Anomaly is a counterintuitive phenomenon where increasing the number of memory frames increases page faults instead of reducing them. This primarily occurs in the First-In-First-Out (FIFO) page replacement algorithm.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#real-life-analogy","title":"\ud83c\udfaf Real-Life Analogy","text":"<p>Imagine you have a bigger refrigerator (more frames) to store groceries (pages). You expect fewer grocery trips (fewer page faults), but if you randomly arrange groceries, you might forget what's inside and end up buying more unnecessary items (more page faults).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#how-it-occurs","title":"\ud83d\udd0d How It Occurs","text":"<ul> <li>FIFO Page Replacement: The oldest page is replaced first, without considering future use.</li> <li>Unexpected Behavior: If adding frames continuously evicts needed pages, it increases page faults.</li> <li>Example Case: A specific page reference string might work well with fewer frames but cause more faults when more frames are added.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#key-insight","title":"\ud83d\udca1 Key Insight","text":"<p>\u2705 Belady\u2019s Anomaly affects FIFO but not all algorithms. \u2705 Optimal Page Replacement &amp; Least Recently Used (LRU) do not exhibit this issue.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#thrashing","title":"\ud83d\udd39 Thrashing","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#what-is-it_1","title":"\ud83d\udcd6 What is it?","text":"<p>Thrashing occurs when the system spends most of its time swapping pages in and out of memory instead of executing processes, leading to poor performance and low CPU utilization.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#real-life-analogy_1","title":"\ud83c\udfaf Real-Life Analogy","text":"<p>Imagine a student with a cluttered desk, trying to study multiple subjects. If they constantly pick up and put down books without actually reading, they waste time rearranging instead of studying. \ud83c\udfeb\ud83d\udcda</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#causes-of-thrashing","title":"\ud83d\udea8 Causes of Thrashing","text":"<ul> <li>Over-allocation of Memory \u2192 Too many processes competing for limited RAM.</li> <li>Poor Locality of Reference \u2192 Processes frequently request pages not in memory, causing excessive page faults.</li> <li>High Degree of Multiprogramming \u2192 More processes loaded than memory can handle.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#effects-of-thrashing","title":"\u26a0\ufe0f Effects of Thrashing","text":"<p>\u274c Reduced CPU utilization (cycles wasted in swapping) \u274c Significant drop in system performance \u274c Longer response times, affecting user experience</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#preventing-or-reducing-thrashing","title":"\u2705 Preventing or Reducing Thrashing","text":"<ul> <li>Working Set Model: Ensure each process has enough memory to hold frequently used pages.</li> <li>Control Multiprogramming: Reduce the number of active processes.</li> <li>Better Page Replacement Algorithms: Choose algorithms that track access patterns effectively.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#dynamic-binding","title":"\ud83d\udd39 Dynamic Binding","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#what-is-it_2","title":"\ud83d\udcd6 What is it?","text":"<p>Dynamic Binding (late binding) resolves memory addresses at run-time instead of compile-time, allowing flexibility in memory management.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#real-life-analogy_2","title":"\ud83c\udfaf Real-Life Analogy","text":"<p>A delivery driver planning routes on-the-fly \ud83d\ude9a. Instead of fixing all deliveries before departure (compile-time), the driver adjusts based on real-time traffic (run-time). Similarly, dynamic binding allows memory allocations to be adjusted during execution.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#how-it-works","title":"\u2699\ufe0f How It Works","text":"<ul> <li>Compile-Time Binding: Fixed addresses decided at compile-time.</li> <li>Dynamic Binding: Memory addresses resolved at run-time, allowing adjustments.</li> <li>Memory Management Unit (MMU): Translates logical to physical addresses dynamically.</li> <li>Loader &amp; Linker Support: Programs can be placed anywhere in memory, and address relocation happens as they run.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#advantages-of-dynamic-binding","title":"\u2705 Advantages of Dynamic Binding","text":"<ul> <li>Efficient memory utilization</li> <li>Flexibility in loading libraries &amp; modules at run-time</li> <li>No need to fix memory allocation at compile-time</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#disadvantages_1","title":"\u26a0\ufe0f Disadvantages","text":"<p>\u274c Additional overhead due to run-time address translation. \u274c Increased complexity in ensuring correct memory mapping.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/4.2-Virtual%20Memory_AND_Page_Replacement_Algorithms/#summary","title":"\ud83d\udccc Summary","text":"Concept Key Points Belady\u2019s Anomaly More frames can increase page faults in FIFO. \ud83d\ude80 LRU &amp; Optimal avoid this. Thrashing Excessive page swaps reduce system performance. Prevent with working set models &amp; better algorithms. \ud83d\udcc9 Dynamic Binding Memory addresses resolved at run-time for flexibility but with extra overhead. \ud83d\udd04 <p>This structured and engaging guide helps in quick revision and deep dives into OS memory management concepts! \ud83d\ude80\ud83d\udca1</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/","title":"\ud83d\udcc2 File System: The Backbone of Data Management","text":"<p>A File System is the core component of an OS that organizes, stores, and retrieves data efficiently. It defines how files are structured, named, accessed, and managed.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>\ud83d\udccc What is a File System?</li> <li>\ud83d\udcda Real-Life Analogy</li> <li>\ud83d\udee0\ufe0f Key Components</li> <li>\ud83d\udcc2 File Allocation Methods</li> <li>\u26a1 Access Methods</li> <li>\ud83d\udd10 File Permissions &amp; Security</li> <li>\ud83d\uddc2\ufe0f Common File Systems</li> <li>\u2705 Advantages of a Well-Structured File System</li> <li>\u26a0\ufe0f Challenges &amp; Considerations</li> <li>\ud83c\udd9a Comparison of File Systems</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#what-is-a-file-system","title":"\ud83d\udccc What is a File System?","text":"<p>A file system structures data into files, directories, and metadata, ensuring organized storage and efficient retrieval on devices like HDDs, SSDs, and USBs.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#real-life-analogy","title":"\ud83d\udcda Real-Life Analogy","text":"<p>Think of a file system like a library: - \ud83d\udcd6 Books (files) are categorized and stored on \ud83d\udcda shelves (directories). - \ud83c\udfdb\ufe0f The librarian (OS) manages the records and keeps track of borrowed books (metadata). - \ud83d\udcdc The catalog (file index) helps users find the right book efficiently.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#key-components","title":"\ud83d\udee0\ufe0f Key Components","text":"<ul> <li>\ud83d\udcc1 Files: Basic storage units containing data (text, images, videos, programs, etc.).</li> <li>\ud83d\udcc2 Directories: Containers for files and other directories for structured data organization.</li> <li>\ud83d\udcd1 Metadata: Stores file details (size, timestamps, attributes, location).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#file-allocation-methods","title":"\ud83d\udcc2 File Allocation Methods","text":"<ul> <li>\ud83d\udccf Contiguous Allocation: Stores files in consecutive blocks (fast but prone to fragmentation).</li> <li>\ud83d\udd17 Linked Allocation: Uses pointers to link scattered file blocks (reduces fragmentation but slower access).</li> <li>\ud83d\udcdc Indexed Allocation: Maintains an index with block pointers (balanced approach).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#access-methods","title":"\u26a1 Access Methods","text":"<ul> <li>\ud83d\udcd6 Sequential Access: Files read in order (e.g., reading a book cover to cover).</li> <li>\u23e9 Direct Access: Random access to any part of the file (e.g., skipping to a specific book page).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#file-permissions-security","title":"\ud83d\udd10 File Permissions &amp; Security","text":"<p>File systems control access with read, write, execute permissions to ensure security.</p> <p>Example:</p> <pre><code>-rwxr--r-- user group file.txt\n</code></pre> <ul> <li><code>rwx</code> (owner) \u2192 Read, Write, Execute</li> <li><code>r--</code> (group) \u2192 Read only</li> <li><code>r--</code> (others) \u2192 Read only</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#common-file-systems","title":"\ud83d\uddc2\ufe0f Common File Systems","text":"File System OS Compatibility Features FAT32 Windows, macOS, Linux Universal compatibility, 4GB file limit NTFS Windows Security, journaling, large file support ext4 Linux Journaling, large file support, stability HFS+ macOS Legacy Apple FS, replaced by APFS APFS macOS Fast, secure, optimized for SSDs exFAT Windows, macOS, Linux Supports large files, optimized for flash storage"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#advantages-of-a-well-structured-file-system","title":"\u2705 Advantages of a Well-Structured File System","text":"<p>\u2714\ufe0f Efficient Data Management: Fast access, reduced search time. \u2714\ufe0f Enhanced Security: Access control mechanisms prevent unauthorized access. \u2714\ufe0f Data Integrity: Journaling and backup mechanisms protect against corruption. \u2714\ufe0f Scalability: Supports increasing storage needs without performance issues.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#challenges-considerations","title":"\u26a0\ufe0f Challenges &amp; Considerations","text":"<p>\u26a0\ufe0f Fragmentation: Over time, files scatter, slowing performance. \u26a0\ufe0f Compatibility Issues: Different OSes may not support all file systems. \u26a0\ufe0f Migration Complexity: Upgrading file systems requires careful planning.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#comparison-of-file-systems","title":"\ud83c\udd9a Comparison of File Systems","text":"Feature FAT32 NTFS ext4 APFS Max File Size 4GB 16TB 16TB 8EB Journaling \u274c No \u2705 Yes \u2705 Yes \u2705 Yes Encryption \u274c No \u2705 Yes \u274c No \u2705 Yes Performance \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 Best For USB drives Windows OS Linux OS macOS &amp; SSDs"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>A file system is more than just a storage mechanism\u2014it ensures efficiency, security, and scalability in data management. Choosing the right file system depends on performance, compatibility, and security needs.</p> <p>\ud83d\ude80 Mastering file systems is essential for any software engineer dealing with storage solutions, databases, or operating systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.1-File_System/#keep-learning","title":"\ud83d\udcdd Keep Learning!","text":"<p>\ud83d\udd17 Extensive Guide on File Systems \ud83d\udd17 Comparison of File Systems</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/","title":"\ud83d\udcc2 File Allocation, Deallocation, and Fragmentation in OS","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#table-of-contents","title":"\ud83d\udcdc Table of Contents","text":"<ol> <li>Introduction</li> <li>File Allocation Methods</li> <li>File Deallocation</li> <li>Fragmentation</li> <li>Minimizing Fragmentation</li> <li>File Control Block (FCB)</li> <li>Access Control Lists (ACLs)</li> <li>Comparison: FCB vs ACL</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#introduction","title":"\ud83d\udd0d Introduction","text":"<ul> <li>The OS manages files on storage devices (HDD, SSD, etc.) for efficient access, storage, and retrieval.</li> <li>Real-Life Analogy \ud83d\udcd6: A bookshelf where books (files) are added, removed, and rearranged. Over time, gaps appear, making organization harder\u2014similar to fragmentation in storage.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#file-allocation-methods","title":"\ud83d\udcc1 File Allocation Methods","text":"<p>Allocation determines how storage space is assigned to files.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#1-contiguous-allocation","title":"1\ufe0f\u20e3 Contiguous Allocation","text":"<p>\u2705 Pros: - Fast sequential access \ud83d\ude80 - Simple tracking of file locations \ud83d\uddfa\ufe0f</p> <p>\u274c Cons: - External fragmentation \ud83d\udcc9 - Hard to find contiguous free space \u274c</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#2-linked-allocation","title":"2\ufe0f\u20e3 Linked Allocation","text":"<p>\u2705 Pros: - No external fragmentation \u2705 - Easy to expand files dynamically \ud83d\udccc</p> <p>\u274c Cons: - Slow random access \u23f3 (must follow links) - Extra space overhead for pointers \ud83c\udff7\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#3-indexed-allocation","title":"3\ufe0f\u20e3 Indexed Allocation","text":"<p>\u2705 Pros: - Fast random access \ud83d\udd0d (direct lookup via index block) - No external fragmentation \ud83d\ude80</p> <p>\u274c Cons: - Extra space required for the index block \ud83d\udce6 - Complexity in managing large files \u2699\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#file-deallocation","title":"\ud83d\uddd1\ufe0f File Deallocation","text":"<ul> <li>When a file is deleted, space is freed for future use.</li> <li>Steps:<ul> <li>OS marks blocks as free in internal data structures (bitmaps, free lists) \u2705</li> <li>Optionally, the OS may compact or defragment storage \ud83d\udcca</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#fragmentation","title":"\ud83d\udca5 Fragmentation","text":"<p>Occurs when free space is scattered into small unusable chunks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#external-fragmentation","title":"\ud83d\udd39 External Fragmentation","text":"<ul> <li>Cause: Contiguous allocation leaves scattered gaps \ud83d\udea7</li> <li>Effect: Hard to allocate large files \ud83d\udcc9</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#internal-fragmentation","title":"\ud83d\udd38 Internal Fragmentation","text":"<ul> <li>Cause: Fixed-sized blocks waste space \ud83c\udfd7\ufe0f</li> <li>Effect: Storage is underutilized \ud83c\udfda\ufe0f</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#effects-of-fragmentation","title":"\u26a0\ufe0f Effects of Fragmentation","text":"<ul> <li>Slow performance \ud83d\udc22 (longer disk access times)</li> <li>Wasted space \ud83d\udcc9 (cannot fully utilize storage)</li> <li>Higher maintenance \ud83d\udd04 (frequent defragmentation needed)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#minimizing-fragmentation","title":"\ud83d\udee0\ufe0f Minimizing Fragmentation","text":"<ul> <li>Use efficient allocation (Indexed over Contiguous)</li> <li>Regular defragmentation \ud83e\uddf9</li> <li>Plan storage intelligently \ud83c\udfd7\ufe0f (group frequently accessed files)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#file-control-block-fcb","title":"\ud83d\udcdc File Control Block (FCB)","text":"<p>A data structure storing metadata for files.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#key-attributes","title":"\ud83c\udff7\ufe0f Key Attributes:","text":"<ul> <li>File Name &amp; Path \ud83d\udcc2</li> <li>Size &amp; Permissions \ud83d\udd12</li> <li>Disk Location \ud83d\uddfa\ufe0f</li> <li>Timestamps \u23f3 (Created, Modified, Accessed)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#how-os-uses-fcb","title":"\ud83d\udda5\ufe0f How OS Uses FCB:","text":"<ul> <li>Locates and retrieves file data \ud83d\udd0d</li> <li>Updates metadata when files change \ud83d\udd04</li> <li>Manages file access efficiently \ud83d\udcca</li> </ul> <p>\u2705 Advantages: - Quick access to file metadata \u26a1 - Efficient file operations \ud83d\udd04</p> <p>\u274c Limitations: - May become fragmented or outdated \ud83c\udfda\ufe0f - Lacks flexibility for complex permissions \u26a0\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#access-control-lists-acls","title":"\ud83d\udd10 Access Control Lists (ACLs)","text":"<p>A detailed permission system for file access control.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#how-acls-work","title":"\ud83d\udcdc How ACLs Work:","text":"<ul> <li>Each file/directory has an entry list of users &amp; their access rights \ud83d\uddc2\ufe0f</li> <li>More flexible than traditional owner-group permissions \ud83d\udd04</li> <li>Supports granular access control (e.g., read-only for one user, full access for another) \ud83c\udfaf</li> </ul> <p>\u2705 Advantages: - Fine-grained permission control \ud83d\udd12 - Better security in multi-user environments \ud83c\udfe2</p> <p>\u274c Disadvantages: - Harder to manage in large systems \u26a0\ufe0f - Misconfigurations can cause security loopholes \ud83d\udd13</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#comparison-fcb-vs-acl","title":"\u2696\ufe0f Comparison: FCB vs ACL","text":"Feature File Control Block (FCB) Access Control List (ACL) Purpose Stores file metadata \ud83d\udcc2 Manages file access rights \ud83d\udd10 Permission Model Basic (Owner, Group, Others) \ud83d\udc65 Detailed per-user permissions \ud83c\udfaf Flexibility Limited \ud83d\uded1 Highly customizable \u2699\ufe0f Ease of Use Simple \u2705 Complex to manage \u26a0\ufe0f Security Basic \ud83d\udd13 Stronger \ud83d\udd12"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.2-File_Allocation_Deallocation_Fragmentation/#summary","title":"\ud83d\udccc Summary","text":"<ul> <li>File allocation impacts efficiency \ud83d\ude80</li> <li>Deallocation &amp; fragmentation affect performance \ud83d\udcc9</li> <li>FCB stores file metadata, while ACLs provide fine-grained access control \ud83d\udd10</li> <li>Optimizing storage minimizes fragmentation and improves OS efficiency \ud83d\udcca</li> </ul> <p>\ud83d\ude80 Stay efficient! Proper file management leads to faster and more reliable systems. \ud83d\udca1</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/","title":"\ud83d\udd12 File System Encryption &amp; User Authentication","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ol> <li>Introduction</li> <li>Encryption Techniques<ul> <li>Symmetric Key Encryption</li> <li>Asymmetric Key Encryption</li> <li>File System vs Full-Disk Encryption</li> <li>Key Management &amp; Access Control</li> </ul> </li> <li>User Authentication Mechanisms<ul> <li>Common Authentication Factors</li> <li>Password-Based Authentication</li> <li>Multi-Factor Authentication (MFA)</li> <li>Biometric Authentication</li> <li>Token &amp; Certificate-Based Authentication</li> </ul> </li> <li>Choosing the Right Security Approach</li> <li>Conclusion</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#introduction","title":"\ud83d\udcd6 Introduction","text":"<p>\ud83d\udd10 File system encryption ensures that stored data remains protected by transforming readable data into an unreadable format. Even if an attacker gains access to the disk, they cannot decipher its contents without the decryption key.</p> <p>\ud83d\udee0 Real-Life Analogy: Think of encryption like a safe. You can store valuables inside, but without the correct combination, they remain inaccessible.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#encryption-techniques","title":"\ud83d\udd11 Encryption Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#symmetric-key-encryption","title":"\ud83c\udfce\ufe0f Symmetric Key Encryption","text":"<p>Uses one secret key for both encryption and decryption.</p> <p>\ud83d\udd39 How It Works: 1. \ud83d\udd11 Key Generation: A single secret key is created. 2. \ud83d\udd10 Encryption: The key scrambles the data. 3. \ud83d\udd13 Decryption: The same key restores the original data.</p> <p>\u2705 Advantages: - Fast &amp; efficient \ud83d\udd25 - Low computational overhead \u26a1</p> <p>\u274c Disadvantages: - Key distribution is a challenge (If compromised, data is at risk) \u26a0\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#asymmetric-key-encryption","title":"\ud83d\udd12 Asymmetric Key Encryption","text":"<p>Uses two keys: a public key for encryption and a private key for decryption.</p> <p>\ud83d\udd39 How It Works: 1. \ud83d\udd11 Key Pair Generation: A public and private key are created. 2. \ud83d\udce9 Encryption with Public Key: Anyone can encrypt data using the public key. 3. \ud83d\udd13 Decryption with Private Key: Only the private key owner can decrypt it.</p> <p>\u2705 Advantages: - No need to share secret keys \ud83d\udee1\ufe0f - Secure communication between multiple users \ud83d\udd17</p> <p>\u274c Disadvantages: - Slower than symmetric encryption due to complex computations \ud83d\udc22</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#file-system-level-encryption-vs-full-disk-encryption","title":"\ud83d\udda5\ufe0f File System-Level Encryption vs. Full-Disk Encryption","text":"Feature File System Encryption Full-Disk Encryption \ud83d\udd10 Scope Individual files &amp; directories Entire disk (OS, system files, and data) \u26a1 Flexibility Selective encryption for important files Everything is encrypted by default \ud83d\ude80 Performance Faster, as unnecessary files remain unencrypted Slightly slower boot times \ud83d\udd11 Use Case Servers handling mixed workloads Personal devices (laptops, phones)"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#key-management-access-control","title":"\ud83d\udd11 Key Management &amp; Access Control","text":"<p>Best Practices: - \ud83d\udd04 Regular Key Rotation: Change keys periodically to prevent long-term breaches. - \ud83c\udfe6 Secure Key Storage: Use HSMs (Hardware Security Modules) or encrypted vaults. - \ud83d\udd12 Access Control: Restrict key usage to authorized entities only.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#user-authentication-mechanisms","title":"\ud83d\udc64 User Authentication Mechanisms","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#common-authentication-factors","title":"\ud83d\udd0d Common Authentication Factors","text":"<ol> <li>Knowledge Factor (\ud83d\udd11) - Something you know (password, PIN).</li> <li>Possession Factor (\ud83d\udcf1) - Something you have (smart card, OTP, token).</li> <li>Inherence Factor (\ud83e\uddec) - Something you are (fingerprint, facial recognition).</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#password-based-authentication","title":"\ud83d\udd11 Password-Based Authentication","text":"<p>\u2705 Advantages: - Easy to implement \ud83c\udfd7\ufe0f - Low-cost solution \ud83d\udcb0</p> <p>\u274c Disadvantages: - Easily stolen, guessed, or cracked \ud83e\udd2f - Users tend to reuse weak passwords \ud83d\uded1</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#multi-factor-authentication-mfa","title":"\ud83d\udd10 Multi-Factor Authentication (MFA)","text":"<p>Combines two or more authentication factors (e.g., password + OTP).</p> <p>\u2705 Advantages: - Stronger security \ud83d\udd25 - Even if one factor is compromised, the account remains protected \ud83d\udee1\ufe0f</p> <p>\u274c Disadvantages: - Slightly slower login process \u23f3 - Requires additional devices (e.g., phone for OTP) \ud83d\udcf1</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#biometric-authentication","title":"\ud83c\udfc5 Biometric Authentication","text":"<p>Uses unique human traits like fingerprints, facial recognition, or iris scans.</p> <p>\u2705 Advantages: - Highly secure \ud83d\udd10 - No need to remember passwords \ud83e\udd13</p> <p>\u274c Disadvantages: - Requires specialized hardware sensors \ud83d\udcf7 - False positives/negatives can occur \u26a0\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#token-certificate-based-authentication","title":"\ud83c\udf9f\ufe0f Token &amp; Certificate-Based Authentication","text":"<ol> <li>Token-Based Authentication:<ul> <li>Uses a physical token (e.g., smart card) or digital token (e.g., OTP).</li> <li>Common in corporate environments \ud83d\udd04.</li> </ul> </li> <li>Certificate-Based Authentication:<ul> <li>Uses digital certificates issued by a Certificate Authority (CA).</li> <li>Used in enterprise Public Key Infrastructure (PKI) setups.</li> </ul> </li> </ol> <p>\u2705 Advantages: - Difficult to duplicate tokens/certificates \ud83d\udee1\ufe0f - Trusted authentication in enterprise settings \ud83c\udfe2</p> <p>\u274c Disadvantages: - Losing a physical token can cause lockouts \ud83d\udeab - Certificate management is complex \ud83d\udcdc</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#choosing-the-right-security-approach","title":"\ud83e\uddd0 Choosing the Right Security Approach","text":"Environment Recommended Authentication \ud83c\udf0d Websites &amp; Apps Password + MFA \ud83d\udd10\ud83d\udcf1 \ud83c\udfe2 Corporate Systems Token-Based or Biometric \ud83c\udf9f\ufe0f\ud83e\uddec \ud83c\udfe0 Personal Devices Biometric (Fingerprint/Face ID) \ud83d\udcf7 \ud83d\udd12 High-Security Areas Certificate-Based + MFA \ud83d\udd11\ud83d\udcdc"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.3-File_System_Encryption_AND_User_Authentication/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<p>Understanding encryption techniques and authentication mechanisms is crucial for securing modern file systems and user data. A combination of encryption, MFA, and secure key management ensures the highest level of protection. \ud83d\ude80\ud83d\udca1</p> <p>\ud83d\udd39 Key Takeaways: \u2705 Encryption safeguards stored data from unauthorized access. \u2705 Symmetric encryption is fast but requires secure key sharing. \u2705 Asymmetric encryption is more secure for file sharing. \u2705 MFA significantly enhances login security. \u2705 Biometric &amp; token-based authentication provide strong protection in corporate environments.</p> <p>\ud83d\udd17 Further Reading: - OWASP Authentication Guide - NIST Encryption Standards</p> <p>\u2728 Stay secure, stay informed! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/","title":"\ud83d\udccc File System Journaling &amp; Backup Mechanisms","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>\ud83d\udcdd File System Journaling<ul> <li>\ud83d\udd39 What is Journaling?</li> <li>\u2699\ufe0f How Journaling Works</li> <li>\ud83d\udccc Types of Journaling</li> <li>\u2705 Advantages</li> <li>\u26a0\ufe0f Disadvantages</li> <li>\ud83d\udca1 Real-World Implementations</li> <li>\ud83d\udd0d Journaling vs Non-Journaling</li> </ul> </li> <li>\ud83d\udd04 Backup &amp; Recovery Mechanisms<ul> <li>\ud83d\udee1\ufe0f Why Backup &amp; Recovery Matter</li> <li>\ud83d\udcc2 Types of Backups</li> <li>\ud83d\udccd Storage Locations</li> <li>\ud83d\udd04 Recovery Strategies</li> <li>\ud83d\udee0\ufe0f OS-Level Tools</li> <li>\u2705 Benefits</li> <li>\u26a0\ufe0f Challenges</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#file-system-journaling","title":"\ud83d\udcdd File System Journaling","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#what-is-journaling","title":"\ud83d\udd39 What is Journaling?","text":"<ul> <li>Journaling File System logs changes in a journal before applying them to the main file system.</li> <li>Ensures data integrity and quick recovery after crashes.</li> </ul> <p>\ud83d\udccc Analogy: \ud83d\uddd2\ufe0f Writing important notes in a diary before updating the main checklist.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#how-journaling-works","title":"\u2699\ufe0f How Journaling Works","text":"<ol> <li>\ud83d\udcdd Logging Changes: File operations (create, modify, delete) are recorded in a journal.</li> <li>\u2705 Transaction Commit: Once fully recorded, changes are applied atomically to the file system.</li> <li>\ud83d\udca5 Crash Recovery: On reboot, the journal is checked and uncommitted changes are applied.</li> <li>\ud83d\uddd1\ufe0f Journal Cleanup: Successfully applied logs are cleared for new entries.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#types-of-journaling","title":"\ud83d\udccc Types of Journaling","text":"<ul> <li>\ud83d\udcc1 Metadata Journaling: Logs only file system metadata changes (e.g., directories, inodes).</li> <li>\ud83d\udcdd Full Data Journaling: Logs both metadata and actual data (slower but more reliable).</li> <li>\ud83d\udd04 Ordered Journaling: Ensures data is written before metadata, balancing speed &amp; safety.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#advantages","title":"\u2705 Advantages","text":"<p>\u2714 Fast Recovery: Eliminates need for lengthy file system checks after crashes. \u2714 Improved Integrity: Protects against corruption, maintaining consistency. \u2714 Lower Maintenance: Reduces need for manual interventions (e.g., <code>fsck</code>). \u2714 Predictable Performance: Ensures stable system behavior.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#disadvantages","title":"\u26a0\ufe0f Disadvantages","text":"<p>\u274c Extra Overhead: Requires additional disk writes, impacting performance. \u274c Storage Usage: Journal consumes disk space. \u274c Complexity: More intricate than non-journaling file systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#real-world-implementations","title":"\ud83d\udca1 Real-World Implementations","text":"<ul> <li>\ud83d\udccc ext3/ext4 (Linux): Commonly used journaling file systems.</li> <li>\ud83d\udda5\ufe0f NTFS (Windows): Maintains a transaction log for reliability.</li> <li>\ud83c\udf4f HFS+ &amp; APFS (macOS): Apple\u2019s journaling file systems for stability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#journaling-vs-non-journaling","title":"\ud83d\udd0d Journaling vs Non-Journaling","text":"Feature Journaling FS Non-Journaling FS Crash Recovery \u2705 Fast \u274c Slow Data Integrity \u2705 High \u274c Risk of Corruption Performance \u23f3 Slightly Slower \u26a1 Faster Complexity \ud83d\udd04 Higher \u26a1 Simpler"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#backup-recovery-mechanisms","title":"\ud83d\udd04 Backup &amp; Recovery Mechanisms","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#why-backup-recovery-matter","title":"\ud83d\udee1\ufe0f Why Backup &amp; Recovery Matter","text":"<ul> <li>\ud83d\ude80 Data Protection: Prevents loss due to accidental deletion, failures, or cyberattacks.</li> <li>\ud83c\udfe2 Business Continuity: Ensures minimal downtime in enterprise environments.</li> <li>\ud83d\udcdc Compliance: Helps meet legal data retention &amp; recovery regulations.</li> <li>\ud83d\udee0\ufe0f User Assurance: Peace of mind for individuals and organizations.</li> </ul> <p>\ud83d\udccc Analogy: \ud83d\uddbc\ufe0f Storing family photos on an external drive or cloud before a trip.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#types-of-backups","title":"\ud83d\udcc2 Types of Backups","text":"<ul> <li>\ud83d\uddc2\ufe0f Full Backup: Copies all selected files; comprehensive but slow.</li> <li>\ud83d\udd04 Incremental Backup: Saves only changes since the last backup; faster but complex to restore.</li> <li>\ud83d\udcca Differential Backup: Saves changes since the last full backup; simpler than incremental.</li> <li>\ud83e\ude9e Mirror Backup: Creates an exact copy but lacks version history.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#storage-locations","title":"\ud83d\udccd Storage Locations","text":"<ul> <li>\ud83d\udcbe Local Backups: External drives, NAS, internal disks (fast but disaster-prone).</li> <li>\ud83c\udf0d Offsite Backups: Stored in remote locations for disaster recovery.</li> <li>\u2601\ufe0f Cloud Backups: Online storage with automated scheduling.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#recovery-strategies","title":"\ud83d\udd04 Recovery Strategies","text":"<ul> <li>\ud83d\udda5\ufe0f Full System Restore: Restores entire OS &amp; data after catastrophic failure.</li> <li>\ud83d\udcc2 Selective Recovery: Recovers specific files or folders.</li> <li>\ud83d\udcdc Disaster Recovery Plan: Predefined steps for large-scale failures.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#os-level-tools","title":"\ud83d\udee0\ufe0f OS-Level Tools","text":"<ul> <li>\u23f3 Scheduling: Automates backups using cron jobs (Linux) or Task Scheduler (Windows).</li> <li>\ud83d\udcf8 Snapshots: File systems like ZFS provide instant rollbacks.</li> <li>\u2601\ufe0f Cloud Integration: Built-in support for services like Google Drive, OneDrive.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#benefits","title":"\u2705 Benefits","text":"<p>\u2714 Prevents Data Loss: Ensures quick recovery from failures. \u2714 Minimizes Downtime: Keeps businesses and users running smoothly. \u2714 Regulatory Compliance: Meets legal standards for data protection. \u2714 Peace of Mind: Multiple recovery options available.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#challenges","title":"\u26a0\ufe0f Challenges","text":"<p>\u274c Storage Costs: Multiple backups consume disk space. \u274c Complexity: Managing incremental/differential backups requires strategy. \u274c Security Risks: Backups must be encrypted and protected. \u274c Testing Required: Regular restore tests ensure reliability.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/5.4-File_System_Journaling_AND_Backup_Mechanisms/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>\u2705 Journaling file systems and backup mechanisms are critical for data integrity and disaster recovery. \ud83d\udca1 By using the right techniques and tools, organizations and individuals can safeguard their digital assets effectively.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/","title":"\ud83d\udccc Disk Scheduling","text":"<p>Disk scheduling determines the order in which I/O requests are serviced to optimize seek time, improve performance, and balance resource utilization.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ol> <li>Introduction</li> <li>Key Concepts</li> <li>Objectives</li> <li>Common Algorithms<ul> <li>FCFS (First Come First Served)</li> <li>SSTF (Shortest Seek Time First)</li> <li>SCAN (Elevator Algorithm)</li> <li>C-SCAN (Circular SCAN)</li> <li>LOOK and C-LOOK</li> </ul> </li> <li>Advantages of Efficient Disk Scheduling</li> <li>Challenges</li> <li>Practical Use Cases</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#introduction","title":"\ud83d\udcd6 Introduction","text":"<p>\ud83d\udd39 Disk Scheduling is like managing an elevator \ud83d\ude80 in a multi-story building \ud83c\udfe2. The elevator (disk arm) must efficiently pick up passengers (I/O requests) from different floors (tracks) to minimize total travel time (seek time).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#key-concepts","title":"\ud83d\udd11 Key Concepts","text":"<ul> <li>\ud83d\udd52 Seek Time: Time taken for the disk arm to reach the correct track.</li> <li>\ud83d\udd04 Rotational Latency: Time for the desired sector to align with the read/write head.</li> <li>\ud83d\udcc8 Throughput: Number of I/O requests handled per unit time.</li> <li>\u26a1 Response Time: Time from request initiation to its servicing.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#objectives","title":"\ud83c\udfaf Objectives","text":"<p>\u2705 Minimize seek time &amp; movement. \u2705 Maximize throughput. \u2705 Ensure fairness (no request should be indefinitely delayed). \u2705 Balance handling of short &amp; long requests.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#common-algorithms","title":"\ud83d\udd22 Common Algorithms","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#1-fcfs-first-come-first-served","title":"1\ufe0f\u20e3 FCFS (First Come First Served)","text":"<p>\ud83d\udccc Description: - Requests are serviced in the order they arrive. - Simple &amp; fair but can cause long seek times.</p> <p>\u26a1 Pros: Easy to implement, fair. \u274c Cons: High average seek time.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#2-sstf-shortest-seek-time-first","title":"2\ufe0f\u20e3 SSTF (Shortest Seek Time First)","text":"<p>\ud83d\udccc Description: - Selects the request closest to the current head position first. - Reduces seek time but may lead to starvation (requests far away might be ignored for long periods).</p> <p>\u26a1 Pros: Minimizes seek time, increases throughput. \u274c Cons: Risk of starvation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#3-scan-elevator-algorithm","title":"3\ufe0f\u20e3 SCAN (Elevator Algorithm)","text":"<p>\ud83d\udccc Description: - Moves the disk arm in one direction, servicing requests until it reaches the end, then reverses. - Works like an elevator \ud83d\ude80 moving in one direction before coming back.</p> <p>\u26a1 Pros: Prevents starvation, more even distribution. \u274c Cons: Long wait times for requests just missed after a turnaround.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#4-c-scan-circular-scan","title":"4\ufe0f\u20e3 C-SCAN (Circular SCAN)","text":"<p>\ud83d\udccc Description: - Moves in one direction, servicing requests, then jumps back to the start without servicing in the reverse direction.</p> <p>\u26a1 Pros: Provides uniform wait time. \u274c Cons: Can involve unnecessary movement.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#5-look-and-c-look","title":"5\ufe0f\u20e3 LOOK and C-LOOK","text":"<p>\ud83d\udccc Description: - LOOK: Stops moving when the last request is served instead of going all the way to the edge. - C-LOOK: Similar to C-SCAN but jumps back to the nearest pending request.</p> <p>\u26a1 Pros: Avoids unnecessary travel, more efficient. \u274c Cons: More complex than SCAN/C-SCAN.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#advantages-of-efficient-disk-scheduling","title":"\u2705 Advantages of Efficient Disk Scheduling","text":"<p>\ud83d\ude80 Faster data access \ud83d\ude80 Higher throughput \ud83d\ude80 Better resource utilization \ud83d\ude80 Reduced delays</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#challenges","title":"\u26a0\ufe0f Challenges","text":"<p>\ud83d\udd38 Complex algorithms (LOOK, C-LOOK) require careful implementation. \ud83d\udd38 SSTF may cause starvation for distant requests. \ud83d\udd38 The best algorithm depends on workload patterns.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.1-Disk_Scheduling/#practical-use-cases","title":"\ud83d\udcbc Practical Use Cases","text":"<p>\ud83d\udccc Database Servers: Optimized scheduling maintains query response times. \ud83d\udccc File Servers: Quick file retrieval enhances network storage performance.</p> <p>\ud83c\udfaf Choosing the right algorithm depends on fairness, minimal seek time, and predictable response. A well-optimized disk scheduling strategy enhances system performance and efficiency. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/","title":"RAID (Redundant Array of Independent Disks) \ud83d\udcc2","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#table-of-contents","title":"Table of Contents \ud83d\udcd6","text":"<ol> <li>Introduction</li> <li>How RAID Works</li> <li>RAID Levels<ul> <li>RAID 0 - Striping</li> <li>RAID 1 - Mirroring</li> <li>RAID 2 - Bit-Level Striping with Hamming Code</li> <li>RAID 3 - Byte-Level Striping with Dedicated Parity</li> <li>RAID 4 - Block-Level Striping with Dedicated Parity</li> <li>RAID 5 - Striping with Parity</li> <li>RAID 6 - Dual Parity</li> <li>RAID 10 - Mirroring + Striping</li> </ul> </li> <li>Advantages &amp; Disadvantages</li> <li>Use Cases</li> <li>Conclusion</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#introduction","title":"Introduction \ud83c\udfd7\ufe0f","text":"<p>RAID (Redundant Array of Independent Disks) is a technology that combines multiple physical disk drives into a single logical unit to enhance performance, reliability, or both.</p> <p>Real-Life Analogy: \ud83d\udcdc Imagine storing multiple copies of an important document in different folders. If one folder is lost, you still have backups in the others!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#how-raid-works","title":"How RAID Works \u2699\ufe0f","text":"<p>RAID uses three main techniques: - \ud83d\udd00 Striping: Distributes data across multiple disks for faster performance. - \ud83d\udd01 Mirroring: Creates identical copies of data for redundancy. - \ud83d\udee0\ufe0f Parity: Stores extra information to reconstruct lost data.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#raid-levels","title":"RAID Levels \ud83d\udd22","text":"<p>Each RAID level offers a unique balance of performance, redundancy, and capacity.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#raid-0-striping","title":"RAID 0 - Striping \ud83d\ude80","text":"<ul> <li>Concept: Splits data evenly across multiple disks without redundancy.</li> <li>Performance: Very high; parallel read/write operations.</li> <li>Fault Tolerance: \u274c None! If one disk fails, all data is lost.</li> <li>Analogy: A team splitting a task among members\u2014fast but one failure ruins everything.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#raid-1-mirroring","title":"RAID 1 - Mirroring \ud83d\udee1\ufe0f","text":"<ul> <li>Concept: Keeps an identical copy of data on two or more disks.</li> <li>Performance: Faster reads, slightly slower writes.</li> <li>Fault Tolerance: \u2705 High. One disk failure causes zero data loss.</li> <li>Analogy: Two identical safes with the same documents\u2014one fails, the other saves you.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#raid-2-bit-level-striping-with-hamming-code","title":"RAID 2 - Bit-Level Striping with Hamming Code \ud83e\uddee","text":"<ul> <li>Concept: Data is split at the bit level, with ECC (Error Correction Code) for reliability.</li> <li>Performance: Good for large sequential files.</li> <li>Fault Tolerance: \u2705 Can detect and correct errors.</li> <li>Analogy: Each letter of a document is stored separately, with extra checks for errors.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#raid-3-byte-level-striping-with-dedicated-parity","title":"RAID 3 - Byte-Level Striping with Dedicated Parity \ud83d\udcca","text":"<ul> <li>Concept: Stripes data at the byte level, with a dedicated parity disk.</li> <li>Performance: Fast for sequential reads; slow writes due to parity updates.</li> <li>Fault Tolerance: \u2705 Can recover from a single disk failure.</li> <li>Analogy: A supervisor keeping track of every small task\u2014good oversight but slow updates.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#raid-4-block-level-striping-with-dedicated-parity","title":"RAID 4 - Block-Level Striping with Dedicated Parity \ud83d\udce6","text":"<ul> <li>Concept: Similar to RAID 3, but data is written in blocks instead of bytes.</li> <li>Performance: Good read performance; parity disk slows writes.</li> <li>Fault Tolerance: \u2705 Can recover from one disk failure.</li> <li>Analogy: Separate storage rooms with one master record room.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#raid-5-striping-with-parity","title":"RAID 5 - Striping with Parity \ud83d\udee0\ufe0f","text":"<ul> <li>Concept: Data &amp; parity are distributed across all disks.</li> <li>Performance: Balanced\u2014fast reads, slightly slower writes.</li> <li>Fault Tolerance: \u2705 Can survive one disk failure.</li> <li>Analogy: Backup plans\u2014lose one set of data, the rest helps recover it.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#raid-6-dual-parity","title":"RAID 6 - Dual Parity \ud83d\udd11\ud83d\udd11","text":"<ul> <li>Concept: Like RAID 5 but with two sets of parity.</li> <li>Performance: Reads remain efficient; writes are slower.</li> <li>Fault Tolerance: \u2705 Survives two disk failures.</li> <li>Analogy: Two backup keys for a safe\u2014one lost key doesn\u2019t mean disaster.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#raid-10-mirroring-striping","title":"RAID 10 - Mirroring + Striping \ud83d\udcbe","text":"<ul> <li>Concept: Combines RAID 1 (mirroring) and RAID 0 (striping).</li> <li>Performance: \u26a1 High-speed reads/writes with redundancy.</li> <li>Fault Tolerance: \u2705 High. One disk per mirrored pair can fail without data loss.</li> <li>Analogy: Teammates mirroring each other's work\u2014parallel efficiency + backups.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#advantages-disadvantages","title":"Advantages &amp; Disadvantages \ud83d\udcca","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#advantages","title":"\u2705 Advantages:","text":"<ul> <li>\ud83d\udd04 Increased Reliability: Redundancy prevents data loss.</li> <li>\ud83d\ude80 Performance Boost: Striping enhances read/write speeds.</li> <li>\ud83d\udcc8 Scalability: More disks = better performance &amp; capacity.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#disadvantages","title":"\u274c Disadvantages:","text":"<ul> <li>\ud83d\udcb0 Higher Cost: More disks &amp; controllers = expensive.</li> <li>\u2699\ufe0f Complex Setup: Requires technical expertise.</li> <li>\ud83d\uded1 Not a Backup Replacement: RAID ensures uptime, not backups.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#use-cases","title":"Use Cases \ud83c\udfaf","text":"<ul> <li>\ud83c\udfe2 Data Centers &amp; Servers: High availability &amp; data protection.</li> <li>\ud83c\udfa5 High-Performance Workstations: Video editing, data analysis.</li> <li>\ud83c\udfe1 Home &amp; Small Business NAS: Secure network storage solutions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/6.2-RAID/#conclusion","title":"Conclusion \ud83c\udfc1","text":"<p>RAID plays a vital role in modern computing, ensuring a balance between performance, fault tolerance, and storage capacity. While it improves reliability, RAID is not a substitute for backups. Choosing the right RAID level depends on your specific needs for performance and data protection.</p> <p>\ud83d\ude80 Optimize your storage with the right RAID strategy!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/","title":"\ud83d\udccc Inter-Process Communication (IPC)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>Introduction</li> <li>Message Passing IPC<ul> <li>How It Works</li> <li>Advantages</li> <li>Disadvantages</li> </ul> </li> <li>Shared Memory IPC<ul> <li>How It Works</li> <li>Advantages</li> <li>Disadvantages</li> </ul> </li> <li>Comparison: Message Passing vs Shared Memory</li> <li>Signals and Signal Handling<ul> <li>How Signals Are Generated</li> <li>Signal Delivery and Handling</li> <li>Common Signals</li> <li>Advantages</li> <li>Challenges</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#introduction","title":"\ud83c\udfd7\ufe0f Introduction","text":"<p>Inter-Process Communication (IPC) enables processes to exchange data and synchronize their actions efficiently. These processes may run on the same system or across a network.</p> <p>\ud83d\udd39 Real-Life Analogy: Think of a busy office where employees collaborate using emails (messages) or a shared whiteboard (shared memory).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#message-passing-ipc","title":"\ud83d\udce9 Message Passing IPC","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#what-is-message-passing","title":"\u2728 What is Message Passing?","text":"<p>Message passing is an IPC method where processes communicate by sending and receiving messages via communication channels managed by the OS.</p> <p>\ud83d\udca1 Analogy: Imagine two colleagues working in separate offices using a shared mailbox to exchange messages.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#how-it-works","title":"\ud83d\udd04 How It Works","text":"<ol> <li>Message Creation \ud83d\udcdd - A process structures the data into a message.</li> <li>Sending the Message \ud83d\ude80 - The OS stores the message in a queue or pipe.</li> <li>Receiving the Message \ud83d\udce5 - The recipient reads the message from the queue.</li> <li>Processing \ud83d\udd04 - The receiver processes the message and may respond.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#advantages","title":"\u2705 Advantages","text":"<p>\u2714\ufe0f Isolation: No shared memory, reducing security risks. \u2714\ufe0f Modularity: Well-defined communication channels. \u2714\ufe0f Synchronization: Built-in message acknowledgment. \u2714\ufe0f Network-Friendly: Supports distributed systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#disadvantages","title":"\u274c Disadvantages","text":"<p>\u274c Overhead: Message copying and context switches add processing time. \u274c Complexity: Requires additional mechanisms for ordering and delivery. \u274c Buffering Issues: Limited queue sizes may cause message loss or delays.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#shared-memory-ipc","title":"\ud83d\udee0\ufe0f Shared Memory IPC","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#what-is-shared-memory","title":"\u2728 What is Shared Memory?","text":"<p>Shared memory allows multiple processes to read and write to a common memory region for fast communication.</p> <p>\ud83d\udca1 Analogy: A large whiteboard where multiple team members can write and read information, but synchronization is needed to avoid conflicts.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#how-it-works_1","title":"\ud83d\udd04 How It Works","text":"<ol> <li>Memory Allocation \ud83d\udccc - The OS sets up a shared memory segment.</li> <li>Attaching to Shared Memory \ud83d\udd17 - Processes gain access.</li> <li>Data Access \ud83d\udcdd - Processes read/write directly.</li> <li>Synchronization \ud83d\udd04 - Mutexes/semaphores prevent data corruption.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#advantages_1","title":"\u2705 Advantages","text":"<p>\u2714\ufe0f High Performance: No message copying required. \u2714\ufe0f Large Data Sharing: Suitable for bulk data exchange. \u2714\ufe0f Efficient Communication: Low-latency data access.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#disadvantages_1","title":"\u274c Disadvantages","text":"<p>\u274c Synchronization Complexity: Requires semaphores/mutexes. \u274c Memory Management: Manual allocation and cleanup needed. \u274c Limited to Local Systems: Does not easily work across networks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#comparison-message-passing-vs-shared-memory","title":"\u2696\ufe0f Comparison: Message Passing vs Shared Memory","text":"Feature Message Passing \ud83d\udce9 Shared Memory \ud83d\udee0\ufe0f Data Exchange Send/Receive messages Direct memory access Synchronization Implicit (via send/receive) Explicit (via locks) Performance Slower (copying overhead) Faster (direct access) Scalability Works well in networks Limited to a single machine Complexity Easier to implement Requires careful synchronization"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#signals-and-signal-handling","title":"\ud83d\udd14 Signals and Signal Handling","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#what-are-signals","title":"\u2728 What are Signals?","text":"<p>A signal is a software interrupt notifying a process about an event (e.g., errors, user actions, system events).</p> <p>\ud83d\udca1 Analogy: Imagine you're reading a book, and someone rings the doorbell \ud83d\udce2. You must decide whether to answer, ignore it, or send someone else.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#how-signals-are-generated","title":"\ud83d\udd04 How Signals Are Generated","text":"<ol> <li>User Interaction \u2328\ufe0f - Pressing <code>Ctrl+C</code> sends <code>SIGINT</code>.</li> <li>Software Conditions \u26a0\ufe0f - Division by zero triggers <code>SIGFPE</code>.</li> <li>Kernel Events \u23f3 - Timers expiring generate <code>SIGALRM</code>.</li> <li>Other Processes \ud83d\udce1 - Processes can signal each other using <code>kill()</code>.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#signal-delivery-and-handling","title":"\ud83d\udcec Signal Delivery and Handling","text":"<ol> <li>Signal Raised \ud83d\udd14 - An event generates a signal.</li> <li>Delivery \ud83d\ude80 - The OS delivers it to the process.</li> <li>Handling \ud83e\udd16 - The process either handles it, ignores it, or terminates.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#common-signals","title":"\u26a1 Common Signals","text":"Signal Name Description <code>SIGINT</code> Interrupt Sent when <code>Ctrl+C</code> is pressed. <code>SIGTERM</code> Termination Requests process termination. <code>SIGKILL</code> Kill Forcefully terminates a process. <code>SIGSEGV</code> Segmentation Fault Invalid memory access. <code>SIGALRM</code> Alarm Triggered by a timer."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#advantages_2","title":"\u2705 Advantages","text":"<p>\u2714\ufe0f Immediate notifications for process events. \u2714\ufe0f Lightweight and low-overhead mechanism. \u2714\ufe0f Allows graceful process shutdowns.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#challenges","title":"\u274c Challenges","text":"<p>\u274c Asynchronous execution complicates handling. \u274c Limited data in signals. \u274c Safe signal handling requires cautious design.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/7.1-Inter-Process_Communication%28IPC%29/#conclusion","title":"\ud83d\ude80 Conclusion","text":"<p>Choosing between Message Passing, Shared Memory, or Signals depends on system needs: - For modular, isolated communication \u279d Use Message Passing \ud83d\udce9. - For high-speed data sharing on the same machine \u279d Use Shared Memory \ud83d\udee0\ufe0f. - For asynchronous event handling \u279d Use Signals \ud83d\udd14.</p> <p>Mastering these IPC techniques is crucial for building efficient, scalable, and well-coordinated systems. \ud83d\udca1\ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/","title":"\ud83d\udccc System Calls &amp; System Boot Process","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83d\udd39 System Calls Overview<ul> <li>\ud83d\udd39 Real-Life Analogy</li> <li>\ud83d\udd39 How System Calls Work</li> <li>\ud83d\udd39 Categories of System Calls</li> <li>\ud83d\udd39 Importance of System Calls</li> <li>\ud83d\udd39 Considerations &amp; Limitations</li> <li>\ud83d\udd39 Example Scenario</li> </ul> </li> <li>\ud83d\ude80 System Boot Process<ul> <li>\ud83d\udd39 Real-Life Analogy</li> <li>\ud83d\udd39 Key Stages</li> <li>\ud83d\udd39 Importance of Understanding the Boot Process</li> <li>\ud83d\udd39 Legacy BIOS vs. UEFI</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#system-calls-overview","title":"\ud83d\udd39 System Calls Overview","text":"<p>System Calls serve as an interface between user applications and the operating system kernel, enabling secure access to hardware and resources.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#real-life-analogy","title":"\ud83d\udd39 Real-Life Analogy","text":"<p>\ud83d\udcde System Call as a Customer Service Representative: - A user program (customer) requests a service (e.g., open a file, allocate memory). - The OS (company) processes the request via a system call (service rep). - The service rep returns the result safely (grants or denies access).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#how-system-calls-work","title":"\ud83d\udd39 How System Calls Work","text":"<p>\ud83d\udee0 User Mode \u2192 Kernel Mode Transition: 1. User Mode Execution: Applications operate in a restricted environment. 2. System Call Invocation: A request is made (e.g., <code>open()</code> file). 3. Mode Switch: Control shifts to kernel mode. 4. Request Processing: The OS validates, executes, and manages resources. 5. Result Delivery: Control returns to user mode with a response.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#categories-of-system-calls","title":"\ud83d\udd39 Categories of System Calls","text":"Category Description &amp; Examples Process Control \u2699\ufe0f Create, execute, terminate processes. \ud83d\udd39 <code>fork()</code>, <code>exec()</code>, <code>wait()</code> File Management \ud83d\udcc2 Open, read, write, close files. \ud83d\udd39 <code>open()</code>, <code>read()</code>, <code>write()</code>, <code>close()</code> Device Management \ud83d\udda5\ufe0f Interact with hardware devices. \ud83d\udd39 <code>ioctl()</code>, <code>read()</code>, <code>write()</code> Information Maintenance \ud83d\udcca Retrieve system/process details. \ud83d\udd39 <code>getpid()</code>, <code>gettimeofday()</code> Communication (IPC) \ud83d\udd04 Enable process communication. \ud83d\udd39 <code>pipe()</code>, <code>socket()</code>, <code>send()</code>, <code>recv()</code>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#importance-of-system-calls","title":"\ud83d\udd39 Importance of System Calls","text":"<p>\u2705 Security &amp; Stability: Restrict direct hardware access. \u2705 Hardware Abstraction: Provide a uniform interface across devices. \u2705 Controlled Resource Management: Ensure fair access to CPU, memory, devices.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#considerations-limitations","title":"\ud83d\udd39 Considerations &amp; Limitations","text":"<p>\u26a0\ufe0f Overhead: Frequent system calls can slow performance. \u26a0\ufe0f Complexity: Requires OS knowledge to use effectively. \u26a0\ufe0f Portability Issues: OS-specific system calls affect cross-platform applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#example-scenario","title":"\ud83d\udd39 Example Scenario","text":"<p>\ud83d\udcc4 Text Editor Saving a File: 1. <code>open()</code>: Opens the file. 2. <code>write()</code>: Writes user data. 3. <code>close()</code>: Finalizes changes.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#system-boot-process","title":"\ud83d\ude80 System Boot Process","text":"<p>The system boot process is a sequence of steps that initialize the hardware and software to bring the system to an operational state.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#real-life-analogy_1","title":"\ud83d\udd39 Real-Life Analogy","text":"<p>\ud83c\udfe2 Restaurant Opening for the Day: - \ud83d\udd0d Check Equipment (POST) \ud83d\udee0\ufe0f - \ud83d\udccb Load Initial Setup (BIOS/UEFI) \ud83d\udda5\ufe0f - \ud83d\udd04 Start Main Operations (Kernel) \ud83d\ude80 - \ud83d\udd0c Prepare Services (Init/Systemd) \ud83c\udfd7\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#key-stages","title":"\ud83d\udd39 Key Stages","text":"Stage Description 1\ufe0f\u20e3 POST (Power-On Self-Test) Firmware checks hardware components (RAM, CPU, disks). 2\ufe0f\u20e3 BIOS/UEFI Initialization Identifies bootable devices &amp; prepares to load OS. 3\ufe0f\u20e3 Bootloader Execution Loads the OS kernel into memory (e.g., GRUB, Windows Boot Manager). 4\ufe0f\u20e3 Kernel Initialization Manages hardware, sets up memory structures, and loads drivers. 5\ufe0f\u20e3 Init/System Services Startup Launches essential system processes (networking, logging, user session management)."},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#importance-of-understanding-the-boot-process","title":"\ud83d\udd39 Importance of Understanding the Boot Process","text":"<p>\u2705 Troubleshooting: Identify startup failures. \u2705 Performance Optimization: Disable unnecessary startup services. \u2705 Security: Secure Boot prevents unauthorized OS modifications. \u2705 Customization: Modify boot parameters, kernels, and configurations.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.1-System_Calls_AND_System%20Boot_Process/#legacy-bios-vs-uefi","title":"\ud83d\udd39 Legacy BIOS vs. UEFI","text":"Feature BIOS \ud83c\udfdb\ufe0f UEFI \ud83d\ude80 Memory Addressing 16-bit, limited to 1MB 64-bit, supports large storage Boot Device Support MBR (limited to 2TB drives) GPT (supports drives &gt;2TB) Security No Secure Boot Secure Boot support User Interface Text-based Graphical, mouse support <p>\ud83d\udccc Final Thoughts Mastering System Calls and the Boot Process enhances your OS knowledge, debugging skills, and system optimization expertise! \ud83d\ude80\ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/","title":"\ud83d\ude80 Interrupts &amp; Event-Driven Programming in OS","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ul> <li>\ud83d\udd39 Introduction to Interrupts</li> <li>\u26a1 Types of Interrupts<ul> <li>\ud83d\udd27 Hardware Interrupts</li> <li>\ud83d\udcbb Software Interrupts</li> <li>\ud83d\udd04 Key Differences</li> </ul> </li> <li>\u2699\ufe0f Working Mechanism</li> <li>\ud83d\udcc8 Advantages &amp; Drawbacks</li> <li>\ud83c\udf0d Real-World Applications</li> <li>\ud83d\udda5\ufe0f Event-Driven Programming in OS</li> <li>\ud83d\udd01 Working of the Event-Driven Model</li> <li>\ud83d\udcca Features, Pros &amp; Cons</li> <li>\ud83d\udee0\ufe0f Real-World Usage Scenarios</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#introduction-to-interrupts","title":"\ud83d\udd39 Introduction to Interrupts","text":"<p>Interrupts are signals that temporarily halt a CPU\u2019s current task to handle an urgent event, ensuring efficient system operations.</p> <p>\ud83d\udd0d Analogy: - \ud83d\udcde Hardware Interrupt (Phone Call): You\u2019re writing a report, and your phone rings\u2014forcing you to pause and answer. - \u23f0 Software Interrupt (Alarm Reminder): You set a reminder, which later interrupts your task when it goes off.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#types-of-interrupts","title":"\u26a1 Types of Interrupts","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#hardware-interrupts","title":"\ud83d\udd27 Hardware Interrupts","text":"<p>Interrupts triggered by external devices (e.g., keyboard, disk, network). - Trigger: Physical hardware sends signals. - Nature: Asynchronous (can occur anytime). - Examples:     - \u2328\ufe0f Keystroke detection     - \ud83d\udce1 Network packet arrival     - \ud83d\udd0c USB device connection</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#software-interrupts","title":"\ud83d\udcbb Software Interrupts","text":"<p>Interrupts triggered by software instructions within a program. - Trigger: <code>int</code> instruction (e.g., <code>int 80h</code> in x86) or exceptions (e.g., division by zero). - Nature: Synchronous (happens during execution). - Examples:     - \ud83d\udcc2 System calls (file read/write)     - \u274c Error handling (divide-by-zero)</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#key-differences-between-hardware-and-software-interrupts","title":"\ud83d\udd04 Key Differences Between Hardware and Software Interrupts","text":"Feature Hardware Interrupt \u2699\ufe0f Software Interrupt \ud83d\udcbe Trigger External devices Program execution Nature Asynchronous Synchronous Use Case I/O handling, errors System calls, exceptions"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#working-mechanism-of-interrupts","title":"\u2699\ufe0f Working Mechanism of Interrupts","text":"<p>1\ufe0f\u20e3 Interrupt Occurs \u2192 External signal (hardware) or software request. 2\ufe0f\u20e3 State Saving \u2192 CPU stores current execution context. 3\ufe0f\u20e3 Interrupt Vector Lookup \u2192 OS identifies corresponding ISR (Interrupt Service Routine). 4\ufe0f\u20e3 ISR Execution \u2192 Handles the event (e.g., reading keyboard input). 5\ufe0f\u20e3 Resume Execution \u2192 Restores saved state and resumes the interrupted task.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#advantages-and-drawbacks","title":"\ud83d\udcc8 Advantages and Drawbacks","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#advantages","title":"\u2705 Advantages","text":"<p>\u2714\ufe0f Fast System Response \u2013 Immediate handling of critical events. \u2714\ufe0f Efficient CPU Utilization \u2013 No need for constant polling. \u2714\ufe0f Scalability \u2013 Easily supports new devices.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#drawbacks","title":"\u274c Drawbacks","text":"<p>\u26a0\ufe0f Overhead \u2013 Context switching introduces performance costs. \u26a0\ufe0f Complexity \u2013 Debugging ISRs is challenging. \u26a0\ufe0f Interrupt Prioritization \u2013 Must efficiently manage multiple simultaneous interrupts.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#real-world-applications","title":"\ud83c\udf0d Real-World Applications","text":"<p>\ud83d\udd39 Keyboard &amp; Mouse Input \u2013 Detecting keystrokes and clicks. \ud83d\udd39 Network Devices \u2013 Handling incoming data packets efficiently. \ud83d\udd39 System Calls \u2013 User programs request OS services (e.g., file read/write). \ud83d\udd39 Error Handling \u2013 Handling exceptions like divide-by-zero errors.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#event-driven-programming-in-os","title":"\ud83d\udda5\ufe0f Event-Driven Programming in OS","text":"<p>Modern OS designs prioritize events over sequential execution. \ud83d\udccc Instead of following a fixed sequence, the OS reacts dynamically to interrupts, user inputs, and system calls.</p> <p>\ud83d\udd0d Analogy: A smartphone: - \ud83d\udcf2 Receives a call (event) \u2192 OS handles it. - \ud83d\uddb1\ufe0f User taps an app (event) \u2192 OS launches it.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#working-of-the-event-driven-model-in-os","title":"\ud83d\udd01 Working of the Event-Driven Model in OS","text":"<p>1\ufe0f\u20e3 Event Registration \u2192 OS or app registers functions (callbacks). 2\ufe0f\u20e3 Event Detection \u2192 OS listens for hardware/software signals. 3\ufe0f\u20e3 Event Dispatching \u2192 OS processes the event and calls the correct handler. 4\ufe0f\u20e3 Event Handling \u2192 Executes the event\u2019s response (e.g., open an app, process network data). 5\ufe0f\u20e3 Resume Execution \u2192 System waits for the next event.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#key-features-of-event-driven-programming","title":"\ud83d\udcca Key Features of Event-Driven Programming","text":"<p>\ud83d\ude80 Asynchronous Execution \u2013 Tasks run when triggered. \ud83c\udfaf Event Loops &amp; Handlers \u2013 Centralized mechanism for event processing. \ud83d\udcdd Callback Functions \u2013 Defined responses to events. \ud83d\udda5\ufe0f Interrupt-Driven Processing \u2013 OS reacts instantly to critical signals. \u26a1 Efficient Resource Usage \u2013 No unnecessary CPU polling.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#advantages_1","title":"\u2705 Advantages","text":"<p>\u2714\ufe0f Responsive &amp; Interactive \u2013 Quick reaction to user actions. \u2714\ufe0f Optimized Performance \u2013 No wasted CPU cycles. \u2714\ufe0f Scalable \u2013 Ideal for handling multiple concurrent events.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#disadvantages","title":"\u274c Disadvantages","text":"<p>\u26a0\ufe0f Debugging Complexity \u2013 Harder to trace execution flow. \u26a0\ufe0f Event Overload \u2013 High-frequency events may introduce delays. \u26a0\ufe0f Steep Learning Curve \u2013 Requires knowledge of concurrency and asynchronous programming.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#real-world-usage-scenarios","title":"\ud83d\udee0\ufe0f Real-World Usage Scenarios","text":"<p>\ud83d\udd39 GUIs \u2013 OS responds to clicks, keystrokes, window resizing. \ud83d\udd39 Network Servers \u2013 Handle multiple simultaneous client requests. \ud83d\udd39 OS Kernel Interrupts \u2013 Manage I/O completion, memory paging, and task scheduling.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.2-Interrupts_AND_Event-Driven_Programming/#final-thoughts","title":"\ud83d\udccc Final Thoughts","text":"<p>Mastering interrupts &amp; event-driven programming is crucial for understanding OS internals, optimizing system performance, and designing scalable, responsive software.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/","title":"\ud83d\ude80 Resource Management in Operating Systems","text":"<p>An Operating System (OS) manages resources efficiently, ensuring optimal performance, security, and stability. It handles CPU, memory, storage, I/O devices, and network resources through scheduling, allocation, and access control strategies.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>\ud83c\udfaf Goals of Resource Management</li> <li>\ud83d\udee0 Types of Resources Managed</li> <li>\u2699\ufe0f CPU Resource Management</li> <li>\ud83e\udde0 Memory Management</li> <li>\ud83d\udcbe Storage and File Management</li> <li>\ud83c\udfae I/O Device Management</li> <li>\ud83c\udf10 Network Resource Management</li> <li>\ud83d\udcca Resource Allocation Policies &amp; Algorithms</li> <li>\u26a0\ufe0f Challenges in Resource Management</li> <li>\ud83d\udd04 Priority Inversion</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#goals-of-resource-management","title":"\ud83c\udfaf Goals of Resource Management","text":"<p>\u2705 Efficiency: Maximize resource utilization, minimize wastage. \u2705 Fairness: Prevent resource monopolization by a single process. \u2705 Reliability: Ensure stable, predictable system performance. \u2705 Scalability: Adapt to increased system load and users. \u2705 Security &amp; Isolation: Protect resources from unauthorized access.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#types-of-resources-managed","title":"\ud83d\udee0 Types of Resources Managed","text":"<p>\ud83d\udd39 CPU: Executes instructions and processes tasks. \ud83d\udd39 Memory (RAM): Stores running programs and data. \ud83d\udd39 Storage Devices: HDDs, SSDs, managing file systems. \ud83d\udd39 I/O Devices: Keyboards, mice, printers, network cards. \ud83d\udd39 Network Resources: Bandwidth, connection sockets for communication.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#cpu-resource-management","title":"\u2699\ufe0f CPU Resource Management","text":"<p>The CPU scheduler determines which process gets CPU time.</p> <p>\ud83d\udd39 Process Scheduling: FCFS, Round Robin, Priority Scheduling. \ud83d\udd39 Context Switching: Rapid switching between processes. \ud83d\udd39 Load Balancing: Distributing tasks across multi-core processors. \ud83d\udd39 Interrupt Handling: Managing external events (e.g., keyboard input).</p> <p>\ud83d\udccc Example: Watching a video while browsing the web\u2014both tasks share CPU efficiently.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#memory-management","title":"\ud83e\udde0 Memory Management","text":"<p>Memory (RAM) is crucial for program execution.</p> <p>\ud83d\udd39 Allocation &amp; Deallocation: Assigning and freeing memory dynamically. \ud83d\udd39 Virtual Memory: Extends physical memory using disk storage. \ud83d\udd39 Paging &amp; Segmentation: Memory division techniques for efficient allocation. \ud83d\udd39 Memory Protection: Prevents one process from corrupting another's data.</p> <p>\ud83d\udccc Analogy: Think of an apartment complex where tenants (processes) rent rooms (memory spaces).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#storage-and-file-management","title":"\ud83d\udcbe Storage and File Management","text":"<p>The OS organizes and controls storage access efficiently.</p> <p>\ud83d\udd39 File Allocation: Deciding how files are stored (FAT, NTFS). \ud83d\udd39 Directory Management: Organizing files into a hierarchy. \ud83d\udd39 Access Control: Managing read/write permissions. \ud83d\udd39 Disk Scheduling: Optimizing read/write operations for performance.</p> <p>\ud83d\udccc Analogy: A librarian organizing books on shelves for easy retrieval.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#io-device-management","title":"\ud83c\udfae I/O Device Management","text":"<p>Manages devices like keyboards, mice, and printers.</p> <p>\ud83d\udd39 Device Drivers: Translates OS instructions into hardware commands. \ud83d\udd39 Buffering &amp; Caching: Temporary storage for efficient data flow. \ud83d\udd39 Interrupt Handling: Responding to device requests dynamically. \ud83d\udd39 Access Control: Preventing conflicts when multiple processes use a device.</p> <p>\ud83d\udccc Example: A printer queue manages multiple print jobs efficiently.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#network-resource-management","title":"\ud83c\udf10 Network Resource Management","text":"<p>Manages bandwidth, connections, and communication between devices.</p> <p>\ud83d\udd39 Connection Management: Establishing &amp; terminating network sessions. \ud83d\udd39 Addressing &amp; Routing: Ensuring correct data packet delivery. \ud83d\udd39 Security: Protecting network traffic from unauthorized access. \ud83d\udd39 Bandwidth Allocation: Distributing network resources fairly.</p> <p>\ud83d\udccc Example: Streaming a video without buffering while other devices use the internet.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#resource-allocation-policies-algorithms","title":"\ud83d\udcca Resource Allocation Policies &amp; Algorithms","text":"<p>\ud83d\udd39 First-Come, First-Served (FCFS): Allocates resources in request order. \ud83d\udd39 Priority Scheduling: Assigns priority levels to tasks. \ud83d\udd39 Round Robin: Time-sharing approach for fairness. \ud83d\udd39 Deadlock Avoidance: Ensures processes don\u2019t permanently block each other.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#challenges-in-resource-management","title":"\u26a0\ufe0f Challenges in Resource Management","text":"<p>\u274c Complexity: Handling multiple resources efficiently. \u274c Dynamic Demands: Processes change requirements frequently. \u274c Security Risks: Preventing unauthorized resource access. \u274c Scalability: Adapting to growing system demands.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#priority-inversion","title":"\ud83d\udd04 Priority Inversion","text":"<p>\ud83d\udea8 Priority Inversion occurs when a low-priority task holds a resource needed by a high-priority task, causing delays.</p> <p>\ud83d\udccc Real-Life Analogy: Imagine a crane operator (high-priority) waiting for a maintenance worker (low-priority) using the only forklift. If a safety inspector (medium-priority) interrupts, the crane operator is blocked even longer!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#causes","title":"\u2699\ufe0f Causes","text":"<p>\ud83d\udd39 Shared Resource Contention: Multiple tasks need the same resource. \ud83d\udd39 Long Critical Sections: Holding resources longer than needed. \ud83d\udd39 Lack of Priority Inheritance: No mechanism to boost priority.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#solutions","title":"\ud83d\udee0 Solutions","text":"<p>\u2705 Priority Inheritance: Temporarily boosts the lower-priority task\u2019s priority. \u2705 Priority Ceiling Protocol: Ensures critical tasks always get priority. \u2705 Efficient Locking Strategies: Reduce contention and release resources faster.</p> <p>\ud83d\udccc Example: A high-priority task waiting indefinitely for a low-priority task to finish logging data.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.3-Resource_Management/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<p>Effective resource management is critical for system stability, performance, and security. By optimizing resource allocation, preventing deadlocks, and handling priority inversions, an OS ensures smooth and efficient multitasking.</p> <p>\ud83d\ude80 Mastering these concepts is essential for understanding modern operating systems and system-level programming!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/","title":"Load Balancing &amp; Performance Tuning in Operating Systems \ud83d\udda5\ufe0f\u2696\ufe0f","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ol> <li>Introduction</li> <li>Understanding Load Balancing</li> <li>How Load Balancing Works</li> <li>Types of Load Balancing</li> <li>Common Load Balancing Algorithms</li> <li>Advantages &amp; Challenges</li> <li>Real-World Applications</li> <li>Performance Measurement &amp; Tuning</li> <li>Common Tools &amp; Techniques</li> <li>Performance Tuning Strategies</li> <li>Advantages &amp; Challenges</li> <li>Key Differences: Measurement vs. Tuning</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#introduction","title":"\ud83d\udcd6 Introduction","text":"<p>Load balancing ensures optimal distribution of workloads across multiple resources (processors, servers) to prevent bottlenecks, maximize efficiency, and improve response times. Similarly, performance tuning ensures a system runs efficiently by analyzing and optimizing key metrics.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#understanding-load-balancing","title":"\u2696\ufe0f Understanding Load Balancing","text":"<p>\ud83d\udd39 Analogy: Think of a restaurant kitchen! \ud83c\udf7d\ufe0f The head chef assigns orders evenly to sous-chefs to prevent overload, ensuring timely and smooth service.</p> <p>\ud83d\udd39 Key Purpose: Prevent overloading a single resource while others remain idle, maintaining a stable and high-performing system.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#how-load-balancing-works","title":"\ud83d\udd04 How Load Balancing Works","text":"<ol> <li>Workload Monitoring \ud83d\udcca \u2013 Tracks CPU, memory, network, and disk usage.</li> <li>Task Distribution \ud83d\udce6 \u2013 Dynamically redistributes tasks to underutilized resources.</li> <li>Feedback Loop \ud83d\udd04 \u2013 Adjusts task allocation strategies in real-time.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#types-of-load-balancing","title":"\ud83c\udfd7\ufe0f Types of Load Balancing","text":"<ol> <li>Static Load Balancing \u2699\ufe0f \u2013 Predefined task allocation; suitable for predictable workloads.</li> <li>Dynamic Load Balancing \ud83d\udd00 \u2013 Real-time task distribution; adapts to workload fluctuations.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#common-load-balancing-algorithms","title":"\ud83d\udccc Common Load Balancing Algorithms","text":"<ul> <li>\ud83d\udd04 Round-Robin \u2013 Tasks assigned cyclically to available resources.</li> <li>\ud83d\udcc9 Least Connections \u2013 Tasks sent to the least busy resource.</li> <li>\u2696\ufe0f Weighted Distribution \u2013 More powerful resources get more tasks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#advantages-challenges","title":"\u2705 Advantages &amp; Challenges","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#advantages","title":"\u2714\ufe0f Advantages","text":"<ul> <li>Prevents bottlenecks \ud83d\udea7</li> <li>Enhances resource utilization \ud83d\udd25</li> <li>Improves fault tolerance \ud83d\udee1\ufe0f</li> <li>Reduces response time \u23f3</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#challenges","title":"\u274c Challenges","text":"<ul> <li>Complexity in task distribution \u26a0\ufe0f</li> <li>Overhead from continuous monitoring \ud83c\udfd7\ufe0f</li> <li>Fairness &amp; stability issues \u2696\ufe0f</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#real-world-applications","title":"\ud83c\udf0e Real-World Applications","text":"<ul> <li>Web Servers \ud83c\udf10 \u2013 Distribute requests for fast responses.</li> <li>Cloud Computing \u2601\ufe0f \u2013 Dynamic scaling and workload balancing.</li> <li>Data Centers \ud83c\udfe2 \u2013 Optimized energy efficiency &amp; performance.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#performance-measurement-tuning","title":"\ud83d\ude80 Performance Measurement &amp; Tuning","text":"<p>Just like tuning a car for better efficiency, OS performance tuning ensures smooth operations by adjusting parameters based on real-time monitoring.</p> <p>\ud83d\udd39 Analogy: A car needs performance checks (fuel efficiency, tire pressure) and tuning (engine timing, oil change) to run optimally. Similarly, an OS needs measurement and tuning.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#common-tools-techniques","title":"\ud83d\udee0\ufe0f Common Tools &amp; Techniques","text":"<ul> <li>System Monitors \ud83d\udcca (e.g., <code>top</code>, <code>vmstat</code>, <code>iostat</code>)</li> <li>Profilers \ud83d\udd2c (e.g., <code>perf</code>, <code>gprof</code>)</li> <li>Benchmarking Tools \ud83d\udccf (e.g., <code>sysbench</code>, <code>fio</code>)</li> <li>Logs &amp; Traces \ud83d\udcdc (e.g., <code>dmesg</code>, <code>strace</code>)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#performance-tuning-strategies","title":"\ud83c\udfaf Performance Tuning Strategies","text":"<ul> <li>\ud83d\udd27 System Adjustments \u2013 Kernel tuning, scheduling policies.</li> <li>\ud83d\udda5\ufe0f Application Optimization \u2013 Code refactoring, caching.</li> <li>\ud83d\udcbe Hardware Upgrades \u2013 Adding RAM, SSDs, CPU scaling.</li> <li>\u2696\ufe0f Load Balancing \u2013 Prevent resource overload.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#advantages-challenges_1","title":"\u2705 Advantages &amp; Challenges","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#advantages_1","title":"\u2714\ufe0f Advantages","text":"<ul> <li>Faster response times \u23e9</li> <li>Improved resource efficiency \ud83d\udd25</li> <li>Better scalability \ud83d\udcc8</li> <li>Long-term stability \ud83d\udee1\ufe0f</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#challenges_1","title":"\u274c Challenges","text":"<ul> <li>Complex environments \ud83d\udd0d</li> <li>Dynamic workloads \ud83d\udd04</li> <li>Trade-offs in tuning \u2696\ufe0f</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#key-differences-measurement-vs-tuning","title":"\ud83d\udd04 Key Differences: Measurement vs. Tuning","text":"Aspect Measurement \ud83d\udcca Tuning \u2699\ufe0f Purpose Gather data, analyze metrics Adjust system based on analysis Process Passive (logs, benchmarks) Active (configuration changes) Goal Identify bottlenecks Improve performance <p>\ud83d\udccc In short: Measurement diagnoses issues, while tuning fixes them! \ud83d\udee0\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/8.4-Load_Balancing_AND_Performance_Tuning/#conclusion","title":"\ud83d\udd25 Conclusion","text":"<p>Effective Load Balancing and Performance Tuning are crucial for maintaining system stability, efficiency, and scalability. By using the right strategies and tools, we can ensure smooth and high-performing operating systems. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/","title":"\ud83d\udccc Cache Mapping Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>Introduction</li> <li>Why Cache Mapping Matters?</li> <li>Direct Mapping<ul> <li>How It Works</li> <li>Advantages</li> <li>Disadvantages</li> </ul> </li> <li>Associative Mapping<ul> <li>How It Works</li> <li>Advantages</li> <li>Disadvantages</li> </ul> </li> <li>Comparison: Direct vs. Associative Mapping</li> <li>Virtual Machines &amp; Hypervisors</li> <li>Spooling</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#introduction","title":"\ud83c\udfc6 Introduction","text":"<ul> <li>Cache: A small, high-speed memory placed between CPU and main memory.</li> <li>Goal: Store frequently accessed data to reduce memory access time.</li> <li>Mapping Techniques: Determine where memory blocks are placed in the cache.<ul> <li>\ud83d\udd39 Direct Mapping</li> <li>\ud83d\udd39 Associative Mapping</li> </ul> </li> </ul> <p>\ud83d\udee0 Real-World Analogy: - Your study table (cache) stores frequently used books. - Your library (main memory) holds all books. - Direct Mapping: Fixed shelf slots for specific books. - Associative Mapping: Books can be placed anywhere on the shelf.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#why-cache-mapping-matters","title":"\ud83c\udfaf Why Cache Mapping Matters?","text":"<p>\u2714 Determines memory block placement in cache. \u2714 Affects hit rate &amp; performance. \u2714 Helps reduce cache misses.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#direct-mapping","title":"\ud83d\udccc Direct Mapping","text":"<ul> <li>Each memory block maps to exactly one cache line.</li> <li>Formula: <code>Cache Line = Block Number % Number of Cache Lines</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#how-direct-mapping-works","title":"\ud83d\udd04 How Direct Mapping Works?","text":"<ol> <li>Block Number Calculation: Memory is divided into blocks.</li> <li>Index Computation: Block number % cache size determines the cache line.</li> <li>Placement &amp; Replacement: Each block has a single fixed slot.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#advantages-of-direct-mapping","title":"\u2705 Advantages of Direct Mapping","text":"<p>\u2714 Simple &amp; easy to implement. \u2714 Fast indexing using modulus operation.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#disadvantages-of-direct-mapping","title":"\u274c Disadvantages of Direct Mapping","text":"<ul> <li>\u274c High Conflict Misses: Multiple blocks map to the same cache line.</li> <li>\u274c Less Flexibility: No alternative placement options.</li> </ul> <p>\ud83d\udcd6 Analogy: A fixed bookshelf where each book type has only one assigned spot.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#associative-mapping","title":"\ud83d\udccc Associative Mapping","text":"<ul> <li>Any memory block can go into any cache line.</li> <li>More flexible but complex.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#how-associative-mapping-works","title":"\ud83d\udd04 How Associative Mapping Works?","text":"<ol> <li>No Fixed Position: Blocks can be stored in any cache line.</li> <li>Search by Tag: The system searches all lines for a block.</li> <li>Replacement Policy: If full, uses LRU (Least Recently Used) or other strategies.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#advantages-of-associative-mapping","title":"\u2705 Advantages of Associative Mapping","text":"<p>\u2714 Fewer Conflict Misses: Blocks aren\u2019t forced into specific lines. \u2714 Better Flexibility: Cache adapts to different access patterns.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#disadvantages-of-associative-mapping","title":"\u274c Disadvantages of Associative Mapping","text":"<ul> <li>\u274c More Complexity: Hardware must search multiple lines.</li> <li>\u274c Longer Hit Time: Slightly increases lookup time.</li> </ul> <p>\ud83d\udcd6 Analogy: A free bookshelf where books can be placed anywhere.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#comparison-direct-vs-associative-mapping","title":"\u2696 Comparison: Direct vs. Associative Mapping","text":"Feature Direct Mapping \ud83c\udff7 Associative Mapping \ud83d\udd00 Placement Fixed line per block Any free cache line Complexity Simple \u2705 Complex \u274c Conflict Misses High \u274c Low \u2705 Speed Fast \u2705 Slightly slower \u274c"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#virtual-machines-and-hypervisors","title":"\ud83d\udda5\ufe0f Virtual Machines and Hypervisors","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#what-is-a-virtual-machine-vm","title":"\ud83d\udd39 What is a Virtual Machine (VM)?","text":"<ul> <li>A software-based environment that mimics a physical computer.</li> <li>Runs multiple OS instances on a single physical machine.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#what-is-a-hypervisor","title":"\ud83d\udd39 What is a Hypervisor?","text":"<ul> <li>Software that creates &amp; manages VMs.</li> <li>Allocates resources like CPU, RAM, and storage.</li> <li>Ensures isolation between VMs.</li> </ul> <p>\ud83d\udcd6 Analogy: An apartment building (host machine) with multiple independent flats (VMs), managed by a building manager (hypervisor).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#how-virtualization-works","title":"\ud83d\udd04 How Virtualization Works?","text":"<ol> <li>Hardware Abstraction: Hypervisor presents virtual hardware.</li> <li>Resource Allocation: Divides CPU, RAM, and storage.</li> <li>Isolation: VMs are independent, preventing conflicts.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#advantages","title":"\u2705 Advantages","text":"<p>\u2714 Efficient Hardware Utilization \ud83d\udda5\ufe0f \u2714 Easy Deployment &amp; Management \u2699\ufe0f \u2714 Better Security &amp; Isolation \ud83d\udd12</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#disadvantages","title":"\u274c Disadvantages","text":"<p>\u274c Performance Overhead \u26a1 \u274c Complex Configuration \ud83d\udee0\ufe0f</p> <p>\ud83d\udccc Use Cases: - Cloud computing (AWS, GCP, Azure) - Multi-OS testing environments</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#spooling-simultaneous-peripheral-operations-on-line","title":"\ud83d\udcdc Spooling (Simultaneous Peripheral Operations On-Line)","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#what-is-spooling","title":"\ud83d\udd39 What is Spooling?","text":"<ul> <li>Buffer-based I/O management for handling slow devices like printers.</li> <li>Stores data in a queue before sending it to the device.</li> </ul> <p>\ud83d\udcd6 Analogy: A bakery where customer orders (tasks) are queued up and processed one by one.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#how-spooling-works","title":"\ud83d\udd04 How Spooling Works?","text":"<ol> <li>Input Collection: Data is temporarily stored in a buffer.</li> <li>Queued Operations: Multiple jobs wait in line.</li> <li>Asynchronous Execution: CPU continues working while I/O happens in the background.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#advantages_1","title":"\u2705 Advantages","text":"<p>\u2714 Higher Throughput \ud83d\ude80 \u2714 Efficient Resource Utilization \ud83d\udda8\ufe0f \u2714 Asynchronous Execution \u23f3</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#disadvantages_1","title":"\u274c Disadvantages","text":"<p>\u274c Requires Extra Storage \ud83d\udcc2 \u274c Delays if Queue is Large \u23f3</p> <p>\ud83d\udccc Use Cases: - Print Servers \ud83d\udda8\ufe0f - Batch Data Processing \ud83d\udcca</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.1-Cache_Mapping_Techniques_AND_VM/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>\u2705 Direct Mapping: Simple, fast, but higher conflict misses. \u2705 Associative Mapping: Flexible, reduces misses, but complex. \u2705 Virtualization: Enables multi-OS environments with efficient resource management. \u2705 Spooling: Manages I/O efficiently using buffers.</p> <p>\ud83d\ude80 Understanding these concepts improves system performance and optimization strategies.</p> <p>\ud83d\udccc For Deep Dives: Continue exploring Set-Associative Mapping, Cache Replacement Policies, and Modern Virtualization Techniques!</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/","title":"\ud83d\udccc Network File System (NFS) &amp; Thread Safety vs. Reentrancy","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>Network File System (NFS)<ul> <li>Real-Life Analogy</li> <li>How NFS Works</li> <li>Key Features</li> <li>Advantages &amp; Disadvantages</li> <li>Use Cases</li> <li>Comparison with Other Distributed File Systems</li> </ul> </li> <li>Thread Safety &amp; Reentrancy<ul> <li>Real-Life Analogy</li> <li>Thread Safety</li> <li>Reentrancy</li> <li>Key Differences</li> <li>Achieving Thread Safety &amp; Reentrancy</li> <li>Advantages &amp; Disadvantages</li> <li>Examples in Real Systems</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#network-file-system-nfs","title":"\ud83d\udcc2 Network File System (NFS)","text":"<p>A Network File System (NFS) is a distributed file system protocol that allows multiple computers to access and share files over a network as if they were stored locally. It simplifies resource sharing and centralizes file management.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#real-life-analogy","title":"\ud83c\udfe2 Real-Life Analogy","text":"<p>Imagine a central filing room in an office: - Instead of keeping separate file copies at each desk (local storage), employees access the shared filing cabinet (NFS server). - This ensures a single source of truth and real-time updates for all employees.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#how-nfs-works","title":"\ud83d\udd0d How NFS Works","text":"<ol> <li>NFS Server Setup \ud83d\udda5\ufe0f<ul> <li>Administrator configures an NFS server and shares directories.</li> <li>Sets access permissions (read/write or read-only).</li> </ul> </li> <li>NFS Client Mounting \ud83d\udda5\ufe0f<ul> <li>Clients \"mount\" shared directories as part of their local file system.</li> <li>Users and applications access files seamlessly.</li> </ul> </li> <li>Remote File Access \ud83d\udcc2<ul> <li>Clients send file requests, and the server responds with data over the network.</li> <li>Read/write operations are handled remotely but feel local.</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#key-features","title":"\u2b50 Key Features","text":"<p>\u2705 Transparency: Files appear as if they are on a local disk. \u2705 Centralized Management: Admins manage files from a single location. \u2705 Cross-Platform Compatibility: Works on different OS platforms. \u2705 Scalability: Supports multiple servers and clients. \u2705 Security: Includes authentication and encryption (modern versions).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#advantages-disadvantages","title":"\ud83d\udcca Advantages &amp; Disadvantages","text":"\u2705 Advantages \u274c Disadvantages Efficient resource sharing \ud83d\udce4 Network dependency\u2014performance relies on network speed \ud83c\udf10 Consistent data across all clients \ud83d\udd04 Single point of failure\u2014server downtime affects all clients \ud83d\udea8 Centralized backup &amp; maintenance \ud83d\udcc1 Security risks\u2014requires careful configuration \ud83d\udd10 Cost-effective\u2014reduces storage redundancy \ud83d\udcb0 Performance overhead\u2014network latency can slow down access \u23f3"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#use-cases","title":"\ud83d\udccc Use Cases","text":"<ul> <li>Enterprise Environments: Centralized storage for company files.</li> <li>Cloud &amp; Virtualization: Shared storage for VMs and containers.</li> <li>Development &amp; Testing: Teams access the same code, builds, and test data.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#comparison-with-other-distributed-file-systems","title":"\u2696\ufe0f Comparison with Other Distributed File Systems","text":"Feature NFS SMB (Windows) DFS (HDFS, Ceph, etc.) Best for General file sharing Windows environments Large-scale distributed storage Common OS Linux/Unix Windows Cloud &amp; Big Data Performance Moderate High for Windows High scalability"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#thread-safety-reentrancy","title":"\ud83d\udd04 Thread Safety &amp; Reentrancy","text":"<p>In multi-threaded systems, ensuring code executes correctly when accessed by multiple threads is crucial. Thread Safety and Reentrancy address this challenge differently.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#real-life-analogy_1","title":"\u2615 Real-Life Analogy","text":"<ul> <li>Thread Safety: A shared coffee machine \ud83c\udfe2 ensures multiple users can order coffee simultaneously without issues.</li> <li>Reentrancy: A recipe book \ud83d\udcd6 allows multiple cooks to use the same recipe independently without interfering.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#thread-safety","title":"\ud83d\udd10 Thread Safety","text":"<p>Thread-safe code ensures correct behavior even when accessed by multiple threads simultaneously.</p> <p>\ud83d\udee0\ufe0f Key Characteristics: - Synchronization Mechanisms: Uses locks, mutexes, or atomic operations. - Atomic Operations: Prevents inconsistent modifications. - Consistent State: Prevents race conditions. - Concurrency Handling: Ensures predictable execution under multiple threads.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#reentrancy","title":"\ud83d\udd01 Reentrancy","text":"<p>A reentrant function can be paused and safely called again before the previous execution completes.</p> <p>\ud83d\udccc Key Characteristics: - No Shared State: Avoids modifying global/static variables. - Local Data Only: Uses stack-based or function parameter-based data. - Predictable Execution: Always produces the same output for the same input.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#key-differences","title":"\u2696\ufe0f Key Differences","text":"Feature Thread Safety \ud83d\udd12 Reentrancy \ud83d\udd04 Scope Manages concurrent access Allows independent calls to function Shared State Uses locks to protect shared data Avoids shared state entirely Implementation Complexity Requires synchronization Focuses on stateless design"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#achieving-thread-safety-reentrancy","title":"\ud83d\udee0\ufe0f Achieving Thread Safety &amp; Reentrancy","text":"<p>\u2714\ufe0f Avoid Global Variables \ud83d\uded1 \u2714\ufe0f Use Immutable Data Structures \ud83d\udd17 \u2714\ufe0f Fine-Grained Synchronization \ud83d\udd04 \u2714\ufe0f Write Stateless Functions \ud83d\udccc \u2714\ufe0f Manage Memory Carefully \ud83d\udd0d</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#advantages-disadvantages_1","title":"\ud83d\udcca Advantages &amp; Disadvantages","text":"\u2705 Pros \u274c Cons Reliability: Prevents crashes due to concurrent access Complexity: Requires careful design \ud83c\udfd7\ufe0f Scalability: Utilizes multi-core CPUs efficiently Performance Overhead: Locks may slow execution \u23f3 Reusability: Thread-safe code works in various environments Debugging Difficulty: Hard to detect concurrency bugs \ud83d\udc1e"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#examples-in-real-systems","title":"\ud83d\ude80 Examples in Real Systems","text":"<ul> <li>OS &amp; Libraries: Thread-safe standard libraries (C++, Java Collections)</li> <li>Web Servers: Concurrent request handling (Nginx, Apache)</li> <li>Kernel Development: Reentrant signal handlers in OS kernels</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.2-Network_File_System_AND_Thread_Safety/#summary","title":"\ud83c\udfaf Summary","text":"<p>\ud83d\udccc NFS enables seamless file sharing across networks, reducing redundancy and improving collaboration. \ud83d\udccc Thread Safety ensures multiple threads can execute code without conflicts. \ud83d\udccc Reentrancy allows functions to be called multiple times safely, without affecting previous executions. \ud83d\udccc Both concepts are crucial for designing high-performance, reliable, and scalable systems.</p> <p>\ud83d\udd39 Mastering these concepts is essential for building robust multi-threaded applications and distributed file systems. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/","title":"\ud83d\udccc Operating System Security Mechanisms and Future Trends","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>\ud83d\udd10 Introduction</li> <li>\ud83d\udee1\ufe0f Key Security Concepts</li> <li>\ud83d\udcdc Security Models &amp; Frameworks</li> <li>\ud83d\udda5\ufe0f OS-Specific Implementations</li> <li>\u2705 Advantages of OS Security</li> <li>\u26a0\ufe0f Limitations &amp; Challenges</li> <li>\ud83d\udd0d Ensuring a Secure Environment</li> <li>\ud83d\ude80 Future Trends in OS<ul> <li>\ud83e\udde9 Microkernels</li> <li>\ud83d\udce6 Containers</li> <li>\ud83c\udf10 Other Future OS Considerations</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#introduction","title":"\ud83d\udd10 Introduction","text":"<p>Operating System Security Mechanisms protect system resources from unauthorized access, threats, and vulnerabilities.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#real-life-analogy","title":"\ud83c\udfdb\ufe0f Real-Life Analogy:","text":"<ul> <li>OS Security = A secure building with guards, locks, and surveillance.</li> <li>Authentication = ID verification at the entrance.</li> <li>Authorization = Access levels for employees.</li> <li>Access Control = Key cards for restricted areas.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#key-security-concepts","title":"\ud83d\udee1\ufe0f Key Security Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#authentication","title":"\u2705 Authentication","text":"<ul> <li>Verifies user/process identity (e.g., passwords, biometrics, tokens).</li> <li>Prevents unauthorized system access.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#authorization","title":"\u2705 Authorization","text":"<ul> <li>Defines user permissions post-authentication.</li> <li>Example: Read-only vs. admin access.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#access-control","title":"\u2705 Access Control","text":"<ul> <li>Restricts operations based on roles/policies.</li> <li>Models: MAC, DAC, RBAC.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#auditing-logging","title":"\u2705 Auditing &amp; Logging","text":"<ul> <li>Records access logs for security monitoring.</li> <li>Detects breaches and policy violations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#encryption-data-protection","title":"\u2705 Encryption &amp; Data Protection","text":"<ul> <li>Converts sensitive data into unreadable formats.</li> <li>Ensures data confidentiality, even if accessed.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#intrusion-detection-prevention-idps","title":"\u2705 Intrusion Detection &amp; Prevention (IDPS)","text":"<ul> <li>Monitors and blocks suspicious activities.</li> <li>Works like a security alarm system.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#sandboxing-isolation","title":"\u2705 Sandboxing &amp; Isolation","text":"<ul> <li>Restricts applications to controlled environments.</li> <li>Prevents malware from affecting the whole system.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#security-models-frameworks","title":"\ud83d\udcdc Security Models &amp; Frameworks","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#bell-lapadula-model-confidentiality","title":"\ud83d\udd39 Bell-LaPadula Model (Confidentiality)","text":"<ul> <li>Ensures \"No Read Up, No Write Down\" policy.</li> <li>Used in classified environments.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#biba-model-integrity","title":"\ud83d\udd39 Biba Model (Integrity)","text":"<ul> <li>Ensures \"No Write Up, No Read Down\" to prevent data corruption.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#clark-wilson-model-integrity-separation-of-duties","title":"\ud83d\udd39 Clark-Wilson Model (Integrity + Separation of Duties)","text":"<ul> <li>Uses well-defined transactions &amp; integrity checks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#os-specific-implementations","title":"\ud83d\udda5\ufe0f OS-Specific Implementations","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#linux","title":"\ud83d\udc27 Linux","text":"<ul> <li>LSM Modules (AppArmor, SELinux) for access control.</li> <li>iptables/firewalld for network security.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#windows","title":"\ud83c\udfc1 Windows","text":"<ul> <li>User Account Control (UAC), BitLocker for disk encryption.</li> <li>Windows Defender, Active Directory for access management.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#macos","title":"\ud83c\udf4f macOS","text":"<ul> <li>Sandboxing, Gatekeeper, FileVault for encryption.</li> <li>Built-in malware scanning.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#mobile-os-androidios","title":"\ud83d\udcf1 Mobile OS (Android/iOS)","text":"<ul> <li>Sandboxing, permission frameworks, cryptographic protection.</li> <li>Frequent security updates.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#advantages-of-os-security","title":"\u2705 Advantages of OS Security","text":"<p>\u2714\ufe0f Data Protection: Prevents unauthorized access. \u2714\ufe0f System Integrity: Keeps critical system operations reliable. \u2714\ufe0f Reduced Malware Threats: Blocks unauthorized execution. \u2714\ufe0f User Trust &amp; Compliance: Meets industry regulations.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#limitations-challenges","title":"\u26a0\ufe0f Limitations &amp; Challenges","text":"<p>\u26a1 Performance Overhead: Extra security checks can slow down the system. \u26a1 Configuration Complexity: Managing permissions &amp; policies requires expertise. \u26a1 Zero-Day Attacks: Unknown vulnerabilities can bypass security. \u26a1 User Negligence: Weak passwords and outdated systems pose risks.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#ensuring-a-secure-environment","title":"\ud83d\udd0d Ensuring a Secure Environment","text":"<p>\ud83d\udd04 Regular Updates: Apply security patches promptly. \ud83d\udd11 Strong Authentication: Use MFA, biometrics, complex passwords. \ud83d\udcc0 Backup &amp; Recovery: Regularly back up critical data. \ud83d\udcda User Education: Train users on phishing &amp; security best practices.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#future-trends-in-os","title":"\ud83d\ude80 Future Trends in OS","text":""},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#microkernels","title":"\ud83e\udde9 Microkernels","text":"<p>\ud83d\udd39 Minimalistic design: Runs only essential services in kernel space. \ud83d\udd39 User-space services: Device drivers, file systems run separately. \ud83d\udd39 Enhanced Security: Fault isolation prevents system crashes.</p> <p>\ud83c\udfdb\ufe0f Real-Life Analogy: - Traditional OS = One large kitchen (everything in one space). - Microkernel OS = Specialized kitchen stations (fault in one station doesn't halt everything).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#pros","title":"\ud83d\udd25 Pros:","text":"<p>\u2714\ufe0f Improved stability &amp; security. \u2714\ufe0f Easier debugging and updating.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#cons","title":"\u26a0\ufe0f Cons:","text":"<p>\u26a1 Increased overhead from inter-process communication. \u26a1 More complex design.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#containers","title":"\ud83d\udce6 Containers","text":"<p>\ud83d\udd39 Lightweight virtualization: Packages an app with its dependencies. \ud83d\udd39 Faster than VMs: Shares OS kernel instead of virtualizing entire OS. \ud83d\udd39 Portable: Runs consistently across environments.</p> <p>\ud83c\udfdb\ufe0f Real-Life Analogy: - Traditional VMs = Full apartments (each with separate utilities). - Containers = Shipping containers (isolated but share common resources).</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#pros_1","title":"\ud83d\udd25 Pros:","text":"<p>\u2714\ufe0f Resource-efficient &amp; fast startup. \u2714\ufe0f Ideal for cloud-native applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#cons_1","title":"\u26a0\ufe0f Cons:","text":"<p>\u26a1 Shared kernel = Higher security risks. \u26a1 Complex orchestration at large scale.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#other-future-os-considerations","title":"\ud83c\udf10 Other Future OS Considerations","text":"<p>\ud83d\udd39 Unikernels: OS with a single-purpose, lightweight design. \ud83d\udd39 Cloud-Native OS: Optimized for scalable cloud environments. \ud83d\udd39 Serverless Architectures: Code execution without server management. \ud83d\udd39 Edge &amp; IoT OS: Secure, lightweight systems for network edge devices.</p>"},{"location":"Notes/Dev-Tech-Stacks/CSE-Core-Subjects/OS/9.3-Security_Mechanisms/#conclusion","title":"\ud83d\udccc Conclusion","text":"<p>\ud83d\udd39 OS Security is the backbone of cybersecurity. Without proper security measures, systems become vulnerable to attacks, leading to data breaches and disruptions. \ud83d\udd39 Future OS trends emphasize modularity, security, and efficiency, ensuring systems are resilient against evolving threats. \ud83d\udd39 Organizations and individuals must adopt best security practices to safeguard their computing environments.</p> <p>\ud83d\udd39 Stay secure, stay updated! \ud83d\udee1\ufe0f\ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/","title":"Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/#_1","title":"Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/#software-engineering-study-guide","title":"\ud83d\udccc Software Engineering Study Guide","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/#devops-cloud-infrastructure","title":"\ud83d\ude80 DevOps &amp; Cloud Infrastructure","text":"Sub-Category Key Areas Priority Docker &amp; Kubernetes Containerization, microservices, Kubernetes clusters, scaling, deployments High Docker &amp; Kubernetes Guide CI/CD Pipelines Jenkins, GitLab CI, CircleCI, automate testing, building, deployment processes High Cloud Platforms AWS (EC2, Lambda, S3), GCP, Azure, scalability, fault tolerance, security High Infrastructure as Code Terraform, CloudFormation Medium Monitoring &amp; Logging Prometheus, Grafana, ELK stack (Elasticsearch, Logstash, Kibana), Splunk Medium ## \ud83d\udd0d Debugging Production Issues - \ud83d\udd17 Sub-Category Key Areas Priority -------------------------- -------------------------------------------------------------- ---------- Incident Management Handling outages, analyzing logs and metrics High Root Cause Analysis Tracing, debugging tools, profiling High Distributed Tracing Jaeger, Zipkin for tracing microservices in production High Performance Optimization Memory profiling, CPU analysis, database query optimizations High"},{"location":"Notes/Dev-Tech-Stacks/DevOps/#security-","title":"\ud83d\udd10 Security -  \ud83d\udd17","text":"Sub-Category Key Areas Priority Secure Coding Practices OWASP Top 10, SQL Injection, XSS, CSRF, securing APIs High OAuth 2.0 &amp; OpenID Connect Authentication, API security, token-based authentication High Encryption &amp; Hashing AES, RSA encryption, SHA-256, bcrypt, encryption best practices Medium <ul> <li>API Security</li> <li>OWASP Security</li> <li>Security Principles</li> <li>Security by Design: Building Secure Microservices from Day One</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/#leadership-mentorship-","title":"\ud83c\udfaf Leadership &amp; Mentorship -  \ud83d\udd17","text":"Sub-Category Key Areas Priority Code Reviews Best practices, mentoring junior engineers, building scalable systems High Architecture Decisions Trade-offs in architecture, database selection, system design for scalability High Collaboration Tools Jira, Confluence, Git, Slack for seamless cross-functional collaboration Medium"},{"location":"Notes/Dev-Tech-Stacks/DevOps/#advanced-algorithms-design-patterns-","title":"\u26a1 Advanced Algorithms &amp; Design Patterns -  \ud83d\udd17","text":"Sub-Category Key Areas Priority Advanced Data Structures Tries, Segment Trees, Fenwick Trees, Graphs, Heaps, Hash Tables High Concurrency &amp; Parallelism Efficient concurrent systems, handling race conditions, deadlock prevention, multithreading High System Scalability &amp; Fault Tolerance High availability, fault tolerance, disaster recovery, replication, sharding High Design for Extensibility Designing systems that scale or extend in the future, modularity, microservices High"},{"location":"Notes/Dev-Tech-Stacks/DevOps/#leadership-skills-","title":"\ud83c\udfc6 Leadership Skills -  \ud83d\udd17","text":"Sub-Category Key Areas Priority Soft Skills Communication, handling stakeholder requirements, leading complex technical discussions High Conflict Resolution Handling disagreements in technical discussions, resolving team disputes High Cross-functional Collaboration Collaborating across engineering, product, design, and operations teams to solve complex problems High"},{"location":"Notes/Dev-Tech-Stacks/DevOps/#emerging-technologies","title":"\ud83d\udd25 Emerging Technologies","text":"Sub-Category Key Areas Priority Emerging Technologies AI, Blockchain, Quantum Computing, Edge Computing, 5G, IoT High"},{"location":"Notes/Dev-Tech-Stacks/DevOps/#additional-resources","title":"\ud83d\udccc Additional Resources","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/#linux-guide","title":"Linux Guide","text":"<ul> <li>Linux Commands Cheat Sheet</li> <li>Linux Must-Know Concepts &amp; Commands Guide</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/#software-engineering-best-practices","title":"Software Engineering Best Practices","text":"<ul> <li>Software Development Best Practices</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/#cybersecurity","title":"Cybersecurity","text":"<ul> <li>Cybersecurity Study Notes (Beginner to Expert)</li> </ul> <p>This index provides an organized roadmap for your learning, covering all key areas a Google Senior Engineer should master! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/","title":"\ud83c\udfaf Advanced Algorithms &amp; Design Patterns \u2013 A Senior Engineer\u2019s Guide \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ol> <li>Concurrency &amp; Parallelism \u26a1</li> <li>System Scalability &amp; Fault Tolerance \ud83d\udd25</li> <li>Design for Extensibility \ud83c\udfd7\ufe0f</li> <li>Key Takeaways \ud83c\udfaf</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#1-concurrency-parallelism","title":"1\ufe0f\u20e3 Concurrency &amp; Parallelism \u26a1","text":"<p>Efficient concurrent systems are crucial for performance and scalability in modern applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#key-concepts","title":"\ud83d\udd39 Key Concepts","text":"<p>\u2705 Concurrency vs Parallelism - Concurrency \u2013 Tasks start, run, and complete in overlapping time frames (e.g., multithreading). - Parallelism \u2013 Tasks run simultaneously on multiple processors/cores.</p> <p>\u2705 Race Conditions \u2013 Two threads accessing shared data unpredictably. Solution: Use locks (Mutex), atomic operations, transactional memory.</p> <p>\u2705 Deadlocks &amp; Prevention \u2013 Occurs when multiple threads block each other. Prevention: - Use timeouts to break circular waits. - Ensure consistent lock ordering. - Implement deadlock detection mechanisms.</p> <p>\u2705 Threading Models - Multi-threading (Java, Python threading) \u2013 Good for I/O-bound tasks. - Async programming (Node.js, Golang Goroutines) \u2013 Non-blocking execution for high concurrency.</p> <p>\u2705 Synchronization Mechanisms - Locks (Mutex, Semaphore) \u2013 Control access to shared resources. - Thread-safe data structures \u2013 Use <code>ConcurrentHashMap</code>, <code>CopyOnWriteArrayList</code>. - Message Queues (Kafka, RabbitMQ) \u2013 Avoid shared states by passing messages.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#2-system-scalability-fault-tolerance","title":"2\ufe0f\u20e3 System Scalability &amp; Fault Tolerance \ud83d\udd25","text":"<p>Building systems that handle failures gracefully and scale under high load.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#high-availability","title":"\ud83d\udd39 High Availability","text":"<p>\u2705 Load Balancing \u2013 Distribute traffic using Nginx, HAProxy, AWS ELB. \u2705 Auto-scaling \u2013 Adjust system resources dynamically with Kubernetes, AWS Auto Scaling. \u2705 Failover Strategies \u2013 Use standby replicas to take over in case of failure.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#fault-tolerance-disaster-recovery","title":"\ud83d\udd39 Fault Tolerance &amp; Disaster Recovery","text":"<p>\u2705 Replication \u2013 Keep multiple copies of data (leader-follower, multi-master replication). \u2705 Sharding \u2013 Split data across multiple databases for better performance. \u2705 Circuit Breaker Pattern \u2013 Prevent cascading failures (Netflix Hystrix). \u2705 Chaos Engineering \u2013 Intentionally inject failures to test resilience (Netflix Chaos Monkey).</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#performance-optimization","title":"\ud83d\udd39 Performance Optimization","text":"<p>\u2705 Caching (Redis, Memcached) \u2013 Reduce database load, improve response times. \u2705 CDN (Cloudflare, Akamai) \u2013 Deliver static content closer to users. \u2705 Database Indexing &amp; Query Optimization \u2013 Reduce expensive DB lookups. \u2705 Rate Limiting &amp; Throttling \u2013 Protect APIs from excessive requests.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#3-design-for-extensibility","title":"3\ufe0f\u20e3 Design for Extensibility \ud83c\udfd7\ufe0f","text":"<p>Creating systems that scale and evolve without major rework.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#principles-for-extensible-systems","title":"\ud83d\udd39 Principles for Extensible Systems","text":"<p>\u2705 Modularity \u2013 Break systems into independent reusable components. \u2705 Microservices \u2013 Decouple services for independent scaling and development. \u2705 Event-Driven Architecture \u2013 Use Kafka, RabbitMQ for asynchronous communication. \u2705 API-First Design \u2013 Define REST/gRPC APIs before implementation for better collaboration. \u2705 Strategy &amp; Factory Patterns \u2013 Dynamically change behaviors at runtime. \u2705 Feature Flags (LaunchDarkly, Firebase Remote Config) \u2013 Deploy features progressively.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#key-design-patterns","title":"\ud83d\udd39 Key Design Patterns","text":"<p>\u2705 Observer Pattern \u2013 Notify multiple components when state changes (used in UI frameworks). \u2705 Adapter Pattern \u2013 Convert one interface into another (useful for integrating legacy systems). \u2705 Decorator Pattern \u2013 Add functionality dynamically (used in middleware, logging). \u2705 Singleton Pattern \u2013 Ensure only one instance of a class exists (used in DB connections). \u2705 CQRS (Command Query Responsibility Segregation) \u2013 Separate reads &amp; writes for better performance.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Advanced%20Algorithms%20%26%20Design%20Patterns/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":"<p>\u2705 Concurrency &amp; Parallelism \u2013 Avoid race conditions, deadlocks, use async programming. \u2705 Scalability &amp; Fault Tolerance \u2013 Load balancing, auto-scaling, replication, caching. \u2705 Extensibility &amp; Modularity \u2013 Use design patterns &amp; microservices for scalable architectures. \u2705 Optimize for performance \u2013 Use indexing, caching, and efficient data structures.</p> <p>\ud83d\ude80 Stay ahead in the tech world by mastering these concepts!</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/","title":"CI/CD Pipelines \u2013 The Backbone of Modern DevOps \u2699\ufe0f\ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ol> <li>What is CI/CD?</li> <li>CI/CD Workflow \ud83d\ude80</li> <li>Popular CI/CD Tools \ud83d\udee0\ufe0f</li> <li>CI/CD Best Practices \u2705</li> <li>Key CI/CD Commands &amp; Concepts \ud83d\udd25</li> <li>Why CI/CD is Crucial for a Senior Engineer? \ud83c\udfaf</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#1-what-is-cicd","title":"1\ufe0f\u20e3 What is CI/CD?","text":"<ul> <li>\u2705 CI (Continuous Integration) \u2013 Automates code integration, testing, and validation.</li> <li>\u2705 CD (Continuous Deployment/Delivery) \u2013 Automates building, testing, and deployment to production.</li> <li>\u2705 Goal \u2013 Fast, reliable, and error-free software delivery.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#cicd-components","title":"\ud83d\udd39 CI/CD Components","text":"<ul> <li>Continuous Integration (CI) \u2192 Developers merge code frequently, triggering automated builds &amp; tests.</li> <li>Continuous Delivery (CD) \u2192 Code is automatically built, tested, and deployed to staging.</li> <li>Continuous Deployment (CD) \u2192 Code is automatically deployed to production if tests pass.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#2-cicd-workflow","title":"2\ufe0f\u20e3 CI/CD Workflow \ud83d\ude80","text":"<ul> <li>1\ufe0f\u20e3 Code Commit \u2192 Developer pushes code to repo (GitHub, GitLab, Bitbucket).</li> <li>2\ufe0f\u20e3 Build Process \u2192 Code compiled, dependencies installed.</li> <li>3\ufe0f\u20e3 Automated Testing \u2192 Unit, Integration, Security tests run.</li> <li>4\ufe0f\u20e3 Artifact Creation \u2192 Docker images, JARs, or binaries generated.</li> <li>5\ufe0f\u20e3 Deployment \u2192 App deployed to Staging/Production.</li> <li>6\ufe0f\u20e3 Monitoring &amp; Rollback \u2192 Monitor performance, auto-rollback on failure.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#3-popular-cicd-tools","title":"3\ufe0f\u20e3 Popular CI/CD Tools \ud83d\udee0\ufe0f","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#jenkins-most-widely-used-highly-customizable","title":"\ud83d\udd39 Jenkins (Most widely used, highly customizable)","text":"<ul> <li>\u2705 Open-source, extensive plugin support.</li> <li>\u2705 Automates CI/CD pipelines.</li> <li>\u2705 Supports Docker, Kubernetes, Git, Maven, Gradle.</li> <li>\u2705 Can run on AWS, GCP, Azure, or on-prem.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#gitlab-cicd-integrated-into-gitlab","title":"\ud83d\udd39 GitLab CI/CD (Integrated into GitLab)","text":"<ul> <li>\u2705 Auto DevOps \u2192 Default CI/CD pipelines.</li> <li>\u2705 Built-in container registry and Kubernetes support.</li> <li>\u2705 Supports YAML-based pipeline configuration.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#circleci-cloud-native-cicd","title":"\ud83d\udd39 CircleCI (Cloud-native CI/CD)","text":"<ul> <li>\u2705 Fast builds with Docker support.</li> <li>\u2705 Highly scalable with parallel test execution.</li> <li>\u2705 Works well with Kubernetes &amp; Serverless environments.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#4-cicd-best-practices","title":"4\ufe0f\u20e3 CI/CD Best Practices \u2705","text":"<ul> <li>\ud83d\udd39 Keep Builds Fast \u2013 Optimize for speed to enable rapid feedback loops.</li> <li>\ud83d\udd39 Automate Everything \u2013 Testing, security scanning, and deployments.</li> <li>\ud83d\udd39 Use Infrastructure as Code (IaC) \u2013 Terraform, CloudFormation for reproducibility.</li> <li>\ud83d\udd39 Implement Feature Flags \u2013 Rollout new features gradually.</li> <li>\ud83d\udd39 Monitor &amp; Alert \u2013 Use Prometheus, Grafana, ELK Stack for observability.</li> <li>\ud83d\udd39 Security First \u2013 Integrate SAST, DAST, and vulnerability scanning.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#5-key-cicd-commands-concepts","title":"5\ufe0f\u20e3 Key CI/CD Commands &amp; Concepts \ud83d\udd25","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#jenkins-cli-commands","title":"\ud83d\udd39 Jenkins CLI Commands","text":"<pre><code>jenkins-cli.jar -s http://localhost:8080/ list-jobs   # List all jobs\njenkins-cli.jar -s http://localhost:8080/ build my-job  # Trigger a build\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#gitlab-cicd-pipeline-configuration-yaml-example","title":"\ud83d\udd39 GitLab CI/CD Pipeline Configuration (YAML Example)","text":"<pre><code>stages:\n  - build\n  - test\n  - deploy\n\nbuild:\n  stage: build\n  script:\n    - echo \"Building app...\"\n    - mvn package\n\ntest:\n  stage: test\n  script:\n    - echo \"Running tests...\"\n    - mvn test\n\ndeploy:\n  stage: deploy\n  script:\n    - echo \"Deploying to production...\"\n    - kubectl apply -f deployment.yaml\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/CI-CD%20Pipelines/#6-why-cicd-is-crucial-for-a-senior-engineer","title":"6\ufe0f\u20e3 Why CI/CD is Crucial for a Senior Engineer? \ud83c\udfaf","text":"<ul> <li>\u2705 Ensures fast, frequent, and stable releases.</li> <li>\u2705 Reduces manual errors and improves code quality.</li> <li>\u2705 Enables scalable, microservices-based architectures.</li> <li>\u2705 Enhances DevOps culture \u2192 Developers + Ops working together.</li> </ul> <p>\ud83d\udd39 At Google-level scale, CI/CD ensures smooth, large-scale deployments across distributed systems with high reliability.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/","title":"\ud83c\udf29\ufe0f Cloud Platforms \u2013 Must-Know for a Senior Software Engineer","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#table-of-contents","title":"\ud83d\udcdc Table of Contents","text":"<ol> <li>What is Cloud Computing? \u2601\ufe0f</li> <li>Major Cloud Providers &amp; Key Services \ud83c\udfc6</li> <li>Overlapping Concepts Between AWS, GCP, and Azure \ud83d\udd04</li> <li>Scalability, Fault Tolerance &amp; Security \ud83c\udfd7\ufe0f</li> <li>Must-Know Cloud Concepts for a Senior Engineer \ud83c\udfaf</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#1-what-is-cloud-computing","title":"1\ufe0f\u20e3 What is Cloud Computing? \u2601\ufe0f","text":"<ul> <li>\ud83d\udd39 Cloud computing provides on-demand access to computing resources (servers, storage, databases, networking) over the internet.</li> <li>\ud83d\udd39 Benefits: Scalability, high availability, fault tolerance, cost efficiency, and security.</li> <li>\ud83d\udd39 Service Models:</li> <li>IaaS (Infrastructure as a Service) \u2013 Virtual machines, networking (e.g., AWS EC2, GCP Compute Engine).</li> <li>PaaS (Platform as a Service) \u2013 Fully managed environments (e.g., AWS Elastic Beanstalk, GCP App Engine).</li> <li>SaaS (Software as a Service) \u2013 Ready-to-use apps (e.g., Gmail, Dropbox).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#2-major-cloud-providers-key-services","title":"2\ufe0f\u20e3 Major Cloud Providers &amp; Key Services \ud83c\udfc6","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#aws-amazon-web-services","title":"\ud83d\udd39 AWS (Amazon Web Services) \ud83d\ude80","text":"<ul> <li>\u2705 EC2 \u2013 Virtual servers for compute power.</li> <li>\u2705 Lambda \u2013 Serverless compute to run code without managing infrastructure.</li> <li>\u2705 S3 \u2013 Scalable object storage.</li> <li>\u2705 RDS \u2013 Managed databases (MySQL, PostgreSQL, etc.).</li> <li>\u2705 VPC \u2013 Securely isolated network.</li> <li>\u2705 IAM \u2013 Secure access control.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#useful-aws-commands","title":"\ud83d\udda5\ufe0f Useful AWS Commands:","text":"<pre><code>aws s3 ls                          # List S3 buckets\naws ec2 describe-instances         # Get details of EC2 instances\naws lambda list-functions          # List all Lambda functions\naws rds describe-db-instances      # List RDS databases\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#gcp-google-cloud-platform","title":"\ud83d\udd39 GCP (Google Cloud Platform) \ud83c\udf0e","text":"<ul> <li>\u2705 Compute Engine \u2013 Virtual machines (like AWS EC2).</li> <li>\u2705 Cloud Functions \u2013 Serverless compute (like AWS Lambda).</li> <li>\u2705 Cloud Storage \u2013 Scalable object storage (like AWS S3).</li> <li>\u2705 BigQuery \u2013 Serverless data warehouse for analytics.</li> <li>\u2705 GKE \u2013 Managed Kubernetes service.</li> <li>\u2705 IAM \u2013 Role-based access control.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#useful-gcp-commands","title":"\ud83d\udda5\ufe0f Useful GCP Commands:","text":"<pre><code>gcloud compute instances list      # List VM instances\ngcloud storage buckets list        # List storage buckets\ngcloud functions list              # List all cloud functions\ngcloud sql instances list          # List Cloud SQL instances\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#azure-microsoft-azure","title":"\ud83d\udd39 Azure (Microsoft Azure) \ud83c\udfe2","text":"<ul> <li>\u2705 Azure Virtual Machines (VMs) \u2013 Compute power (like AWS EC2).</li> <li>\u2705 Azure Functions \u2013 Serverless compute (like AWS Lambda).</li> <li>\u2705 Azure Blob Storage \u2013 Scalable object storage (like AWS S3).</li> <li>\u2705 Azure Kubernetes Service (AKS) \u2013 Managed Kubernetes service.</li> <li>\u2705 Azure Active Directory (AD) \u2013 Identity &amp; access management.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#useful-azure-commands","title":"\ud83d\udda5\ufe0f Useful Azure Commands:","text":"<pre><code>az vm list                         # List Azure VMs\naz storage account list            # List storage accounts\naz functionapp list                # List all function apps\naz aks list                        # List Kubernetes clusters\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#3-overlapping-concepts-between-aws-gcp-and-azure","title":"3\ufe0f\u20e3 Overlapping Concepts Between AWS, GCP, and Azure \ud83d\udd04","text":"Concept AWS GCP Azure Compute (VMs) EC2 Compute Engine Virtual Machines Serverless Lambda Cloud Functions Azure Functions Storage S3 Cloud Storage Blob Storage Databases RDS, DynamoDB Cloud SQL, BigTable Azure SQL, Cosmos DB Container Mgmt EKS GKE AKS Networking VPC VPC Virtual Network (VNet) IAM IAM IAM Azure AD <ul> <li>\ud83d\udd39 Commonalities: All provide compute, storage, databases, networking, security, and IAM.</li> <li>\ud83d\udd39 Key Differences:</li> <li>GCP specializes in data &amp; AI.</li> <li>AWS is feature-rich with global dominance.</li> <li>Azure is enterprise-friendly.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#4-scalability-fault-tolerance-security","title":"4\ufe0f\u20e3 Scalability, Fault Tolerance &amp; Security \ud83c\udfd7\ufe0f","text":"<ul> <li>\u2705 Scalability (Auto-scaling &amp; Load Balancing)</li> <li>Horizontal Scaling \u2192 Adding more instances (Auto Scaling in AWS, Managed Instance Groups in GCP, VM Scale Sets in Azure).</li> <li>Vertical Scaling \u2192 Increasing VM capacity (Change instance type in AWS/GCP/Azure).</li> <li>Load Balancing \u2192 Distributes traffic to prevent overload (ALB in AWS, Cloud Load Balancer in GCP, Azure Load Balancer).</li> <li>\u2705 Fault Tolerance &amp; High Availability</li> <li>Multi-region &amp; Multi-zone Deployments \u2192 Ensure zero downtime.</li> <li>Failover Mechanisms \u2192 If one instance fails, another takes over.</li> <li>Backup &amp; Disaster Recovery \u2192 Regular snapshots &amp; replications.</li> <li>\u2705 Security &amp; Compliance \ud83d\udd10</li> <li>IAM (Identity and Access Management) \u2192 Granular permissions.</li> <li>Encryption \u2192 At-rest &amp; in-transit (AWS KMS, GCP KMS, Azure Key Vault).</li> <li>DDoS Protection \u2192 AWS Shield, GCP Armor, Azure DDoS Protection.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#5-must-know-cloud-concepts-for-a-senior-engineer","title":"5\ufe0f\u20e3 Must-Know Cloud Concepts for a Senior Engineer \ud83c\udfaf","text":"<ul> <li>\u2705 Kubernetes &amp; Containers \u2192 Docker, Kubernetes, Helm (AWS EKS, GCP GKE, Azure AKS).</li> <li>\u2705 Serverless Architecture \u2192 FaaS (AWS Lambda, GCP Cloud Functions, Azure Functions).</li> <li>\u2705 CI/CD in Cloud \u2192 Jenkins, GitHub Actions, AWS CodePipeline, GCP Cloud Build.</li> <li>\u2705 Observability &amp; Monitoring \u2192 AWS CloudWatch, GCP Stackdriver, Azure Monitor.</li> <li>\u2705 Infrastructure as Code (IaC) \u2192 Terraform, AWS CloudFormation, Azure Bicep.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platforms/#extra-notes","title":"\ud83d\udd25 Extra Notes","text":"<ul> <li>Cloud Platform</li> </ul> <p>\ud83d\ude80 Master these cloud concepts to excel as a Senior Software Engineer! \ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/","title":"\ud83d\ude80 Debugging Production Issues","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ul> <li>Incident Management \u2013 Handling Outages</li> <li>Root Cause Analysis (RCA)</li> <li>Distributed Tracing \u2013 Debugging Microservices</li> <li>Performance Optimization</li> <li>\ud83d\udd39 Key Takeaways</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#1-incident-management-handling-outages","title":"1\ufe0f\u20e3 Incident Management \u2013 Handling Outages \ud83d\uded1","text":"<p>\u2705 Stay Calm &amp; Follow SOPs \u2013 Follow a well-defined incident response plan. \u2705 Triage &amp; Prioritize \u2013 Identify if it's critical, major, or minor. \u2705 Communicate Clearly \u2013 Keep stakeholders updated (internal &amp; external). \u2705 Use Monitoring &amp; Logging \u2013 Check Prometheus, Grafana, ELK, or Splunk for anomalies. \u2705 Mitigate First, Investigate Later \u2013 Apply temporary fixes to restore service quickly. \u2705 Postmortem Reports \u2013 Document root cause, impact, and preventive measures.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#tools-commands-for-incident-management","title":"\ud83d\udee0 Tools &amp; Commands for Incident Management","text":"<pre><code>journalctl -u service_name --since \"1 hour ago\"  # Check service logs\nkubectl get pods --namespace=prod  # Check pod status in Kubernetes\ndmesg -T | tail -20  # Check recent kernel logs for crashes\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#2-root-cause-analysis-rca","title":"2\ufe0f\u20e3 Root Cause Analysis (RCA) \ud83d\udd0d","text":"<p>\u2705 Reproduce the Issue \u2013 Try to replicate in staging before touching production. \u2705 Analyze Logs &amp; Metrics \u2013 Identify error patterns, latencies, and spikes. \u2705 Check Deployment Changes \u2013 Was there a recent push or config change? \u2705 Use Debugging Tools \u2013 GDB, strace, lsof, perf for deep system insights. \u2705 Run Profiling &amp; Tracing \u2013 Identify CPU, memory, and I/O bottlenecks.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#tools-for-root-cause-analysis","title":"\ud83d\udee0 Tools for Root Cause Analysis","text":"<pre><code>strace -p &lt;pid&gt;  # Trace system calls of a process\nlsof -i :8080  # Find processes using port 8080\ntop / htop  # Check CPU and memory usage\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#3-distributed-tracing-debugging-microservices","title":"3\ufe0f\u20e3 Distributed Tracing \u2013 Debugging Microservices \ud83d\udd75\ufe0f","text":"<p>\u2705 Why? Microservices introduce latency, dependency failures, and bottlenecks.</p> <p>\u2705 Tools: - Jaeger \ud83c\udff9 \u2013 Open-source end-to-end distributed tracing - Zipkin \ud83d\udd17 \u2013 Lightweight tracing for microservices</p> <p>\u2705 How? - Instrument services to send trace IDs with requests. - Analyze spans to find slow or failing components. - Identify network latency or database slowdowns.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#commands-for-tracing","title":"\ud83d\udee0 Commands for Tracing","text":"<pre><code>kubectl port-forward service/jaeger-query 16686:16686  # Access Jaeger UI\nkubectl logs pod-name --tail=50  # Fetch last 50 logs of a pod\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#4-performance-optimization","title":"4\ufe0f\u20e3 Performance Optimization \ud83d\ude80","text":"<p>\u2705 Memory Profiling - Identify memory leaks &amp; inefficient allocations. - Use Valgrind, Heaptrack, or Python\u2019s memory_profiler. - Reduce GC pressure in high-throughput applications.</p> <p>\u2705 CPU Analysis - Use perf, eBPF, or flame graphs to profile CPU-intensive tasks. - Optimize hot paths and reduce unnecessary computation. - Enable async &amp; parallel processing where applicable.</p> <p>\u2705 Database Query Optimizations - Index frequently queried columns for faster lookups. - Avoid N+1 query issues using batching. - Use connection pooling for better DB performance. - Monitor slow queries with:</p> <pre><code>EXPLAIN ANALYZE SELECT * FROM users WHERE email='user@example.com';\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#performance-debugging-tools","title":"\ud83d\udee0 Performance Debugging Tools","text":"<pre><code>top / htop  # Identify high CPU/memory-consuming processes\nperf record -F 99 -p &lt;pid&gt; -g -- sleep 10  # Capture performance profile\niostat -xz 1  # Monitor disk I/O stats\nEXPLAIN ANALYZE  # Analyze SQL query performance\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Debugging%20Production%20Issues/#key-takeaways","title":"\ud83d\udd39 Key Takeaways","text":"<p>\u2705 Proactive monitoring reduces firefighting \u2013 Set up alerts for anomalies. \u2705 Use distributed tracing in microservices \u2013 Helps in identifying slow requests. \u2705 Always have a rollback plan \u2013 Quick fixes should not make things worse. \u2705 Run postmortems after every major incident \u2013 Learn &amp; improve system resilience.</p> <p>\ud83c\udfaf Stay prepared, monitor effectively, and keep production stable! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/DevOps%20%26%20Cloud%20Infrastructure/","title":"DevOps &amp; Cloud Infrastructure \ud83c\udf29\ufe0f\ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/DevOps%20%26%20Cloud%20Infrastructure/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ol> <li>Docker &amp; Kubernetes \ud83d\udc33\ud83c\udf9b\ufe0f</li> <li>CI/CD Pipelines \ud83d\udee0\ufe0f\ud83d\udd04</li> <li>Cloud Platforms \u2601\ufe0f</li> <li>Infrastructure as Code (IaC) \ud83c\udfd7\ufe0f</li> <li>Monitoring &amp; Logging \ud83d\udcca\ud83d\udd0d</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/DevOps%20%26%20Cloud%20Infrastructure/#1-docker-kubernetes","title":"1\ufe0f\u20e3 Docker &amp; Kubernetes \ud83d\udc33\ud83c\udf9b\ufe0f","text":"<ul> <li>Containerization: Package applications and dependencies into portable containers.</li> <li>Microservices: Deploy small, independent services that scale separately.</li> <li>Kubernetes (K8s):<ul> <li>Cluster Management: Automate deployment, scaling, and operations of containers.</li> <li>Scaling: Auto-scaling based on load, Horizontal Pod Autoscaler (HPA).</li> <li>Service Discovery &amp; Load Balancing: Manage traffic effectively.</li> <li>Networking &amp; Security: Kubernetes Network Policies, RBAC (Role-Based Access Control).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/DevOps%20%26%20Cloud%20Infrastructure/#2-cicd-pipelines","title":"2\ufe0f\u20e3 CI/CD Pipelines \ud83d\udee0\ufe0f\ud83d\udd04","text":"<ul> <li>Tools: Jenkins, GitLab CI, CircleCI.</li> <li>Automation: Automate build, test, and deployment pipelines.</li> <li>Steps:<ul> <li>Code commit triggers automated builds.</li> <li>Unit &amp; Integration Testing.</li> <li>Security Scanning.</li> <li>Deployments: Blue-Green, Canary Releases.</li> </ul> </li> <li>Infrastructure as Code (IaC) for managing environments dynamically.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/DevOps%20%26%20Cloud%20Infrastructure/#3-cloud-platforms","title":"3\ufe0f\u20e3 Cloud Platforms \u2601\ufe0f","text":"<ul> <li>AWS:<ul> <li>Compute: EC2, Lambda (Serverless Functions).</li> <li>Storage: S3, EBS.</li> <li>Networking: VPC, Load Balancers.</li> <li>Security: IAM Roles, KMS Encryption.</li> </ul> </li> <li>GCP:<ul> <li>Compute: Compute Engine, Cloud Functions.</li> <li>Storage: Cloud Storage, Persistent Disks.</li> <li>Networking: Cloud Load Balancing, VPC.</li> </ul> </li> <li>Azure:<ul> <li>Compute: Virtual Machines, Azure Functions.</li> <li>Storage: Blob Storage, Disk Storage.</li> <li>Security: Azure AD, Key Vault.</li> </ul> </li> <li>Key Concepts: Scalability, Fault Tolerance, Security Best Practices.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/DevOps%20%26%20Cloud%20Infrastructure/#4-infrastructure-as-code-iac","title":"4\ufe0f\u20e3 Infrastructure as Code (IaC) \ud83c\udfd7\ufe0f","text":"<ul> <li>Terraform: Declarative infrastructure provisioning across cloud providers.</li> <li>CloudFormation: AWS-specific infrastructure management.</li> <li>Benefits:<ul> <li>Version-controlled infrastructure.</li> <li>Automated provisioning and scaling.</li> <li>Repeatable &amp; Consistent deployments.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/DevOps%20%26%20Cloud%20Infrastructure/#5-monitoring-logging","title":"5\ufe0f\u20e3 Monitoring &amp; Logging \ud83d\udcca\ud83d\udd0d","text":"<ul> <li>Metrics Monitoring:<ul> <li>Prometheus: Metrics collection and alerting.</li> <li>Grafana: Visualize and analyze metrics.</li> </ul> </li> <li>Logging:<ul> <li>ELK Stack (Elasticsearch, Logstash, Kibana): Centralized log management.</li> <li>Splunk: Security and operational intelligence platform.</li> </ul> </li> <li>Observability Best Practices:<ul> <li>Log aggregation, structured logging.</li> <li>Distributed tracing for debugging microservices.</li> <li>Proactive alerting and auto-healing mechanisms.</li> </ul> </li> </ul> <p>\ud83d\ude80 Mastering these concepts will help in efficient cloud-native application development, deployment, and monitoring at scale!</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Emerging%20Technologies/","title":"\ud83d\ude80 Emerging Technologies \u2013 Must-Know for a Senior Engineer","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Emerging%20Technologies/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ol> <li>Artificial Intelligence &amp; Machine Learning (AI/ML) \ud83e\udd16</li> <li>Blockchain &amp; Web3 \ud83c\udf10</li> <li>Quantum Computing \u269b\ufe0f</li> <li>Edge Computing &amp; IoT \ud83c\udf0d</li> <li>Cybersecurity &amp; Zero Trust \ud83d\udd10</li> <li>Cloud-Native &amp; Serverless \ud83d\ude80</li> <li>\ud83d\udd39 Key Takeaways</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Emerging%20Technologies/#1-artificial-intelligence-machine-learning-aiml","title":"1\ufe0f\u20e3 Artificial Intelligence &amp; Machine Learning (AI/ML) \ud83e\udd16","text":"<ul> <li>\u2705 Generative AI \u2013 LLMs (GPT, Gemini, Claude), text-to-image models (DALL\u00b7E, Midjourney).</li> <li>\u2705 AI for Software Engineering \u2013 Copilot, Code Llama, AI-powered debugging.</li> <li>\u2705 ML Ops &amp; Model Deployment \u2013 TensorFlow, PyTorch, Hugging Face, Kubernetes for AI.</li> <li>\u2705 AI Ethics &amp; Bias \u2013 Fairness, explainability, and responsible AI development.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Emerging%20Technologies/#2-blockchain-web3","title":"2\ufe0f\u20e3 Blockchain &amp; Web3 \ud83c\udf10","text":"<ul> <li>\u2705 Smart Contracts \u2013 Ethereum, Solidity, Hyperledger.</li> <li>\u2705 Decentralized Apps (dApps) \u2013 Use cases in finance, identity, and supply chains.</li> <li>\u2705 Layer 2 Scaling \u2013 Polygon, Optimism, and ZK-Rollups for efficiency.</li> <li>\u2705 Enterprise Blockchain \u2013 Private vs public blockchains (IBM, Quorum).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Emerging%20Technologies/#3-quantum-computing","title":"3\ufe0f\u20e3 Quantum Computing \u269b\ufe0f","text":"<ul> <li>\u2705 Qubits &amp; Quantum Supremacy \u2013 Basics of superposition &amp; entanglement.</li> <li>\u2705 Quantum Algorithms \u2013 Shor\u2019s algorithm (breaking encryption), Grover\u2019s search.</li> <li>\u2705 Leading Platforms \u2013 IBM Q, Google\u2019s Sycamore, D-Wave.</li> <li>\u2705 Impact on Security \u2013 Post-quantum cryptography (PQC).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Emerging%20Technologies/#4-edge-computing-iot","title":"4\ufe0f\u20e3 Edge Computing &amp; IoT \ud83c\udf0d","text":"<ul> <li>\u2705 Computing at the Edge \u2013 Reducing latency for real-time AI &amp; analytics.</li> <li>\u2705 IoT Platforms \u2013 AWS IoT, Azure IoT Hub, Google Cloud IoT.</li> <li>\u2705 Security Challenges \u2013 Device authentication, secure firmware updates.</li> <li>\u2705 5G &amp; Edge AI \u2013 Enhancing smart cities, autonomous vehicles.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Emerging%20Technologies/#5-cybersecurity-zero-trust","title":"5\ufe0f\u20e3 Cybersecurity &amp; Zero Trust \ud83d\udd10","text":"<ul> <li>\u2705 Zero Trust Architecture \u2013 Identity-based security instead of perimeter defense.</li> <li>\u2705 AI in Security \u2013 Threat detection, anomaly detection, and automated incident response.</li> <li>\u2705 Secure Coding &amp; DevSecOps \u2013 Integrating security into CI/CD pipelines.</li> <li>\u2705 Homomorphic Encryption \u2013 Secure computation without decryption.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Emerging%20Technologies/#6-cloud-native-serverless","title":"6\ufe0f\u20e3 Cloud-Native &amp; Serverless \ud83d\ude80","text":"<ul> <li>\u2705 Kubernetes Advancements \u2013 Service mesh (Istio, Linkerd), eBPF for observability.</li> <li>\u2705 Multi-Cloud &amp; Hybrid Cloud \u2013 Workload portability across AWS, Azure, GCP.</li> <li>\u2705 Serverless Evolution \u2013 AWS Lambda, Google Cloud Run, Azure Functions.</li> <li>\u2705 Infrastructure as Code (IaC) \u2013 Terraform, Pulumi for automation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Emerging%20Technologies/#key-takeaways","title":"\ud83d\udd39 Key Takeaways","text":"<ul> <li>\u2705 Stay updated with AI, blockchain, and quantum computing trends.</li> <li>\u2705 Understand how emerging tech impacts software scalability, security, and performance.</li> <li>\u2705 Explore hands-on projects, open-source tools, and real-world applications.</li> <li>\u2705 Be adaptable \u2013 The tech landscape is evolving fast! \ud83d\ude80</li> </ul> <p>\ud83d\udca1 Let me know if you want to dive deeper into any topic! \ud83d\ude0a</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/","title":"\ud83c\udf0d Infrastructure as Code (IaC) \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ol> <li>What is IaC? \ud83e\udd14</li> <li>Popular IaC Tools \ud83d\udee0\ufe0f</li> <li>Terraform \u2013 HashiCorp\u2019s Multi-Cloud IaC Tool \ud83c\udf0d</li> <li>AWS CloudFormation \u2013 AWS Native IaC \u2601\ufe0f</li> <li>Key Differences Between Terraform &amp; CloudFormation \ud83d\udd04</li> <li>Must-Know IaC Best Practices \ud83c\udfaf</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#1-what-is-iac","title":"1\ufe0f\u20e3 What is IaC? \ud83e\udd14","text":"<ul> <li>Infrastructure as Code (IaC) automates infrastructure provisioning using code instead of manual processes.</li> <li>Enables version control, consistency, repeatability, and scalability.</li> <li>Key Benefits:<ul> <li>\u2705 Automation &amp; Efficiency: No manual configurations.</li> <li>\u2705 Consistency: Prevents configuration drift.</li> <li>\u2705 Scalability: Easily deploy environments.</li> <li>\u2705 Disaster Recovery: Quickly recreate infrastructure.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#2-popular-iac-tools","title":"2\ufe0f\u20e3 Popular IaC Tools \ud83d\udee0\ufe0f","text":"Feature Terraform \ud83c\udf0d CloudFormation \u2601\ufe0f Cloud-agnostic \u2705 Yes \u274c No (AWS only) Declarative \u2705 Yes \u2705 Yes State Management \u2705 Yes (Terraform State) \u2705 Yes (Stack State) Multi-cloud \u2705 Yes \u274c No Modularization \u2705 Yes (Modules) \u2705 Yes (Nested Stacks)"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#3-terraform-hashicorps-multi-cloud-iac-tool","title":"3\ufe0f\u20e3 Terraform \u2013 HashiCorp\u2019s Multi-Cloud IaC Tool \ud83c\udf0d","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#key-concepts","title":"\u2705 Key Concepts","text":"<ul> <li>Declarative Syntax: Define infrastructure as <code>.tf</code> files.</li> <li>Terraform State: Tracks deployed resources.</li> <li>Providers: Supports AWS, GCP, Azure, etc.</li> <li>Modules: Reusable infrastructure components.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#common-terraform-commands","title":"\ud83d\udccc Common Terraform Commands","text":"<pre><code>terraform init       # Initialize Terraform\nterraform plan       # Preview changes\nterraform apply      # Deploy infrastructure\nterraform destroy    # Remove infrastructure\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#sample-terraform-code-aws-ec2-instance","title":"\ud83d\udcdd Sample Terraform Code (AWS EC2 Instance)","text":"<pre><code>provider \"aws\" {\n  region = \"us-east-1\"\n}\n\nresource \"aws_instance\" \"my_instance\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#4-aws-cloudformation-aws-native-iac","title":"4\ufe0f\u20e3 AWS CloudFormation \u2013 AWS Native IaC \u2601\ufe0f","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#key-concepts_1","title":"\u2705 Key Concepts","text":"<ul> <li>Stacks: Group of AWS resources managed together.</li> <li>Templates: YAML/JSON files defining resources.</li> <li>Change Sets: Preview infrastructure changes before applying.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#common-cloudformation-commands","title":"\ud83d\udccc Common CloudFormation Commands","text":"<pre><code>aws cloudformation create-stack --stack-name MyStack --template-body file://template.yaml\naws cloudformation update-stack --stack-name MyStack --template-body file://template.yaml\naws cloudformation delete-stack --stack-name MyStack\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#sample-cloudformation-template","title":"\ud83d\udcdd Sample CloudFormation Template","text":"<pre><code>Resources:\n  MyInstance:\n    Type: \"AWS::EC2::Instance\"\n    Properties:\n      ImageId: \"ami-12345678\"\n      InstanceType: \"t2.micro\"\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#5-key-differences-between-terraform-cloudformation","title":"5\ufe0f\u20e3 Key Differences Between Terraform &amp; CloudFormation \ud83d\udd04","text":"Feature Terraform \ud83c\udf0d CloudFormation \u2601\ufe0f Multi-Cloud \u2705 Yes \u274c AWS Only Syntax HCL (HashiCorp) YAML/JSON Modularization \u2705 Yes (Modules) \u2705 Yes (Nested Stacks) State Mgmt \u2705 Local/Remote \u2705 Managed by AWS"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Infrastructure%20as%20Code/#6-must-know-iac-best-practices","title":"6\ufe0f\u20e3 Must-Know IaC Best Practices \ud83c\udfaf","text":"<ul> <li>\u2705 Use Version Control (Git, GitHub, GitLab) \u2013 Maintain infrastructure history.</li> <li>\u2705 Implement State Management \u2013 Store Terraform state remotely (S3 + DynamoDB).</li> <li>\u2705 Use Modular &amp; Reusable Code \u2013 Use Terraform Modules / CloudFormation Nested Stacks.</li> <li>\u2705 Follow Least Privilege Access \u2013 Restrict IAM permissions.</li> <li>\u2705 Validate &amp; Test Before Deployment \u2013 Use <code>terraform plan</code> and CloudFormation Change Sets.</li> <li>\u2705 Automate with CI/CD \u2013 Integrate with Jenkins, GitHub Actions, or GitLab CI/CD.</li> </ul> <p>\ud83d\ude80 Happy Coding! \ud83c\udf89</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/","title":"\ud83c\udfaf Leadership &amp; Mentorship \u2013 A Senior Engineer\u2019s Role \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>1\ufe0f\u20e3 Code Reviews \u2013 Best Practices &amp; Mentoring \ud83d\udee0\ufe0f</li> <li>2\ufe0f\u20e3 Architecture Decisions \u2013 Trade-offs &amp; Scalability \ud83c\udfd7\ufe0f</li> <li>3\ufe0f\u20e3 Collaboration Tools \u2013 Cross-functional Communication \ud83d\udcac</li> <li>\ud83d\udd39 Key Takeaways</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#1-code-reviews-best-practices-mentoring","title":"1\ufe0f\u20e3 Code Reviews \u2013 Best Practices &amp; Mentoring \ud83d\udee0\ufe0f","text":"<p>Code reviews are not just about finding bugs\u2014they ensure code quality, maintainability, and team growth.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#best-practices-for-code-reviews","title":"\ud83d\udd39 Best Practices for Code Reviews","text":"<ul> <li>\u2705 Keep PRs small &amp; focused \u2013 Easier to review &amp; provide feedback.</li> <li>\u2705 Follow coding standards \u2013 Ensure consistency across the codebase.</li> <li>\u2705 Encourage meaningful commit messages \u2013 Helps in debugging &amp; understanding changes.</li> <li>\u2705 Focus on logic, readability, and efficiency \u2013 Avoid nitpicking syntax.</li> <li>\u2705 Give constructive feedback \u2013 Suggest improvements instead of just pointing out mistakes.</li> <li>\u2705 Automate style checks \u2013 Use tools like Prettier, ESLint, SonarQube to catch common issues.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#mentoring-junior-engineers","title":"\ud83d\udd39 Mentoring Junior Engineers \ud83e\udd1d","text":"<ul> <li>\u2705 Encourage learning &amp; curiosity \u2013 Help them understand the \u2018why\u2019 behind decisions.</li> <li>\u2705 Provide actionable feedback \u2013 Explain how they can improve, not just what\u2019s wrong.</li> <li>\u2705 Introduce best practices early \u2013 CI/CD, clean code, SOLID principles, and design patterns.</li> <li>\u2705 Pair programming \u2013 Helps in knowledge transfer and debugging.</li> <li>\u2705 Be patient &amp; lead by example \u2013 Your behavior sets the tone for the team.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#2-architecture-decisions-trade-offs-scalability","title":"2\ufe0f\u20e3 Architecture Decisions \u2013 Trade-offs &amp; Scalability \ud83c\udfd7\ufe0f","text":"<p>Senior Engineers make critical architectural choices that impact scalability, performance, and maintainability.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#key-trade-offs-in-architecture","title":"\ud83d\udd39 Key Trade-offs in Architecture","text":"<ul> <li>\u2705 Monolithic vs Microservices \u2013 Choose based on scale, complexity, and operational overhead.</li> <li>\u2705 SQL vs NoSQL Databases \u2013</li> <li>SQL (PostgreSQL, MySQL) \u2013 Structured data, strong consistency.</li> <li>NoSQL (MongoDB, Cassandra) \u2013 Flexible schema, high scalability.</li> <li>\u2705 Event-Driven vs Request-Response \u2013   Event-driven (Kafka, RabbitMQ) \u2013 Good for real-time &amp; async processing.   Request-response (REST, gRPC) \u2013 Best for synchronous, API-driven communication. </li> <li>\u2705 Cloud vs On-Prem \u2013 Cloud offers scalability, but on-prem gives better control over infrastructure.</li> <li>\u2705 Caching Strategies \u2013 Use Redis, Memcached to reduce database load and improve response time.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#system-design-for-scalability","title":"\ud83d\udd39 System Design for Scalability \ud83c\udf0d","text":"<ul> <li>\u2705 Load balancing \u2013 Use Nginx, AWS ELB to distribute traffic evenly.</li> <li>\u2705 Database sharding &amp; replication \u2013 Horizontal scaling for large data loads.</li> <li>\u2705 Asynchronous processing \u2013 Use message queues for long-running tasks.</li> <li>\u2705 Serverless Computing (AWS Lambda, GCP Cloud Functions) \u2013 Cost-effective for scalable workloads.</li> <li>\u2705 Auto-scaling \u2013 Set up dynamic scaling to handle traffic spikes efficiently.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#3-collaboration-tools-cross-functional-communication","title":"3\ufe0f\u20e3 Collaboration Tools \u2013 Cross-functional Communication \ud83d\udcac","text":"<p>A Senior Engineer must collaborate effectively across teams, including product managers, designers, and DevOps.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#essential-collaboration-tools","title":"\ud83d\udd39 Essential Collaboration Tools","text":"<ul> <li>\u2705 Jira \u2013 Task &amp; sprint management for agile workflows.</li> <li>\u2705 Confluence \u2013 Documentation &amp; knowledge sharing.</li> <li>\u2705 Git (GitHub, GitLab, Bitbucket) \u2013 Version control &amp; CI/CD integration.</li> <li>\u2705 Slack / Microsoft Teams \u2013 Real-time team communication.</li> <li>\u2705 Google Docs &amp; Miro \u2013 Collaborative documentation &amp; brainstorming.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#best-practices-for-collaboration","title":"\ud83d\udd39 Best Practices for Collaboration","text":"<ul> <li>\u2705 Clear documentation \u2013 Maintain architectural decisions &amp; onboarding guides.</li> <li>\u2705 Regular standups &amp; retrospectives \u2013 Keep alignment on progress &amp; roadblocks.</li> <li>\u2705 Encourage knowledge sharing \u2013 Conduct tech talks &amp; pair programming sessions.</li> <li>\u2705 Promote psychological safety \u2013 Foster an environment where ideas &amp; concerns can be openly discussed.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20%26%20Mentorship/#key-takeaways","title":"\ud83d\udd39 Key Takeaways","text":"<ul> <li>\u2705 Code reviews \u2013 Improve code quality &amp; mentor junior engineers.</li> <li>\u2705 Architecture decisions \u2013 Balance trade-offs for scalability &amp; maintainability.</li> <li>\u2705 Effective collaboration \u2013 Use tools like Jira, Git, Slack, and Confluence to ensure smooth teamwork.</li> <li>\u2705 Be a role model \u2013 Lead with patience, clarity, and a focus on continuous improvement.</li> </ul> <p>\ud83d\ude80 Keep learning, keep growing, and empower your team! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20Skills/","title":"\ud83c\udfaf Leadership Skills for a Senior Engineer \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20Skills/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>Soft Skills \u2013 Communication &amp; Influence</li> <li>Conflict Resolution \u2013 Managing Disagreements</li> <li>Cross-Functional Collaboration \u2013 Working Across Teams</li> <li>\ud83d\udd39 Key Takeaways</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20Skills/#1-soft-skills-communication-influence","title":"1\ufe0f\u20e3 Soft Skills \u2013 Communication &amp; Influence \ud83d\udde3\ufe0f","text":"<p>\u2705 Clear Communication \u2013 Articulate technical ideas effectively to both technical and non-technical stakeholders. \u2705 Active Listening \u2013 Understand team concerns, gather requirements, and respond thoughtfully. \u2705 Storytelling with Data \u2013 Use metrics, logs, and real-world examples to back up technical decisions. \u2705 Empathy &amp; Emotional Intelligence \u2013 Recognize team dynamics, motivate individuals, and foster a growth mindset. \u2705 Leading Technical Discussions \u2013 Drive architecture reviews, RFCs, and brainstorming sessions with structured arguments.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20Skills/#2-conflict-resolution-managing-disagreements","title":"2\ufe0f\u20e3 Conflict Resolution \u2013 Managing Disagreements \u2696\ufe0f","text":"<p>\u2705 Technical Disagreements \u2013 Encourage healthy debate, focus on facts, and align decisions with company goals. \u2705 Handling Team Disputes \u2013 Stay neutral, mediate between conflicting views, and find common ground. \u2705 Dealing with Criticism \u2013 Accept feedback positively, encourage open discussions, and improve team synergy. \u2705 Negotiation Skills \u2013 Balance technical trade-offs, prioritize scalability vs speed vs cost, and align decisions with business needs.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20Skills/#3-cross-functional-collaboration-working-across-teams","title":"3\ufe0f\u20e3 Cross-Functional Collaboration \u2013 Working Across Teams \ud83e\udd1d","text":"<p>\u2705 Engineering &amp; Product Alignment \u2013 Collaborate with PMs, designers, and operations to drive product success. \u2705 Bridging the Gap \u2013 Translate business needs into technical solutions and ensure shared ownership. \u2705 Mentorship &amp; Knowledge Sharing \u2013 Conduct tech talks, documentation, and pair programming to upskill the team. \u2705 Stakeholder Management \u2013 Proactively update leadership on project progress, blockers, and risks. \u2705 Influencing Without Authority \u2013 Drive changes across teams even when not in a direct leadership role.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Leadership%20Skills/#key-takeaways","title":"\ud83d\udd39 Key Takeaways","text":"<p>\u2705 Master Communication \u2013 Be clear, concise, and structured in technical discussions. \u2705 Resolve Conflicts Effectively \u2013 Keep discussions objective, data-driven, and goal-oriented. \u2705 Excel in Collaboration \u2013 Work seamlessly across engineering, product, and business teams. \u2705 Be a Mentor &amp; Leader \u2013 Guide junior engineers, set best practices, and drive technical excellence.</p> <p>\ud83d\ude80 Elevate your leadership skills and drive impactful engineering solutions!</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/","title":"\ud83d\ude80 Linux Commands Cheat Sheet","text":"<p>A structured cheat sheet categorized into Beginner, Advanced, and Expert levels. It includes essential commands for development, debugging, and production environments. \ud83d\udcbb</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ul> <li>Beginner Commands</li> <li>Advanced Commands</li> <li>Expert Commands</li> <li>Development &amp; Production</li> <li>Best Practices</li> <li>Final Thoughts</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#beginner-commands-basic-usage","title":"\ud83d\udfe2 Beginner Commands (Basic Usage)","text":"Command Description <code>ls</code> \ud83d\udcc2 List files and directories <code>pwd</code> \ud83d\udccd Print current working directory <code>cd</code> \ud83d\udd04 Change directory <code>mkdir &lt;dir&gt;</code> \ud83d\udcc1 Create a new directory <code>rmdir &lt;dir&gt;</code> \u274c Remove an empty directory <code>rm &lt;file&gt;</code> \ud83d\uddd1 Delete a file <code>rm -r &lt;dir&gt;</code> \ud83d\udea8 Delete a directory (with files) <code>cp &lt;src&gt; &lt;dest&gt;</code> \ud83d\udcc4 Copy file/directory <code>mv &lt;src&gt; &lt;dest&gt;</code> \ud83d\udcc2 Move/Rename file/directory <code>cat &lt;file&gt;</code> \ud83d\udcdc View file content <code>nano &lt;file&gt;</code> \u270d Open file in nano editor <code>vi &lt;file&gt;</code> \ud83d\udcdd Open file in vi editor <code>echo \"text\"</code> \ud83d\udce2 Print text to terminal <code>touch &lt;file&gt;</code> \ud83c\udd95 Create a new empty file <code>find . -name &lt;file&gt;</code> \ud83d\udd0d Search for a file in current directory <code>grep \"text\" &lt;file&gt;</code> \ud83d\udd0e Search for a pattern inside a file <code>history</code> \ud83d\udcdc Show command history <code>clear</code> \ud83e\uddf9 Clear the terminal screen"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#advanced-commands-system-file-management","title":"\ud83d\udd35 Advanced Commands (System &amp; File Management)","text":"Command Description <code>df -h</code> \ud83d\udcbe Check disk space usage <code>du -sh &lt;dir&gt;</code> \ud83d\udcca Show directory size <code>free -m</code> \ud83e\udde0 Show memory usage <code>ps aux</code> \ud83d\udd0d View running processes <code>top / htop</code> \ud83d\ude80 Monitor system resources <code>kill &lt;PID&gt;</code> \u274c Terminate a process by ID <code>pkill &lt;name&gt;</code> \ud83d\udd2b Kill process by name <code>chmod 755 &lt;file&gt;</code> \ud83d\udd10 Change file permissions <code>chown user:group &lt;file&gt;</code> \ud83d\udc65 Change file ownership <code>ln -s &lt;src&gt; &lt;dest&gt;</code> \ud83d\udd17 Create symbolic link <code>tar -cvf &lt;archive.tar&gt; &lt;dir&gt;</code> \ud83d\udce6 Create tar archive <code>tar -xvf &lt;archive.tar&gt;</code> \ud83d\udcc2 Extract tar archive <code>zip -r &lt;file.zip&gt; &lt;dir&gt;</code> \ud83d\udddc Compress files (ZIP) <code>unzip &lt;file.zip&gt;</code> \ud83d\udcc2 Extract ZIP file <code>scp &lt;file&gt; user@host:/path</code> \ud83d\udd04 Securely copy file to remote <code>rsync -av &lt;src&gt; &lt;dest&gt;</code> \ud83d\udd04 Sync files/directories <code>mount /dev/sdb1 /mnt</code> \ud83d\udd17 Mount a drive <code>umount /mnt</code> \ud83d\udd17 Unmount a drive <code>crontab -e</code> \u23f3 Edit scheduled tasks (cron jobs)"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#expert-commands-networking-debugging-production","title":"\ud83d\udd34 Expert Commands (Networking, Debugging &amp; Production)","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#networking-system-performance","title":"\ud83d\udce1 Networking &amp; System Performance","text":"Command Description <code>ifconfig / ip a</code> \ud83c\udf10 Show network interfaces <code>ping &lt;host&gt;</code> \ud83d\udd04 Check connectivity <code>netstat -tulnp</code> \ud83d\udd0d View active network connections <code>ss -tulnp</code> \ud83d\udce1 Show listening ports (better than netstat) <code>curl -I &lt;URL&gt;</code> \ud83d\udd0d Fetch HTTP headers <code>wget &lt;URL&gt;</code> \ud83d\udce5 Download file from web <code>nmap -sP &lt;IP-range&gt;</code> \ud83d\udd75 Scan network for live hosts <code>traceroute &lt;host&gt;</code> \ud83c\udf0d Show route to destination <code>dig &lt;domain&gt;</code> \ud83d\udd0d Get DNS information <code>nslookup &lt;domain&gt;</code> \ud83c\udf10 Get domain IP address <code>tcpdump -i eth0</code> \ud83d\udce1 Capture network traffic"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#debugging-logs","title":"\ud83d\udee0 Debugging &amp; Logs","text":"Command Description <code>journalctl -xe</code> \ud83d\udcdc View system logs <code>tail -f /var/log/syslog</code> \ud83d\udcdd Monitor logs in real-time <code>strace -p &lt;PID&gt;</code> \ud83d\udd75 Trace system calls of a process <code>lsof -i :80</code> \ud83d\udd0e List open ports (example: port 80) <code>watch -n 2 free -m</code> \ud83d\udc40 Monitor free memory every 2 sec <code>iotop</code> \ud83d\udcca Show disk I/O usage by processes <code>iostat -x 1</code> \u26a1 Monitor CPU &amp; disk I/O"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#development-production-commands","title":"\ud83d\udd25 Development &amp; Production Commands","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#development","title":"\ud83d\udee0 Development","text":"Command Description <code>git clone &lt;repo&gt;</code> \ud83d\udee0 Clone a Git repository <code>git pull</code> \ud83d\udd04 Fetch latest code <code>git commit -m \"message\"</code> \ud83d\udcdc Commit changes <code>git push origin main</code> \ud83d\ude80 Push changes <code>python3 -m http.server</code> \ud83c\udf0d Start local web server <code>node server.js</code> \ud83d\udfe2 Start a Node.js server <code>docker ps</code> \ud83d\udc33 List running Docker containers <code>docker logs &lt;container&gt;</code> \ud83d\udcdd View container logs"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#production-debugging-performance","title":"\u2699\ufe0f Production Debugging &amp; Performance","text":"Command Description <code>uptime</code> \u23f3 Show system uptime <code>vmstat 1</code> \ud83d\udcca Monitor CPU &amp; memory stats <code>sar -u 2 5</code> \ud83d\udcca Get CPU usage history <code>who</code> \ud83d\udc64 Show logged-in users <code>ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu</code> \ud83d\udd0d Find high CPU processes <code>systemctl restart &lt;service&gt;</code> \ud83d\udd04 Restart a service <code>systemctl status &lt;service&gt;</code> \u2705 Check service status <code>fail2ban-client status</code> \ud83d\udee1 Check banned IPs"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#best-practices","title":"\ud83d\udcdd Best Practices","text":"<p>\u2705 Use <code>man &lt;command&gt;</code> \u2013 Get detailed info about a command \u2705 Use <code>&amp;&amp;</code> for chaining \u2013 <code>cd /var/www &amp;&amp; ls</code> \u2705 Use <code>nohup</code> or <code>screen</code> \u2013 Keep commands running in the background \u2705 Use <code>alias</code> for shortcuts \u2013 <code>alias ll='ls -la'</code> \u2705 Monitor logs &amp; processes regularly</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Commands%20Cheat%20Sheet/#final-thoughts","title":"\ud83d\ude80 Final Thoughts","text":"<p>This cheat sheet covers everything from basic Linux commands to advanced debugging and production monitoring. Mastering these will prepare you for roles like DevOps Engineer, Cloud Architect, and Linux Administrator.</p> <p>\ud83d\udca1 Pro Tip: Save this table as a quick reference! \ud83d\udccc</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/","title":"\ud83d\ude80 Linux Must-Know Concepts &amp; Commands Guide","text":"<p>A comprehensive Linux guide covering Beginner, Intermediate, Advanced, and Expert levels, with a focus on AWS &amp; GCP. This guide ensures a smooth transition from fundamentals to cloud-level expertise. \ud83c\udf0d</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>Beginner Level</li> <li>Intermediate Level</li> <li>Advanced Level</li> <li>Expert Level</li> <li>Summary</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#beginner-level","title":"\ud83d\udfe2 Beginner Level","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#essential-commands","title":"\ud83d\udd39 Essential Commands","text":"<ul> <li><code>pwd</code> \u2013 Print working directory</li> <li><code>ls</code> \u2013 List directory contents (<code>ls -la</code> for detailed view)</li> <li><code>cd &lt;dir&gt;</code> \u2013 Change directory (<code>cd ..</code> to move up a level)</li> <li><code>mkdir &lt;dir&gt;</code> \u2013 Create a new directory</li> <li><code>rm &lt;file&gt;</code> \u2013 Remove a file (<code>rm -r &lt;dir&gt;</code> for directories)</li> <li><code>cp &lt;src&gt; &lt;dest&gt;</code> \u2013 Copy files or directories</li> <li><code>mv &lt;src&gt; &lt;dest&gt;</code> \u2013 Move or rename files/directories</li> <li><code>cat &lt;file&gt;</code> \u2013 Display file contents</li> <li><code>echo \"text\" &gt; file.txt</code> \u2013 Create/overwrite file with text</li> <li><code>touch &lt;file&gt;</code> \u2013 Create an empty file</li> <li><code>man &lt;command&gt;</code> \u2013 Show manual for a command</li> <li><code>exit</code> \u2013 Close terminal session</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#file-permissions-ownership","title":"\ud83d\udd39 File Permissions &amp; Ownership","text":"<ul> <li><code>ls -l</code> \u2013 View file permissions</li> <li><code>chmod u+x &lt;file&gt;</code> \u2013 Add execute permission for the user</li> <li><code>chown user:group &lt;file&gt;</code> \u2013 Change file ownership</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#process-management","title":"\ud83d\udd39 Process Management","text":"<ul> <li><code>ps aux</code> \u2013 View running processes</li> <li><code>kill &lt;PID&gt;</code> \u2013 Terminate process by PID</li> <li><code>kill -9 &lt;PID&gt;</code> \u2013 Force terminate process</li> <li><code>top</code> / <code>htop</code> \u2013 Monitor system resources</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#intermediate-level","title":"\ud83d\udfe1 Intermediate Level","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#file-handling-search","title":"\ud83d\udd39 File Handling &amp; Search","text":"<ul> <li><code>find /dir -name \"file*\"</code> \u2013 Search for files</li> <li><code>grep \"pattern\" file.txt</code> \u2013 Search for text in a file</li> <li><code>grep -r \"pattern\" /dir</code> \u2013 Recursively search in a directory</li> <li><code>awk '{print $1}' file.txt</code> \u2013 Process structured text</li> <li><code>sed 's/old/new/g' file.txt</code> \u2013 Replace text in a file</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#networking-commands","title":"\ud83d\udd39 Networking Commands","text":"<ul> <li><code>ping &lt;host&gt;</code> \u2013 Check network connectivity</li> <li><code>netstat -tulnp</code> \u2013 Show listening ports</li> <li><code>curl -I &lt;URL&gt;</code> \u2013 Fetch HTTP headers</li> <li><code>wget &lt;URL&gt;</code> \u2013 Download a file</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#package-management","title":"\ud83d\udd39 Package Management","text":"<ul> <li>Ubuntu/Debian: <code>apt-get install &lt;package&gt;</code></li> <li>CentOS/RHEL: <code>yum install &lt;package&gt;</code></li> <li>Arch: <code>pacman -S &lt;package&gt;</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#disk-storage","title":"\ud83d\udd39 Disk &amp; Storage","text":"<ul> <li><code>df -h</code> \u2013 Show disk usage</li> <li><code>du -sh &lt;dir&gt;</code> \u2013 Show directory size</li> <li><code>mount /dev/sdX /mnt</code> \u2013 Mount a disk</li> <li><code>umount /mnt</code> \u2013 Unmount a disk</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#advanced-level","title":"\ud83d\udd34 Advanced Level","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#system-monitoring-performance","title":"\ud83d\udd39 System Monitoring &amp; Performance","text":"<ul> <li><code>vmstat 1</code> \u2013 Monitor system performance</li> <li><code>iostat</code> \u2013 Show CPU &amp; I/O usage</li> <li><code>free -m</code> \u2013 Display memory usage</li> <li><code>uptime</code> \u2013 Show system load &amp; uptime</li> <li><code>dmesg | tail</code> \u2013 View kernel logs</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#user-group-management","title":"\ud83d\udd39 User &amp; Group Management","text":"<ul> <li><code>useradd -m &lt;user&gt;</code> \u2013 Create a new user</li> <li><code>passwd &lt;user&gt;</code> \u2013 Change user password</li> <li><code>usermod -aG sudo &lt;user&gt;</code> \u2013 Add user to sudo group</li> <li><code>groupadd &lt;group&gt;</code> \u2013 Create a new group</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#shell-scripting-basics","title":"\ud83d\udd39 Shell Scripting Basics","text":"<pre><code>#!/bin/bash\necho \"Hello, Linux!\"\nfor i in {1..5}; do\n  echo \"Iteration: $i\"\ndone\n</code></pre> <p>Run it with: <code>chmod +x script.sh &amp;&amp; ./script.sh</code></p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#security-firewall","title":"\ud83d\udd39 Security &amp; Firewall","text":"<ul> <li><code>ufw enable</code> / <code>ufw disable</code> \u2013 Enable/disable firewall</li> <li><code>iptables -L</code> \u2013 View firewall rules</li> <li><code>fail2ban-client status</code> \u2013 Check failed login attempts</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#container-virtualization","title":"\ud83d\udd39 Container &amp; Virtualization","text":"<ul> <li><code>docker ps</code> \u2013 List running containers</li> <li><code>docker run -it ubuntu bash</code> \u2013 Run an Ubuntu container</li> <li><code>kubectl get pods</code> \u2013 View Kubernetes pods</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#automation-scheduling","title":"\ud83d\udd39 Automation &amp; Scheduling","text":"<ul> <li><code>crontab -e</code> \u2013 Edit cron jobs</li> <li>Example: <code>0 3 * * * /path/to/script.sh</code>  # Run at 3 AM daily</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#miscellaneous","title":"\ud83d\udd39 Miscellaneous","text":"<ul> <li><code>alias ll='ls -la'</code> \u2013 Create a command alias</li> <li><code>history | grep &lt;command&gt;</code> \u2013 Search command history</li> <li><code>nohup &lt;command&gt; &amp;</code> \u2013 Run command in background</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#expert-level","title":"\ud83d\udd35 Expert Level","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#system-troubleshooting","title":"\ud83d\udd39 System Troubleshooting","text":"<ul> <li><code>journalctl -xe</code> \u2013 View system logs</li> <li><code>strace -p &lt;PID&gt;</code> \u2013 Trace system calls of a process</li> <li><code>lsof -i :80</code> \u2013 Check processes using port 80</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#advanced-file-management","title":"\ud83d\udd39 Advanced File Management","text":"<ul> <li><code>tar -czvf archive.tar.gz dir/</code> \u2013 Compress a directory</li> <li><code>rsync -av src/ dest/</code> \u2013 Sync files efficiently</li> <li><code>scp file.txt user@host:/path/</code> \u2013 Securely copy file to remote</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#kubernetes-cloud-awsgcp-focused","title":"\ud83d\udd39 Kubernetes &amp; Cloud (AWS/GCP Focused)","text":"<ul> <li><code>kubectl get nodes</code> \u2013 List Kubernetes nodes</li> <li><code>kubectl logs &lt;pod&gt;</code> \u2013 View pod logs</li> <li><code>aws s3 ls</code> \u2013 List S3 bucket contents</li> <li><code>aws ec2 describe-instances</code> \u2013 Get EC2 instance details</li> <li><code>gcloud compute instances list</code> \u2013 List GCP instances</li> <li><code>gcloud storage buckets list</code> \u2013 List GCP storage buckets</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Linux%20Must-Know%20Concepts%20%26%20Commands%20Guide/#summary","title":"\ud83d\udccc Summary","text":"<ul> <li>Beginner: Basic commands, file handling, and permissions.</li> <li>Intermediate: Process management, networking, and automation.</li> <li>Advanced: Security, system monitoring, scripting, and containers.</li> <li>Expert: Troubleshooting, Kubernetes, and cloud integration.</li> </ul> <p>\ud83d\ude80 Master these, and you'll be a Linux Pro up to Google Senior Architect Level! \ud83c\udfc6</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/","title":"\ud83d\udcca Monitoring &amp; Logging \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ol> <li>What &amp; Why? \ud83e\udd14</li> <li>Key Monitoring &amp; Logging Tools \ud83d\udee0\ufe0f</li> <li>Prometheus \u2013 Metrics &amp; Alerting \ud83d\udcca</li> <li>Grafana \u2013 Data Visualization \ud83d\udcc8</li> <li>ELK Stack \u2013 Centralized Logging \ud83e\udd8c</li> <li>Splunk \u2013 Enterprise Log Management \ud83d\udcb0</li> <li>Key Best Practices \ud83c\udfaf</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#1-what-why","title":"1\ufe0f\u20e3 What &amp; Why? \ud83e\udd14","text":"<p>\u2705 Monitoring: Tracks system performance, resource usage, and health. \u2705 Logging: Captures events, errors, and debug information. \u2705 Why Important? - \ud83d\udee0 Proactive Issue Detection \u2013 Detect failures before impact. - \ud83d\ude80 Performance Optimization \u2013 Identify bottlenecks. - \ud83d\udd12 Security &amp; Compliance \u2013 Audit logs for security incidents. - \ud83d\udd04 Troubleshooting &amp; Debugging \u2013 Quick RCA (Root Cause Analysis).</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#2-key-monitoring-logging-tools","title":"2\ufe0f\u20e3 Key Monitoring &amp; Logging Tools \ud83d\udee0\ufe0f","text":"Category Tool \ud83d\ude80 Purpose \ud83d\udd0e Metrics \ud83d\udcca Prometheus \ud83d\udfe2 Time-series monitoring &amp; alerting Visualization \ud83d\udcc8 Grafana \ud83c\udfa8 Beautiful dashboards &amp; analytics Log Management \ud83d\udcdc ELK Stack \ud83e\udd8c Centralized log collection &amp; analysis Enterprise Logging \ud83c\udfe2 Splunk \ud83d\udcb0 AI-driven log analysis &amp; security insights"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#3-prometheus-metrics-alerting","title":"3\ufe0f\u20e3 Prometheus \u2013 Metrics &amp; Alerting \ud83d\udcca","text":"<p>\u2705 Pull-based system \u2013 Scrapes metrics from targets via HTTP. \u2705 Stores time-series data with powerful query language (PromQL). \u2705 Supports auto-discovery of services. \u2705 Integrated alerting with Alertmanager.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#common-prometheus-commands","title":"\ud83d\udccc Common Prometheus Commands","text":"<pre><code># Start Prometheus with config file\nprometheus --config.file=prometheus.yml\n</code></pre> <p>\ud83d\udcdd Sample Prometheus Configuration</p> <pre><code>global:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'my_app'\n    static_configs:\n      - targets: ['localhost:9090']\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#4-grafana-data-visualization","title":"4\ufe0f\u20e3 Grafana \u2013 Data Visualization \ud83d\udcc8","text":"<p>\u2705 Connects to multiple data sources (Prometheus, Elasticsearch, etc.). \u2705 Custom dashboards &amp; alerts for real-time monitoring. \u2705 Supports annotations, user roles, and alerts.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#common-grafana-commands","title":"\ud83d\udccc Common Grafana Commands","text":"<pre><code># Start Grafana\nsystemctl start grafana-server\n</code></pre> <p>\ud83d\udcdd Sample Grafana Dashboard Query (PromQL)</p> <pre><code>rate(http_requests_total[5m])\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#5-elk-stack-centralized-logging","title":"5\ufe0f\u20e3 ELK Stack \u2013 Centralized Logging \ud83e\udd8c","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#elk-components","title":"\ud83d\udee0 ELK Components","text":"<ul> <li>Elasticsearch \u2013 \ud83d\ude80 Stores &amp; indexes logs.</li> <li>Logstash \u2013 \ud83d\udce5 Collects, transforms, and ships logs.</li> <li>Kibana \u2013 \ud83d\udcca Visualizes &amp; analyzes logs.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#common-elk-commands","title":"\ud83d\udccc Common ELK Commands","text":"<pre><code># Start Elasticsearch\nsystemctl start elasticsearch\n\n# Start Logstash\nsystemctl start logstash\n\n# Start Kibana\nsystemctl start kibana\n</code></pre> <p>\ud83d\udcdd Sample Logstash Configuration</p> <pre><code>input {\n  file {\n    path =&gt; \"/var/log/syslog\"\n    start_position =&gt; \"beginning\"\n  }\n}\noutput {\n  elasticsearch {\n    hosts =&gt; [\"localhost:9200\"]\n  }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#6-splunk-enterprise-log-management","title":"6\ufe0f\u20e3 Splunk \u2013 Enterprise Log Management \ud83d\udcb0","text":"<p>\u2705 AI-driven log analysis, security monitoring, and SIEM. \u2705 Supports real-time search &amp; alerting. \u2705 Scales for large enterprises with compliance needs.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#common-splunk-commands","title":"\ud83d\udccc Common Splunk Commands","text":"<pre><code># Start Splunk\nsplunk start\n\n# Search for error logs\nsplunk search \"error\" -index main\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Monitoring%20%26%20Logging/#7-key-monitoring-logging-best-practices","title":"7\ufe0f\u20e3 Key Monitoring &amp; Logging Best Practices \ud83c\udfaf","text":"<p>\u2705 Use Distributed Logging \u2013 Centralize logs from all services. \u2705 Set Alerts &amp; Thresholds \u2013 Avoid alert fatigue but detect real issues. \u2705 Structure Logs \u2013 Use JSON logs for easy parsing. \u2705 Use Retention Policies \u2013 Manage log storage efficiently. \u2705 Automate Dashboards &amp; Reports \u2013 Use Grafana/Kibana for insights. \u2705 Correlate Logs &amp; Metrics \u2013 Connect logs with system performance. \u2705 Enable Security Logging \u2013 Protect against cyber threats.</p> <p>\ud83c\udfaf Stay ahead by implementing effective monitoring &amp; logging strategies! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/","title":"\ud83d\udd12 Security \u2013 A Must-Know for Software Engineers \ud83d\ude80","text":"<p>Security is a critical aspect of software development. Following best practices ensures robust, secure applications resistant to vulnerabilities.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#table-of-contents","title":"\ud83d\udcdc Table of Contents","text":"<ol> <li>Secure Coding Practices \ud83d\udee1\ufe0f</li> <li>OAuth 2.0 &amp; OpenID Connect \ud83d\udd11</li> <li>Encryption &amp; Hashing \ud83d\udd10</li> <li>Key Takeaways \ud83c\udfaf</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#1-secure-coding-practices","title":"1\ufe0f\u20e3 Secure Coding Practices \ud83d\udee1\ufe0f","text":"<p>Writing secure code is non-negotiable in production systems. Follow best practices to prevent common vulnerabilities.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#owasp-top-10-key-threats-prevention","title":"\ud83d\udd39 OWASP Top 10 \u2013 Key Threats &amp; Prevention","text":"<p>\u2705 SQL Injection (SQLi) \ud83d\uded1 \u2013 Use parameterized queries or ORMs (e.g., SQLAlchemy, Hibernate). \u2705 Cross-Site Scripting (XSS) \ud83d\uded1 \u2013 Sanitize user inputs &amp; use Content Security Policy (CSP). \u2705 Cross-Site Request Forgery (CSRF) \ud83d\uded1 \u2013 Implement CSRF tokens &amp; same-site cookie policies. \u2705 Insecure Deserialization \ud83d\uded1 \u2013 Avoid deserializing untrusted data directly. \u2705 Security Misconfigurations \ud83d\uded1 \u2013 Disable unnecessary services &amp; enforce least privilege access. \u2705 Broken Authentication \ud83d\uded1 \u2013 Implement strong authentication mechanisms like OAuth 2.0 &amp; MFA. \u2705 Sensitive Data Exposure \ud83d\uded1 \u2013 Encrypt data in transit &amp; at rest (AES, RSA, TLS).</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#security-best-practices-for-apis","title":"\ud83d\udee0 Security Best Practices for APIs","text":"<p>\u2705 Use API Gateways \u2013 Enforce rate limiting &amp; authentication. \u2705 Avoid exposing sensitive data \u2013 Hide implementation details in error responses. \u2705 Implement Role-Based Access Control (RBAC) \u2013 Restrict access based on user roles. \u2705 Use HTTPS everywhere \u2013 Prevent data interception with TLS 1.2+.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#2-oauth-20-openid-connect","title":"2\ufe0f\u20e3 OAuth 2.0 &amp; OpenID Connect \ud83d\udd11","text":"<p>OAuth 2.0 is the standard for secure authentication &amp; authorization.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#key-oauth-20-flows","title":"\ud83d\udd39 Key OAuth 2.0 Flows","text":"<p>\u2705 Authorization Code Flow \u2013 Used by web &amp; mobile apps for secure user login. \u2705 Client Credentials Flow \u2013 Used for server-to-server API authentication. \u2705 Implicit Flow (Deprecated) \u2013 Avoid due to security risks. \u2705 Device Authorization Flow \u2013 Used for smart TVs &amp; IoT devices.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#openid-connect-oidc-layer-on-top-of-oauth-20","title":"\ud83d\udd39 OpenID Connect (OIDC) \u2013 Layer on top of OAuth 2.0","text":"<p>\u2705 OIDC provides user identity \u2013 Retrieves profile information via ID token. \u2705 JSON Web Token (JWT) \u2013 Used for stateless authentication. \u2705 Single Sign-On (SSO) \u2013 Enables login with Google, Microsoft, etc.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#security-best-practices-for-oauth-api-security","title":"\ud83d\udee0 Security Best Practices for OAuth &amp; API Security","text":"<p>\u2705 Use PKCE (Proof Key for Code Exchange) \u2013 Prevents authorization code interception. \u2705 Set token expiration &amp; refresh policies \u2013 Reduce risk of token theft. \u2705 Use scope-based access control \u2013 Restrict permissions to necessary APIs. \u2705 Encrypt API tokens \u2013 Avoid plaintext storage of credentials.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#3-encryption-hashing","title":"3\ufe0f\u20e3 Encryption &amp; Hashing \ud83d\udd10","text":"<p>Encryption protects sensitive data from unauthorized access.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#key-encryption-algorithms-when-to-use","title":"\ud83d\udd39 Key Encryption Algorithms &amp; When to Use","text":"<p>\u2705 AES (Advanced Encryption Standard) \ud83d\udd12 \u2013 Symmetric encryption for data storage (AES-256 recommended). \u2705 RSA (Rivest-Shamir-Adleman) \ud83d\udd11 \u2013 Asymmetric encryption used for secure key exchange (2048-bit minimum). \u2705 TLS (Transport Layer Security) \ud83d\udd10 \u2013 Secures HTTP traffic (use TLS 1.2 or 1.3). \u2705 PGP (Pretty Good Privacy) \ud83d\udcdc \u2013 Encrypts emails &amp; files securely.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#hashing-algorithms-usage","title":"\ud83d\udd39 Hashing Algorithms &amp; Usage","text":"<p>\u2705 SHA-256 \ud83d\udd04 \u2013 Cryptographic hashing for verifying integrity. \u2705 bcrypt &amp; Argon2 \ud83d\udee1\ufe0f \u2013 Secure password hashing with salting. \u2705 HMAC (Hash-Based Message Authentication Code) \ud83c\udff7\ufe0f \u2013 Ensures message authenticity.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#encryption-best-practices","title":"\ud83d\udee0 Encryption Best Practices","text":"<p>\u2705 Never store passwords in plaintext \u2013 Always hash &amp; salt them. \u2705 Use hardware security modules (HSMs) \u2013 Secure cryptographic operations. \u2705 Rotate encryption keys periodically \u2013 Reduce risk of key compromise. \u2705 Use strong entropy sources \u2013 Prevent predictable cryptographic keys.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":"<p>\u2705 Secure coding is essential \u2013 Prevent SQLi, XSS, CSRF, and other OWASP threats. \u2705 Use OAuth 2.0 &amp; OIDC for authentication \u2013 Secure API access with proper token management. \u2705 Encrypt sensitive data \u2013 Use AES, RSA, and bcrypt for storage &amp; transmission security. \u2705 Follow best practices \u2013 Secure APIs, implement RBAC, and enforce least privilege policies.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#extra-notes","title":"\ud83d\udd25 Extra Notes","text":"<ul> <li>API Security</li> <li>OWASP Security</li> <li>Security Principles</li> <li>Security by Design: Building Secure Microservices from Day One</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security%20%E2%80%93%20A%20Must-Know%20for%20Software%20Engineers/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>OWASP TOP 10</li> </ul> <p>\ud83d\udccc Stay Secure, Stay Ahead! \ud83d\udd10\ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/","title":"\ud83d\udcbb Software Development Best Practices","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ol> <li>Requirements Gathering &amp; Analysis</li> <li>Design Principles &amp; Patterns</li> <li>Code Organization &amp; Structure</li> <li>Version Control &amp; Collaboration</li> <li>Testing &amp; Quality Assurance</li> <li>Security Considerations</li> <li>Performance Optimization</li> <li>Documentation &amp; Code Comments</li> <li>Continuous Integration &amp; Deployment (CI/CD)</li> <li>Code Review &amp; Refactoring</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#1-requirements-gathering-analysis","title":"\ud83d\udcca 1. Requirements Gathering &amp; Analysis","text":"<ul> <li>\u2705 Engage with stakeholders early &amp; frequently.</li> <li>\u2705 Document requirements clearly &amp; concisely.</li> <li>\u2705 Prioritize requirements based on impact &amp; feasibility.</li> <li>\u2705 Validate requirements with stakeholders to avoid misinterpretation.</li> <li>\u2705 Use Agile methodologies like user stories &amp; acceptance criteria.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#2-design-principles-patterns","title":"\ud83d\udcda 2. Design Principles &amp; Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#follow-solid-principles","title":"Follow SOLID Principles:","text":"<ul> <li>\ud83d\udd04 SRP: Single Responsibility Principle.</li> <li>\u2696\ufe0f OCP: Open/Closed Principle.</li> <li>\ud83c\udfc6 LSP: Liskov Substitution Principle.</li> <li>\ud83d\udee0 ISP: Interface Segregation Principle.</li> <li>\ud83d\udd27 DIP: Dependency Inversion Principle.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#use-design-patterns","title":"Use Design Patterns:","text":"<ul> <li>\ud83e\udd16 Factory, Singleton, Observer, Strategy, etc.</li> <li>Keep design simple, modular &amp; scalable.</li> <li>Prefer composition over inheritance.</li> <li>Use domain-driven design (DDD) where applicable.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#3-code-organization-structure","title":"\ud83c\udf0d 3. Code Organization &amp; Structure","text":"<ul> <li>\ud83d\udcc4 Use a logical directory structure.</li> <li>\ud83d\udcc3 Follow consistent naming conventions (PEP8 for Python, CamelCase for Java, etc.).</li> <li>\u2705 Modularize code for reusability &amp; maintainability.</li> <li>\ud83c\udfa8 Keep functions &amp; classes small &amp; single-purpose.</li> <li>\ud83d\udd04 Use meaningful names for variables, functions, &amp; classes.</li> <li>\u26a1 Avoid code duplication (DRY - Don't Repeat Yourself).</li> <li>\ud83d\udd16 Use dependency injection where applicable.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#4-version-control-collaboration","title":"\ud83d\udee0 4. Version Control &amp; Collaboration","text":"<ul> <li>\ud83d\udcca Use Git with GitHub/GitLab/Bitbucket.</li> <li>\ud83d\uddd3 Follow a branching strategy (e.g., Git Flow, Trunk-based Dev).</li> <li>\ud83d\udd12 Write meaningful commit messages.</li> <li>\ud83d\udee0 Keep pull requests small &amp; focused.</li> <li>\ud83c\udf10 Use code review tools for better collaboration.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#5-testing-quality-assurance","title":"\ud83c\udfae 5. Testing &amp; Quality Assurance","text":"<ul> <li>\ud83c\udfa8 Follow TDD (Test-Driven Development).</li> <li>\u2696\ufe0f Use unit tests, integration tests, and end-to-end (E2E) tests.</li> <li>\ud83d\udee0 Automate testing (JUnit, Jest, PyTest, etc.).</li> <li>\u2699 Perform load testing for scalability.</li> <li>\ud83c\udf10 Use CI/CD pipelines to run tests automatically.</li> <li>\ud83d\udee1 Conduct security testing &amp; static code analysis.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#6-security-considerations","title":"\ud83d\udd12 6. Security Considerations","text":"<ul> <li>\ud83c\udfe1 Follow OWASP guidelines to prevent vulnerabilities.</li> <li>\ud83d\udee1 Sanitize &amp; validate user input to prevent SQL Injection &amp; XSS.</li> <li>\u26d3\ufe0f Use proper authentication &amp; authorization mechanisms (OAuth, JWT, etc.).</li> <li>\ud83d\udd27 Encrypt sensitive data (AES, TLS/SSL).</li> <li>\ud83d\udee0 Keep dependencies updated with security patches.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#7-performance-optimization","title":"\u26a1 7. Performance Optimization","text":"<ul> <li>\ud83d\udee0 Profile code to identify bottlenecks.</li> <li>\ud83d\udd04 Use caching mechanisms (Redis, Memcached).</li> <li>\ud83d\udd26 Optimize database queries (Indexing, Joins, Partitioning).</li> <li>\u2696\ufe0f Minimize API calls &amp; reduce network latency.</li> <li>\ud83d\udd28 Use efficient data structures &amp; algorithms.</li> <li>\ud83d\udef0 Prefer asynchronous programming for I/O operations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#8-documentation-code-comments","title":"\ud83d\udcd6 8. Documentation &amp; Code Comments","text":"<ul> <li>\u2705 Keep API documentation up to date.</li> <li>\ud83d\udcdd Document architecture &amp; design decisions.</li> <li>\ud83d\udcda Use docstrings &amp; inline comments where necessary.</li> <li>\ud83d\udee0 Use tools like Swagger, Javadoc, or Docusaurus.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#9-continuous-integration-deployment-cicd","title":"\ud83d\ude80 9. Continuous Integration &amp; Deployment (CI/CD)","text":"<ul> <li>\ud83d\udcbb Automate builds, testing &amp; deployments using Jenkins/GitHub Actions/GitLab CI/CD.</li> <li>\ud83d\udee0 Use Docker for consistent deployment.</li> <li>\ud83c\udf10 Deploy using Kubernetes or AWS/GCP services.</li> <li>\u2705 Implement rolling updates &amp; feature flags for safe releases.</li> <li>\u2696\ufe0f Monitor logs &amp; performance metrics post-deployment.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Software-Development-Best-Practices/#10-code-review-refactoring","title":"\ud83d\udd04 10. Code Review &amp; Refactoring","text":"<ul> <li>\ud83d\udee0 Conduct regular code reviews (via GitHub PRs, Crucible, etc.).</li> <li>\ud83d\udd26 Focus on code readability, maintainability &amp; performance.</li> <li>\ud83d\udd0d Use static code analysis tools (SonarQube, ESLint).</li> <li>\ud83d\udee0 Follow clean code principles (KISS, YAGNI, DRY).</li> <li>\ud83d\udee0 Refactor code regularly to remove technical debt.</li> </ul> <p>\ud83c\udf89 With these best practices, you are well-equipped to build high-quality, scalable, and maintainable software!</p> <p>Happy Coding! \ud83c\udf1f</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/","title":"\u2601\ufe0f \ud83d\udd25 Cloud Platform \u2013 Quick Revision Notes for Senior Software Engineer","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#1-cloud-fundamentals","title":"\ud83d\ude80 1. Cloud Fundamentals","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#what-is-cloud-computing","title":"\u2705 What is Cloud Computing?","text":"<ul> <li>\ud83d\udd25 On-demand delivery of IT resources over the internet.</li> <li>\ud83d\udca1 Pay-as-you-go pricing model.</li> <li>\ud83d\udea6 Key Characteristics:<ul> <li>\u2705 On-demand self-service</li> <li>\ud83d\udd25 Broad network access</li> <li>\ud83c\udf0d Resource pooling</li> <li>\ud83d\udcca Rapid elasticity</li> <li>\ud83d\udcb0 Measured service</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#cloud-service-models-spi","title":"\ud83d\udd25 Cloud Service Models (SPI)","text":"<ul> <li>\ud83c\udf29\ufe0f IaaS (Infrastructure as a Service):<ul> <li>\ud83d\udd25 Virtualized infrastructure (VMs, storage, network).</li> <li>\u2705 Examples: Azure VM, AWS EC2, GCP Compute Engine.</li> </ul> </li> <li>\ud83d\udcbb PaaS (Platform as a Service):<ul> <li>\ud83d\udd25 Development and deployment platform.</li> <li>\u2705 Examples: Azure App Service, AWS Beanstalk, GCP App Engine.</li> </ul> </li> <li>\ud83d\udd25 SaaS (Software as a Service):<ul> <li>\ud83d\udd25 Ready-to-use applications.</li> <li>\u2705 Examples: Office 365, Google Workspace, Salesforce.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#cloud-deployment-models","title":"\ud83c\udf0d Cloud Deployment Models","text":"<ul> <li>\u2705 Public Cloud: Services shared across multiple tenants.</li> <li>\ud83d\udd25 Private Cloud: Exclusive to a single organization.</li> <li>\ud83c\udf29\ufe0f Hybrid Cloud: Combination of public + private.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#2-core-cloud-services-concepts","title":"\ud83d\udd25 2. Core Cloud Services &amp; Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#networking","title":"\ud83c\udf10 Networking","text":"<ul> <li>\ud83c\udf29\ufe0f VPC (Virtual Private Cloud): Isolated network in the cloud.</li> <li>\ud83d\udd25 Load Balancer: Distributes traffic across multiple servers.</li> <li>\u2705 CDN (Content Delivery Network): Distributes content globally.</li> <li>\ud83d\udd25 DNS (Domain Name System): Resolves domain names to IPs.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#storage-services","title":"\ud83d\udd25 Storage Services","text":"<ul> <li>\ud83d\udcbe Blob/Object Storage: Stores unstructured data.</li> <li>\u2705 Block Storage: VM disk storage (persistent).</li> <li>\ud83d\udd25 File Storage: Network file system.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#compute-services","title":"\ud83d\udd25 Compute Services","text":"<ul> <li>\u2705 VMs (Virtual Machines): On-demand servers.</li> <li>\ud83c\udf29\ufe0f Serverless Functions: Auto-scaling functions (Azure Functions, AWS Lambda).</li> <li>\ud83d\udd25 Containers: Lightweight, portable, consistent environments.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#database-services","title":"\ud83d\udd25 Database Services","text":"<ul> <li>\u2705 Relational: Azure SQL, AWS RDS, GCP Cloud SQL.</li> <li>\ud83c\udf29\ufe0f NoSQL: Azure Cosmos DB, AWS DynamoDB, GCP Firestore.</li> <li>\ud83d\udd25 Caching: Redis, Memcached.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#3-azure-cloud-key-concepts","title":"\ud83d\ude80 3. Azure Cloud Key Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#azure-core-services","title":"\ud83c\udf29\ufe0f Azure Core Services","text":"<ul> <li>\u2705 Azure VMs: Scalable compute instances.</li> <li>\ud83d\udd25 Azure App Service: PaaS for web apps.</li> <li>\ud83d\udd25 Azure Functions: Serverless compute platform.</li> <li>\u2705 Azure Blob Storage: Scalable object storage.</li> <li>\ud83c\udf0d Azure Cosmos DB: Globally distributed NoSQL DB.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#azure-devops-cicd","title":"\ud83d\udd25 Azure DevOps &amp; CI/CD","text":"<ul> <li>\u2705 Azure Repos: Git repositories.</li> <li>\ud83d\udd25 Azure Pipelines: CI/CD automation.</li> <li>\u2705 Azure Artifacts: Package management.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#azure-security-services","title":"\ud83d\udd25 Azure Security Services","text":"<ul> <li>\ud83d\udd25 Azure Key Vault: Securely store secrets, keys, and certificates.</li> <li>\u2705 Azure Active Directory (AAD): Identity and access management.</li> <li>\ud83d\udd25 Azure Sentinel: SIEM for threat detection and response.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#4-cloud-security-best-practices","title":"\ud83d\udd25 4. Cloud Security Best Practices","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#data-protection","title":"\ud83d\udd25 Data Protection","text":"<ul> <li>\u2705 Encryption at Rest and in Transit: Use TLS and encryption keys.</li> <li>\ud83d\udd25 Data masking and tokenization for sensitive data.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#identity-access-management-iam","title":"\ud83d\udd25 Identity &amp; Access Management (IAM)","text":"<ul> <li>\u2705 Principle of Least Privilege (PoLP): Minimum permissions required.</li> <li>\ud83d\udd25 MFA (Multi-Factor Authentication) for enhanced security.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#networking-security","title":"\ud83d\udd25 Networking Security","text":"<ul> <li>\u2705 Firewall rules: Restrict access.</li> <li>\ud83d\udd25 Network Security Groups (NSG) to control traffic.</li> <li>\u2705 DDoS protection services.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#application-security","title":"\ud83d\udd25 Application Security","text":"<ul> <li>\u2705 Use WAF (Web Application Firewall).</li> <li>\ud83d\udd25 API Gateway + rate limiting.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#5-cloud-architecture-patterns","title":"\ud83d\ude80 5. Cloud Architecture Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#microservices-architecture","title":"\ud83d\udd25 Microservices Architecture","text":"<ul> <li>\u2705 Independent services communicating over APIs.</li> <li>\ud83d\udd25 Resiliency: Use circuit breaker patterns.</li> <li>\u2705 Scalability: Auto-scaling groups.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#serverless-architecture","title":"\ud83d\udd25 Serverless Architecture","text":"<ul> <li>\u2705 Event-driven functions.</li> <li>\ud83d\udd25 Reduced infrastructure management.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#event-driven-architecture","title":"\ud83d\udd25 Event-Driven Architecture","text":"<ul> <li>\u2705 Asynchronous communication.</li> <li>\ud83d\udd25 Kafka, RabbitMQ for message queues.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#service-mesh","title":"\ud83d\udd25 Service Mesh","text":"<ul> <li>\u2705 Istio, Linkerd: Manage microservice communication.</li> <li>\ud83d\udd25 Traffic routing, security, and observability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#6-cloud-design-patterns","title":"\ud83d\udd25 6. Cloud Design Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#caching-pattern","title":"\ud83d\udd25 Caching Pattern","text":"<ul> <li>\u2705 Improve performance by storing frequently accessed data.</li> <li>\ud83d\udd25 Use Redis or Memcached.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#circuit-breaker-pattern","title":"\ud83d\udd25 Circuit Breaker Pattern","text":"<ul> <li>\u2705 Prevent cascading failures.</li> <li>\ud83d\udd25 Automatically stop requests when failures are detected.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#retry-pattern","title":"\ud83d\udd25 Retry Pattern","text":"<ul> <li>\u2705 Handle transient failures.</li> <li>\ud83d\udd25 Use exponential backoff for retries.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#7-key-tools-services-to-know","title":"\ud83d\udea6 7. Key Tools &amp; Services to Know","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#azure","title":"\u2705 Azure:","text":"<ul> <li>\ud83d\udd25 Azure DevOps (CI/CD pipelines)</li> <li>\u2705 Azure Monitor (performance monitoring)</li> <li>\ud83d\udd25 Azure Security Center (threat protection)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#aws","title":"\u2705 AWS:","text":"<ul> <li>\ud83d\udd25 EC2, Lambda, S3</li> <li>\u2705 AWS CloudWatch (logging)</li> <li>\ud83d\udd25 AWS WAF (Web Application Firewall)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#gcp","title":"\u2705 GCP:","text":"<ul> <li>\ud83d\udd25 GCP Compute Engine, Cloud Functions</li> <li>\u2705 Cloud Armor (DDoS protection)</li> <li>\ud83d\udd25 GCP Cloud Monitoring</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Cloud%20Platform/Cloud-Platform/#8-final-tips-for-interview","title":"\ud83d\udd25 8. Final Tips for Interview","text":"<ul> <li>\u2705 Explain cloud architecture trade-offs (cost, security, scalability).</li> <li>\ud83d\udd25 Demonstrate understanding of cloud security measures.</li> <li>\u2705 Showcase knowledge of CI/CD pipelines and deployment strategies.</li> <li>\ud83d\udd25 Explain cloud cost optimization techniques.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/","title":"Docker &amp; Kubernetes Notes \ud83d\udea2\u2638\ufe0f","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#table-of-contents","title":"\ud83d\udcdc Table of Contents","text":"<ol> <li>What is Docker? \ud83d\udc33</li> <li>What is Kubernetes? \u2638\ufe0f</li> <li>Docker vs Kubernetes \u2694\ufe0f</li> <li>Why Docker &amp; Kubernetes? \ud83e\udd14</li> <li>Advanced Kubernetes Features</li> <li>Learning Resources \ud83d\udcda</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#1-what-is-docker","title":"1\ufe0f\u20e3 What is Docker? \ud83d\udc33","text":"<ul> <li>Docker is a containerization platform that packages applications and dependencies into a single unit (container).</li> <li>Ensures consistency across different environments (dev, test, prod).</li> <li>Lightweight, fast, and isolates apps from OS dependencies.</li> <li>Supports Microservices architecture by enabling easy scaling &amp; deployment.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#key-docker-concepts","title":"\ud83c\udfd7\ufe0f Key Docker Concepts","text":"<ul> <li>Image \ud83d\udce6: Blueprint of a container (built from Dockerfile).</li> <li>Container \ud83c\udfe0: Running instance of an image.</li> <li>Dockerfile \ud83d\udcdc: Script to automate container creation.</li> <li>Registry \ud83c\udfdb\ufe0f: Storage for images (Docker Hub, AWS ECR, GCP Container Registry).</li> <li>Volumes \ud83d\uddc4\ufe0f: Persistent storage for containers.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#must-know-docker-commands","title":"\ud83d\udee0\ufe0f Must-Know Docker Commands","text":"<pre><code># Install Docker\nsudo apt install docker.io  # Ubuntu\nbrew install --cask docker   # MacOS\n\n# Check Docker version\ndocker --version\n\n# Run a container\ndocker run -d -p 8080:80 nginx\n\n# List running containers\ndocker ps\n\n# Stop and remove a container\ndocker stop &lt;container_id&gt;\ndocker rm &lt;container_id&gt;\n\n# Build an image\ndocker build -t my-app .\n\n# Push an image to Docker Hub\ndocker tag my-app:latest mydockerhubuser/my-app:latest\ndocker push mydockerhubuser/my-app:latest\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#2-what-is-kubernetes","title":"2\ufe0f\u20e3 What is Kubernetes? \u2638\ufe0f","text":"<ul> <li>Kubernetes (K8s) is an open-source container orchestration tool for deploying, scaling, and managing containers.</li> <li>Automates container deployment, load balancing, scaling, and self-healing.</li> <li>Works across cloud providers (AWS, GCP, Azure) and on-prem environments.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#key-kubernetes-concepts","title":"\ud83c\udfd7\ufe0f Key Kubernetes Concepts","text":"<ul> <li>Pod \ud83c\udfe0: Smallest deployable unit, contains one or more containers.</li> <li>Node \ud83d\udda5\ufe0f: A single machine in a Kubernetes cluster (Master &amp; Worker Nodes).</li> <li>Cluster \ud83c\udfd7\ufe0f: A group of nodes managing containers.</li> <li>Service \ud83c\udf0d: Exposes an application inside/outside the cluster.</li> <li>Ingress \ud83c\udf10: Manages external access to services.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#must-know-kubernetes-commands","title":"\ud83d\udee0\ufe0f Must-Know Kubernetes Commands","text":"<pre><code># Get cluster info\nkubectl cluster-info\n\n# Get nodes\nkubectl get nodes\n\n# Create a pod\nkubectl run my-app --image=nginx --port=80\n\n# List running pods\nkubectl get pods\n\n# Deploy an application\nkubectl create deployment my-app --image=nginx\n\n# Scale deployment\nkubectl scale deployment my-app --replicas=3\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#3-docker-vs-kubernetes","title":"3\ufe0f\u20e3 Docker vs Kubernetes \u2694\ufe0f","text":"Feature Docker \ud83d\udc33 Kubernetes \u2638\ufe0f Purpose Containerization Container orchestration Scaling Manual Auto-scaling Networking Bridge network Service-based networking Load Balancing Needs external tools Built-in Self-Healing No Yes"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#4-why-docker-kubernetes","title":"4\ufe0f\u20e3 Why Docker &amp; Kubernetes? \ud83e\udd14","text":"<ul> <li>\ud83d\ude80 Faster Development &amp; Deployment - Avoids dependency issues.</li> <li>\ud83c\udf0d Multi-Cloud &amp; On-Prem Support - Works across AWS, GCP, Azure.</li> <li>\ud83d\udcc8 Scalability &amp; High Availability - K8s auto-scales based on demand.</li> <li>\ud83d\udd04 Rolling Updates &amp; Zero Downtime - Enables smooth deployments.</li> <li>\ud83d\udcca Observability &amp; Monitoring - Works with Prometheus, Grafana.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#5-advanced-kubernetes-features","title":"5\ufe0f\u20e3 Advanced Kubernetes Features","text":"<ul> <li>Helm Charts \ud83c\udfad - Package manager for Kubernetes.</li> <li>Operators \ud83d\udee0\ufe0f - Custom controllers to manage Kubernetes applications.</li> <li>RBAC \ud83d\udd10 - Role-based access control for security.</li> <li>Istio &amp; Service Mesh \ud83c\udf10 - Advanced networking and traffic management.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/1_Docker_Kubernetes/#6-learning-resources","title":"6\ufe0f\u20e3 Learning Resources \ud83d\udcda","text":"<ul> <li>\ud83d\udcd6 Kubernetes Docs: Kubernetes Documentation</li> <li>\ud83d\udcd6 Docker Docs: Docker Documentation</li> <li>\ud83c\udfa5 YouTube: KodeKloud, TechWorld with Nana</li> <li>\ud83d\udcda Books: \"Kubernetes Up &amp; Running\" by Kelsey Hightower</li> </ul> <p>These notes cover everything you must know as a Google Senior Engineer. \ud83d\udca1 Let me know if you need further additions! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/","title":"\ud83d\udccc Docker &amp; Kubernetes Master Guide: Beginner to Expert","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":"<ul> <li>\ud83d\udc33 Docker Mastery: Beginner to Expert<ul> <li>\ud83d\udd39 Docker Basics</li> <li>\ud83d\udd39 Intermediate Docker</li> <li>\ud83d\udd39 Advanced Docker</li> </ul> </li> <li>\u2638\ufe0f Kubernetes Mastery: Beginner to Expert<ul> <li>\ud83d\udd39 Kubernetes Basics</li> <li>\ud83d\udd39 Intermediate Kubernetes</li> <li>\ud83d\udd39 Expert Kubernetes</li> </ul> </li> <li>\u2601\ufe0f AWS &amp; GCP Considerations</li> <li>\ud83c\udfaf Conclusion</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#docker-mastery-beginner-to-expert","title":"\ud83d\udc33 Docker Mastery: Beginner to Expert","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#docker-basics","title":"\ud83d\udd39 Docker Basics","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#key-concepts","title":"\u2705 Key Concepts","text":"<ul> <li>Image \ud83d\udce6: A lightweight, standalone package with everything needed to run software.</li> <li>Container \ud83d\ude80: A running instance of a Docker image.</li> <li>Dockerfile \ud83d\udcdd: A script to build Docker images.</li> <li>Docker Compose \ud83d\udcdc: A tool to define and run multi-container applications.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#essential-commands","title":"\ud83d\udd25 Essential Commands","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#installation-setup","title":"Installation &amp; Setup","text":"<pre><code>docker --version   # Check Docker version\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#images-management","title":"Images Management","text":"<pre><code>docker images      # List images\ndocker pull &lt;image&gt;  # Pull image\ndocker rmi &lt;image&gt;   # Remove image\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#container-operations","title":"Container Operations","text":"<pre><code>docker ps        # List running containers\ndocker ps -a     # List all containers\ndocker run -d --name my_container my_image  # Run a container\ndocker stop my_container   # Stop a container\ndocker start my_container  # Start a container\ndocker rm my_container     # Remove a container\ndocker logs my_container   # View logs\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#intermediate-docker","title":"\ud83d\udd39 Intermediate Docker","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#networking-volumes","title":"\ud83c\udfd7\ufe0f Networking &amp; Volumes","text":"<pre><code>docker network ls   # List networks\ndocker network create my_network   # Create a network\ndocker volume ls   # List volumes\ndocker volume create my_volume   # Create a volume\ndocker run -v my_volume:/data my_image   # Mount volume\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#docker-compose","title":"\ud83d\udccc Docker Compose","text":"<pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/&lt;version&gt;/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version   # Check Docker Compose version\ndocker-compose up -d   # Run Compose\ndocker-compose down    # Stop Compose\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#advanced-docker","title":"\ud83d\udd39 Advanced Docker","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#docker-swarm-security","title":"\u2699\ufe0f Docker Swarm &amp; Security","text":"<pre><code>docker swarm init  # Initialize Swarm mode\ndocker node ls  # List Swarm nodes\ndocker stack deploy -c docker-compose.yml my_stack  # Deploy stack\ndocker secret create my_secret -  # Create a secret\ndocker secret ls   # List secrets\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#best-practices","title":"\ud83d\udee1\ufe0f Best Practices","text":"<p>\u2705 Store Dockerfiles in Git \ud83d\udcc2 \u2705 Keep images lightweight \ud83d\udccf \u2705 Scan images for vulnerabilities \ud83d\udd0d \u2705 Automate with CI/CD \ud83d\ude80 \u2705 Monitor &amp; Log \ud83d\udda5\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#kubernetes-mastery-beginner-to-expert","title":"\u2638\ufe0f Kubernetes Mastery: Beginner to Expert","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#kubernetes-basics","title":"\ud83d\udd39 Kubernetes Basics","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#key-concepts_1","title":"\u2705 Key Concepts","text":"<ul> <li>Pod \ud83c\udfe0: The smallest deployable unit.</li> <li>Node \ud83d\udcbb: Machine running Kubernetes workloads.</li> <li>Cluster \ud83c\udf10: A set of nodes managed by Kubernetes.</li> <li>Deployment \ud83d\udce6: Ensures a specified number of pods run.</li> <li>Service \ud83c\udf09: Exposes a set of pods as a network service.</li> <li>ConfigMap &amp; Secret \ud83d\udd11: Store configuration &amp; sensitive data.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#essential-commands_1","title":"\ud83d\udd25 Essential Commands","text":"<pre><code>kubectl cluster-info  # Check cluster status\nkubectl get nodes  # List nodes\nkubectl create namespace my_namespace  # Create namespace\nkubectl get namespaces  # List namespaces\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#intermediate-kubernetes","title":"\ud83d\udd39 Intermediate Kubernetes","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#working-with-pods","title":"\ud83d\udccc Working with Pods","text":"<pre><code>kubectl get pods   # List all pods\nkubectl describe pod my_pod   # Describe a pod\nkubectl delete pod my_pod   # Delete a pod\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#deployments","title":"\ud83d\udccc Deployments","text":"<pre><code>kubectl create deployment my_app --image=my_image  # Create deployment\nkubectl scale deployment my_app --replicas=3  # Scale deployment\nkubectl rollout undo deployment my_app  # Rollback deployment\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#services-networking","title":"\ud83d\udccc Services &amp; Networking","text":"<pre><code>kubectl expose deployment my_app --type=LoadBalancer --port=80  # Expose as service\nkubectl get services   # List services\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#expert-kubernetes","title":"\ud83d\udd39 Expert Kubernetes","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#helm-kubernetes-package-manager","title":"\ud83d\udd25 Helm (Kubernetes Package Manager)","text":"<pre><code>curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash  # Install Helm\nhelm repo add stable https://charts.helm.sh/stable  # Add Helm repo\nhelm install my_app stable/chart_name  # Install an app\nhelm list  # List installed releases\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#role-based-access-control-rbac","title":"\ud83d\udd25 Role-Based Access Control (RBAC)","text":"<pre><code>kubectl get roles -n my_namespace  # List roles\nkubectl create rolebinding my_binding --role=my_role --user=my_user -n my_namespace  # Create binding\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#monitoring-debugging","title":"\ud83d\udd25 Monitoring &amp; Debugging","text":"<pre><code>kubectl logs my_pod  # View logs\nkubectl exec -it my_pod -- /bin/sh  # Execute command in pod\nkubectl get events --sort-by=.metadata.creationTimestamp  # Get events\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#aws-gcp-considerations","title":"\u2601\ufe0f AWS &amp; GCP Considerations","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#aws-eks-elastic-kubernetes-service","title":"\u2705 AWS EKS (Elastic Kubernetes Service)","text":"<ul> <li>Use IAM Roles for pod security.</li> <li>Configure VPC and Security Groups for access control.</li> <li>Use Auto Scaling Groups for efficient resource allocation.</li> <li>Monitor with CloudWatch &amp; Prometheus.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#gcp-gke-google-kubernetes-engine","title":"\u2705 GCP GKE (Google Kubernetes Engine)","text":"<ul> <li>Use Google IAM &amp; Workload Identity.</li> <li>Configure VPC-native clusters for security.</li> <li>Enable Autoscaling and Cloud Logging.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Docker_Kubernetes/2_Docker_Kubernetes/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>\u2705 This guide covers Docker &amp; Kubernetes from Beginner to Expert \ud83d\ude80 \u2705 Includes essential concepts, commands, and cloud best practices \ud83c\udfc6 \u2705 A one-stop solution for quick revision &amp; deep dive into DevOps \ud83d\udccc</p> <p>\ud83d\udd25 Level up to a Google Senior Architect Professional! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/","title":"\ud83d\udd25 API &amp; Microservices Security \u2013 Quick Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#1-secure-api-implementation","title":"\u2705 1. Secure API Implementation","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#11-authentication-authorization","title":"\ud83d\udd25 1.1. Authentication &amp; Authorization","text":"<ul> <li>\ud83d\udd10 Authentication: Verifies the identity of clients accessing the API.<ul> <li>\ud83d\udd39 Techniques:<ul> <li>\u2705 OAuth 2.0 / OpenID Connect.</li> <li>\ud83d\udd25 API Keys (less secure).</li> <li>\ud83d\udd12 JWT (JSON Web Tokens) for token-based auth.</li> </ul> </li> </ul> </li> <li>\u2705 Authorization: Determines what actions a client can perform.<ul> <li>\ud83d\udd39 RBAC: Role-based access control.</li> <li>\ud83d\udd39 ABAC: Attribute-based access control.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#12-rate-limiting-throttling","title":"\ud83d\udd25 1.2. Rate Limiting &amp; Throttling","text":"<ul> <li>\ud83d\udea6 Purpose: Prevents API abuse and DDoS attacks.</li> <li>\ud83d\udd39 Techniques:<ul> <li>\u2705 Token Bucket or Leaky Bucket algorithm.</li> <li>\ud83d\udd25 Sliding window or Fixed window counters.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#13-input-validation-sanitization","title":"\ud83d\udd25 1.3. Input Validation &amp; Sanitization","text":"<ul> <li>\u2705 Prevents SQL Injection, XSS, and other attacks.</li> <li>\ud83d\udd25 Validate all incoming data (length, type, format).</li> <li>\ud83d\udea6 Escape special characters.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#14-data-encryption-secure-communication","title":"\ud83d\udd25 1.4. Data Encryption &amp; Secure Communication","text":"<ul> <li>\ud83d\udd12 TLS/SSL: Encrypts data in transit (HTTPS).</li> <li>\ud83d\udd39 Encryption at rest: Protects stored data.</li> <li>\ud83d\udd25 Use strong ciphers (AES-256, RSA-2048).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#15-api-gateway-reverse-proxy","title":"\ud83d\udd25 1.5. API Gateway &amp; Reverse Proxy","text":"<ul> <li>\u2705 Centralizes security policies and controls.</li> <li>\ud83d\ude80 Features:<ul> <li>\ud83d\udd39 Rate limiting, throttling, and authentication.</li> <li>\ud83d\udd25 Request/Response validation.</li> <li>\u2705 Logging and monitoring.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#2-microservices-security-best-practices","title":"\ud83d\ude80 2. Microservices Security Best Practices","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#21-service-to-service-authentication","title":"\ud83d\udd25 2.1. Service-to-Service Authentication","text":"<ul> <li>\ud83d\udd39 Use mTLS (Mutual TLS) to verify both client and server.</li> <li>\ud83d\udd25 Service Identity:<ul> <li>\u2705 Unique service identities with signed certificates.</li> <li>\ud83d\udd25 JWT or OAuth tokens.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#22-secure-communication","title":"\ud83d\udd25 2.2. Secure Communication","text":"<ul> <li>\ud83d\udd12 Encryption in Transit:<ul> <li>\u2705 Use TLS 1.2/1.3 for all internal and external communications.</li> </ul> </li> <li>\ud83d\udd25 Encryption at Rest:<ul> <li>\u2705 Store sensitive data securely using strong encryption algorithms.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#23-api-gateway-for-microservices","title":"\ud83d\udd25 2.3. API Gateway for Microservices","text":"<ul> <li>\u2705 Acts as an entry point for external calls.</li> <li>\ud83d\udd25 Features:<ul> <li>\u2705 Rate limiting and throttling.</li> <li>\ud83d\udd12 Authentication &amp; Authorization.</li> <li>\ud83d\ude80 Traffic routing and load balancing.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#24-data-privacy-masking","title":"\ud83d\udd25 2.4. Data Privacy &amp; Masking","text":"<ul> <li>\u2705 Data Minimization: Only expose necessary data.</li> <li>\ud83d\udd25 Mask sensitive data (PII) in logs.</li> <li>\ud83d\udea6 Use field-level encryption for sensitive information.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#25-logging-monitoring","title":"\ud83d\udd25 2.5. Logging &amp; Monitoring","text":"<ul> <li>\u2705 Centralized Logging: Trace all microservices interactions.</li> <li>\ud83d\udd25 Monitor API usage patterns: Identify anomalies.</li> <li>\ud83d\udea6 Enable distributed tracing (Jaeger, Zipkin).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#3-api-security-threats-mitigations","title":"\u2699\ufe0f 3. API Security Threats &amp; Mitigations","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#31-injection-attacks-sql-nosql-command","title":"\ud83d\udd25 3.1. Injection Attacks (SQL, NoSQL, Command)","text":"<ul> <li>\ud83d\udea6 Prevention:<ul> <li>\u2705 Input validation and sanitization.</li> <li>\ud83d\udd25 Use parameterized queries.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#32-broken-authentication-authorization","title":"\ud83d\udd25 3.2. Broken Authentication &amp; Authorization","text":"<ul> <li>\ud83d\udea6 Prevention:<ul> <li>\u2705 Strong authentication mechanisms (OAuth, JWT).</li> <li>\ud83d\udd25 Proper session management.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#33-excessive-data-exposure","title":"\ud83d\udd25 3.3. Excessive Data Exposure","text":"<ul> <li>\ud83d\udea6 Prevention:<ul> <li>\u2705 Return only necessary data.</li> <li>\ud83d\udd25 Use pagination to limit data returned.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#34-lack-of-rate-limiting","title":"\ud83d\udd25 3.4. Lack of Rate Limiting","text":"<ul> <li>\ud83d\udea6 Prevention:<ul> <li>\u2705 Use API gateways with rate limiting.</li> <li>\ud83d\udd25 Implement throttling mechanisms.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#4-security-in-api-design-patterns","title":"\ud83d\ude80 4. Security in API Design Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#41-zero-trust-architecture","title":"\ud83d\udd25 4.1. Zero Trust Architecture","text":"<ul> <li>\u2705 Never trust, always verify.</li> <li>\ud83d\udd25 Continuous authentication and authorization.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#42-secure-by-design-principles","title":"\ud83d\udd25 4.2. Secure by Design Principles","text":"<ul> <li>\u2705 Principle of Least Privilege (PoLP): Only provide necessary permissions.</li> <li>\ud83d\udd25 Fail Secure: Ensure errors do not expose sensitive data.</li> <li>\ud83d\udea6 Use Idempotency: Prevent duplicate requests.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/API-Security/#5-security-tools-for-apis-microservices","title":"\ud83d\udd25 5. Security Tools for APIs &amp; Microservices","text":"<ul> <li>\ud83d\udd25 API Gateways:<ul> <li>\u2705 Kong, Apigee, AWS API Gateway.</li> </ul> </li> <li>\ud83d\udea6 Monitoring &amp; Logging:<ul> <li>\u2705 Prometheus, Grafana, ELK Stack.</li> </ul> </li> <li>\ud83d\udd12 Security Scanners:<ul> <li>\u2705 OWASP ZAP, Postman Security Scan.</li> </ul> </li> <li>\ud83d\udd25 Penetration Testing Tools:<ul> <li>\u2705 Burp Suite, Nessus.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/","title":"\ud83d\udd25 OWASP Security \u2013 Quick Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#1-what-is-owasp","title":"\u2705 1. What is OWASP?","text":"<ul> <li>\ud83d\udd25 OWASP (Open Web Application Security Project): A non-profit organization focused on improving software security.</li> <li>\u2705 Provides tools, standards, and best practices.</li> <li>\ud83d\udd25 Most famous for OWASP Top 10 list of critical web app security risks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#2-owasp-top-10-security-risks-2023","title":"\ud83d\ude80 2. OWASP Top 10 Security Risks (2023)","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#1-broken-access-control","title":"\ud83d\udd25 1. Broken Access Control","text":"<ul> <li>\ud83d\udea6 Description: Improper enforcement of access restrictions.</li> <li>\u2705 Risks: Unauthorized access, privilege escalation.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Use proper RBAC/ABAC.</li> <li>\ud83d\udd25 Validate permissions on every request.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#2-cryptographic-failures","title":"\ud83d\udd25 2. Cryptographic Failures","text":"<ul> <li>\ud83d\udea6 Description: Insecure data storage or weak encryption.</li> <li>\u2705 Risks: Data exposure, tampering.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Use strong encryption (AES-256).</li> <li>\ud83d\udd25 Secure data in transit (TLS) and at rest.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#3-injection-attacks","title":"\ud83d\udd25 3. Injection Attacks","text":"<ul> <li>\ud83d\udea6 Description: Untrusted data executed as code.</li> <li>\u2705 Risks: SQL injection, NoSQL injection, Command injection.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Use parameterized queries.</li> <li>\ud83d\udd25 Validate and sanitize inputs.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#4-insecure-design","title":"\ud83d\udd25 4. Insecure Design","text":"<ul> <li>\ud83d\udea6 Description: Flawed security architecture.</li> <li>\u2705 Risks: Insecure business logic.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Secure by design principles.</li> <li>\ud83d\udd25 Threat modeling during development.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#5-security-misconfiguration","title":"\ud83d\udd25 5. Security Misconfiguration","text":"<ul> <li>\ud83d\udea6 Description: Insecure configurations and default settings.</li> <li>\u2705 Risks: Unauthorized access, data leaks.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Disable unnecessary features.</li> <li>\ud83d\udd25 Enforce security baselines.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#6-vulnerable-and-outdated-components","title":"\ud83d\udd25 6. Vulnerable and Outdated Components","text":"<ul> <li>\ud83d\udea6 Description: Use of unsupported or vulnerable third-party libraries.</li> <li>\u2705 Risks: Exploitable vulnerabilities.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Regularly patch and update dependencies.</li> <li>\ud83d\udd25 Use SCA (Software Composition Analysis) tools.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#7-identification-and-authentication-failures","title":"\ud83d\udd25 7. Identification and Authentication Failures","text":"<ul> <li>\ud83d\udea6 Description: Weak authentication mechanisms.</li> <li>\u2705 Risks: Account takeover, identity spoofing.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Use MFA and strong password policies.</li> <li>\ud83d\udd25 Implement proper session management.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#8-software-and-data-integrity-failures","title":"\ud83d\udd25 8. Software and Data Integrity Failures","text":"<ul> <li>\ud83d\udea6 Description: Unsigned or tampered software updates.</li> <li>\u2705 Risks: Malicious code execution.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Use code signing and integrity checks.</li> <li>\ud83d\udd25 Verify updates via secure channels.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#9-security-logging-and-monitoring-failures","title":"\ud83d\udd25 9. Security Logging and Monitoring Failures","text":"<ul> <li>\ud83d\udea6 Description: Lack of monitoring or insufficient logging.</li> <li>\u2705 Risks: Delayed attack detection.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Enable centralized logging.</li> <li>\ud83d\udd25 Use SIEM (Security Information and Event Management).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#10-server-side-request-forgery-ssrf","title":"\ud83d\udd25 10. Server-Side Request Forgery (SSRF)","text":"<ul> <li>\ud83d\udea6 Description: Server makes unintended requests to internal resources.</li> <li>\u2705 Risks: Unauthorized access, data exposure.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Use allowlists and deny direct external requests.</li> <li>\ud83d\udd25 Validate and sanitize URLs.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#3-owasp-api-security-top-10","title":"\ud83d\udea6 3. OWASP API Security Top 10","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#1-broken-object-level-authorization-bola","title":"\ud83d\udd25 1. Broken Object Level Authorization (BOLA)","text":"<ul> <li>\u2705 Risk: Unauthorized access to objects.</li> <li>\ud83d\udd25 Mitigation: RBAC and object-level checks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#2-broken-user-authentication","title":"\ud83d\udd25 2. Broken User Authentication","text":"<ul> <li>\u2705 Risk: Weak API authentication.</li> <li>\ud83d\udd25 Mitigation: Use strong authentication (OAuth 2.0).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#3-excessive-data-exposure","title":"\ud83d\udd25 3. Excessive Data Exposure","text":"<ul> <li>\u2705 Risk: Returning too much data in API responses.</li> <li>\ud83d\udd25 Mitigation: Filter API responses and use field-level encryption.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#4-lack-of-rate-limiting","title":"\ud83d\udd25 4. Lack of Rate Limiting","text":"<ul> <li>\u2705 Risk: API abuse through brute force or DoS.</li> <li>\ud83d\udd25 Mitigation: Implement rate limiting and throttling.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#4-key-owasp-tools-to-know","title":"\ud83d\udd25 4. Key OWASP Tools to Know","text":"<ul> <li>\u2705 OWASP ZAP: Automated vulnerability scanner.</li> <li>\ud83d\udd25 OWASP Dependency-Check: Identifies vulnerable libraries.</li> <li>\u2705 OWASP Defectdojo: Vulnerability management platform.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/OWASP-Security/#5-final-tips-for-interview","title":"\ud83d\ude80 5. Final Tips for Interview","text":"<ul> <li>\u2705 Know the OWASP Top 10 risks thoroughly.</li> <li>\ud83d\udd25 Explain practical mitigation techniques for common vulnerabilities.</li> <li>\ud83d\udea6 Demonstrate secure API practices and microservices security.</li> <li>\ud83d\udd25 Showcase knowledge of security tools like ZAP, Burp Suite, etc.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/","title":"\ud83d\udd25 Security Principles \u2013 Quick Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#1-cia-triad-core-security-principles","title":"\u2705 1. CIA Triad (Core Security Principles)","text":"<ul> <li>\ud83d\udd12 Confidentiality: Ensures that data is accessed only by authorized individuals.<ul> <li>\ud83d\udd39 Techniques: Encryption, Access Controls, MFA.</li> </ul> </li> <li>\ud83d\udee1\ufe0f Integrity: Ensures data is accurate and unaltered.<ul> <li>\ud83d\udd39 Techniques: Hashing, Digital Signatures, Checksums.</li> </ul> </li> <li>\ud83d\udd13 Availability: Ensures systems and data are accessible when needed.<ul> <li>\ud83d\udd39 Techniques: Redundancy, Failover, DDoS protection.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#2-authentication-authorization","title":"\ud83d\udd25 2. Authentication &amp; Authorization","text":"<ul> <li>\ud83d\udd11 Authentication: Verifies the identity of a user or system.<ul> <li>\ud83d\udd39 Types:<ul> <li>\ud83d\udd10 Password-based</li> <li>\ud83d\udcf2 Multi-Factor Authentication (MFA)</li> <li>\ud83d\udd0f Biometric (Fingerprint, Face ID)</li> </ul> </li> </ul> </li> <li>\u2705 Authorization: Determines what actions a user is allowed to perform.<ul> <li>\ud83d\udd39 RBAC: Role-Based Access Control.</li> <li>\ud83d\udd39 ABAC: Attribute-Based Access Control.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#3-security-models","title":"\u2699\ufe0f 3. Security Models","text":"<ul> <li>\ud83d\udcca Bell-LaPadula Model: Enforces confidentiality with \"no read-up, no write-down\".</li> <li>\ud83d\udd10 Biba Model: Enforces integrity with \"no write-up, no read-down\".</li> <li>\u2696\ufe0f Clark-Wilson Model: Enforces both integrity and access control by separation of duties.</li> <li>\ud83d\udeab Zero Trust Model: Assumes no implicit trust, continuous verification.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#4-encryption-cryptography","title":"\ud83d\udee1\ufe0f 4. Encryption &amp; Cryptography","text":"<ul> <li>\ud83d\udd39 Symmetric Encryption:<ul> <li>\ud83d\udd10 Single key for encryption and decryption.</li> <li>\ud83d\udd25 Algorithms: AES, DES, 3DES.</li> </ul> </li> <li>\ud83d\udd39 Asymmetric Encryption:<ul> <li>\ud83d\udd11 Public and private key pair.</li> <li>\ud83d\udd25 Algorithms: RSA, ECC.</li> </ul> </li> <li>\ud83d\udd39 Hashing:<ul> <li>\ud83d\udee1\ufe0f One-way function, ensures integrity.</li> <li>\ud83d\udd25 Algorithms: SHA-256, MD5 (deprecated).</li> </ul> </li> <li>\ud83d\udd39 Digital Signatures:<ul> <li>\u2705 Verifies authenticity and integrity.</li> <li>\ud83d\udd25 RSA, DSA algorithms.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#5-secure-coding-practices","title":"\ud83d\udea6 5. Secure Coding Practices","text":"<ul> <li>\u2705 Input Validation: Prevents SQL Injection, XSS.</li> <li>\ud83d\udd25 Output Encoding: Mitigates XSS attacks.</li> <li>\ud83d\udd12 Least Privilege: Grant minimal access necessary.</li> <li>\ud83d\udeab Avoid Hardcoding Secrets: Use secure vaults.</li> <li>\ud83d\udd10 Secure APIs:<ul> <li>\u2705 Rate limiting and throttling.</li> <li>\ud83d\udd25 OAuth and token-based authentication.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#6-secure-development-lifecycle-sdlc","title":"\ud83d\ude80 6. Secure Development Lifecycle (SDLC)","text":"<ul> <li>\ud83d\udd39 Requirements Gathering: Define security needs upfront.</li> <li>\ud83d\udd39 Design: Incorporate security principles.</li> <li>\ud83d\udd39 Implementation: Secure coding practices.</li> <li>\ud83d\udd39 Testing: Penetration testing, vulnerability scanning.</li> <li>\ud83d\udd39 Deployment: Secure deployment and monitoring.</li> <li>\ud83d\udd39 Maintenance: Regular patching and updates.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#7-network-security","title":"\ud83d\udd25 7. Network Security","text":"<ul> <li>\ud83d\udd39 Firewalls: Blocks unauthorized traffic.</li> <li>\ud83d\udd39 IDS/IPS: Detects and prevents suspicious activities.</li> <li>\ud83d\udd39 VPN: Encrypts network traffic.</li> <li>\ud83d\udd39 Network Segmentation: Reduces attack surface.</li> <li>\ud83d\udd39 DDoS Protection: Prevents service disruptions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#8-cloud-security-best-practices","title":"\u2699\ufe0f 8. Cloud Security Best Practices","text":"<ul> <li>\ud83d\udd12 Encryption: At rest and in transit.</li> <li>\u2705 IAM (Identity and Access Management): Restricts access.</li> <li>\ud83c\udf10 VPC (Virtual Private Cloud): Isolates resources.</li> <li>\ud83d\udd25 Data Loss Prevention (DLP): Prevents data leaks.</li> <li>\ud83d\ude80 Monitoring &amp; Logging: Detects anomalies.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#9-security-testing-techniques","title":"\ud83d\udd25 9. Security Testing Techniques","text":"<ul> <li>\ud83d\udd25 Penetration Testing: Simulated attacks to find vulnerabilities.</li> <li>\ud83d\udd39 Static Analysis: Reviews code without execution.</li> <li>\ud83d\udd39 Dynamic Analysis: Reviews running application behavior.</li> <li>\ud83d\udd25 Fuzz Testing: Sends random data to find bugs.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/Security-Principles/#10-incident-response-ir","title":"\u2705 10. Incident Response (IR)","text":"<ul> <li>\ud83d\udee1\ufe0f Preparation: Policies, playbooks, and tools.</li> <li>\ud83d\udea6 Detection and Analysis: Identify incidents.</li> <li>\ud83d\udd25 Containment: Isolate affected systems.</li> <li>\ud83d\udd13 Eradication: Remove threats.</li> <li>\ud83d\udd01 Recovery: Restore services.</li> <li>\u2705 Post-Incident Review: Learn and improve.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/","title":"\ud83d\udee1\ufe0f Security by Design: Building Secure Microservices from Day One","text":"<p>\ud83c\udfaf Purpose: These notes are for quick revision before your Google SSE interview \u2014 focused on designing secure systems from scratch like a Senior Engineer or Architect would.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#introduction-how-to-think-about-security-in-the-design-phase","title":"\ud83e\udde0 Introduction: How to Think About Security in the Design Phase","text":"<p>Security must be embedded from the very beginning \u2014 not added later as a patch.</p>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#start-with-the-following-principles","title":"\ud83e\udde9 Start with the Following Principles:","text":"<ul> <li> <p>\ud83d\udd0d Threat Modeling:</p> <ul> <li>Identify possible entry points and attack surfaces.</li> <li>Tools: STRIDE, DREAD, PASTA models.</li> </ul> </li> <li> <p>\ud83c\udfad Define Trust Boundaries:</p> <ul> <li>Where does data enter and exit the system?</li> <li>Where is it at risk?</li> </ul> </li> <li> <p>\ud83d\udee1 Apply Defense-in-Depth:</p> <ul> <li>Multiple layers of security (network, app, data, identity).</li> </ul> </li> <li> <p>\ud83d\udeab Least Privilege &amp; Zero Trust:</p> <ul> <li>Every service, user, and resource gets only what it needs, nothing more.</li> </ul> </li> <li> <p>\ud83e\uddf0 Assume Breach:</p> <ul> <li>Design like the system will get breached \u2014 how will it contain damage?</li> </ul> </li> <li> <p>\u2705 Security Requirements = Functional Requirements:</p> <ul> <li>Define security as part of your acceptance criteria from day one.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#authentication-authorization","title":"\ud83d\udd10 Authentication &amp; Authorization","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#authentication","title":"\u2705 Authentication","text":"<ul> <li>Use OAuth 2.0 / OIDC with a centralized Identity Provider (Keycloak, Okta, Auth0).</li> <li>Support flows like:<ul> <li>Authorization Code (for web)</li> <li>Client Credentials (for services)</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#authorization","title":"\u2705 Authorization","text":"<ul> <li>Use RBAC or ABAC with clear policies.</li> <li>Use JWTs (short-lived) for identity propagation.</li> <li>Validate token signature, expiration, audience.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#secure-communication","title":"\ud83d\udd12 Secure Communication","text":"<ul> <li>Use TLS (HTTPS) everywhere (internal + external).</li> <li>Use mTLS (mutual TLS) for internal service calls.</li> <li>Automate cert renewals (e.g., cert-manager for Kubernetes).</li> <li>Enforce strict protocol versions to avoid downgrade attacks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#secret-management","title":"\ud83e\uddf1 Secret Management","text":"<ul> <li>Use secure secret stores like:<ul> <li>HashiCorp Vault, AWS Secrets Manager, Azure Key Vault.</li> </ul> </li> <li>\ud83d\udd01 Rotate secrets and credentials regularly.</li> <li>\ud83d\udcdc Audit all access and operations on secrets.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#api-and-endpoint-security","title":"\ud83d\udce6 API and Endpoint Security","text":"<ul> <li>Use an API Gateway to:<ul> <li>Authenticate requests</li> <li>Enforce rate limits</li> <li>Validate schemas</li> </ul> </li> <li>Avoid exposing internal APIs externally.</li> <li>Sanitize and validate all input/output.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#service-to-service-security","title":"\ud83d\udd01 Service-to-Service Security","text":"<ul> <li>Use mTLS or signed JWTs for inter-service authentication.</li> <li>Enforce network policies and namespace isolation.</li> <li>Consider a Service Mesh (Istio, Linkerd) to manage security policies.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#cicd-pipeline-security","title":"\ud83e\uddea CI/CD Pipeline Security","text":"<ul> <li>Add SAST, DAST, and SCA security scans in CI.</li> <li>Sign build artifacts and verify checksums.</li> <li>Use secure base images.</li> <li>Lock down deployment access.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#container-runtime-security","title":"\ud83d\udc33 Container &amp; Runtime Security","text":"<ul> <li>Use minimal base images (e.g., distroless, Alpine).</li> <li>Run containers as non-root.</li> <li>Apply Pod Security Policies or PSA (Kubernetes).</li> <li>Enable runtime detection tools like Falco.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#data-security","title":"\ud83d\udd10 Data Security","text":"<ul> <li>\ud83d\udd12 Encrypt sensitive data:<ul> <li>At Rest (AES-256)</li> <li>In Transit (TLS)</li> </ul> </li> <li>Use managed KMS for key rotation.</li> <li>Mask PII in logs and test environments.</li> <li>Adhere to compliance standards (GDPR, HIPAA, etc.).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#monitoring-logging-response","title":"\ud83d\udcca Monitoring, Logging &amp; Response","text":"<ul> <li>Centralized logging with tools like ELK, Loki, Fluentbit.</li> <li>Integrate SIEM tools (e.g., Splunk, Datadog).</li> <li>Configure alerts for anomalies or brute force.</li> <li>Maintain an Incident Response Plan.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#must-know-concepts-for-interviews","title":"\ud83d\udd25 Must-Know Concepts for Interviews","text":""},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#zero-trust-architecture","title":"\ud83d\udd01 Zero Trust Architecture","text":"<ul> <li>Never trust; always verify.</li> <li>Fine-grained access, continuous validation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#oauth-vs-oidc","title":"\ud83e\uddfe OAuth vs OIDC","text":"<ul> <li>OAuth \u2192 Delegated authorization</li> <li>OIDC \u2192 Adds authentication layer</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#jwt-best-practices","title":"\ud83d\udd10 JWT Best Practices","text":"<ul> <li>Use short expiration + refresh.</li> <li>Never store in localStorage (use HttpOnly cookies).</li> <li>Validate <code>iss</code>, <code>aud</code>, <code>exp</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#defense-in-depth","title":"\ud83e\uddf1 Defense in Depth","text":"<ul> <li>Layered security across network, host, app, data.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#owasp-top-10","title":"\ud83e\uddfc OWASP Top 10","text":"<ul> <li>SQLi, XSS, CSRF, SSRF, Broken Auth, etc.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/DevOps/Security/microservices-security-end-to-end/#final-checklist-for-security-first-design","title":"\u2705 Final Checklist for Security-First Design","text":"Area Must-Have Security Practices Identity OAuth2 + OIDC, Centralized IdP Transport TLS + mTLS, Enforced Protocols Secrets Secret Manager, Rotation, No Hardcoding APIs Gateway Auth, Input Sanitization, Rate Limits Services mTLS, Network Policies, Scoped JWTs Containers Non-root, Minimal Base, Runtime Protection Data AES-256 + KMS, Masking, Compliance CI/CD SAST/DAST, Signed Builds, Access Control Monitoring Central Logs, Alerts, SIEM Integration <p>\ud83e\udde0 Interview Tip: Think like an attacker. Show your ability to secure every layer \u2014 from architecture to runtime. Back it with real-world examples or decisions you\u2019ve made.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/","title":"Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Core Golang</li> <li>GIN</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/","title":"Index","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/#quick-access-links","title":"\ud83d\udd17 Quick Access Links","text":"<ul> <li>\ud83d\udcd6 Table of Contents</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/#golang-backend-development-from-beginner-to-architect","title":"\ud83c\udfc6 Golang Backend Development \u2013 From Beginner to Architect \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<p>\ud83d\ude80 Why Choose Golang? - link</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/#beginner-level","title":"\ud83d\udfe2 Beginner Level","text":"<p>1\ufe0f\u20e3 Introduction to Golang 2\ufe0f\u20e3 Go Project Structure 3\ufe0f\u20e3 Data Types &amp; Variables 4\ufe0f\u20e3 Functions &amp; Methods 5\ufe0f\u20e3 Pointers &amp; Memory Management 6\ufe0f\u20e3 Structs &amp; Interfaces</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/#intermediate-level","title":"\ud83d\udd35 Intermediate Level","text":"<p>7\ufe0f\u20e3 Concurrency &amp; Goroutines 8\ufe0f\u20e3 Channels &amp; Synchronization 9\ufe0f\u20e3 Error Handling &amp; Logging \ud83d\udd1f Working with REST APIs (<code>net/http</code>) 1\ufe0f\u20e31\ufe0f\u20e3 Database Integration (PostgreSQL, MySQL, MongoDB) 1\ufe0f\u20e32\ufe0f\u20e3 Dependency Management (Go Modules) 1\ufe0f\u20e33\ufe0f\u20e3 Configuration Management 1\ufe0f\u20e34\ufe0f\u20e3 Testing in Go (unit, integration, benchmarking)</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/#advancedarchitect-level","title":"\ud83d\udd34 Advanced/Architect Level","text":"<p>1\ufe0f\u20e35\ufe0f\u20e3 Microservices Architecture in Go 1\ufe0f\u20e36\ufe0f\u20e3 gRPC vs REST APIs 1\ufe0f\u20e37\ufe0f\u20e3 Event-Driven Architecture &amp; Message Queues (Kafka, NATS, RabbitMQ) 1\ufe0f\u20e38\ufe0f\u20e3 Performance Optimization &amp; Profiling 1\ufe0f\u20e39\ufe0f\u20e3 Security Best Practices 2\ufe0f\u20e30\ufe0f\u20e3 Distributed Systems &amp; Scalability 2\ufe0f\u20e31\ufe0f\u20e3 Building CLI Tools with Go 2\ufe0f\u20e32\ufe0f\u20e3 CI/CD Pipeline for Go Applications 2\ufe0f\u20e33\ufe0f\u20e3 Cloud-Native Development (Docker, Kubernetes, Serverless) 2\ufe0f\u20e34\ufe0f\u20e3 Monitoring &amp; Observability (Prometheus, OpenTelemetry) 2\ufe0f\u20e35\ufe0f\u20e3 Go in Production \u2013 Best Practices &amp; Case Studies</p> <p>\ud83d\udca1 Next Step: Let me know which topic you\u2019d like to start with! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/#code","title":"\ud83d\udcbb Code","text":"<ol> <li>Core Golang</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>\ud83d\udccc Core Golang Udemy Course</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/0-why-Go/","title":"\ud83d\ude80 Why Choose Golang?","text":"<p>Golang (or Go) is a modern programming language known for its speed, efficiency, and scalability. Here are the top 5 reasons why it's a great choice for developers:</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/0-why-Go/#1-blazing-fast-build-time","title":"\u2705 1. Blazing-Fast Build Time \u26a1","text":"<ul> <li>Go compiles incredibly fast, making it ideal for rapid development cycles.</li> <li>Say goodbye to long waits!</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/0-why-Go/#2-lightning-fast-startup","title":"\ud83d\ude80 2. Lightning-Fast Startup \u23e9","text":"<ul> <li>Go binaries start instantly, unlike interpreted languages.</li> <li>Perfect for microservices and serverless architectures.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/0-why-Go/#3-high-performance-efficiency","title":"\u26a1 3. High Performance &amp; Efficiency \ud83d\udd25","text":"<ul> <li>Compiled to native machine code \u2192 No virtual machine overhead.</li> <li>Low memory footprint with garbage collection optimizations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/0-why-Go/#4-powerful-concurrency-model","title":"\ud83d\udd04 4. Powerful Concurrency Model \ud83d\udd79\ufe0f","text":"<ul> <li>Goroutines enable lightweight, efficient parallel execution.</li> <li>Native channel-based communication for safe concurrency.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/0-why-Go/#5-static-typing-compilation","title":"\ud83c\udfd7\ufe0f 5. Static Typing &amp; Compilation \ud83d\udee0\ufe0f","text":"<ul> <li>Type safety at compile time prevents runtime errors.</li> <li>Efficient compilation optimizes for performance and reliability.</li> </ul> <p>\u2728 Bonus: \ud83d\udd39 Cross-platform compatibility \u2013 Write once, run anywhere! \ud83d\udd39 Minimalist syntax \u2013 Clean and easy-to-read code. \ud83d\udd39 Strong standard library \u2013 Built-in tools for networking, cryptography, and more.</p> <p>\ud83d\udca1 Ready to Go? \ud83d\ude80 Start coding with Golang today!  </p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/10_working-with-rest-apis/","title":"\ud83c\udf10 Working with REST APIs (<code>net/http</code>)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/10_working-with-rest-apis/#overview","title":"\ud83d\udccc Overview","text":"<p>Go's <code>net/http</code> package provides a robust and efficient way to build RESTful APIs. It enables handling HTTP requests, routing, middleware, and response management.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/10_working-with-rest-apis/#creating-a-simple-http-server","title":"\ud83d\ude80 Creating a Simple HTTP Server","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello, World!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handler)\n    fmt.Println(\"Server running on :8080\")\n    http.ListenAndServe(\":8080\", nil)\n}\n</code></pre> <p>\u2705 Runs an HTTP server on <code>localhost:8080</code> with a simple <code>Hello, World!</code> endpoint.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/10_working-with-rest-apis/#handling-http-methods","title":"\ud83d\udee0\ufe0f Handling HTTP Methods","text":"<pre><code>func handler(w http.ResponseWriter, r *http.Request) {\n    switch r.Method {\n    case http.MethodGet:\n        fmt.Fprintln(w, \"GET request received\")\n    case http.MethodPost:\n        fmt.Fprintln(w, \"POST request received\")\n    default:\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n    }\n}\n</code></pre> <p>\u2705 Supports different HTTP methods and returns appropriate responses.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/10_working-with-rest-apis/#parsing-json-requests-sending-responses","title":"\ud83d\udce1 Parsing JSON Requests &amp; Sending Responses","text":"<pre><code>import (\n    \"encoding/json\"\n    \"net/http\"\n)\n\ntype User struct {\n    Name  string `json:\"name\"`\n    Email string `json:\"email\"`\n}\n\nfunc createUser(w http.ResponseWriter, r *http.Request) {\n    var user User\n    json.NewDecoder(r.Body).Decode(&amp;user)\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(user)\n}\n</code></pre> <p>\u2705 Reads JSON from request body and responds with the same JSON.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/10_working-with-rest-apis/#middleware-example","title":"\ud83d\udd04 Middleware Example","text":"<pre><code>func loggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        fmt.Println(\"Request received:\", r.Method, r.URL.Path)\n        next.ServeHTTP(w, r)\n    })\n}\n</code></pre> <p>\u2705 Logs incoming requests before passing them to the actual handler.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/10_working-with-rest-apis/#building-a-rest-api-with-mux-gorilla-mux-router","title":"\ud83c\udfd7\ufe0f Building a REST API with <code>mux</code> (Gorilla Mux Router)","text":"<pre><code>import (\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/users\", getUsers).Methods(\"GET\")\n    r.HandleFunc(\"/users\", createUser).Methods(\"POST\")\n    http.ListenAndServe(\":8080\", r)\n}\n</code></pre> <p>\u2705 Uses <code>mux</code> for advanced routing and HTTP method constraints.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/10_working-with-rest-apis/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use <code>http.NewServeMux()</code> for better performance in large applications. \u2714\ufe0f Handle errors properly and return appropriate status codes. \u2714\ufe0f Set <code>Content-Type</code> headers for JSON responses. \u2714\ufe0f Implement middleware for logging, authentication, and rate limiting. \u2714\ufe0f Use <code>mux</code> or <code>chi</code> for better routing management.</p> <p>\ud83d\ude80 Next Step: Explore <code>gorilla/mux</code> or <code>chi</code> for advanced API routing! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/11_database-integration/","title":"\ud83d\uddc4\ufe0f Database Integration in Go (PostgreSQL, MySQL, MongoDB)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/11_database-integration/#overview","title":"\ud83d\udccc Overview","text":"<p>Go provides excellent support for database integration using standard libraries and ORM tools. This guide covers PostgreSQL, MySQL, and MongoDB.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/11_database-integration/#connecting-to-sql-databases-postgresql-mysql","title":"\ud83d\udd17 Connecting to SQL Databases (PostgreSQL &amp; MySQL)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/11_database-integration/#using-databasesql-with-pgx-postgresql-or-mysql-driver","title":"\u2705 Using <code>database/sql</code> with <code>pgx</code> (PostgreSQL) or <code>mysql</code> driver","text":"<pre><code>package main\n\nimport (\n    \"database/sql\"\n    _ \"github.com/lib/pq\"  // PostgreSQL driver\n    _ \"github.com/go-sql-driver/mysql\" // MySQL driver\n    \"log\"\n)\n\nfunc main() {\n    dsn := \"user=youruser password=yourpass dbname=yourdb sslmode=disable\"\n    db, err := sql.Open(\"postgres\", dsn) // Use \"mysql\" for MySQL\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer db.Close()\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/11_database-integration/#using-gorm-orm-for-sql-databases","title":"\u2705 Using <code>gorm</code> (ORM for SQL databases)","text":"<pre><code>package main\n\nimport (\n    \"gorm.io/driver/postgres\"\n    \"gorm.io/driver/mysql\"\n    \"gorm.io/gorm\"\n    \"log\"\n)\n\nfunc main() {\n    dsn := \"host=localhost user=youruser password=yourpass dbname=yourdb port=5432 sslmode=disable\"\n    db, err := gorm.Open(postgres.Open(dsn), &amp;gorm.Config{}) // Use mysql.Open(dsn) for MySQL\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/11_database-integration/#connecting-to-mongodb","title":"\ud83c\udf43 Connecting to MongoDB","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/11_database-integration/#using-mongo-go-driver","title":"\u2705 Using <code>mongo-go-driver</code>","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.TODO(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer client.Disconnect(context.TODO())\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/11_database-integration/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use connection pooling (<code>database/sql</code> handles it automatically). \u2714\ufe0f Use environment variables for database credentials. \u2714\ufe0f Prefer <code>gorm</code> for rapid development, but <code>database/sql</code> for better control. \u2714\ufe0f Use indexes in MongoDB for better query performance. \u2714\ufe0f Close database connections properly to prevent leaks. \u2714\ufe0f For high-performance SQL queries, use prepared statements.</p> <p>\ud83d\ude80 Next Step: Choose your preferred database and start integrating it with your Go application! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/12_dependency-management/","title":"\ud83d\udce6 Dependency Management (Go Modules)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/12_dependency-management/#overview","title":"\ud83d\udccc Overview","text":"<p>Go Modules (<code>go mod</code>) is the standard way to manage dependencies in Go. It allows versioning, reproducible builds, and easy dependency resolution.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/12_dependency-management/#setting-up-a-go-module","title":"\ud83d\udee0\ufe0f Setting Up a Go Module","text":"<pre><code># Initialize a new Go module\n$ go mod init &lt;module-name&gt;\n</code></pre> <p>This creates a <code>go.mod</code> file, which tracks dependencies.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/12_dependency-management/#go-modules-files","title":"\ud83d\udcc2 Go Modules Files","text":"<pre><code>\ud83d\udcdc go.mod  # Tracks module path and dependencies\n\ud83d\udcdc go.sum  # Verifies dependency integrity\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/12_dependency-management/#managing-dependencies","title":"\ud83d\udd04 Managing Dependencies","text":"<ul> <li>Add a dependency:   <code>sh   go get &lt;package&gt;@&lt;version&gt;</code></li> <li>Upgrade a dependency:   <code>sh   go get -u &lt;package&gt;</code></li> <li>Remove unused dependencies:   <code>sh   go mod tidy</code></li> <li>View dependency graph:   <code>sh   go list -m all</code></li> <li>Verify dependencies:   <code>sh   go mod verify</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/12_dependency-management/#best-practices","title":"\u26a1 Best Practices","text":"<p>\u2714\ufe0f Always commit <code>go.mod</code> and <code>go.sum</code>. \u2714\ufe0f Run <code>go mod tidy</code> to remove unused dependencies. \u2714\ufe0f Use semantic versioning (<code>vX.Y.Z</code>) for stability. \u2714\ufe0f Avoid using <code>replace</code> unless necessary. \u2714\ufe0f Use <code>go work</code> for multi-module projects.</p> <p>\ud83d\ude80 Next Step: Initialize a Go module in your project and experiment with <code>go get</code>! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/13_configuration-management/","title":"\ud83d\udee0\ufe0f Configuration Management in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/13_configuration-management/#overview","title":"\ud83d\udccc Overview","text":"<p>Managing configurations properly is crucial for building scalable and maintainable Go applications. Go supports various configuration management approaches, including environment variables, config files, and third-party libraries.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/13_configuration-management/#configuration-sources","title":"\ud83c\udf1f Configuration Sources","text":"<ol> <li>Environment Variables (Recommended for 12-factor apps)</li> <li>Configuration Files (YAML, JSON, TOML, INI, etc.)</li> <li>Flags (Command-line arguments using <code>flag</code> package)</li> <li>Secret Management (Vault, AWS Secrets Manager, etc.)</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/13_configuration-management/#common-config-structure","title":"\ud83d\udcc2 Common Config Structure","text":"<pre><code>\ud83d\udce6 project-name/\n \u2523 \ud83d\udcc2 configs/          # Configuration files (YAML, JSON, ENV)\n \u2503 \u2523 \ud83d\udcdc config.dev.yaml\n \u2503 \u2523 \ud83d\udcdc config.prod.yaml\n \u2503 \u2517 \ud83d\udcdc .env\n \u2523 \ud83d\udcc2 internal/config/  # Config handling logic\n \u2523 \ud83d\udcdc main.go           # Load configuration\n \u2517 \ud83d\udcdc go.mod\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/13_configuration-management/#using-environment-variables","title":"\u26a1 Using Environment Variables","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    port := os.Getenv(\"APP_PORT\")\n    if port == \"\" {\n        port = \"8080\" // Default value\n    }\n    fmt.Println(\"Server running on port:\", port)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/13_configuration-management/#using-configuration-files-viper","title":"\ud83d\udcc4 Using Configuration Files (Viper)","text":"<p>Viper is a powerful Go package for managing configurations.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/spf13/viper\"\n)\n\nfunc main() {\n    viper.SetConfigName(\"config\") // Config filename without extension\n    viper.SetConfigType(\"yaml\")   // File format\n    viper.AddConfigPath(\"./configs\")\n\n    if err := viper.ReadInConfig(); err != nil {\n        panic(fmt.Errorf(\"fatal error config file: %w\", err))\n    }\n\n    fmt.Println(\"App Mode:\", viper.GetString(\"app.mode\"))\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/13_configuration-management/#best-practices","title":"\ud83d\udd25 Best Practices","text":"<p>\u2714\ufe0f Use environment variables for sensitive data. \u2714\ufe0f Keep config files version-controlled but exclude secrets. \u2714\ufe0f Use Viper or similar libraries for structured config management. \u2714\ufe0f Store secrets securely using Secret Managers. \u2714\ufe0f Support multiple environments (dev, staging, production). \u2714\ufe0f Validate configuration values at startup.</p> <p>\ud83d\ude80 Next Step: Implement a configuration loader in your project using Viper or environment variables! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/","title":"\ud83e\uddea Testing in Go (Unit, Integration, Benchmarking)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/#overview","title":"\ud83d\udccc Overview","text":"<p>Go provides a built-in testing framework through the <code>testing</code> package, making it easy to write unit tests, integration tests, and benchmarks.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/#go-test-file-structure","title":"\ud83c\udfd7\ufe0f Go Test File Structure","text":"<pre><code>\ud83d\udcc2 project-name/\n \u2523 \ud83d\udcc2 internal/\n \u2523 \ud83d\udcc2 pkg/\n \u2523 \ud83d\udcc2 test/           # Integration &amp; e2e tests\n \u2523 \ud83d\udcdc main.go\n \u2523 \ud83d\udcdc main_test.go    # Unit tests for main package\n \u2517 \ud83d\udcdc go.mod\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/#writing-unit-tests","title":"\u2705 Writing Unit Tests","text":"<ul> <li>Unit tests focus on individual functions and small components.</li> <li>Test files should be named with <code>_test.go</code> suffix.</li> <li>Use <code>go test ./...</code> to run all tests.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/#example-simple-unit-test","title":"\ud83d\udd39 Example: Simple Unit Test","text":"<pre><code>package mathutil\n\nimport \"testing\"\n\nfunc Add(a, b int) int {\n    return a + b\n}\n\nfunc TestAdd(t *testing.T) {\n    result := Add(2, 3)\n    expected := 5\n    if result != expected {\n        t.Errorf(\"Expected %d, got %d\", expected, result)\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/#integration-testing","title":"\ud83d\udd04 Integration Testing","text":"<ul> <li>Tests interactions between multiple components.</li> <li>Typically placed in <code>test/</code> directory.</li> <li>Can involve database, API calls, etc.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/#example-http-handler-test","title":"\ud83d\udd39 Example: HTTP Handler Test","text":"<pre><code>package handler\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n)\n\nfunc TestHelloHandler(t *testing.T) {\n    req := httptest.NewRequest(\"GET\", \"/hello\", nil)\n    w := httptest.NewRecorder()\n    HelloHandler(w, req)\n\n    if w.Code != http.StatusOK {\n        t.Errorf(\"Expected status 200, got %d\", w.Code)\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/#benchmarking-in-go","title":"\ud83d\ude80 Benchmarking in Go","text":"<ul> <li>Benchmarks help measure performance.</li> <li>Benchmark functions start with <code>Benchmark</code> and take <code>*testing.B</code>.</li> <li>Run benchmarks using <code>go test -bench .</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/#example-benchmarking-function-performance","title":"\ud83d\udd39 Example: Benchmarking Function Performance","text":"<pre><code>func BenchmarkAdd(b *testing.B) {\n    for i := 0; i &lt; b.N; i++ {\n        Add(2, 3)\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/14_testing-in-go/#best-practices","title":"\ud83d\udccc Best Practices","text":"<p>\u2714\ufe0f Keep unit tests isolated and fast. \u2714\ufe0f Use <code>t.Run()</code> for subtests. \u2714\ufe0f Leverage table-driven tests for multiple cases. \u2714\ufe0f Mock dependencies to avoid external failures. \u2714\ufe0f Use <code>go test -cover</code> for code coverage analysis. \u2714\ufe0f Benchmark only critical functions to optimize performance.</p> <p>\ud83d\ude80 Next Step: Start writing tests using <code>go test</code> and ensure your Go code is robust! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/15_microservices-architecture/","title":"\ud83c\udfd7\ufe0f Microservices Architecture in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/15_microservices-architecture/#overview","title":"\ud83d\udccc Overview","text":"<p>Microservices architecture enables scalable, maintainable, and distributed applications. Go, with its concurrency model and lightweight nature, is ideal for building microservices.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/15_microservices-architecture/#typical-microservices-structure","title":"\ud83d\udcc2 Typical Microservices Structure","text":"<pre><code>\ud83d\udce6 project-name/\n \u2523 \ud83d\udcc2 cmd/              # Entry points for services\n \u2523 \ud83d\udcc2 services/         # Business logic (each service in a separate folder)\n \u2503 \u2523 \ud83d\udcc2 user-service/\n \u2503 \u2523 \ud83d\udcc2 order-service/\n \u2503 \u2517 \ud83d\udcc2 payment-service/\n \u2523 \ud83d\udcc2 api/              # API contracts (gRPC, OpenAPI, Protobufs)\n \u2523 \ud83d\udcc2 pkg/              # Shared libraries (e.g., logging, validation)\n \u2523 \ud83d\udcc2 configs/          # Configuration files (YAML, JSON, ENV)\n \u2523 \ud83d\udcc2 migrations/       # Database migration scripts\n \u2523 \ud83d\udcc2 scripts/          # Automation &amp; DevOps scripts\n \u2523 \ud83d\udcc2 deployments/      # Kubernetes, Docker, Terraform files\n \u2523 \ud83d\udcc2 test/             # Integration &amp; unit tests\n \u2523 \ud83d\udcdc go.mod            # Go modules file\n \u2523 \ud83d\udcdc go.sum            # Dependency checksums\n \u2523 \ud83d\udcdc Makefile          # Automation (build, test, deploy)\n \u2517 \ud83d\udcdc README.md         # Documentation\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/15_microservices-architecture/#key-components-in-go-microservices","title":"\ud83d\udd04 Key Components in Go Microservices","text":"<ul> <li>Service Discovery \u2192 Use tools like Consul, etcd, or Kubernetes.</li> <li>API Gateway \u2192 Reverse proxy like Nginx, Kong, or API management tools.</li> <li>Inter-Service Communication \u2192 REST (with <code>net/http</code>) or gRPC (<code>google.golang.org/grpc</code>).</li> <li>Database per Service \u2192 Each microservice should have its own DB (SQL or NoSQL).</li> <li>Message Queue \u2192 Use Kafka, NATS, or RabbitMQ for async communication.</li> <li>Observability \u2192 Use Prometheus, OpenTelemetry, and Jaeger for logging, monitoring, and tracing.</li> <li>Resilience &amp; Fault Tolerance \u2192 Implement retries, circuit breakers (<code>go-resilience</code>).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/15_microservices-architecture/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Design services around business domains (Domain-Driven Design). \u2714\ufe0f Keep services stateless where possible. \u2714\ufe0f Use API versioning to prevent breaking changes. \u2714\ufe0f Secure APIs with JWT, OAuth2, or API keys. \u2714\ufe0f Use containerization (Docker) for service deployment. \u2714\ufe0f Automate deployments with Kubernetes &amp; CI/CD. \u2714\ufe0f Implement distributed tracing to debug inter-service communication.</p> <p>\ud83d\ude80 Next Step: Set up a microservice using <code>go mod init &lt;service-name&gt;</code> and start with a basic REST or gRPC implementation! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/16_grpc-vs-rest-apis/","title":"\ud83d\udd04 gRPC vs REST APIs","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/16_grpc-vs-rest-apis/#overview","title":"\ud83d\udccc Overview","text":"<p>Both gRPC and REST are widely used for building APIs, but they serve different use cases. This guide compares them in terms of performance, flexibility, and best practices.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/16_grpc-vs-rest-apis/#grpc-vs-rest-key-differences","title":"\u2696\ufe0f gRPC vs REST - Key Differences","text":"Feature gRPC \ud83d\udee0\ufe0f REST \ud83c\udf10 Protocol Uses HTTP/2, binary format (Protocol Buffers) Uses HTTP/1.1, text-based (JSON) Speed Faster due to HTTP/2 multiplexing &amp; binary serialization Slower due to JSON parsing &amp; request overhead Streaming Supports bi-directional streaming (client &amp; server) Limited to request-response model Contract Uses <code>.proto</code> files (strongly typed, strict schema) Uses OpenAPI/Swagger (flexible, loosely typed) Performance High efficiency, low latency Higher latency due to HTTP overhead Browser Support Not natively supported in browsers Works well in web browsers Language Support Supports multiple languages via auto-generated code Language-agnostic, but needs manual client code Use Case High-performance microservices, real-time systems Public APIs, web &amp; mobile services"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/16_grpc-vs-rest-apis/#when-to-use-what","title":"\ud83d\udccc When to Use What?","text":"<ul> <li> <p>Use gRPC if:</p> <ul> <li>You need high performance &amp; low latency.</li> <li>Real-time bidirectional communication is required (e.g., streaming data).</li> <li>Strongly typed contracts &amp; auto-generated client/server code are beneficial.</li> <li>You\u2019re building internal microservices.</li> </ul> </li> <li> <p>Use REST if:</p> <ul> <li>You need broader web compatibility (browser &amp; client-friendly APIs).</li> <li>Your API should be simple and easy to debug.</li> <li>Human readability &amp; flexibility are more important than performance.</li> <li>You're exposing public APIs for third-party developers.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/16_grpc-vs-rest-apis/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Choose gRPC for backend-to-backend communication in microservices. \u2714\ufe0f Use REST when exposing APIs to external clients &amp; browsers. \u2714\ufe0f Consider hybrid solutions (REST for external APIs, gRPC for internal services). \u2714\ufe0f Use Protocol Buffers for gRPC to ensure efficiency. \u2714\ufe0f Implement API gateways for interoperability (e.g., Envoy, gRPC-Web for browser support).</p> <p>\ud83d\ude80 Next Step: Try building a gRPC service in Go using <code>google.golang.org/grpc</code> and compare it with a REST API built using <code>net/http</code>! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/","title":"\u26a1 Event-Driven Architecture &amp; Message Queues (Kafka, NATS, RabbitMQ)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/#overview","title":"\ud83d\udccc Overview","text":"<p>Event-Driven Architecture (EDA) is a design pattern where services communicate asynchronously via events, improving scalability, flexibility, and resilience.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/#core-concepts","title":"\ud83c\udfd7\ufe0f Core Concepts","text":"<ul> <li>Event Producer \ud83c\udfa4 \u2192 Generates events.</li> <li>Event Broker/Queue \ud83d\udcec \u2192 Manages event distribution.</li> <li>Event Consumer \ud83c\udfa7 \u2192 Processes events.</li> <li>Event Store \ud83c\udfea \u2192 Logs events for replay &amp; debugging.</li> <li>Event Processing \ud83d\udd04 \u2192 Can be synchronous or asynchronous.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/#popular-message-brokers","title":"\ud83d\udd17 Popular Message Brokers","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/#1-apache-kafka","title":"1\ufe0f\u20e3 Apache Kafka \ud83e\udd84","text":"<p>\u2714\ufe0f Distributed, high-throughput message queue. \u2714\ufe0f Persistent storage via logs. \u2714\ufe0f Pub/Sub model with consumer groups. \u2714\ufe0f Ideal for real-time streaming &amp; event sourcing. \ud83d\udd39 Go Client: Sarama</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/#2-nats","title":"2\ufe0f\u20e3 NATS \ud83d\ude80","text":"<p>\u2714\ufe0f Lightweight, high-performance messaging system. \u2714\ufe0f Low-latency with at-most-once delivery. \u2714\ufe0f Suited for microservices &amp; IoT. \ud83d\udd39 Go Client: NATS Go</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/#3-rabbitmq","title":"3\ufe0f\u20e3 RabbitMQ \ud83d\udc07","text":"<p>\u2714\ufe0f Traditional message broker with strong routing. \u2714\ufe0f Supports complex messaging patterns (e.g., direct, topic, fanout). \u2714\ufe0f Durable message persistence. \ud83d\udd39 Go Client: AMQP</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/#implementing-event-driven-systems-in-go","title":"\u2699\ufe0f Implementing Event-Driven Systems in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/#1-using-kafka-example","title":"1\ufe0f\u20e3 Using Kafka (Example)","text":"<pre><code>package main\n\nimport (\n    \"github.com/Shopify/sarama\"\n    \"log\"\n)\n\nfunc main() {\n    producer, err := sarama.NewSyncProducer([]string{\"localhost:9092\"}, nil)\n    if err != nil {\n        log.Fatal(\"Error creating producer:\", err)\n    }\n    defer producer.Close()\n\n    msg := &amp;sarama.ProducerMessage{\n        Topic: \"events\",\n        Value: sarama.StringEncoder(\"Hello, Kafka!\")\n    }\n    _, _, err = producer.SendMessage(msg)\n    if err != nil {\n        log.Fatal(\"Failed to send message:\", err)\n    }\n    log.Println(\"Message sent successfully\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/17_event-driven-architecture/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use Kafka for large-scale streaming &amp; event sourcing. \u2714\ufe0f Use NATS for lightweight pub/sub &amp; microservices. \u2714\ufe0f Use RabbitMQ for transactional message processing. \u2714\ufe0f Implement retry mechanisms &amp; dead-letter queues. \u2714\ufe0f Log &amp; monitor events using Prometheus &amp; OpenTelemetry.</p> <p>\ud83d\ude80 Next Step: Choose a broker, set up a local instance, and integrate it into your Go app! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/","title":"\u26a1 Performance Optimization &amp; Profiling in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#overview","title":"\ud83d\udccc Overview","text":"<p>Optimizing performance in Go involves efficient memory management, CPU utilization, and profiling techniques to identify bottlenecks.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#performance-optimization-techniques","title":"\ud83d\ude80 Performance Optimization Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#1-efficient-memory-usage","title":"1\ufe0f\u20e3 Efficient Memory Usage","text":"<p>\u2714\ufe0f Use sync.Pool to reuse objects and reduce GC overhead. \u2714\ufe0f Avoid unnecessary memory allocations; prefer slices over arrays when dealing with dynamic data. \u2714\ufe0f Use string builder (<code>strings.Builder</code>) for efficient string concatenation. \u2714\ufe0f Profile memory usage using <code>pprof</code> to detect leaks and inefficiencies.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#2-optimizing-concurrency","title":"2\ufe0f\u20e3 Optimizing Concurrency","text":"<p>\u2714\ufe0f Prefer goroutines over OS threads for lightweight concurrency. \u2714\ufe0f Use worker pools to control goroutine count and prevent high memory usage. \u2714\ufe0f Minimize contention on shared resources with sync.Mutex or atomic operations. \u2714\ufe0f Use channel buffering to reduce blocking in concurrent workflows.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#3-improving-cpu-performance","title":"3\ufe0f\u20e3 Improving CPU Performance","text":"<p>\u2714\ufe0f Avoid excessive context switching; batch operations when possible. \u2714\ufe0f Use Go\u2019s inlining and escape analysis (<code>go build -gcflags -m</code>). \u2714\ufe0f Optimize loops by reducing function calls inside iterations. \u2714\ufe0f Use cgo sparingly, as it adds overhead from C-to-Go calls.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#4-reducing-garbage-collection-gc-overhead","title":"4\ufe0f\u20e3 Reducing Garbage Collection (GC) Overhead","text":"<p>\u2714\ufe0f Use preallocated slices and structs to reduce heap allocations. \u2714\ufe0f Minimize short-lived object creation to avoid frequent GC cycles. \u2714\ufe0f Tune GC behavior with <code>GOGC=&lt;value&gt;</code> for specific workloads.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#profiling-benchmarking-tools","title":"\ud83d\udcca Profiling &amp; Benchmarking Tools","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#1-cpu-memory-profiling-with-pprof","title":"\ud83d\udee0\ufe0f 1. CPU &amp; Memory Profiling with <code>pprof</code>","text":"<pre><code>go test -bench=. -benchtime=5s -cpuprofile cpu.out -memprofile mem.out\n</code></pre> <p>View results:</p> <pre><code>go tool pprof -http=:8080 ./cpu.out\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#2-benchmarking-with-testing-package","title":"\ud83d\udee0\ufe0f 2. Benchmarking with <code>testing</code> Package","text":"<p>Use <code>testing.B</code> to measure function execution time:</p> <pre><code>func BenchmarkExample(b *testing.B) {\n    for i := 0; i &lt; b.N; i++ {\n        myFunction()\n    }\n}\n</code></pre> <p>Run benchmarks:</p> <pre><code>go test -bench .\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#3-race-condition-detection","title":"\ud83d\udee0\ufe0f 3. Race Condition Detection","text":"<pre><code>go run -race main.go\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/18_performance-optimization/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Profile before optimizing\u2014don\u2019t guess! \u2714\ufe0f Use <code>pprof</code> and benchmarks to identify actual bottlenecks. \u2714\ufe0f Optimize memory and CPU usage based on workload requirements. \u2714\ufe0f Minimize excessive goroutines and contention for shared resources. \u2714\ufe0f Regularly test with real-world loads to ensure sustained performance.</p> <p>\ud83d\ude80 Next Step: Integrate profiling into your CI/CD pipeline and analyze performance regularly! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/19_security-best-practices/","title":"\ud83d\udd10 Security Best Practices in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/19_security-best-practices/#overview","title":"\ud83d\udccc Overview","text":"<p>Security is critical in backend development. Follow these best practices to secure your Go applications against vulnerabilities.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/19_security-best-practices/#secure-coding-practices","title":"\ud83d\udee1\ufe0f Secure Coding Practices","text":"<p>\u2714\ufe0f Input Validation \u2013 Sanitize and validate all user inputs to prevent injection attacks. \u2714\ufe0f Escape Output \u2013 Use <code>html/template</code> for rendering HTML safely. \u2714\ufe0f Use Strong Encryption \u2013 Prefer <code>crypto</code> package over <code>math/rand</code> for cryptographic operations. \u2714\ufe0f Limit Data Exposure \u2013 Restrict sensitive data in logs and responses. \u2714\ufe0f Error Handling \u2013 Avoid exposing system details in error messages.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/19_security-best-practices/#authentication-authorization","title":"\ud83d\udd11 Authentication &amp; Authorization","text":"<p>\u2714\ufe0f Use Secure Password Hashing \u2013 Utilize <code>bcrypt</code> (<code>golang.org/x/crypto/bcrypt</code>). \u2714\ufe0f JWT Best Practices \u2013 Use strong secret keys and short expiry times. \u2714\ufe0f OAuth 2.0 &amp; OpenID Connect \u2013 Implement standard authentication flows. \u2714\ufe0f Role-Based Access Control (RBAC) \u2013 Implement granular permission management. \u2714\ufe0f Rate Limiting &amp; Throttling \u2013 Prevent brute-force attacks with <code>golang.org/x/time/rate</code>.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/19_security-best-practices/#secure-data-storage-transmission","title":"\ud83d\udd12 Secure Data Storage &amp; Transmission","text":"<p>\u2714\ufe0f Use TLS Everywhere \u2013 Enforce HTTPS with <code>crypto/tls</code>. \u2714\ufe0f Encrypt Sensitive Data \u2013 Use AES-256-GCM for data encryption. \u2714\ufe0f Secure Environment Variables \u2013 Avoid storing secrets in code; use <code>os.Getenv()</code>. \u2714\ufe0f Avoid Hardcoded Secrets \u2013 Use a secret manager (Vault, AWS Secrets Manager). \u2714\ufe0f Enable Database Security \u2013 Use parameterized queries to prevent SQL Injection.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/19_security-best-practices/#secure-api-development","title":"\ud83d\udee0\ufe0f Secure API Development","text":"<p>\u2714\ufe0f Validate API Requests \u2013 Implement input validation with <code>github.com/go-playground/validator/v10</code>. \u2714\ufe0f CORS Protection \u2013 Restrict origins using <code>github.com/gin-contrib/cors</code>. \u2714\ufe0f Rate Limiting \u2013 Prevent abuse using <code>golang.org/x/time/rate</code>. \u2714\ufe0f API Key Management \u2013 Rotate and expire API keys periodically. \u2714\ufe0f Avoid Excessive Data Exposure \u2013 Implement proper response filtering.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/19_security-best-practices/#secure-infrastructure-deployment","title":"\ud83c\udfd7\ufe0f Secure Infrastructure &amp; Deployment","text":"<p>\u2714\ufe0f Run Applications with Least Privilege \u2013 Use a non-root user. \u2714\ufe0f Use Container Security Best Practices \u2013 Regularly update base images. \u2714\ufe0f Enable Logging &amp; Monitoring \u2013 Implement structured logging with <code>log/slog</code>. \u2714\ufe0f Regular Security Audits \u2013 Use tools like <code>gosec</code> (<code>github.com/securego/gosec</code>). \u2714\ufe0f Use Web Application Firewalls (WAFs) \u2013 Protect against common attacks.</p> <p>\ud83d\ude80 Next Step: Implement these best practices in your Go applications and perform security audits regularly! \ud83d\udd0d</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/1_introduction-to-golang/","title":"\ud83c\udfc6 Introduction to Golang \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/1_introduction-to-golang/#what-is-golang","title":"\ud83d\udd39 What is Golang?","text":"<p>Go (or Golang) is an open-source, statically typed, compiled programming language designed by Google. It is known for: \u2705 Simplicity &amp; Readability \ud83d\udcdd \u2705 High Performance \u26a1 \u2705 Built-in Concurrency \ud83d\udd04 \u2705 Garbage Collection \u267b\ufe0f \u2705 Strong Standard Library \ud83d\udcda</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/1_introduction-to-golang/#why-choose-golang","title":"\ud83d\udd39 Why Choose Golang?","text":"<p>1\ufe0f\u20e3 \ud83d\ude80 Fast Compilation &amp; Execution \u2013 Compiled directly to machine code. 2\ufe0f\u20e3 \u26a1 Efficient Concurrency \u2013 Goroutines &amp; Channels for parallel execution. 3\ufe0f\u20e3 \ud83d\udee0\ufe0f Simple &amp; Readable Syntax \u2013 Easy to learn with minimal boilerplate. 4\ufe0f\u20e3 \ud83d\udce6 Strong Standard Library \u2013 Built-in support for HTTP, JSON, testing, etc. 5\ufe0f\u20e3 \ud83d\udee1\ufe0f Statically Typed \u2013 Type safety with performance benefits.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/1_introduction-to-golang/#golang-use-cases","title":"\ud83d\udd39 Golang Use Cases","text":"<p>\ud83d\udd39 Backend Development \u2013 Web APIs, microservices (e.g., Uber, Dropbox). \ud83d\udd39 Cloud Computing \u2013 Kubernetes, Docker, and Terraform are written in Go. \ud83d\udd39 Networking &amp; CLI Tools \u2013 Used in DevOps, networking tools, and automation. \ud83d\udd39 Data Processing \u2013 High-speed computation, logging, and streaming applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/1_introduction-to-golang/#hello-world-in-go","title":"\ud83d\udd39 Hello, World! in Go \ud83c\udf0d","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World! \ud83d\ude80\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/1_introduction-to-golang/#key-features-of-go","title":"\ud83d\udd39 Key Features of Go","text":"<ul> <li>\ud83d\udfe2 Garbage Collection \u2013 Automatic memory management.</li> <li>\ud83d\udfe2 Cross-Platform \u2013 Works on Windows, macOS, and Linux.</li> <li>\ud83d\udfe2 Static Linking \u2013 Single executable, no dependencies required.</li> <li>\ud83d\udfe2 Interfaces \u2013 Powerful but implicit implementation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/1_introduction-to-golang/#who-uses-golang","title":"\ud83d\udd39 Who Uses Golang? \ud83c\udf0e","text":"<ul> <li>\ud83c\udfe2 Google \u2013 Internal tools, Kubernetes </li> <li>\ud83d\ude97 Uber \u2013 High-performance microservices </li> <li>\u2601\ufe0f Dropbox \u2013 Scalable storage services </li> <li>\ud83c\udfb5 SoundCloud \u2013 API services</li> </ul> <p>\ud83d\udca1 Next Step: Ready to dive deeper? Move on to **Go Project Structure! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/","title":"\ud83c\udf0d Distributed Systems &amp; Scalability in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#overview","title":"\ud83d\udccc Overview","text":"<p>Building scalable and distributed systems in Go requires leveraging concurrency, distributed messaging, and fault tolerance strategies. This section covers key principles and best practices.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#key-principles-of-distributed-systems","title":"\u26a1 Key Principles of Distributed Systems","text":"<p>\u2714\ufe0f Scalability \u2013 Handle increased load efficiently (horizontal &amp; vertical scaling). \u2714\ufe0f Fault Tolerance \u2013 System continues working despite failures. \u2714\ufe0f Consistency \u2013 Ensure data correctness across distributed nodes. \u2714\ufe0f Availability \u2013 Minimize downtime and ensure system uptime. \u2714\ufe0f Partition Tolerance \u2013 System remains functional despite network partitions. \u2714\ufe0f Eventual Consistency \u2013 Data syncs over time in distributed databases.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#building-blocks-of-scalable-systems","title":"\ud83c\udfd7\ufe0f Building Blocks of Scalable Systems","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#1-concurrency-with-goroutines","title":"1\ufe0f\u20e3 Concurrency with Goroutines","text":"<ul> <li>Use goroutines for lightweight threading.</li> <li>Use channels for safe communication.</li> <li>Example:   <code>go   func worker(id int, jobs &lt;-chan int, results chan&lt;- int) {       for j := range jobs {           results &lt;- j * 2 // Processing job       }   }</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#2-load-balancing","title":"2\ufe0f\u20e3 Load Balancing","text":"<ul> <li>Reverse proxies: Nginx, Envoy, Traefik.</li> <li>Service discovery: Consul, etcd, Eureka.</li> <li>Load balancers: HAProxy, AWS ELB, GCP Load Balancer.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#3-distributed-messaging-event-driven-architecture","title":"3\ufe0f\u20e3 Distributed Messaging &amp; Event-Driven Architecture","text":"<ul> <li>Message Queues: Kafka, RabbitMQ, NATS.</li> <li>Pub/Sub: Google Pub/Sub, AWS SNS/SQS.</li> <li>Event-driven patterns: Saga, CQRS.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#4-caching-performance-optimization","title":"4\ufe0f\u20e3 Caching &amp; Performance Optimization","text":"<ul> <li>In-memory caching: Redis, Memcached.</li> <li>CDNs: Cloudflare, AWS CloudFront.</li> <li>Database Indexing &amp; Query Optimization.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#5-distributed-databases-storage","title":"5\ufe0f\u20e3 Distributed Databases &amp; Storage","text":"<ul> <li>SQL: PostgreSQL, CockroachDB (distributed SQL).</li> <li>NoSQL: MongoDB, Cassandra, DynamoDB.</li> <li>Object Storage: AWS S3, MinIO.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#6-observability-monitoring","title":"6\ufe0f\u20e3 Observability &amp; Monitoring","text":"<ul> <li>Logging: Logrus, Zap, Loki.</li> <li>Tracing: OpenTelemetry, Jaeger.</li> <li>Metrics: Prometheus, Grafana.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/20_distributed-systems-scalability/#best-practices-for-scalability","title":"\u2705 Best Practices for Scalability","text":"<p>\u2714\ufe0f Use horizontal scaling (more instances) before vertical scaling. \u2714\ufe0f Implement circuit breakers (Hystrix, Resilience4j) to handle failures. \u2714\ufe0f Use idempotency for safe retries. \u2714\ufe0f Implement graceful shutdowns using <code>context.Context</code>. \u2714\ufe0f Apply rate limiting (Token Bucket, Leaky Bucket) for API protection. \u2714\ufe0f Leverage containerization (Docker, Kubernetes) for scaling. \u2714\ufe0f Use sharding &amp; replication for database scaling.</p> <p>\ud83d\ude80 Next Step: Implement a distributed service with Go + Kafka + Redis for hands-on practice! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/","title":"\ud83d\udee0\ufe0f Building CLI Tools with Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#overview","title":"\ud83d\udccc Overview","text":"<p>Go is an excellent choice for building lightweight, fast, and efficient CLI tools. It provides a robust standard library and powerful third-party packages to streamline CLI development.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#project-structure-for-a-cli-tool","title":"\ud83d\udcc2 Project Structure for a CLI Tool","text":"<pre><code>\ud83d\udce6 my-cli-tool/\n \u2523 \ud83d\udcc2 cmd/          # Command implementations\n \u2523 \ud83d\udcc2 internal/     # Internal helper functions\n \u2523 \ud83d\udcc2 pkg/         # Reusable utility functions\n \u2523 \ud83d\udcdc main.go      # Entry point\n \u2523 \ud83d\udcdc go.mod       # Go modules file\n \u2523 \ud83d\udcdc go.sum       # Dependency checksums\n \u2523 \ud83d\udcdc README.md    # Documentation\n \u2523 \ud83d\udcdc Makefile     # Automation (build, test, install)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#creating-a-basic-cli-tool","title":"\ud83d\ude80 Creating a Basic CLI Tool","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#1-initialize-a-new-go-module","title":"1\ufe0f\u20e3 Initialize a New Go Module","text":"<pre><code>mkdir my-cli-tool &amp;&amp; cd my-cli-tool\ngo mod init github.com/yourusername/my-cli-tool\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#2-implement-maingo","title":"2\ufe0f\u20e3 Implement <code>main.go</code>","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    if len(os.Args) &lt; 2 {\n        fmt.Println(\"Usage: my-cli-tool &lt;command&gt;\")\n        return\n    }\n\n    switch os.Args[1] {\n    case \"hello\":\n        fmt.Println(\"Hello, CLI World!\")\n    default:\n        fmt.Println(\"Unknown command\")\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#3-build-run-the-cli-tool","title":"3\ufe0f\u20e3 Build &amp; Run the CLI Tool","text":"<pre><code>go build -o my-cli-tool\n./my-cli-tool hello\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#using-a-cli-framework-cobra","title":"\ud83d\udd25 Using a CLI Framework (<code>cobra</code>)","text":"<p>Cobra is a popular framework for building CLI applications in Go.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#1-install-cobra","title":"1\ufe0f\u20e3 Install Cobra","text":"<pre><code>go install github.com/spf13/cobra-cli@latest\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#2-initialize-a-cobra-based-cli-tool","title":"2\ufe0f\u20e3 Initialize a Cobra-based CLI Tool","text":"<pre><code>cobra-cli init my-cli-tool\ncd my-cli-tool\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#3-add-a-new-command","title":"3\ufe0f\u20e3 Add a New Command","text":"<pre><code>cobra-cli add hello\n</code></pre> <p>Modify <code>cmd/hello.go</code>:</p> <pre><code>package cmd\n\nimport (\n    \"fmt\"\n    \"github.com/spf13/cobra\"\n)\n\nvar helloCmd = &amp;cobra.Command{\n    Use:   \"hello\",\n    Short: \"Prints Hello, CLI World!\",\n    Run: func(cmd *cobra.Command, args []string) {\n        fmt.Println(\"Hello, CLI World!\")\n    },\n}\n\nfunc init() {\n    rootCmd.AddCommand(helloCmd)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#4-run-the-cobra-cli-tool","title":"4\ufe0f\u20e3 Run the Cobra CLI Tool","text":"<pre><code>go run main.go hello\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/21_building-cli-tools/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use <code>cobra</code> or <code>urfave/cli</code> for structured CLI tools. \u2714\ufe0f Follow Unix philosophy \u2013 Keep it simple and modular. \u2714\ufe0f Provide helpful error messages and <code>--help</code> flag. \u2714\ufe0f Use subcommands for extensibility. \u2714\ufe0f Implement logging and configuration management. \u2714\ufe0f Package reusable utilities inside <code>pkg/</code>.</p> <p>\ud83d\ude80 Next Step: Try building a CLI tool using <code>cobra</code> and extend it with new commands! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/22_cicd-pipeline/","title":"\ud83d\ude80 CI/CD Pipeline for Go Applications","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/22_cicd-pipeline/#overview","title":"\ud83d\udccc Overview","text":"<p>Continuous Integration and Continuous Deployment (CI/CD) automates testing, building, and deploying Go applications, ensuring faster and reliable releases.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/22_cicd-pipeline/#cicd-workflow","title":"\ud83c\udfd7\ufe0f CI/CD Workflow","text":"<pre><code>1\ufe0f\u20e3 Code Commit   \u2192 Developer pushes code to Git repository\n2\ufe0f\u20e3 Lint &amp; Format \u2192 Run `gofmt`, `golangci-lint` to check code quality\n3\ufe0f\u20e3 Unit Tests    \u2192 Execute `go test ./...` for automated testing\n4\ufe0f\u20e3 Build        \u2192 Compile Go binaries for the target environment\n5\ufe0f\u20e3 Integration Tests \u2192 Run API &amp; database tests\n6\ufe0f\u20e3 Docker Build  \u2192 Create a container image\n7\ufe0f\u20e3 Security Scan \u2192 Scan dependencies &amp; image vulnerabilities\n8\ufe0f\u20e3 Deploy       \u2192 Push the image &amp; deploy to Kubernetes/Cloud\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/22_cicd-pipeline/#setting-up-cicd-with-github-actions","title":"\ud83d\udee0\ufe0f Setting Up CI/CD with GitHub Actions","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/22_cicd-pipeline/#directory-structure","title":"\ud83d\udcc2 Directory Structure","text":"<pre><code>\ud83d\udce6 project-name/\n \u2523 \ud83d\udcc2 .github/workflows/   # CI/CD pipeline definitions\n \u2523 \ud83d\udcdc Dockerfile           # Containerization setup\n \u2523 \ud83d\udcdc Makefile             # Build automation\n \u2523 \ud83d\udcdc go.mod               # Dependency management\n \u2523 \ud83d\udcdc go.sum               # Dependency checksums\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/22_cicd-pipeline/#sample-github-actions-workflow-githubworkflowsciyml","title":"\ud83d\udcdd Sample GitHub Actions Workflow (<code>.github/workflows/ci.yml</code>)","text":"<pre><code>name: Go CI/CD Pipeline\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: 1.21\n\n      - name: Install Dependencies\n        run: go mod tidy\n\n      - name: Lint Code\n        run: golangci-lint run ./...\n\n      - name: Run Tests\n        run: go test ./... -v\n\n      - name: Build Application\n        run: go build -o app ./...\n\n      - name: Build Docker Image\n        run: docker build -t myapp:latest .\n\n      - name: Push to Docker Hub (Optional)\n        run: |\n          echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin\n          docker tag myapp:latest myrepo/myapp:latest\n          docker push myrepo/myapp:latest\n\n      - name: Deploy to Kubernetes (Optional)\n        run: kubectl apply -f k8s/deployment.yaml\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/22_cicd-pipeline/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use <code>golangci-lint</code> for static analysis. \u2714\ufe0f Run tests before building the app. \u2714\ufe0f Automate builds using <code>Makefile</code>. \u2714\ufe0f Use Docker for containerized deployments. \u2714\ufe0f Store secrets securely (e.g., GitHub Secrets, AWS Secrets Manager). \u2714\ufe0f Automate deployment with Kubernetes, Terraform, or Ansible.</p> <p>\ud83d\ude80 Next Step: Implement this pipeline in your Go project and automate your deployments! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/","title":"\u2601\ufe0f Cloud-Native Development in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#overview","title":"\ud83d\udccc Overview","text":"<p>Cloud-native development focuses on building scalable, resilient, and efficient applications using modern cloud technologies like Docker, Kubernetes, and Serverless.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#docker-containerizing-go-apps","title":"\ud83d\udc33 Docker \u2013 Containerizing Go Apps","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#why-docker","title":"\u2705 Why Docker?","text":"<p>\u2714\ufe0f Ensures consistency across environments. \u2714\ufe0f Lightweight and portable. \u2714\ufe0f Simplifies dependency management.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#typical-dockerfile-for-a-go-app","title":"\ud83d\udcc2 Typical Dockerfile for a Go App","text":"<pre><code># Base image\nFROM golang:1.21 AS builder\nWORKDIR /app\n\n# Copy and build\nCOPY . .\nRUN go mod tidy &amp;&amp; go build -o app\n\n# Create a minimal runtime image\nFROM alpine:latest\nWORKDIR /root/\nCOPY --from=builder /app/app .\nCMD [\"./app\"]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#commands","title":"\ud83d\ude80 Commands","text":"<pre><code># Build Docker image\ndocker build -t my-go-app .\n\n# Run container\ndocker run -p 8080:8080 my-go-app\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#kubernetes-orchestrating-go-apps","title":"\u2638\ufe0f Kubernetes \u2013 Orchestrating Go Apps","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#why-kubernetes","title":"\u2705 Why Kubernetes?","text":"<p>\u2714\ufe0f Auto-scaling and self-healing. \u2714\ufe0f Efficient resource management. \u2714\ufe0f Declarative infrastructure with YAML.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#sample-kubernetes-deployment","title":"\ud83d\udcc2 Sample Kubernetes Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: go-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: go-app\n  template:\n    metadata:\n      labels:\n        app: go-app\n    spec:\n      containers:\n      - name: go-app\n        image: my-go-app:latest\n        ports:\n        - containerPort: 8080\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#commands_1","title":"\ud83d\ude80 Commands","text":"<pre><code># Apply deployment\nkubectl apply -f deployment.yaml\n\n# Check running pods\nkubectl get pods\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#serverless-go-in-faas-function-as-a-service","title":"\u26a1 Serverless \u2013 Go in FaaS (Function as a Service)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#why-serverless","title":"\u2705 Why Serverless?","text":"<p>\u2714\ufe0f Pay-per-execution model. \u2714\ufe0f No infrastructure management. \u2714\ufe0f Scales automatically.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#running-go-serverless-with-aws-lambda","title":"\ud83d\ude80 Running Go Serverless with AWS Lambda","text":"<ul> <li>Write a Go function using AWS Lambda runtime.</li> <li>Package &amp; deploy using AWS SAM or Serverless Framework.</li> </ul> <pre><code>package main\n\nimport (\n    \"context\"\n    \"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context) (string, error) {\n    return \"Hello from Go Lambda!\", nil\n}\n\nfunc main() {\n    lambda.Start(handler)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#deploying","title":"\ud83d\ude80 Deploying","text":"<pre><code># Build for AWS Lambda\nGOOS=linux GOARCH=amd64 go build -o main\n\n# Zip and upload\nzip function.zip main\naws lambda create-function --function-name goLambda --zip-file fileb://function.zip --handler main --runtime go1.x\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/23_cloud-native-development/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Keep Docker images lightweight. \u2714\ufe0f Use multi-stage builds to reduce image size. \u2714\ufe0f Define resource limits in Kubernetes for optimal performance. \u2714\ufe0f Optimize cold start time for serverless functions. \u2714\ufe0f Use environment variables for config management.</p> <p>\ud83d\ude80 Next Step: Start containerizing your Go app and deploy it on Kubernetes or Serverless! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/24_monitoring-observability/","title":"\ud83d\udcca Monitoring &amp; Observability in Go (Prometheus, OpenTelemetry)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/24_monitoring-observability/#overview","title":"\ud83d\udccc Overview","text":"<p>Monitoring and observability are essential for identifying performance issues, tracking system health, and debugging production incidents in Go applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/24_monitoring-observability/#observability-pillars","title":"\ud83d\udd0d Observability Pillars","text":"<p>1\ufe0f\u20e3 Logs \u2192 Structured event records. 2\ufe0f\u20e3 Metrics \u2192 Quantitative performance data. 3\ufe0f\u20e3 Tracing \u2192 End-to-end request tracking.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/24_monitoring-observability/#prometheus-for-metrics","title":"\ud83d\ude80 Prometheus for Metrics","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/24_monitoring-observability/#installation-setup","title":"\ud83d\udce6 Installation &amp; Setup","text":"<p>1\ufe0f\u20e3 Install Prometheus:</p> <pre><code>brew install prometheus # macOS\nsudo apt install prometheus # Linux (Debian-based)\n</code></pre> <p>2\ufe0f\u20e3 Configure <code>prometheus.yml</code>:</p> <pre><code>scrape_configs:\n  - job_name: 'go_app'\n    static_configs:\n      - targets: ['localhost:8080']\n</code></pre> <p>3\ufe0f\u20e3 Expose metrics in Go using <code>prometheus</code> package:</p> <pre><code>import (\n    \"github.com/prometheus/client_golang/prometheus\"\n    \"github.com/prometheus/client_golang/prometheus/promhttp\"\n    \"net/http\"\n)\n\nvar requests = prometheus.NewCounter(\n    prometheus.CounterOpts{\n        Name: \"http_requests_total\",\n        Help: \"Total number of HTTP requests\",\n    })\n\nfunc main() {\n    prometheus.MustRegister(requests)\n    http.Handle(\"/metrics\", promhttp.Handler())\n    http.ListenAndServe(\":8080\", nil)\n}\n</code></pre> <p>4\ufe0f\u20e3 Run Prometheus &amp; access <code>http://localhost:9090</code>.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/24_monitoring-observability/#opentelemetry-for-tracing-logs","title":"\ud83d\udee0\ufe0f OpenTelemetry for Tracing &amp; Logs","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/24_monitoring-observability/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>go get go.opentelemetry.io/otel\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/24_monitoring-observability/#instrumenting-go-code","title":"\ud83d\udd27 Instrumenting Go Code","text":"<pre><code>import (\n    \"go.opentelemetry.io/otel\"\n    \"go.opentelemetry.io/otel/exporters/stdout\"\n    \"go.opentelemetry.io/otel/trace\"\n)\n\nfunc initTracer() trace.Tracer {\n    exporter, _ := stdout.New(stdout.WithPrettyPrint())\n    provider := otel.GetTracerProvider()\n    return provider.Tracer(\"go-app\")\n}\n\nfunc main() {\n    tracer := initTracer()\n    ctx, span := tracer.Start(context.Background(), \"main\")\n    defer span.End()\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/24_monitoring-observability/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use Prometheus for real-time metrics collection. \u2714\ufe0f Integrate Grafana for visualization. \u2714\ufe0f Implement OpenTelemetry for tracing &amp; logs. \u2714\ufe0f Define meaningful alerts &amp; thresholds. \u2714\ufe0f Monitor application latency, error rates, and resource usage.</p> <p>\ud83d\ude80 Next Step: Set up Prometheus &amp; OpenTelemetry in your Go project and start collecting insights! \ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/","title":"\ud83d\ude80 Go in Production \u2013 Best Practices &amp; Case Studies","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#overview","title":"\ud83d\udccc Overview","text":"<p>Deploying Go applications in production requires adherence to best practices to ensure reliability, performance, and scalability. Below are key principles and real-world case studies.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#best-practices-for-go-in-production","title":"\u2705 Best Practices for Go in Production","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#1-project-structure-code-organization","title":"\ud83d\udce6 1. Project Structure &amp; Code Organization","text":"<ul> <li>Follow a clean architecture to separate concerns.</li> <li>Use Go Modules (<code>go.mod</code>) for dependency management.</li> <li>Structure project with <code>cmd/</code>, <code>internal/</code>, <code>pkg/</code> for maintainability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#2-performance-optimization","title":"\u26a1 2. Performance Optimization","text":"<ul> <li>Use goroutines efficiently for concurrency.</li> <li>Optimize memory usage with <code>sync.Pool</code>.</li> <li>Profile applications with pprof (<code>net/http/pprof</code>).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#3-error-handling-logging","title":"\ud83d\udee0\ufe0f 3. Error Handling &amp; Logging","text":"<ul> <li>Use structured logging (e.g., <code>logrus</code>, <code>zap</code>).</li> <li>Implement centralized logging (e.g., ELK, Loki, CloudWatch).</li> <li>Handle errors gracefully with <code>errors.Is()</code> and <code>errors.As()</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#4-security-best-practices","title":"\ud83d\udd12 4. Security Best Practices","text":"<ul> <li>Validate and sanitize user inputs.</li> <li>Use TLS encryption for secure communication.</li> <li>Follow least privilege access for database connections.</li> <li>Enable Go seccomp &amp; apparmor for containerized deployments.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#5-cicd-deployment","title":"\ud83d\udd04 5. CI/CD &amp; Deployment","text":"<ul> <li>Automate builds and tests using GitHub Actions, GitLab CI/CD.</li> <li>Use Docker &amp; Kubernetes for scalable deployments.</li> <li>Implement blue-green &amp; canary deployments.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#6-monitoring-observability","title":"\ud83d\udcc8 6. Monitoring &amp; Observability","text":"<ul> <li>Use Prometheus &amp; Grafana for metrics.</li> <li>Implement OpenTelemetry for distributed tracing.</li> <li>Set up centralized logging &amp; alerting.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#7-database-caching","title":"\u2699\ufe0f 7. Database &amp; Caching","text":"<ul> <li>Use connection pooling for databases (e.g., <code>pgx</code>, <code>sqlx</code>).</li> <li>Implement caching (e.g., Redis, Memcached) to reduce DB load.</li> <li>Ensure database migrations are version-controlled.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#8-scalability-load-balancing","title":"\ud83c\udf0d 8. Scalability &amp; Load Balancing","text":"<ul> <li>Use reverse proxies (e.g., Nginx, Envoy) for load balancing.</li> <li>Implement rate limiting (e.g., <code>golang.org/x/time/rate</code>).</li> <li>Optimize for horizontal scaling with stateless services.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#case-studies","title":"\ud83d\udd25 Case Studies","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#case-study-1-ubers-high-performance-go-services","title":"\ud83d\udccc Case Study 1: Uber\u2019s High-Performance Go Services","text":"<ul> <li>Uber moved from Python to Go for high-concurrency microservices.</li> <li>Reduced CPU usage by 90% with goroutines.</li> <li>Used gRPC for efficient inter-service communication.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#case-study-2-dropboxs-migration-to-go","title":"\ud83d\udccc Case Study 2: Dropbox\u2019s Migration to Go","text":"<ul> <li>Dropbox replaced Python with Go for backend services.</li> <li>Achieved faster file metadata indexing.</li> <li>Improved request latency by 50%.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/25_go-in-production/#case-study-3-cloudflares-use-of-go-for-networking","title":"\ud83d\udccc Case Study 3: Cloudflare\u2019s Use of Go for Networking","text":"<ul> <li>Go powers Cloudflare\u2019s high-performance proxies.</li> <li>Used net/http &amp; fasthttp for low-latency networking.</li> <li>Optimized memory with sync.Pool.</li> </ul> <p>\ud83d\ude80 Next Step: Start implementing these best practices in your Go applications and monitor their impact! \ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/2_go-project-structure/","title":"\ud83c\udfd7\ufe0f Go Project Structure","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/2_go-project-structure/#overview","title":"\ud83d\udccc Overview","text":"<p>Go projects follow a clean, standardized structure to ensure maintainability and scalability. Here\u2019s how you can structure your Go application efficiently.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/2_go-project-structure/#standard-go-project-layout","title":"\ud83d\udcc2 Standard Go Project Layout","text":"<pre><code>\ud83d\udce6 project-name/\n \u2523 \ud83d\udcc2 cmd/          # Main applications (entry points)\n \u2503 \u2523 \ud83d\udcc2 app1/\n \u2503 \u2517 \ud83d\udcc2 app2/\n \u2523 \ud83d\udcc2 internal/     # Private application code\n \u2523 \ud83d\udcc2 pkg/         # Reusable packages\n \u2523 \ud83d\udcc2 api/         # API definitions (Protobuf, OpenAPI, etc.)\n \u2523 \ud83d\udcc2 configs/     # Configuration files (YAML, JSON, ENV)\n \u2523 \ud83d\udcc2 migrations/  # Database migration files\n \u2523 \ud83d\udcc2 scripts/     # Automation &amp; DevOps scripts\n \u2523 \ud83d\udcc2 deployments/ # Kubernetes, Docker, Terraform files\n \u2523 \ud83d\udcc2 test/        # Test helpers &amp; integration tests\n \u2523 \ud83d\udcdc go.mod       # Go modules file\n \u2523 \ud83d\udcdc go.sum       # Dependency checksums\n \u2523 \ud83d\udcdc Makefile     # Build automation\n \u2517 \ud83d\udcdc README.md    # Project documentation\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/2_go-project-structure/#explanation-of-key-directories","title":"\ud83d\udccc Explanation of Key Directories","text":"<ul> <li><code>cmd/</code> \u2192 Contains main entry points for different applications.</li> <li><code>internal/</code> \u2192 Private code, accessible only within the module.</li> <li><code>pkg/</code> \u2192 Publicly reusable libraries.</li> <li><code>api/</code> \u2192 API contracts (e.g., gRPC Protobufs, OpenAPI specs).</li> <li><code>configs/</code> \u2192 Configuration files for different environments.</li> <li><code>migrations/</code> \u2192 Database migration scripts.</li> <li><code>scripts/</code> \u2192 DevOps and automation scripts.</li> <li><code>deployments/</code> \u2192 Infrastructure as code (Kubernetes, Terraform).</li> <li><code>test/</code> \u2192 Testing utilities and integration test cases.</li> <li><code>go.mod / go.sum</code> \u2192 Dependency management files.</li> <li><code>Makefile</code> \u2192 Task automation (build, run, test, deploy).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/2_go-project-structure/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use <code>cmd/</code> for main application entry points. \u2714\ufe0f Keep reusable logic inside <code>pkg/</code>. \u2714\ufe0f Store environment-specific configs in <code>configs/</code>. \u2714\ufe0f Separate API definitions in <code>api/</code>. \u2714\ufe0f Use <code>internal/</code> for non-public packages. \u2714\ufe0f Automate builds with <code>Makefile</code>. \u2714\ufe0f Use <code>deployments/</code> for cloud-native setups.</p> <p>\ud83d\ude80 Next Step: Set up a new Go project using <code>go mod init &lt;module-name&gt;</code> and follow this structure! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/","title":"\ud83d\udd22 Data Types &amp; Variables in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#overview","title":"\ud83d\udccc Overview","text":"<p>Go is a statically typed language with a rich set of built-in data types. Variables can be declared explicitly or inferred using type inference.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#variable-declaration","title":"\ud83c\udff7\ufe0f Variable Declaration","text":"<pre><code>var name string = \"John\"  // Explicit type declaration\nvar age int = 30          // Integer type\nvar pi float64 = 3.14     // Float type\nvar isActive bool = true  // Boolean type\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#short-declaration-type-inference","title":"\ud83d\udd39 Short Declaration (Type Inference)","text":"<pre><code>name := \"Alice\"   // Compiler infers type (string)\nage := 25         // Compiler infers type (int)\nisAdmin := false  // Compiler infers type (bool)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#multiple-variable-declaration","title":"\ud83d\udd39 Multiple Variable Declaration","text":"<pre><code>var (\n    firstName, lastName string = \"John\", \"Doe\"\n    age, height int = 30, 180\n)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#data-types-in-go","title":"\ud83d\udee0\ufe0f Data Types in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#numeric-types","title":"\ud83d\udd22 Numeric Types","text":"Type Description Example <code>int</code> Signed integer (platform-dependent) <code>var x int = 100</code> <code>int8</code> - <code>int64</code> Fixed-size signed integers <code>var y int8 = 127</code> <code>uint8</code> - <code>uint64</code> Fixed-size unsigned integers <code>var z uint16 = 65535</code> <code>float32</code>, <code>float64</code> Floating-point numbers <code>var pi float64 = 3.14</code> <code>complex64</code>, <code>complex128</code> Complex numbers <code>var c complex128 = 1 + 2i</code>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#string-type","title":"\ud83d\udd20 String Type","text":"<pre><code>var message string = \"Hello, Go!\"\nfmt.Println(len(message)) // Get string length\nfmt.Println(message[0])   // Access character (returns byte)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#boolean-type","title":"\ud83d\udd18 Boolean Type","text":"<pre><code>var isGoFun bool = true\nfmt.Println(isGoFun) // Output: true\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#composite-types","title":"\ud83c\udfd7\ufe0f Composite Types","text":"Type Description <code>array</code> Fixed-length collection of elements <code>slice</code> Dynamic-size collection (more common than arrays) <code>map</code> Key-value store (like dictionaries in Python) <code>struct</code> Custom data structure (like objects in OOP) <code>interface</code> Defines behavior for multiple types"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#example-of-composite-types","title":"\ud83d\udd39 Example of Composite Types","text":"<pre><code>// Array (fixed size)\nvar numbers [3]int = [3]int{1, 2, 3}\n\n// Slice (dynamic size)\nnames := []string{\"Alice\", \"Bob\", \"Charlie\"}\n\n// Map (key-value pair)\nuser := map[string]int{\"age\": 30, \"height\": 180}\n\n// Struct (custom type)\ntype Person struct {\n    Name string\n    Age  int\n}\nvar p = Person{\"John\", 30}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/3_data-types-variables/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use <code>:=</code> for concise variable declarations. \u2714\ufe0f Prefer <code>slice</code> over <code>array</code> for dynamic collections. \u2714\ufe0f Use <code>map</code> for fast lookups. \u2714\ufe0f Leverage <code>structs</code> for organizing complex data. \u2714\ufe0f Use explicit types where clarity is needed.</p> <p>\ud83d\ude80 Next Step: Experiment with different data types in a Go playground! \ud83c\udfd7\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/","title":"\ud83d\ude80 Functions &amp; Methods in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/#overview","title":"\ud83d\udccc Overview","text":"<p>Functions and methods are fundamental in Go for code organization and reuse. Go supports first-class functions, higher-order functions, and methods tied to structs.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/#defining-a-function","title":"\ud83d\udd39 Defining a Function","text":"<pre><code>func add(a int, b int) int {\n    return a + b\n}\n</code></pre> <p>\u2705 Multiple parameters: Can be of the same or different types. \u2705 Explicit return type: Defined after parameters. \u2705 Short syntax: If parameters share the same type, the last one can be omitted.</p> <pre><code>func add(a, b int) int { return a + b }\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/#multiple-return-values","title":"\ud83d\udd39 Multiple Return Values","text":"<pre><code>func divide(a, b int) (int, int) {\n    return a / b, a % b\n}\n</code></pre> <p>\u2705 Go allows multiple return values, useful for error handling.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/#named-return-values","title":"\ud83d\udd39 Named Return Values","text":"<pre><code>func swap(a, b string) (x, y string) {\n    x, y = b, a\n    return\n}\n</code></pre> <p>\u2705 Named return values improve readability but should be used cautiously.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/#variadic-functions","title":"\ud83d\udd39 Variadic Functions","text":"<pre><code>func sum(nums ...int) int {\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    return total\n}\n</code></pre> <p>\u2705 Accepts multiple arguments of the same type.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/#anonymous-functions-closures","title":"\ud83d\udd39 Anonymous Functions &amp; Closures","text":"<pre><code>func main() {\n    greet := func(name string) string {\n        return \"Hello, \" + name\n    }\n    fmt.Println(greet(\"Alice\"))\n}\n</code></pre> <p>\u2705 Functions can be assigned to variables and passed around.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/#methods-functions-with-receivers","title":"\ud83d\udd39 Methods (Functions with Receivers)","text":"<pre><code>type Rectangle struct {\n    width, height int\n}\n\nfunc (r Rectangle) Area() int {\n    return r.width * r.height\n}\n}\n</code></pre> <p>\u2705 Methods are functions with a receiver (value or pointer). \u2705 Use value receivers for immutable operations.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/#pointer-receivers-modify-struct-fields","title":"\ud83d\udd39 Pointer Receivers (Modify Struct Fields)","text":"<pre><code>func (r *Rectangle) Scale(factor int) {\n    r.width *= factor\n    r.height *= factor\n}\n</code></pre> <p>\u2705 Pointer receivers allow modifying struct fields directly.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/4_functions-methods/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Keep functions short and focused. \u2714\ufe0f Use named return values only when beneficial. \u2714\ufe0f Use pointer receivers for methods that modify state. \u2714\ufe0f Prefer composition over inheritance using methods. \u2714\ufe0f Leverage variadic functions where appropriate.</p> <p>\ud83d\ude80 Next Step: Start defining functions and methods in your Go project! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/5_pointers-memory-management/","title":"\ud83d\udd17 Pointers &amp; Memory Management in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/5_pointers-memory-management/#overview","title":"\ud83d\udccc Overview","text":"<p>Pointers in Go allow you to efficiently manage memory by referencing the memory address of a variable instead of copying data.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/5_pointers-memory-management/#understanding-pointers","title":"\ud83c\udfaf Understanding Pointers","text":"<ul> <li>A pointer stores the memory address of a variable.</li> <li>Use <code>&amp;</code> to get the memory address of a variable.</li> <li>Use <code>*</code> to dereference a pointer (access the value stored at the address).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/5_pointers-memory-management/#declaring-using-pointers","title":"\ud83d\udd39 Declaring &amp; Using Pointers","text":"<pre><code>package main\nimport \"fmt\"\n\nfunc main() {\n    var x int = 10\n    var p *int = &amp;x  // Pointer to x\n\n    fmt.Println(\"Value of x:\", x)\n    fmt.Println(\"Address of x:\", &amp;x)\n    fmt.Println(\"Pointer p holds address:\", p)\n    fmt.Println(\"Value at address p:\", *p)  // Dereferencing\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/5_pointers-memory-management/#function-pointers-pass-by-reference","title":"\ud83d\udd39 Function Pointers (Pass by Reference)","text":"<pre><code>func updateValue(val *int) {\n    *val = *val + 10  // Modify the original variable\n}\n\nfunc main() {\n    num := 20\n    updateValue(&amp;num)\n    fmt.Println(\"Updated num:\", num)  // Output: 30\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/5_pointers-memory-management/#structs-pointers","title":"\ud83d\udd39 Structs &amp; Pointers","text":"<pre><code>type Person struct {\n    name string\n    age  int\n}\n\nfunc updateAge(p *Person) {\n    p.age += 1\n}\n\nfunc main() {\n    p := Person{\"Alice\", 25}\n    updateAge(&amp;p)\n    fmt.Println(p)  // {Alice 26}\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/5_pointers-memory-management/#memory-management-in-go","title":"\ud83d\udee0\ufe0f Memory Management in Go","text":"<p>\u2705 Garbage Collection (GC): Go automatically manages memory using GC. \u2705 Escape Analysis: Determines whether variables should be allocated on the stack or heap. \u2705 <code>new</code> vs <code>make</code>: - <code>new(T)</code> \u2192 Allocates zeroed storage for type <code>T</code>, returns a pointer <code>*T</code>. - <code>make(T, size)</code> \u2192 Initializes slices, maps, and channels (not for structs).</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/5_pointers-memory-management/#best-practices","title":"\ud83d\udccc Best Practices","text":"<p>\u2714\ufe0f Use pointers to avoid unnecessary copying of large structs. \u2714\ufe0f Be cautious with nil pointers (<code>var p *int = nil</code>). \u2714\ufe0f Prefer value types unless mutation is required. \u2714\ufe0f Understand escape analysis for optimized memory allocation.</p> <p>\ud83d\ude80 Next Step: Experiment with pointers in Go by modifying values through function pointers! \ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/","title":"\ud83c\udfd7\ufe0f Structs &amp; Interfaces in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#overview","title":"\ud83d\udccc Overview","text":"<p>Structs and interfaces are fundamental in Go for defining custom types and achieving polymorphism.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#structs-custom-data-types","title":"\ud83c\udfd7\ufe0f Structs (Custom Data Types)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#defining-a-struct","title":"\u2705 Defining a Struct","text":"<pre><code>package main\nimport \"fmt\"\n\n// Defining a struct\ntype User struct {\n    ID    int\n    Name  string\n    Email string\n}\n\nfunc main() {\n    // Initializing a struct\n    u := User{ID: 1, Name: \"Alice\", Email: \"alice@example.com\"}\n    fmt.Println(u)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#struct-initialization-methods","title":"\ud83d\udd39 Struct Initialization Methods","text":"<pre><code>u1 := User{ID: 1, Name: \"Alice\", Email: \"alice@example.com\"} // Named fields (Recommended)\nu2 := User{2, \"Bob\", \"bob@example.com\"} // Positional fields (Not recommended)\nu3 := User{} // Empty struct (zero values)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#struct-methods","title":"\ud83d\udd39 Struct Methods","text":"<pre><code>type Rectangle struct {\n    Width, Height float64\n}\n\n// Method with value receiver\nfunc (r Rectangle) Area() float64 {\n    return r.Width * r.Height\n}\n\n// Method with pointer receiver (modifies struct)\nfunc (r *Rectangle) Scale(factor float64) {\n    r.Width *= factor\n    r.Height *= factor\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#interfaces-behavior-abstraction","title":"\ud83c\udfd7\ufe0f Interfaces (Behavior Abstraction)","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#defining-an-interface","title":"\u2705 Defining an Interface","text":"<pre><code>type Shape interface {\n    Area() float64\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#implementing-an-interface","title":"\ud83d\udd39 Implementing an Interface","text":"<pre><code>type Circle struct {\n    Radius float64\n}\n\nfunc (c Circle) Area() float64 {\n    return 3.14 * c.Radius * c.Radius\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#interface-usage","title":"\ud83d\udd39 Interface Usage","text":"<pre><code>func PrintArea(s Shape) {\n    fmt.Println(\"Area:\", s.Area())\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#empty-interface-interface","title":"\ud83d\udd39 Empty Interface (<code>interface{}</code>)","text":"<p>Used to handle any type (similar to <code>any</code> in other languages).</p> <pre><code>func PrintValue(v interface{}) {\n    fmt.Println(v)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/6_structs-interfaces/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use structs for modeling real-world entities. \u2714\ufe0f Use interfaces to define expected behavior, not just for grouping structs. \u2714\ufe0f Prefer method receivers over functions for struct behaviors. \u2714\ufe0f Avoid empty interfaces unless absolutely necessary. \u2714\ufe0f Use pointer receivers when modifying struct fields.</p> <p>\ud83d\ude80 Next Step: Practice by creating a <code>Person</code> struct and an <code>Employee</code> interface! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/","title":"\u26a1 Concurrency &amp; Goroutines in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/#overview","title":"\ud83d\udccc Overview","text":"<p>Go is designed for concurrency with goroutines and channels, making it efficient for handling multiple tasks in parallel.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/#goroutines-lightweight-threads","title":"\ud83d\ude80 Goroutines \u2013 Lightweight Threads","text":"<ul> <li>Goroutines are functions that run concurrently.</li> <li>They are lighter than OS threads and managed by the Go runtime.</li> <li>Use <code>go</code> keyword to start a goroutine.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/#example","title":"\u2705 Example:","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc printMessage(msg string) {\n    for i := 0; i &lt; 5; i++ {\n        fmt.Println(msg, i)\n        time.Sleep(time.Millisecond * 500)\n    }\n}\n\nfunc main() {\n    go printMessage(\"Goroutine\")  // Runs concurrently\n    printMessage(\"Main Function\") // Runs in main thread\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/#key-points","title":"\u26a1 Key Points:","text":"<p>\u2714\ufe0f Use <code>go</code> keyword to start a new goroutine. \u2714\ufe0f Goroutines share the same memory space (use synchronization mechanisms if needed). \u2714\ufe0f The <code>main</code> function does not wait for goroutines to finish by default.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/#synchronization-techniques","title":"\ud83d\udd04 Synchronization Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/#1-waitgroups-syncwaitgroup","title":"\ud83d\udee0\ufe0f 1. WaitGroups (sync.WaitGroup)","text":"<pre><code>import (\n    \"fmt\"\n    \"sync\"\n)\n\nvar wg sync.WaitGroup\n\nfunc worker(id int) {\n    defer wg.Done() // Decrement counter when done\n    fmt.Println(\"Worker\", id, \"started\")\n}\n\nfunc main() {\n    wg.Add(2) // Set number of goroutines to wait for\n    go worker(1)\n    go worker(2)\n    wg.Wait() // Block until all goroutines finish\n    fmt.Println(\"All workers finished\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/#2-channels-safe-communication","title":"\ud83d\udd04 2. Channels \u2013 Safe Communication","text":"<p>Channels help goroutines communicate safely.</p> <pre><code>ch := make(chan string) // Create a channel\nch &lt;- \"Hello\"           // Send data to channel\nmsg := &lt;-ch             // Receive data from channel\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/#example-sending-data-between-goroutines","title":"\ud83d\udd01 Example: Sending Data Between Goroutines","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc sendMessage(ch chan string) {\n    ch &lt;- \"Hello from Goroutine!\"\n}\n\nfunc main() {\n    ch := make(chan string)\n    go sendMessage(ch)\n    fmt.Println(&lt;-ch) // Receive message\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/7_concurrency-goroutines/#best-practices","title":"\ud83d\udd25 Best Practices","text":"<p>\u2714\ufe0f Use WaitGroups to ensure all goroutines complete before exiting. \u2714\ufe0f Prefer channels over shared memory for communication. \u2714\ufe0f Avoid goroutine leaks by properly closing channels. \u2714\ufe0f Use <code>context.Context</code> for managing goroutine lifecycle.</p> <p>\ud83c\udfaf Next Step: Practice by implementing parallel data processing using goroutines! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/","title":"\ud83d\udd04 Channels &amp; Synchronization in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#overview","title":"\ud83d\udccc Overview","text":"<p>Golang uses channels to enable safe communication between goroutines and avoid race conditions. Synchronization techniques like WaitGroups and Mutexes ensure proper concurrency control.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#channels","title":"\ud83d\udce6 Channels","text":"<p>Channels act as typed pipelines to send and receive data between goroutines.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#declaring-a-channel","title":"\ud83d\udccc Declaring a Channel","text":"<pre><code>ch := make(chan int) // Unbuffered channel\nchBuffered := make(chan string, 5) // Buffered channel with capacity 5\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#sending-receiving-data","title":"\ud83d\udd04 Sending &amp; Receiving Data","text":"<pre><code>ch &lt;- 10  // Sending data\nx := &lt;-ch // Receiving data\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#closing-a-channel","title":"\u26a0\ufe0f Closing a Channel","text":"<pre><code>close(ch) // Prevents further sends but allows remaining receives\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#non-blocking-operations-using-select","title":"\u23f3 Non-Blocking Operations (Using <code>select</code>)","text":"<pre><code>select {\ncase msg := &lt;-ch:\n    fmt.Println(\"Received:\", msg)\ncase &lt;-time.After(2 * time.Second):\n    fmt.Println(\"Timeout!\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#synchronization-techniques","title":"\ud83c\udfd7\ufe0f Synchronization Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#1-waitgroups-for-goroutine-completion","title":"1\ufe0f\u20e3 WaitGroups (For Goroutine Completion)","text":"<pre><code>var wg sync.WaitGroup\nwg.Add(2) // Add number of goroutines\n\ngo func() {\n    defer wg.Done() // Mark as done\n    fmt.Println(\"Task 1 completed\")\n}()\n\ngo func() {\n    defer wg.Done()\n    fmt.Println(\"Task 2 completed\")\n}()\n\nwg.Wait() // Block until all goroutines finish\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#2-mutex-for-critical-sections","title":"2\ufe0f\u20e3 Mutex (For Critical Sections)","text":"<pre><code>var mu sync.Mutex\nvar counter int\n\nfunc increment() {\n    mu.Lock()\n    counter++\n    mu.Unlock()\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#3-channel-based-synchronization","title":"3\ufe0f\u20e3 Channel-Based Synchronization","text":"<pre><code>done := make(chan bool)\n\ngo func() {\n    fmt.Println(\"Work done\")\n    done &lt;- true // Signal completion\n}()\n\n&lt;-done // Wait for signal\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/8_channels-synchronization/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Use unbuffered channels for synchronous communication. \u2714\ufe0f Use buffered channels when sending multiple values asynchronously. \u2714\ufe0f Always close channels when no longer needed. \u2714\ufe0f Prefer channels over mutexes for safe communication. \u2714\ufe0f Use WaitGroups when waiting for multiple goroutines. \u2714\ufe0f Avoid deadlocks by structuring channel operations carefully.</p> <p>\ud83d\ude80 Next Step: Practice with channels by implementing a producer-consumer model! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/","title":"\ud83d\udea8 Error Handling &amp; Logging in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#overview","title":"\ud83d\udccc Overview","text":"<p>Error handling in Go follows a simple, explicit approach using <code>error</code> values. Logging is essential for debugging and monitoring applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#error-handling-in-go","title":"\ud83d\udee0\ufe0f Error Handling in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#standard-error-handling","title":"\u2705 Standard Error Handling","text":"<pre><code>package main\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\nfunc divide(a, b int) (int, error) {\n    if b == 0 {\n        return 0, errors.New(\"division by zero is not allowed\")\n    }\n    return a / b, nil\n}\n\nfunc main() {\n    result, err := divide(10, 0)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n    fmt.Println(\"Result:\", result)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#using-fmterrorf-for-contextual-errors","title":"\ud83c\udfaf Using <code>fmt.Errorf</code> for Contextual Errors","text":"<pre><code>import \"fmt\"\nerr := fmt.Errorf(\"failed to process request: %w\", originalErr)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#custom-error-types","title":"\ud83c\udfad Custom Error Types","text":"<pre><code>import \"fmt\"\n\ntype CustomError struct {\n    Code    int\n    Message string\n}\n\nfunc (e *CustomError) Error() string {\n    return fmt.Sprintf(\"[Error %d]: %s\", e.Code, e.Message)\n}\n\nfunc main() {\n    err := &amp;CustomError{Code: 404, Message: \"Resource Not Found\"}\n    fmt.Println(err)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#logging-in-go","title":"\ud83d\udcdc Logging in Go","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#using-the-standard-log-package","title":"\ud83d\udcdd Using the Standard <code>log</code> Package","text":"<pre><code>import \"log\"\n\nfunc main() {\n    log.Println(\"This is an info message\")\n    log.Fatal(\"This will exit the program\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#advanced-logging-with-logrus","title":"\ud83d\ude80 Advanced Logging with <code>logrus</code>","text":"<pre><code>import (\n    \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n    log := logrus.New()\n    log.SetLevel(logrus.InfoLevel)\n    log.WithFields(logrus.Fields{\n        \"user\": \"admin\",\n    }).Info(\"User logged in\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#structured-logging-with-zap","title":"\ud83d\udcca Structured Logging with <code>zap</code>","text":"<pre><code>import (\n    \"go.uber.org/zap\"\n)\n\nfunc main() {\n    logger, _ := zap.NewProduction()\n    defer logger.Sync()\n    logger.Info(\"Application started\", zap.String(\"version\", \"1.0.0\"))\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Core-Golang/Notes/9_error-handling-logging/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2714\ufe0f Always return errors explicitly (<code>error</code> type). \u2714\ufe0f Use <code>fmt.Errorf</code> to wrap errors with context. \u2714\ufe0f Implement custom error types where necessary. \u2714\ufe0f Prefer structured logging (<code>logrus</code>, <code>zap</code>) for production. \u2714\ufe0f Log errors with stack trace for better debugging. \u2714\ufe0f Avoid <code>panic</code> in production code unless absolutely necessary.</p> <p>\ud83d\ude80 Next Step: Integrate structured logging (<code>zap</code> or <code>logrus</code>) in your Go project! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/","title":"Index","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/#_1","title":"Index","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/#gin-framework-from-beginner-to-advanced","title":"\ud83d\udccc Gin Framework \u2013 From Beginner to Advanced \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/#quick-access-links","title":"Quick Access Links","text":"<ul> <li>Contents</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/#table-of-contents","title":"\ud83c\udfc6 Table of Contents","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/#beginner-level","title":"\ud83d\udfe2 Beginner Level","text":"<p>1\ufe0f\u20e3 Introduction to Gin &amp; Setup 2\ufe0f\u20e3 Basic Routing &amp; Handlers 3\ufe0f\u20e3 Query Parameters &amp; Path Parameters 4\ufe0f\u20e3 Request Body &amp; JSON Handling 5\ufe0f\u20e3 Response Formatting &amp; Status Codes 6\ufe0f\u20e3 Middleware in Gin</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/#intermediate-level","title":"\ud83d\udd35 Intermediate Level","text":"<p>7\ufe0f\u20e3 Gin Context &amp; Lifecycle 8\ufe0f\u20e3 Grouping Routes &amp; Versioning 9\ufe0f\u20e3 Error Handling &amp; Recovery Middleware \ud83d\udd1f Logging with Gin 1\ufe0f\u20e31\ufe0f\u20e3 Gin with Environment Variables &amp; Configurations 1\ufe0f\u20e32\ufe0f\u20e3 Gin with Database (GORM &amp; SQL) 1\ufe0f\u20e33\ufe0f\u20e3 Authentication &amp; Authorization (JWT, Sessions) 1\ufe0f\u20e34\ufe0f\u20e3 File Upload &amp; Static Files</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/#advanced-level","title":"\ud83d\udd34 Advanced Level","text":"<p>1\ufe0f\u20e35\ufe0f\u20e3 Building RESTful APIs with Gin 1\ufe0f\u20e36\ufe0f\u20e3 Rate Limiting &amp; Security Best Practices 1\ufe0f\u20e37\ufe0f\u20e3 Gin with WebSockets 1\ufe0f\u20e38\ufe0f\u20e3 Testing in Gin (Unit &amp; Integration) 1\ufe0f\u20e39\ufe0f\u20e3 Performance Optimization &amp; Benchmarking 2\ufe0f\u20e30\ufe0f\u20e3 Deploying Gin Apps with Docker &amp; Kubernetes 2\ufe0f\u20e31\ufe0f\u20e3 Using Gin with GraphQL 2\ufe0f\u20e32\ufe0f\u20e3 gRPC vs REST with Gin 2\ufe0f\u20e33\ufe0f\u20e3 Monitoring &amp; Observability (Prometheus, OpenTelemetry) 2\ufe0f\u20e34\ufe0f\u20e3 Microservices with Gin</p> <p>\ud83d\ude80 Next Step: Let me know which topic you\u2019d like to start with! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/#resources","title":"Resources","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/10_logging-with-gin/","title":"\ud83d\udccc Logging with Gin \ud83d\udcdd\ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/10_logging-with-gin/#default-logging-in-gin","title":"\ud83d\udd39 Default Logging in Gin \ud83c\udfd7\ufe0f","text":"<p>Gin provides built-in logging with <code>gin.Default()</code>, which includes request logging.</p> <pre><code>r := gin.Default() // Includes Logger &amp; Recovery middleware\nr.Run(\":8080\")\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/10_logging-with-gin/#custom-logger-middleware","title":"\ud83d\udd39 Custom Logger Middleware \ud83d\udee0\ufe0f","text":"<p>Customize logs for more control:</p> <pre><code>func LoggerMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        start := time.Now()\n        c.Next()\n        latency := time.Since(start)\n        status := c.Writer.Status()\n        log.Printf(\"%d | %s | %s | %s\", status, c.Request.Method, c.Request.URL, latency)\n    }\n}\n\nr := gin.New()\nr.Use(LoggerMiddleware())\nr.Run(\":8080\")\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/10_logging-with-gin/#logging-to-a-file","title":"\ud83d\udd39 Logging to a File \ud83d\udcc2","text":"<p>Redirect logs to a file instead of the console:</p> <pre><code>import (\n    \"github.com/gin-gonic/gin\"\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    f, _ := os.Create(\"gin.log\")\n    gin.DefaultWriter = io.MultiWriter(f, os.Stdout)\n\n    r := gin.Default()\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\"message\": \"pong\"})\n    })\n\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/10_logging-with-gin/#structured-logging-with-logrus","title":"\ud83d\udd39 Structured Logging with <code>logrus</code> \ud83d\udcca","text":"<p>Enhance logging with JSON output:</p> <pre><code>import (\n    \"github.com/gin-gonic/gin\"\n    \"github.com/sirupsen/logrus\"\n)\n\nvar log = logrus.New()\n\nfunc LoggerMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        log.WithFields(logrus.Fields{\n            \"method\": c.Request.Method,\n            \"path\":   c.Request.URL.Path,\n        }).Info(\"Request received\")\n        c.Next()\n    }\n}\n\nr := gin.New()\nr.Use(LoggerMiddleware())\nr.Run(\":8080\")\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/10_logging-with-gin/#summary","title":"\ud83d\udd39 Summary \ud83c\udfaf","text":"<ul> <li>\u2705 Use <code>gin.Default()</code> for built-in logging.</li> <li>\u2705 Implement custom middleware for structured logs.</li> <li>\u2705 Redirect logs to a file using <code>gin.DefaultWriter</code>.</li> <li>\u2705 Enhance logs with <code>logrus</code> for JSON formatting.</li> </ul> <p>\ud83d\udca1 Logging is essential for debugging and monitoring! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/11_gin-with-environment-variables--configurations/","title":"\ud83c\udf0d Gin with Environment Variables &amp; Configurations \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/11_gin-with-environment-variables--configurations/#why-use-environment-variables","title":"\ud83d\udd39 Why Use Environment Variables? \ud83d\udee0\ufe0f","text":"<ul> <li>Separate configuration from code</li> <li>Enhance security by keeping sensitive data outside source code</li> <li>Enable easy configuration across different environments (dev, staging, prod)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/11_gin-with-environment-variables--configurations/#loading-environment-variables","title":"\ud83d\udd39 Loading Environment Variables \ud83d\udcc2","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/11_gin-with-environment-variables--configurations/#using-os-package-built-in","title":"\u27a4 Using <code>os</code> Package (Built-in)","text":"<pre><code>import (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    port := os.Getenv(\"PORT\")\n    if port == \"\" {\n        port = \"8080\" // Default value\n    }\n    fmt.Println(\"Server running on port:\", port)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/11_gin-with-environment-variables--configurations/#using-githubcomjohogodotenv-recommended","title":"\u27a4 Using <code>github.com/joho/godotenv</code> (Recommended) \ud83d\udccc","text":"<pre><code># .env file\nPORT=8081\nDATABASE_URL=postgres://user:pass@localhost:5432/dbname\n</code></pre> <pre><code>import (\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/joho/godotenv\"\n)\n\nfunc main() {\n    err := godotenv.Load()\n    if err != nil {\n        log.Fatal(\"Error loading .env file\")\n    }\n    port := os.Getenv(\"PORT\")\n    fmt.Println(\"Server running on port:\", port)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/11_gin-with-environment-variables--configurations/#configuration-management","title":"\ud83d\udd39 Configuration Management \ud83d\udcdc","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/11_gin-with-environment-variables--configurations/#using-a-struct-for-configuration","title":"\u27a4 Using a Struct for Configuration \ud83d\udce6","text":"<pre><code>type Config struct {\n    Port        string\n    DatabaseURL string\n}\n\nfunc LoadConfig() Config {\n    return Config{\n        Port:        os.Getenv(\"PORT\"),\n        DatabaseURL: os.Getenv(\"DATABASE_URL\"),\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/11_gin-with-environment-variables--configurations/#injecting-config-into-gin","title":"\ud83d\udd39 Injecting Config into Gin \ud83c\udf10","text":"<pre><code>func main() {\n    err := godotenv.Load()\n    if err != nil {\n        log.Fatal(\"Error loading .env file\")\n    }\n\n    config := LoadConfig()\n    r := gin.Default()\n    r.GET(\"/config\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"port\":        config.Port,\n            \"databaseURL\": config.DatabaseURL,\n        })\n    })\n    r.Run(\":\" + config.Port)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/11_gin-with-environment-variables--configurations/#best-practices","title":"\ud83d\udd39 Best Practices \u2705","text":"<ul> <li>Never hardcode secrets in code repositories</li> <li>Use <code>.gitignore</code> to exclude <code>.env</code> files</li> <li>Utilize config management tools like Vault or AWS Parameter Store in production</li> </ul> <p>\ud83c\udfaf With this approach, you ensure a scalable, secure, and configurable Gin application! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/","title":"\ud83d\udccc Gin with Database (GORM &amp; SQL) \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#installing-dependencies","title":"\ud83d\udd39 Installing Dependencies \ud83d\udce6","text":"<pre><code>go get -u gorm.io/gorm gorm.io/driver/postgres\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#database-connection","title":"\ud83d\udd39 Database Connection \ud83c\udf10","text":"<pre><code>package main\n\nimport (\n    \"gorm.io/driver/postgres\"\n    \"gorm.io/gorm\"\n    \"log\"\n)\n\nvar DB *gorm.DB\n\nfunc ConnectDatabase() {\n    dsn := \"host=localhost user=postgres password=secret dbname=mydb port=5432 sslmode=disable\"\n    db, err := gorm.Open(postgres.Open(dsn), &amp;gorm.Config{})\n    if err != nil {\n        log.Fatal(\"Failed to connect to database!\", err)\n    }\n    DB = db\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#defining-models","title":"\ud83d\udd39 Defining Models \ud83d\udcc4","text":"<pre><code>type User struct {\n    ID    uint   `gorm:\"primaryKey\"`\n    Name  string `json:\"name\"`\n    Email string `json:\"email\" gorm:\"unique\"`\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#auto-migration","title":"\ud83d\udd39 Auto Migration \ud83d\udee0\ufe0f","text":"<pre><code>DB.AutoMigrate(&amp;User{})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#crud-operations","title":"\ud83d\udd39 CRUD Operations \ud83d\udd04","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#create-user","title":"\u27a4 Create User","text":"<pre><code>func CreateUser(c *gin.Context) {\n    var user User\n    if err := c.ShouldBindJSON(&amp;user); err != nil {\n        c.JSON(400, gin.H{\"error\": err.Error()})\n        return\n    }\n    DB.Create(&amp;user)\n    c.JSON(201, user)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#get-all-users","title":"\u27a4 Get All Users","text":"<pre><code>func GetUsers(c *gin.Context) {\n    var users []User\n    DB.Find(&amp;users)\n    c.JSON(200, users)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#get-user-by-id","title":"\u27a4 Get User by ID","text":"<pre><code>func GetUserByID(c *gin.Context) {\n    var user User\n    if err := DB.First(&amp;user, c.Param(\"id\")).Error; err != nil {\n        c.JSON(404, gin.H{\"error\": \"User not found\"})\n        return\n    }\n    c.JSON(200, user)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#update-user","title":"\u27a4 Update User","text":"<pre><code>func UpdateUser(c *gin.Context) {\n    var user User\n    if err := DB.First(&amp;user, c.Param(\"id\")).Error; err != nil {\n        c.JSON(404, gin.H{\"error\": \"User not found\"})\n        return\n    }\n    if err := c.ShouldBindJSON(&amp;user); err != nil {\n        c.JSON(400, gin.H{\"error\": err.Error()})\n        return\n    }\n    DB.Save(&amp;user)\n    c.JSON(200, user)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#delete-user","title":"\u27a4 Delete User","text":"<pre><code>func DeleteUser(c *gin.Context) {\n    DB.Delete(&amp;User{}, c.Param(\"id\"))\n    c.JSON(204, nil)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/12_gin-with-database-gorm--sql/#setting-up-routes","title":"\ud83d\udd39 Setting Up Routes \ud83d\udea6","text":"<pre><code>func main() {\n    r := gin.Default()\n    ConnectDatabase()\n\n    r.POST(\"/users\", CreateUser)\n    r.GET(\"/users\", GetUsers)\n    r.GET(\"/users/:id\", GetUserByID)\n    r.PUT(\"/users/:id\", UpdateUser)\n    r.DELETE(\"/users/:id\", DeleteUser)\n\n    r.Run(\":8080\")\n}\n</code></pre> <p>\ud83c\udfaf Now your Gin application is connected to PostgreSQL with GORM and supports full CRUD operations! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/","title":"\ud83d\udd10 Authentication &amp; Authorization \u2013 Gin Framework","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#overview","title":"\ud83d\udd39 Overview \ud83d\udcdd","text":"<p>Authentication and authorization are essential for securing web applications. Gin supports JWT (JSON Web Tokens) and session-based authentication.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#jwt-authentication","title":"\ud83d\udd39 JWT Authentication \ud83d\udd11","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#installing-jwt-package","title":"\u27a4 Installing JWT Package","text":"<pre><code>go get github.com/dgrijalva/jwt-go\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#generating-jwt-token","title":"\u27a4 Generating JWT Token","text":"<pre><code>package main\n\nimport (\n    \"github.com/dgrijalva/jwt-go\"\n    \"github.com/gin-gonic/gin\"\n    \"time\"\n)\n\nvar secretKey = []byte(\"your-secret-key\")\n\nfunc GenerateToken(username string) (string, error) {\n    claims := jwt.MapClaims{\n        \"username\": username,\n        \"exp\": time.Now().Add(time.Hour * 2).Unix(),\n    }\n    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n    return token.SignedString(secretKey)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#middleware-for-jwt-authentication","title":"\u27a4 Middleware for JWT Authentication \ud83d\udee1\ufe0f","text":"<pre><code>func AuthMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        tokenString := c.GetHeader(\"Authorization\")\n        if tokenString == \"\" {\n            c.JSON(401, gin.H{\"error\": \"Authorization token required\"})\n            c.Abort()\n            return\n        }\n\n        token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n            return secretKey, nil\n        })\n\n        if err != nil || !token.Valid {\n            c.JSON(401, gin.H{\"error\": \"Invalid token\"})\n            c.Abort()\n            return\n        }\n\n        c.Next()\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#session-based-authentication","title":"\ud83d\udd39 Session-Based Authentication \ud83d\udd04","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#installing-sessions-package","title":"\u27a4 Installing Sessions Package","text":"<pre><code>go get github.com/gin-contrib/sessions\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#setting-up-sessions-middleware","title":"\u27a4 Setting Up Sessions Middleware","text":"<pre><code>import (\n    \"github.com/gin-contrib/sessions\"\n    \"github.com/gin-contrib/sessions/cookie\"\n)\n\nfunc main() {\n    r := gin.Default()\n    store := cookie.NewStore([]byte(\"secret\"))\n    r.Use(sessions.Sessions(\"session_name\", store))\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#storing-retrieving-sessions","title":"\u27a4 Storing &amp; Retrieving Sessions","text":"<pre><code>func LoginHandler(c *gin.Context) {\n    session := sessions.Default(c)\n    session.Set(\"user\", \"john_doe\")\n    session.Save()\n    c.JSON(200, gin.H{\"message\": \"Logged in\"})\n}\n\nfunc AuthMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        session := sessions.Default(c)\n        user := session.Get(\"user\")\n        if user == nil {\n            c.JSON(401, gin.H{\"error\": \"Unauthorized\"})\n            c.Abort()\n            return\n        }\n        c.Next()\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#securing-routes","title":"\ud83d\udd39 Securing Routes \ud83d\udee0\ufe0f","text":"<pre><code>r.POST(\"/login\", LoginHandler)\nr.GET(\"/protected\", AuthMiddleware(), func(c *gin.Context) {\n    c.JSON(200, gin.H{\"message\": \"Welcome to protected route!\"})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/13_authentication--authorization-jwt-sessions/#conclusion","title":"\ud83d\udd39 Conclusion \u2705","text":"<ul> <li>Use JWT for token-based authentication in APIs.</li> <li>Use sessions for stateful authentication.</li> <li>Always protect sensitive routes using middleware.</li> </ul> <p>\ud83d\ude80 Now you're ready to implement secure authentication in your Gin applications!</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/14_file-upload--static-files/","title":"\ud83d\udcc2 File Upload &amp; Static Files \u2013 Gin Framework \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/14_file-upload--static-files/#file-upload-in-gin","title":"\ud83d\udd39 File Upload in Gin \ud83d\udce4","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/14_file-upload--static-files/#single-file-upload","title":"\u27a4 Single File Upload","text":"<pre><code>r.POST(\"/upload\", func(c *gin.Context) {\n    file, err := c.FormFile(\"file\")\n    if err != nil {\n        c.JSON(400, gin.H{\"error\": \"File upload failed\"})\n        return\n    }\n    c.SaveUploadedFile(file, \"./uploads/\"+file.Filename)\n    c.JSON(200, gin.H{\"message\": \"File uploaded successfully\"})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/14_file-upload--static-files/#multiple-files-upload","title":"\u27a4 Multiple Files Upload","text":"<pre><code>r.POST(\"/upload-multiple\", func(c *gin.Context) {\n    form, _ := c.MultipartForm()\n    files := form.File[\"files\"]\n\n    for _, file := range files {\n        c.SaveUploadedFile(file, \"./uploads/\"+file.Filename)\n    }\n\n    c.JSON(200, gin.H{\"message\": \"Files uploaded successfully\"})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/14_file-upload--static-files/#serving-static-files","title":"\ud83d\udd39 Serving Static Files \ud83d\udcc1","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/14_file-upload--static-files/#serving-a-static-directory","title":"\u27a4 Serving a Static Directory","text":"<pre><code>r.Static(\"/static\", \"./public\")\n</code></pre> <p>\ud83d\udccc Access files at: <code>http://localhost:8080/static/example.png</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/14_file-upload--static-files/#serving-a-single-static-file","title":"\u27a4 Serving a Single Static File","text":"<pre><code>r.StaticFile(\"/favicon.ico\", \"./resources/favicon.ico\")\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/14_file-upload--static-files/#serving-html-files","title":"\ud83d\udd39 Serving HTML Files \ud83d\udcdd","text":"<pre><code>r.LoadHTMLGlob(\"templates/*\")\n\nr.GET(\"/home\", func(c *gin.Context) {\n    c.HTML(200, \"index.html\", gin.H{\"title\": \"Welcome\"})\n})\n</code></pre> <p>\ud83d\udccc Templates Directory Structure:</p> <pre><code>project/\n\u2502\u2500\u2500 main.go\n\u2502\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 index.html\n</code></pre> <p>\ud83d\udd39 Best Practices: - Always validate uploaded files before saving. - Set proper MIME types for served static files. - Use <code>LoadHTMLGlob()</code> or <code>LoadHTMLFiles()</code> for templating.</p> <p>\ud83d\ude80 Now you're ready to handle file uploads and serve static content in Gin!</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/","title":"\ud83c\udfc6 Building RESTful APIs with Gin \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#introduction","title":"\ud83d\udccc Introduction","text":"<p>Gin is a high-performance web framework for Go, ideal for building RESTful APIs due to its simplicity, speed, and middleware support.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#setting-up-a-gin-api","title":"\ud83d\udee0\ufe0f Setting Up a Gin API","text":"<pre><code>package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n    r := gin.Default() // Create a Gin router instance\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\"message\": \"pong\"})\n    })\n    r.Run(\":8080\") // Run the server on port 8080\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#structuring-a-restful-api","title":"\ud83d\udccc Structuring a RESTful API","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#project-structure","title":"\ud83d\udd39 Project Structure","text":"<pre><code>/project-root\n\u2502\u2500\u2500 main.go\n\u2502\u2500\u2500 /controllers\n\u2502   \u251c\u2500\u2500 user_controller.go\n\u2502\u2500\u2500 /models\n\u2502   \u251c\u2500\u2500 user.go\n\u2502\u2500\u2500 /routes\n\u2502   \u251c\u2500\u2500 user_routes.go\n\u2502\u2500\u2500 /services\n\u2502   \u251c\u2500\u2500 user_service.go\n\u2502\u2500\u2500 go.mod\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#defining-models","title":"\ud83d\udd39 Defining Models \ud83c\udfd7\ufe0f","text":"<pre><code>package models\n\ntype User struct {\n    ID    uint   `json:\"id\"`\n    Name  string `json:\"name\"`\n    Email string `json:\"email\"`\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#creating-handlers-controllers","title":"\ud83d\udd39 Creating Handlers (Controllers) \ud83c\udfaf","text":"<pre><code>package controllers\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"net/http\"\n    \"project/models\"\n)\n\nvar users []models.User\n\nfunc GetUsers(c *gin.Context) {\n    c.JSON(http.StatusOK, users)\n}\n\nfunc CreateUser(c *gin.Context) {\n    var newUser models.User\n    if err := c.ShouldBindJSON(&amp;newUser); err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n        return\n    }\n    users = append(users, newUser)\n    c.JSON(http.StatusCreated, newUser)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#setting-up-routes","title":"\ud83d\udd39 Setting Up Routes \ud83d\udee4\ufe0f","text":"<pre><code>package routes\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"project/controllers\"\n)\n\nfunc RegisterRoutes(r *gin.Engine) {\n    userRoutes := r.Group(\"/users\")\n    {\n        userRoutes.GET(\"/\", controllers.GetUsers)\n        userRoutes.POST(\"/\", controllers.CreateUser)\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#initializing-the-server","title":"\ud83d\udd39 Initializing the Server \ud83d\ude80","text":"<pre><code>package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"project/routes\"\n)\n\nfunc main() {\n    r := gin.Default()\n    routes.RegisterRoutes(r)\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#middleware-integration","title":"\ud83d\udd39 Middleware Integration \ud83d\udee1\ufe0f","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#logging-recovery-middleware","title":"\u27a4 Logging &amp; Recovery Middleware","text":"<pre><code>r := gin.New()\nr.Use(gin.Logger(), gin.Recovery())\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#custom-authentication-middleware","title":"\u27a4 Custom Authentication Middleware","text":"<pre><code>func AuthMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        token := c.GetHeader(\"Authorization\")\n        if token == \"\" {\n            c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n            c.Abort()\n            return\n        }\n        c.Next()\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#connecting-to-a-database-gorm-postgresql","title":"\ud83d\udd39 Connecting to a Database (GORM + PostgreSQL) \ud83d\uddc4\ufe0f","text":"<pre><code>import (\n    \"gorm.io/driver/postgres\"\n    \"gorm.io/gorm\"\n)\n\nvar DB *gorm.DB\n\nfunc InitDB() {\n    dsn := \"host=localhost user=postgres password=yourpassword dbname=yourdb port=5432 sslmode=disable\"\n    var err error\n    DB, err = gorm.Open(postgres.Open(dsn), &amp;gorm.Config{})\n    if err != nil {\n        panic(\"Failed to connect to database!\")\n    }\n    DB.AutoMigrate(&amp;models.User{})\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#running-testing-the-api","title":"\ud83d\udd39 Running &amp; Testing the API \ud83e\uddea","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#start-the-server","title":"\u27a4 Start the Server","text":"<pre><code>go run main.go\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#test-with-curl","title":"\u27a4 Test with Curl","text":"<pre><code>curl -X GET http://localhost:8080/users\ncurl -X POST http://localhost:8080/users -H \"Content-Type: application/json\" -d '{\"name\":\"John\", \"email\":\"john@example.com\"}'\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#test-with-postman","title":"\u27a4 Test with Postman","text":"<ul> <li>Open Postman</li> <li>Send GET and POST requests to <code>http://localhost:8080/users</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/15_building-restful-apis-with-gin/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>Building RESTful APIs with Gin is efficient and scalable. By following best practices like structured project organization, middleware, and database integration, we can create production-ready applications seamlessly! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/","title":"\ud83d\udd10 Rate Limiting &amp; Security Best Practices \u2013 Gin Framework","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#introduction","title":"\ud83d\ude80 Introduction","text":"<p>Security is a crucial aspect of any web application. The Gin framework provides multiple ways to enhance security, including rate limiting, CORS handling, authentication, and data validation.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#1-rate-limiting-to-prevent-abuse","title":"\u26a1 1. Rate Limiting to Prevent Abuse \ud83d\udee1\ufe0f","text":"<p>Rate limiting helps prevent DDoS attacks and API abuse by restricting the number of requests a user can make within a specific time.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#implementing-rate-limiting-using-golangorgxtimerate","title":"\u27a4 Implementing Rate Limiting Using <code>golang.org/x/time/rate</code>","text":"<pre><code>package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"golang.org/x/time/rate\"\n    \"net/http\"\n)\n\nvar limiter = rate.NewLimiter(1, 3) // 1 request per second, burst of 3\n\nfunc rateLimitMiddleware(c *gin.Context) {\n    if !limiter.Allow() {\n        c.JSON(http.StatusTooManyRequests, gin.H{\"error\": \"Too many requests\"})\n        c.Abort()\n        return\n    }\n    c.Next()\n}\n\nfunc main() {\n    r := gin.Default()\n    r.Use(rateLimitMiddleware) // Apply middleware globally\n\n    r.GET(\"/\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\"message\": \"Welcome!\"})\n    })\n\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#2-secure-headers-for-enhanced-security","title":"\ud83d\udd12 2. Secure Headers for Enhanced Security \ud83d\udee1\ufe0f","text":"<p>Setting security-related headers helps mitigate XSS, clickjacking, and other vulnerabilities.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#adding-secure-headers-middleware","title":"\u27a4 Adding Secure Headers Middleware","text":"<pre><code>func secureHeadersMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        c.Writer.Header().Set(\"X-Frame-Options\", \"DENY\")\n        c.Writer.Header().Set(\"X-XSS-Protection\", \"1; mode=block\")\n        c.Writer.Header().Set(\"X-Content-Type-Options\", \"nosniff\")\n        c.Next()\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#3-enforcing-https-hsts","title":"\ud83d\udee1\ufe0f 3. Enforcing HTTPS &amp; HSTS \ud83d\udd10","text":"<p>Redirect all HTTP traffic to HTTPS to ensure secure communication.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#redirect-http-to-https","title":"\u27a4 Redirect HTTP to HTTPS","text":"<pre><code>func redirectToHTTPS() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        if c.Request.TLS == nil {\n            c.Redirect(http.StatusMovedPermanently, \"https://\"+c.Request.Host+c.Request.RequestURI)\n            c.Abort()\n        }\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#4-api-authentication-authorization","title":"\ud83d\udd11 4. API Authentication &amp; Authorization","text":"<p>Use JWT (JSON Web Tokens) or OAuth2 for authentication to secure APIs.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#implementing-jwt-authentication","title":"\u27a4 Implementing JWT Authentication","text":"<pre><code>import (\n    \"github.com/dgrijalva/jwt-go\"\n    \"time\"\n)\n\ntype Claims struct {\n    Username string `json:\"username\"`\n    jwt.StandardClaims\n}\n\nfunc generateJWT(username string) (string, error) {\n    expirationTime := time.Now().Add(24 * time.Hour)\n    claims := &amp;Claims{\n        Username: username,\n        StandardClaims: jwt.StandardClaims{\n            ExpiresAt: expirationTime.Unix(),\n        },\n    }\n    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n    return token.SignedString([]byte(\"your-secret-key\"))\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#5-input-validation-to-prevent-sql-injection-xss","title":"\ud83d\udee0\ufe0f 5. Input Validation to Prevent SQL Injection &amp; XSS \ud83d\udea8","text":"<p>Validate input to prevent malicious attacks.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#using-binding-for-input-validation","title":"\u27a4 Using <code>binding</code> for Input Validation","text":"<pre><code>type LoginForm struct {\n    Username string `json:\"username\" binding:\"required,min=3,max=20\"`\n    Password string `json:\"password\" binding:\"required,min=6\"`\n}\n\nr.POST(\"/login\", func(c *gin.Context) {\n    var form LoginForm\n    if err := c.ShouldBindJSON(&amp;form); err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n        return\n    }\n    c.JSON(http.StatusOK, gin.H{\"message\": \"Login successful\"})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/16_rate-limiting--security-best-practices/#conclusion","title":"\u2705 Conclusion","text":"<p>Implementing rate limiting, secure headers, HTTPS enforcement, authentication, and input validation strengthens your Gin applications against attacks. Security should always be a top priority in production applications! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/17_gin-with-websockets/","title":"\ud83d\udd25 Gin with WebSockets \u2013 Real-time Communication \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/17_gin-with-websockets/#introduction","title":"\ud83d\udccc Introduction","text":"<p>WebSockets enable full-duplex, real-time communication between a client and a server. In Gin, we use the <code>github.com/gorilla/websocket</code> package to implement WebSockets.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/17_gin-with-websockets/#installing-dependencies","title":"\ud83d\udd39 Installing Dependencies \ud83d\udce6","text":"<pre><code>go get -u github.com/gorilla/websocket\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/17_gin-with-websockets/#setting-up-a-websocket-server","title":"\ud83d\udd39 Setting Up a WebSocket Server \ud83d\udda5\ufe0f","text":"<pre><code>package main\n\nimport (\n    \"net/http\"\n    \"github.com/gin-gonic/gin\"\n    \"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n    CheckOrigin: func(r *http.Request) bool {\n        return true // Allow all origins (modify for security)\n    },\n}\n\nfunc handleWebSocket(c *gin.Context) {\n    conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n    if err != nil {\n        return\n    }\n    defer conn.Close()\n\n    for {\n        messageType, msg, err := conn.ReadMessage()\n        if err != nil {\n            break\n        }\n        conn.WriteMessage(messageType, msg) // Echo the message back\n    }\n}\n\nfunc main() {\n    r := gin.Default()\n    r.GET(\"/ws\", handleWebSocket)\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/17_gin-with-websockets/#websocket-client-example-javascript","title":"\ud83d\udd39 WebSocket Client Example (JavaScript) \ud83d\udda5\ufe0f","text":"<pre><code>const socket = new WebSocket(\"ws://localhost:8080/ws\");\n\nsocket.onopen = () =&gt; {\n    console.log(\"Connected to server\");\n    socket.send(\"Hello, Server!\");\n};\n\nsocket.onmessage = (event) =&gt; {\n    console.log(\"Message from server:\", event.data);\n};\n\nsocket.onerror = (error) =&gt; {\n    console.log(\"WebSocket Error:\", error);\n};\n\nsocket.onclose = () =&gt; {\n    console.log(\"Connection closed\");\n};\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/17_gin-with-websockets/#broadcasting-messages","title":"\ud83d\udd39 Broadcasting Messages \ud83d\udce1","text":"<pre><code>type Client struct {\n    conn *websocket.Conn\n    send chan []byte\n}\n\ntype Hub struct {\n    clients    map[*Client]bool\n    broadcast  chan []byte\n    register   chan *Client\n    unregister chan *Client\n}\n\nvar hub = Hub{\n    clients:    make(map[*Client]bool),\n    broadcast:  make(chan []byte),\n    register:   make(chan *Client),\n    unregister: make(chan *Client),\n}\n\nfunc (h *Hub) run() {\n    for {\n        select {\n        case client := &lt;-h.register:\n            h.clients[client] = true\n        case client := &lt;-h.unregister:\n            if _, ok := h.clients[client]; ok {\n                delete(h.clients, client)\n                close(client.send)\n            }\n        case msg := &lt;-h.broadcast:\n            for client := range h.clients {\n                select {\n                case client.send &lt;- msg:\n                default:\n                    close(client.send)\n                    delete(h.clients, client)\n                }\n            }\n        }\n    }\n}\n\nfunc handleWebSocketBroadcast(c *gin.Context) {\n    conn, _ := upgrader.Upgrade(c.Writer, c.Request, nil)\n    client := &amp;Client{conn: conn, send: make(chan []byte, 256)}\n    hub.register &lt;- client\n    defer func() { hub.unregister &lt;- client }()\n\n    go func() {\n        for msg := range client.send {\n            client.conn.WriteMessage(websocket.TextMessage, msg)\n        }\n    }()\n\n    for {\n        _, msg, err := conn.ReadMessage()\n        if err != nil {\n            break\n        }\n        hub.broadcast &lt;- msg\n    }\n}\n\nfunc main() {\n    go hub.run()\n    r := gin.Default()\n    r.GET(\"/ws\", handleWebSocketBroadcast)\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/17_gin-with-websockets/#summary","title":"\ud83d\udd39 Summary \u2705","text":"<ul> <li>\u2705 Use <code>gorilla/websocket</code> for WebSocket support in Gin.</li> <li>\u2705 Upgrade HTTP requests to WebSocket connections.</li> <li>\u2705 Broadcast messages to multiple clients efficiently.</li> <li>\u2705 Handle real-time communication in a scalable way.</li> </ul> <p>\ud83c\udfaf Next Step: Secure WebSockets with authentication &amp; CORS restrictions! \ud83d\udd10</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/","title":"\ud83e\uddea Testing in Gin (Unit &amp; Integration) \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#introduction","title":"\ud83d\udccc Introduction","text":"<p>Testing is crucial for ensuring the reliability of Gin applications. Gin supports both unit tests (for handlers and middleware) and integration tests (for full API flows). We use Go\u2019s built-in <code>testing</code> package and <code>httptest</code> for HTTP testing.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#setting-up-testing-in-gin","title":"\ud83d\udd39 Setting Up Testing in Gin","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#import-required-packages","title":"\u27a4 Import Required Packages","text":"<pre><code>import (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n    \"github.com/gin-gonic/gin\"\n    \"github.com/stretchr/testify/assert\"\n)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#create-a-testable-router","title":"\u27a4 Create a Testable Router","text":"<pre><code>func setupRouter() *gin.Engine {\n    r := gin.Default()\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(http.StatusOK, gin.H{\"message\": \"pong\"})\n    })\n    return r\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#unit-testing","title":"\u2705 Unit Testing \ud83e\udde9","text":"<p>Unit tests focus on testing individual handlers without external dependencies.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#basic-unit-test-example","title":"\u27a4 Basic Unit Test Example","text":"<pre><code>func TestPingRoute(t *testing.T) {\n    router := setupRouter()\n    w := httptest.NewRecorder()\n    req, _ := http.NewRequest(\"GET\", \"/ping\", nil)\n\n    router.ServeHTTP(w, req)\n\n    assert.Equal(t, http.StatusOK, w.Code)\n    assert.JSONEq(t, `{\"message\":\"pong\"}`, w.Body.String())\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#integration-testing","title":"\ud83d\udd04 Integration Testing \ud83c\udf10","text":"<p>Integration tests validate multiple components working together, such as database and middleware.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#example-testing-an-api-with-dependency-injection","title":"\u27a4 Example: Testing an API with Dependency Injection","text":"<pre><code>func TestUserEndpoint(t *testing.T) {\n    router := gin.Default()\n    router.GET(\"/user/:id\", func(c *gin.Context) {\n        id := c.Param(\"id\")\n        c.JSON(http.StatusOK, gin.H{\"user_id\": id})\n    })\n\n    w := httptest.NewRecorder()\n    req, _ := http.NewRequest(\"GET\", \"/user/123\", nil)\n    router.ServeHTTP(w, req)\n\n    assert.Equal(t, http.StatusOK, w.Code)\n    assert.JSONEq(t, `{\"user_id\":\"123\"}`, w.Body.String())\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#best-practices","title":"\ud83d\udee0\ufe0f Best Practices \ud83c\udfc6","text":"<p>\u2705 Use <code>httptest</code> for simulating requests. \u2705 Use <code>testify/assert</code> for better readability. \u2705 Separate unit and integration tests. \u2705 Mock external dependencies (e.g., databases, services). \u2705 Run tests with <code>go test ./...</code> for full coverage.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/18_testing-in-gin-unit--integration/#running-the-tests","title":"\ud83d\ude80 Running the Tests","text":"<pre><code>go test -v\n</code></pre> <p>This structured approach ensures a robust and maintainable Gin application. \ud83c\udfaf Happy Testing! \u2705</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/","title":"\ud83d\ude80 Performance Optimization &amp; Benchmarking in Gin Framework","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#1-enable-release-mode","title":"\ud83d\udd39 1. Enable Release Mode \u26a1","text":"<pre><code>import \"github.com/gin-gonic/gin\"\nfunc main() {\n    gin.SetMode(gin.ReleaseMode) // Disables debug logs, improves performance\n    r := gin.Default()\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#2-use-syncpool-for-object-reuse","title":"\ud83d\udd39 2. Use <code>sync.Pool</code> for Object Reuse \u267b\ufe0f","text":"<pre><code>import (\n    \"sync\"\n    \"github.com/gin-gonic/gin\"\n)\nvar bufPool = sync.Pool{New: func() interface{} { return make([]byte, 1024) }}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#3-optimize-json-rendering","title":"\ud83d\udd39 3. Optimize JSON Rendering \ud83d\ude80","text":"<pre><code>r.GET(\"/fast-json\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\"message\": \"Optimized JSON Response\"})\n})\n</code></pre> <p>\u2714\ufe0f Avoid <code>gin.H{}</code> in high-performance apps, use <code>struct{}</code> instead.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#4-use-custom-middleware-efficiently","title":"\ud83d\udd39 4. Use Custom Middleware Efficiently \ud83c\udfd7\ufe0f","text":"<pre><code>func PerformanceMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        start := time.Now()\n        c.Next()\n        latency := time.Since(start)\n        log.Println(\"Request Latency:\", latency)\n    }\n}\n</code></pre> <p>\u2714\ufe0f Attach it to your router: <code>r.Use(PerformanceMiddleware())</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#5-connection-pooling-with-database","title":"\ud83d\udd39 5. Connection Pooling with Database \ud83d\udccc","text":"<pre><code>import \"github.com/jmoiron/sqlx\"\nvar db *sqlx.DB\nfunc init() {\n    db = sqlx.MustConnect(\"postgres\", \"dsn\")\n    db.SetMaxOpenConns(25)\n    db.SetMaxIdleConns(25)\n    db.SetConnMaxLifetime(5 * time.Minute)\n}\n</code></pre> <p>\u2714\ufe0f Reduces DB overhead, improves scalability.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#6-use-pprof-for-profiling","title":"\ud83d\udd39 6. Use <code>pprof</code> for Profiling \ud83d\udee0\ufe0f","text":"<pre><code>import _ \"net/http/pprof\"\ngo func() { http.ListenAndServe(\":6060\", nil) }()\n</code></pre> <p>\u2714\ufe0f Access profiling data at <code>http://localhost:6060/debug/pprof/</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#7-benchmarking-handlers","title":"\ud83d\udd39 7. Benchmarking Handlers \ud83d\udcca","text":"<pre><code>import \"testing\"\nfunc BenchmarkHandler(b *testing.B) {\n    w := httptest.NewRecorder()\n    req, _ := http.NewRequest(\"GET\", \"/ping\", nil)\n    for i := 0; i &lt; b.N; i++ {\n        router.ServeHTTP(w, req)\n    }\n}\n</code></pre> <p>\u2714\ufe0f Run benchmarks: <code>go test -bench .</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#8-reduce-memory-allocations","title":"\ud83d\udd39 8. Reduce Memory Allocations \ud83c\udfce\ufe0f","text":"<p>\u2714\ufe0f Use <code>sync.Pool</code> for object reuse. \u2714\ufe0f Prefer <code>strconv.Itoa()</code> over <code>fmt.Sprintf()</code>. \u2714\ufe0f Minimize string concatenations.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#9-use-a-reverse-proxy-nginx","title":"\ud83d\udd39 9. Use a Reverse Proxy (NGINX) \ud83c\udf10","text":"<p>\u2714\ufe0f Offload SSL termination. \u2714\ufe0f Improve load balancing. \u2714\ufe0f Reduce request processing time.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/19_performance-optimization--benchmarking/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>\ud83d\udd39 Use Release Mode for production. \ud83d\udd39 Optimize JSON rendering &amp; DB connections. \ud83d\udd39 Profile with pprof, benchmark with testing. \ud83d\udd39 Implement reverse proxy for efficiency.</p> <p>\ud83d\ude80 Optimized Gin apps run faster, handle more requests, and scale better!</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/","title":"\ud83d\udccc Introduction to Gin &amp; Setup \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#what-is-gin","title":"\ud83d\udd39 What is Gin? \ud83e\udd14","text":"<p>Gin is a high-performance, lightweight, and easy-to-use web framework for Go, designed for building RESTful APIs efficiently.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#key-features","title":"\u2705 Key Features","text":"<ul> <li>\ud83d\ude80 Fast \u2013 Based on <code>net/http</code>, optimized for speed.</li> <li>\ud83d\udd25 Minimalistic \u2013 Simple API with essential features.</li> <li>\ud83c\udfd7 Middleware Support \u2013 Built-in middleware like logging, recovery, and CORS.</li> <li>\ud83d\udee0 Easy Routing \u2013 Supports path parameters, query parameters, and route grouping.</li> <li>\ud83d\udca1 JSON Handling \u2013 Simplifies request/response JSON parsing.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#installing-gin","title":"\ud83d\udd39 Installing Gin \u26a1","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#prerequisites","title":"\ud83d\udd3d Prerequisites","text":"<ul> <li>\ud83d\udfe2 Install Go: Download Go</li> <li>\ud83d\udfe2 Set up Go environment (<code>GOPATH</code>, <code>GOROOT</code>)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#install-gin","title":"\ud83d\udce5 Install Gin","text":"<pre><code>go get -u github.com/gin-gonic/gin\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#creating-your-first-gin-app","title":"\ud83d\udd39 Creating Your First Gin App \ud83c\udfd7","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#basic-structure","title":"\u270d\ufe0f Basic Structure","text":"<pre><code>package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n    r := gin.Default() // Creates a default Gin router with logging &amp; recovery middleware\n\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\"message\": \"pong\"})\n    })\n\n    r.Run() // Starts the server on port 8080\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#running-the-server","title":"\ud83d\ude80 Running the Server","text":"<pre><code>go run main.go\n</code></pre> <p>\ud83d\udccc Open <code>http://localhost:8080/ping</code> in your browser or use:</p> <pre><code>curl http://localhost:8080/ping\n</code></pre> <p>\ud83d\udca1 Expected Output:</p> <pre><code>{\"message\": \"pong\"}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#gin-modes","title":"\ud83d\udd39 Gin Modes \ud83d\udee0","text":"<p>Gin supports different running modes: - \ud83d\udd39 <code>gin.DebugMode</code> (default) \u2013 Full logs, useful for development. - \ud83d\udd39 <code>gin.ReleaseMode</code> \u2013 Optimized for production (faster, fewer logs). - \ud83d\udd39 <code>gin.TestMode</code> \u2013 Used for testing purposes.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#setting-the-mode","title":"\u2705 Setting the Mode","text":"<pre><code>gin.SetMode(gin.ReleaseMode)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/1_introduction-to-gin--setup/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>\u2705 Learn about Basic Routing &amp; Handlers \ud83d\udd17</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/","title":"\ud83d\ude80 Deploying Gin Apps with Docker &amp; Kubernetes","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#1-containerizing-a-gin-app-with-docker","title":"\ud83d\udccc 1. Containerizing a Gin App with Docker \ud83d\udc33","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#create-a-dockerfile","title":"\u27a4 Create a <code>Dockerfile</code> \ud83d\udcdc","text":"<pre><code># Use an official Golang image as a build stage\nFROM golang:1.19 AS builder\nWORKDIR /app\nCOPY . .\nRUN go mod tidy &amp;&amp; go build -o main .\n\n# Use a minimal base image\nFROM alpine:latest\nWORKDIR /root/\nCOPY --from=builder /app/main .\nEXPOSE 8080\nCMD [\"./main\"]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#build-run-docker-container","title":"\u27a4 Build &amp; Run Docker Container \ud83c\udfd7\ufe0f","text":"<pre><code>docker build -t gin-app .\ndocker run -p 8080:8080 gin-app\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#2-deploying-with-kubernetes-k8s","title":"\ud83d\udccc 2. Deploying with Kubernetes (K8s) \u2638\ufe0f","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#create-a-deploymentyaml","title":"\u27a4 Create a <code>deployment.yaml</code> \ud83d\udcdc","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gin-app\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: gin-app\n  template:\n    metadata:\n      labels:\n        app: gin-app\n    spec:\n      containers:\n      - name: gin-app\n        image: gin-app:latest\n        ports:\n        - containerPort: 8080\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#create-a-serviceyaml","title":"\u27a4 Create a <code>service.yaml</code> \ud83d\udcdc","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: gin-app-service\nspec:\n  selector:\n    app: gin-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n  type: LoadBalancer\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#deploy-to-kubernetes","title":"\u27a4 Deploy to Kubernetes \ud83c\udfd7\ufe0f","text":"<pre><code>kubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#3-scaling-monitoring","title":"\ud83d\udccc 3. Scaling &amp; Monitoring \ud83d\udea6","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#scale-deployment","title":"\u27a4 Scale Deployment \ud83d\udcc8","text":"<pre><code>kubectl scale deployment gin-app --replicas=5\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#check-logs-pods","title":"\u27a4 Check Logs &amp; Pods \ud83d\udcdc","text":"<pre><code>kubectl get pods\nkubectl logs -f &lt;pod-name&gt;\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#port-forwarding-for-local-access","title":"\u27a4 Port Forwarding for Local Access \ud83d\ude80","text":"<pre><code>kubectl port-forward service/gin-app-service 8080:80\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/20_deploying-gin-apps-with-docker--kubernetes/#summary","title":"\u2705 Summary","text":"<ul> <li>\u2705 Containerized Gin app using Docker \ud83d\udc33</li> <li>\u2705 Deployed app in Kubernetes \u2638\ufe0f</li> <li>\u2705 Scaled and monitored app efficiently \ud83d\ude80</li> </ul> <p>\ud83c\udfaf Next Steps: Add CI/CD for automated deployments! \ud83d\udea2</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/","title":"\ud83d\ude80 Using Gin with GraphQL","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#introduction","title":"\ud83d\udccc Introduction","text":"<p>GraphQL is a powerful alternative to REST, allowing clients to request only the data they need. Gin can be seamlessly integrated with GraphQL using the <code>github.com/99designs/gqlgen</code> package.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#installing-dependencies","title":"\ud83d\udd39 Installing Dependencies","text":"<pre><code>go get github.com/99designs/gqlgen\ngo get github.com/gin-gonic/gin\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#setting-up-a-basic-graphql-server","title":"\ud83d\udd39 Setting Up a Basic GraphQL Server \ud83c\udfaf","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#define-the-schema-schemagraphqls","title":"\u27a4 Define the Schema (<code>schema.graphqls</code>)","text":"<pre><code>type User {\n    id: ID!\n    name: String!\n    email: String!\n}\n\ntype Query {\n    users: [User!]\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#generate-resolvers","title":"\u27a4 Generate Resolvers","text":"<pre><code>gqlgen generate\n</code></pre> <p>This command generates Go structs and resolvers based on the schema.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#implement-the-resolver-resolvergo","title":"\u27a4 Implement the Resolver (<code>resolver.go</code>)","text":"<pre><code>package graph\n\ntype Resolver struct{}\n\nfunc (r *Resolver) Query_users() []*User {\n    return []*User{\n        {ID: \"1\", Name: \"Alice\", Email: \"alice@example.com\"},\n        {ID: \"2\", Name: \"Bob\", Email: \"bob@example.com\"},\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#integrating-graphql-with-gin","title":"\ud83d\udd39 Integrating GraphQL with Gin \ud83c\udf09","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#setting-up-the-gin-router-maingo","title":"\u27a4 Setting Up the Gin Router (<code>main.go</code>)","text":"<pre><code>package main\n\nimport (\n    \"github.com/99designs/gqlgen/graphql/handler\"\n    \"github.com/99designs/gqlgen/graphql/playground\"\n    \"github.com/gin-gonic/gin\"\n    \"your_project/graph\"\n)\n\nfunc main() {\n    r := gin.Default()\n    srv := handler.NewDefaultServer(graph.NewExecutableSchema(graph.Config{Resolvers: &amp;graph.Resolver{}}))\n\n    r.POST(\"/graphql\", gin.WrapH(srv))\n    r.GET(\"/playground\", gin.WrapH(playground.Handler(\"GraphQL Playground\", \"/graphql\")))\n\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#testing-with-graphql-playground","title":"\ud83d\udd39 Testing with GraphQL Playground \ud83d\udee0\ufe0f","text":"<p>Run the server and open <code>http://localhost:8080/playground</code> to explore your GraphQL API.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#example-query","title":"\u27a4 Example Query","text":"<pre><code>query {\n    users {\n        id\n        name\n        email\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/21_using-gin-with-graphql/#conclusion","title":"\u2705 Conclusion","text":"<p>Using Gin with GraphQL enables efficient API development with flexible data fetching. \ud83d\ude80 This setup provides a solid foundation for building scalable GraphQL APIs in Golang. \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/","title":"\ud83d\ude80 gRPC vs REST with Gin \u2013 Advanced Guide","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#overview","title":"\ud83d\udd39 Overview \ud83e\uddd0","text":"<p>gRPC and REST are two popular communication protocols for building APIs. Gin primarily supports REST but can be combined with gRPC for high-performance applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#rest-api-with-gin","title":"\ud83d\udd39 REST API with Gin \ud83c\udf0d","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#characteristics","title":"\u27a4 Characteristics","text":"<p>\u2705 Human-readable (JSON/XML) \u2705 Stateless communication \u2705 Works over HTTP 1.1 \u2705 Widespread browser and client support</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#example-rest-api-in-gin","title":"\u27a4 Example: REST API in Gin","text":"<pre><code>package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"net/http\"\n)\n\nfunc main() {\n    r := gin.Default()\n    r.GET(\"/users\", func(c *gin.Context) {\n        c.JSON(http.StatusOK, gin.H{\"message\": \"User list\"})\n    })\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#grpc-with-go","title":"\ud83d\udd39 gRPC with Go \u26a1","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#characteristics_1","title":"\u27a4 Characteristics","text":"<p>\u2705 Binary protocol (Protobuf) \u2705 Faster and efficient than REST \u2705 Supports streaming &amp; bidirectional communication \u2705 Works over HTTP/2</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#example-grpc-service-definition-proto-file","title":"\u27a4 Example: gRPC Service Definition (Proto File)","text":"<pre><code>syntax = \"proto3\";\npackage user;\n\nservice UserService {\n  rpc GetUser (UserRequest) returns (UserResponse);\n}\n\nmessage UserRequest {\n  string id = 1;\n}\n\nmessage UserResponse {\n  string name = 1;\n  int32 age = 2;\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#implementing-grpc-server-in-go","title":"\u27a4 Implementing gRPC Server in Go","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net\"\n    \"google.golang.org/grpc\"\n    pb \"your_project/proto\"\n)\n\ntype server struct{\n    pb.UnimplementedUserServiceServer\n}\n\nfunc (s *server) GetUser(ctx context.Context, req *pb.UserRequest) (*pb.UserResponse, error) {\n    return &amp;pb.UserResponse{Name: \"John Doe\", Age: 30}, nil\n}\n\nfunc main() {\n    lis, err := net.Listen(\"tcp\", \":50051\")\n    if err != nil {\n        log.Fatalf(\"Failed to listen: %v\", err)\n    }\n    s := grpc.NewServer()\n    pb.RegisterUserServiceServer(s, &amp;server{})\n    log.Println(\"gRPC Server running on port 50051\")\n    if err := s.Serve(lis); err != nil {\n        log.Fatalf(\"Failed to serve: %v\", err)\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#grpc-vs-rest-when-to-use","title":"\ud83d\udd39 gRPC vs REST \u2013 When to Use? \ud83e\udd14","text":"Feature REST API \ud83c\udf0d gRPC \u26a1 Speed Slower (JSON) Faster (Binary) Protocol HTTP 1.1 HTTP/2 Streaming \u274c No \u2705 Yes Readability \u2705 Human-readable \u274c Not human-readable Browser Support \u2705 Yes \u274c No Best For Public APIs, Web Apps Microservices, High-performance APIs"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#using-grpc-rest-together","title":"\ud83d\udd39 Using gRPC &amp; REST Together \ud83c\udf1f","text":"<ul> <li>Expose gRPC and REST endpoints in the same Go application.</li> <li>Use a gRPC-Gateway to translate REST requests into gRPC calls.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#example-grpc-gateway-setup","title":"\u27a4 Example: gRPC-Gateway Setup","text":"<pre><code>mux := runtime.NewServeMux()\nerr := pb.RegisterUserServiceHandlerFromEndpoint(ctx, mux, \"localhost:50051\", opts)\nif err != nil {\n    log.Fatalf(\"Failed to start gRPC-Gateway: %v\", err)\n}\nhttp.ListenAndServe(\":8081\", mux)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/22_grpc-vs-rest-with-gin/#conclusion","title":"\ud83d\udd39 Conclusion \ud83c\udfaf","text":"<p>\u2705 Use REST for client-facing applications (web, mobile) \ud83d\ude80 \u2705 Use gRPC for internal services &amp; microservices that need high performance \u26a1 \u2705 Combine both with a gRPC-Gateway for flexibility! \ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/","title":"\ud83d\udccc Monitoring &amp; Observability in Gin \ud83d\ude80","text":"<p>Observability in Gin applications involves logging, metrics, and tracing to ensure performance and reliability. This section covers integrating Prometheus and OpenTelemetry for effective monitoring.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/#1-setting-up-prometheus-for-metrics","title":"\ud83d\udd39 1. Setting Up Prometheus for Metrics \ud83d\udcca","text":"<p>Prometheus collects and stores time-series data for monitoring.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/#install-prometheus-middleware","title":"\u27a4 Install Prometheus Middleware","text":"<pre><code>go get github.com/prometheus/client_golang/prometheus\ngo get github.com/prometheus/client_golang/prometheus/promhttp\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/#add-prometheus-middleware-to-gin","title":"\u27a4 Add Prometheus Middleware to Gin","text":"<pre><code>package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"github.com/prometheus/client_golang/prometheus\"\n    \"github.com/prometheus/client_golang/prometheus/promhttp\"\n    \"net/http\"\n)\n\nfunc main() {\n    r := gin.Default()\n\n    // Create a new Prometheus registry\n    registry := prometheus.NewRegistry()\n    httpRequests := prometheus.NewCounterVec(\n        prometheus.CounterOpts{\n            Name: \"http_requests_total\",\n            Help: \"Total number of HTTP requests\",\n        },\n        []string{\"method\", \"endpoint\"},\n    )\n    registry.MustRegister(httpRequests)\n\n    // Middleware for request metrics\n    r.Use(func(c *gin.Context) {\n        httpRequests.WithLabelValues(c.Request.Method, c.FullPath()).Inc()\n        c.Next()\n    })\n\n    // Expose metrics endpoint\n    r.GET(\"/metrics\", gin.WrapH(promhttp.HandlerFor(registry, promhttp.HandlerOpts{})))\n\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/#running-prometheus-with-docker","title":"\u27a4 Running Prometheus with Docker \ud83d\udc33","text":"<pre><code>scrape_configs:\n  - job_name: \"gin-app\"\n    static_configs:\n      - targets: [\"localhost:8080\"]\n</code></pre> <p>Run Prometheus:</p> <pre><code>docker run -p 9090:9090 -v prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/#2-distributed-tracing-with-opentelemetry","title":"\ud83d\udd39 2. Distributed Tracing with OpenTelemetry \ud83d\udce1","text":"<p>OpenTelemetry (OTel) helps trace requests across distributed systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/#install-opentelemetry-packages","title":"\u27a4 Install OpenTelemetry Packages","text":"<pre><code>go get go.opentelemetry.io/otel\ngo get go.opentelemetry.io/otel/sdk/trace\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/#configure-opentelemetry-tracing-in-gin","title":"\u27a4 Configure OpenTelemetry Tracing in Gin","text":"<pre><code>import (\n    \"context\"\n    \"github.com/gin-gonic/gin\"\n    \"go.opentelemetry.io/otel\"\n    \"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n    \"go.opentelemetry.io/otel/sdk/trace\"\n    \"log\"\n)\n\nfunc initTracer() *trace.TracerProvider {\n    exporter, err := otlptrace.New(context.Background())\n    if err != nil {\n        log.Fatal(err)\n    }\n    tp := trace.NewTracerProvider(trace.WithBatcher(exporter))\n    otel.SetTracerProvider(tp)\n    return tp\n}\n\nfunc main() {\n    tp := initTracer()\n    defer tp.Shutdown(context.Background())\n\n    r := gin.Default()\n\n    r.GET(\"/trace\", func(c *gin.Context) {\n        tracer := otel.Tracer(\"gin-server\")\n        ctx, span := tracer.Start(c.Request.Context(), \"handler-span\")\n        defer span.End()\n        c.JSON(200, gin.H{\"message\": \"Tracing Active\"})\n    })\n\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/#running-opentelemetry-collector","title":"\u27a4 Running OpenTelemetry Collector","text":"<p>Use the OpenTelemetry Collector to export traces to a backend like Jaeger or Zipkin.</p> <pre><code>docker run -p 4317:4317 -p 16686:16686 otel/opentelemetry-collector\n</code></pre> <p>Access Jaeger UI at: <code>http://localhost:16686</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/23_monitoring--observability-prometheus-opentelemetry/#summary","title":"\ud83c\udfaf Summary","text":"<p>\u2705 Prometheus: Collects metrics (<code>/metrics</code> endpoint). \u2705 OpenTelemetry: Enables distributed tracing for better debugging. \u2705 Docker &amp; Exporters: Use Prometheus &amp; OpenTelemetry Collector for centralized monitoring.</p> <p>\ud83d\udd39 Next Steps: Implement structured logging for complete observability! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/","title":"\ud83d\ude80 Microservices with Gin Framework","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#introduction","title":"\ud83d\udccc Introduction","text":"<p>Microservices architecture in Go with Gin enables scalable, modular, and maintainable services. This example demonstrates a User Service that handles user creation and retrieval.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#project-structure","title":"\ud83d\udd39 Project Structure \ud83c\udfd7\ufe0f","text":"<pre><code>user-service/\n\u2502\u2500\u2500 main.go\n\u2502\u2500\u2500 handlers/\n\u2502   \u251c\u2500\u2500 user_handler.go\n\u2502\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 user.go\n\u2502\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 user_service.go\n\u2502\u2500\u2500 routes/\n\u2502   \u251c\u2500\u2500 router.go\n\u2502\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 database.go\n\u2502\u2500\u2500 go.mod\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#setup-dependencies","title":"\ud83d\udd39 Setup &amp; Dependencies \u2699\ufe0f","text":"<pre><code>go mod init user-service\ngo get -u github.com/gin-gonic/gin\ngo get -u gorm.io/gorm\ngo get -u gorm.io/driver/sqlite\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#database-configuration-configdatabasego","title":"\ud83d\udd39 Database Configuration \ud83d\uddc4\ufe0f (<code>config/database.go</code>)","text":"<pre><code>package config\n\nimport (\n    \"gorm.io/driver/sqlite\"\n    \"gorm.io/gorm\"\n    \"log\"\n)\n\nvar DB *gorm.DB\n\nfunc InitDB() {\n    var err error\n    DB, err = gorm.Open(sqlite.Open(\"users.db\"), &amp;gorm.Config{})\n    if err != nil {\n        log.Fatal(\"Failed to connect to database\")\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#user-model-modelsusergo","title":"\ud83d\udd39 User Model \ud83c\udff7\ufe0f (<code>models/user.go</code>)","text":"<pre><code>package models\n\ntype User struct {\n    ID    uint   `json:\"id\" gorm:\"primaryKey\"`\n    Name  string `json:\"name\"`\n    Email string `json:\"email\"`\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#service-layer-servicesuser_servicego","title":"\ud83d\udd39 Service Layer \u26a1 (<code>services/user_service.go</code>)","text":"<pre><code>package services\n\nimport (\n    \"user-service/models\"\n    \"user-service/config\"\n)\n\nfunc CreateUser(user *models.User) error {\n    return config.DB.Create(user).Error\n}\n\nfunc GetUsers() ([]models.User, error) {\n    var users []models.User\n    err := config.DB.Find(&amp;users).Error\n    return users, err\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#handlers-handlersuser_handlergo","title":"\ud83d\udd39 Handlers \ud83c\udfaf (<code>handlers/user_handler.go</code>)","text":"<pre><code>package handlers\n\nimport (\n    \"net/http\"\n    \"github.com/gin-gonic/gin\"\n    \"user-service/models\"\n    \"user-service/services\"\n)\n\nfunc CreateUser(c *gin.Context) {\n    var user models.User\n    if err := c.ShouldBindJSON(&amp;user); err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n        return\n    }\n    if err := services.CreateUser(&amp;user); err != nil {\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to create user\"})\n        return\n    }\n    c.JSON(http.StatusCreated, user)\n}\n\nfunc GetUsers(c *gin.Context) {\n    users, err := services.GetUsers()\n    if err != nil {\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to fetch users\"})\n        return\n    }\n    c.JSON(http.StatusOK, users)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#routing-routesroutergo","title":"\ud83d\udd39 Routing \ud83d\udea6 (<code>routes/router.go</code>)","text":"<pre><code>package routes\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"user-service/handlers\"\n)\n\nfunc SetupRouter() *gin.Engine {\n    r := gin.Default()\n    r.POST(\"/users\", handlers.CreateUser)\n    r.GET(\"/users\", handlers.GetUsers)\n    return r\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#main-entry-point-maingo","title":"\ud83d\udd39 Main Entry Point \ud83c\udfaf (<code>main.go</code>)","text":"<pre><code>package main\n\nimport (\n    \"user-service/config\"\n    \"user-service/routes\"\n)\n\nfunc main() {\n    config.InitDB()\n    r := routes.SetupRouter()\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#running-the-microservice","title":"\ud83c\udfaf Running the Microservice \ud83c\udfc3\u200d\u2642\ufe0f","text":"<pre><code>go run main.go\n</code></pre> <p>\u2705 Server runs on <code>http://localhost:8080</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#testing-the-microservice","title":"\ud83c\udfaf Testing the Microservice \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#create-a-user","title":"\u27a4 Create a User","text":"<pre><code>curl -X POST \"http://localhost:8080/users\" -H \"Content-Type: application/json\" -d '{\"name\": \"John Doe\", \"email\": \"john@example.com\"}'\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#fetch-all-users","title":"\u27a4 Fetch All Users","text":"<pre><code>curl -X GET \"http://localhost:8080/users\"\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/24_microservices-with-gin/#next-steps","title":"\ud83c\udfaf Next Steps \ud83d\udd1c","text":"<ul> <li>Add JWT Authentication for secure APIs \ud83d\udd10</li> <li>Implement Service Discovery &amp; API Gateway \ud83c\udfd7\ufe0f</li> <li>Use Docker &amp; Kubernetes for Deployment \ud83d\udc33\ud83d\ude80</li> </ul> <p>\ud83d\udd25 Congratulations! You just built a microservice with Gin! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/","title":"\ud83c\udfc6 Golang Backend Development \u2013 Basic Routing &amp; Handlers \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#introduction-to-basic-routing-in-gin","title":"\ud83d\udccc Introduction to Basic Routing in Gin","text":"<p>Gin is a high-performance HTTP web framework written in Go. It is designed for speed and minimal memory footprint, making it ideal for building APIs and web applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#setting-up-gin","title":"\ud83d\udd39 Setting Up Gin \ud83d\udee0\ufe0f","text":"<pre><code>package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n    r := gin.Default() // Creates a default Gin router with logging and recovery middleware\n    r.Run() // Starts the server on :8080 by default\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#basic-routes","title":"\ud83d\udd39 Basic Routes \ud83d\udee4\ufe0f","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#handling-get-requests","title":"\u27a4 Handling GET Requests","text":"<pre><code>r.GET(\"/ping\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\"message\": \"pong\"})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#handling-post-requests","title":"\u27a4 Handling POST Requests","text":"<pre><code>r.POST(\"/submit\", func(c *gin.Context) {\n    name := c.PostForm(\"name\")\n    c.JSON(200, gin.H{\"name\": name})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#path-query-parameters","title":"\ud83d\udd39 Path &amp; Query Parameters \ud83d\udd0d","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#path-parameters-dynamic-url-segments","title":"\u27a4 Path Parameters (Dynamic URL Segments)","text":"<pre><code>r.GET(\"/user/:id\", func(c *gin.Context) {\n    id := c.Param(\"id\")\n    c.JSON(200, gin.H{\"user_id\": id})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#query-parameters-passing-data-in-url","title":"\u27a4 Query Parameters (Passing Data in URL)","text":"<pre><code>r.GET(\"/search\", func(c *gin.Context) {\n    query := c.Query(\"q\")\n    c.JSON(200, gin.H{\"search\": query})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#grouping-routes","title":"\ud83d\udd39 Grouping Routes \ud83c\udfd7\ufe0f","text":"<p>Route grouping allows for better organization of related endpoints.</p> <pre><code>api := r.Group(\"/api\")\n{\n    api.GET(\"/users\", getUsers)\n    api.POST(\"/users\", createUser)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#running-the-server","title":"\ud83d\udd39 Running the Server \ud83c\udfc3\u200d\u2642\ufe0f","text":"<p>To specify a custom port:</p> <pre><code>r.Run(\":8081\") // Runs on port 8081 instead of the default 8080\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/2_basic-routing--handlers/#summary","title":"\ud83c\udfaf Summary","text":"<p>\u2705 Use <code>gin.Default()</code> to create a router with built-in middleware. \u2705 Define routes using <code>GET</code>, <code>POST</code>, etc. \u2705 Handle Path Parameters using <code>c.Param()</code>. \u2705 Handle Query Parameters using <code>c.Query()</code>. \u2705 Group related routes using <code>r.Group()</code> for better structure. \u2705 Start the server using <code>r.Run()</code>.</p> <p>\ud83d\ude80 Next Steps: Middleware, Request Handling &amp; Validation! \ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/3_query-parameters--path-parameters/","title":"\ud83d\udccc Query Parameters &amp; Path Parameters \u2013 Gin Framework \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/3_query-parameters--path-parameters/#path-parameters","title":"\ud83d\udd39 Path Parameters \ud83c\udff7\ufe0f","text":"<p>Path parameters are used to capture dynamic values from the URL.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/3_query-parameters--path-parameters/#defining-a-path-parameter","title":"\u27a4 Defining a Path Parameter","text":"<pre><code>r.GET(\"/user/:id\", func(c *gin.Context) {\n    id := c.Param(\"id\") // Extracting path parameter\n    c.JSON(200, gin.H{\"user_id\": id})\n})\n</code></pre> <p>\u2705 Example Request: <code>GET /user/123</code> \u2705 Response: <code>{ \"user_id\": \"123\" }</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/3_query-parameters--path-parameters/#query-parameters","title":"\ud83d\udd39 Query Parameters \ud83d\udd0d","text":"<p>Query parameters are used to send key-value pairs in the URL.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/3_query-parameters--path-parameters/#retrieving-a-query-parameter","title":"\u27a4 Retrieving a Query Parameter","text":"<pre><code>r.GET(\"/search\", func(c *gin.Context) {\n    query := c.Query(\"q\") // Extract query parameter\n    c.JSON(200, gin.H{\"search\": query})\n})\n</code></pre> <p>\u2705 Example Request: <code>GET /search?q=golang</code> \u2705 Response: <code>{ \"search\": \"golang\" }</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/3_query-parameters--path-parameters/#providing-default-values-for-query-parameters","title":"\u27a4 Providing Default Values for Query Parameters","text":"<pre><code>r.GET(\"/search\", func(c *gin.Context) {\n    query := c.DefaultQuery(\"q\", \"default\") // Default value if not provided\n    c.JSON(200, gin.H{\"search\": query})\n})\n</code></pre> <p>\u2705 Example Request: <code>GET /search</code> \u2705 Response: <code>{ \"search\": \"default\" }</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/3_query-parameters--path-parameters/#combining-path-query-parameters","title":"\ud83d\udd39 Combining Path &amp; Query Parameters \ud83d\udee0\ufe0f","text":"<pre><code>r.GET(\"/user/:id/details\", func(c *gin.Context) {\n    id := c.Param(\"id\")\n    filter := c.Query(\"filter\")\n    c.JSON(200, gin.H{\"user_id\": id, \"filter\": filter})\n})\n</code></pre> <p>\u2705 Example Request: <code>GET /user/123/details?filter=active</code> \u2705 Response: <code>{ \"user_id\": \"123\", \"filter\": \"active\" }</code></p> <p>\ud83d\ude80 Next Steps: Explore request body handling &amp; middleware!</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/4_request-body--json-handling/","title":"\ud83d\udccc Request Body &amp; JSON Handling \u2013 Gin Framework \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/4_request-body--json-handling/#parsing-json-requests","title":"\ud83d\udd39 Parsing JSON Requests \ud83d\udce5","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/4_request-body--json-handling/#bind-json-to-struct","title":"\u27a4 Bind JSON to Struct","text":"<pre><code>package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"net/http\"\n)\n\ntype User struct {\n    Name  string `json:\"name\" binding:\"required\"`\n    Email string `json:\"email\" binding:\"required,email\"`\n}\n\nfunc main() {\n    r := gin.Default()\n\n    r.POST(\"/user\", func(c *gin.Context) {\n        var user User\n        if err := c.ShouldBindJSON(&amp;user); err != nil {\n            c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n            return\n        }\n        c.JSON(http.StatusOK, gin.H{\"message\": \"User received\", \"user\": user})\n    })\n\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/4_request-body--json-handling/#handling-form-data","title":"\ud83d\udd39 Handling Form Data \ud83d\udccb","text":"<pre><code>r.POST(\"/form\", func(c *gin.Context) {\n    name := c.PostForm(\"name\")\n    email := c.PostForm(\"email\")\n    c.JSON(200, gin.H{\"name\": name, \"email\": email})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/4_request-body--json-handling/#binding-query-parameters-json-together","title":"\ud83d\udd39 Binding Query Parameters &amp; JSON Together \ud83c\udf10","text":"<pre><code>r.POST(\"/query-json\", func(c *gin.Context) {\n    id := c.Query(\"id\") // Query Parameter\n    var user User\n    if err := c.ShouldBindJSON(&amp;user); err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n        return\n    }\n    c.JSON(http.StatusOK, gin.H{\"id\": id, \"user\": user})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/4_request-body--json-handling/#working-with-raw-json-body","title":"\ud83d\udd39 Working with Raw JSON Body \ud83d\udcdd","text":"<pre><code>r.POST(\"/raw\", func(c *gin.Context) {\n    body, _ := c.GetRawData()\n    c.JSON(200, gin.H{\"raw\": string(body)})\n})\n</code></pre> <p>\ud83d\udca1 Tip: Use <code>ShouldBindJSON()</code> for automatic binding &amp; validation! \u2705</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/","title":"\ud83d\udccc Response Formatting &amp; Status Codes \u2013 Gin Framework \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/#sending-json-response","title":"\ud83d\udd39 Sending JSON Response \ud83d\udcdd","text":"<pre><code>c.JSON(200, gin.H{\n    \"message\": \"Success\",\n    \"status\": 200,\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/#setting-custom-status-codes","title":"\ud83d\udd39 Setting Custom Status Codes \ud83d\udcdf","text":"<pre><code>c.JSON(201, gin.H{\"message\": \"Created\"}) // HTTP 201 - Created\nc.JSON(400, gin.H{\"error\": \"Bad Request\"}) // HTTP 400 - Bad Request\nc.JSON(404, gin.H{\"error\": \"Not Found\"}) // HTTP 404 - Not Found\nc.JSON(500, gin.H{\"error\": \"Internal Server Error\"}) // HTTP 500 - Internal Error\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/#sending-plain-text-response","title":"\ud83d\udd39 Sending Plain Text Response \ud83c\udff7\ufe0f","text":"<pre><code>c.String(200, \"Hello, World!\")\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/#sending-html-response","title":"\ud83d\udd39 Sending HTML Response \ud83c\udf10","text":"<pre><code>c.HTML(200, \"&lt;h1&gt;Welcome to Gin&lt;/h1&gt;\")\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/#redirecting-requests","title":"\ud83d\udd39 Redirecting Requests \ud83d\udd00","text":"<pre><code>c.Redirect(302, \"https://example.com\") // Temporary Redirect\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/#streaming-response","title":"\ud83d\udd39 Streaming Response \ud83d\udce1","text":"<pre><code>c.Stream(func(w io.Writer) bool {\n    w.Write([]byte(\"Streaming data...\\n\"))\n    return true\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/#abort-with-status","title":"\ud83d\udd39 Abort with Status \ud83d\udea8","text":"<pre><code>c.AbortWithStatus(403) // Abort request with HTTP 403 - Forbidden\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/#response-with-headers","title":"\ud83d\udd39 Response with Headers \ud83d\udcdc","text":"<pre><code>c.Header(\"Content-Type\", \"application/json\")\nc.JSON(200, gin.H{\"message\": \"Headers set successfully\"})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/5_response-formatting--status-codes/#common-http-status-codes","title":"\ud83d\udd39 Common HTTP Status Codes \ud83d\udea6","text":"Code Meaning 200 OK \u2705 201 Created \ud83c\udd95 204 No Content \ud83d\udeab 400 Bad Request \u26a0\ufe0f 401 Unauthorized \ud83d\udd12 403 Forbidden \ud83d\udeab 404 Not Found \u274c 500 Internal Server Error \ud83d\uded1"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/","title":"\ud83d\udd39 Middleware in Gin \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#what-is-middleware","title":"\ud83d\udccc What is Middleware? \ud83d\udee0\ufe0f","text":"<p>Middleware in Gin is a function that runs before the actual route handler. It is commonly used for: - Logging \ud83d\udcdc - Authentication &amp; Authorization \ud83d\udd11 - Request modification \ud83d\udcdd - Response processing \ud83d\udce4 - Error handling \u26a0\ufe0f</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#creating-middleware","title":"\ud83d\udd39 Creating Middleware \ud83c\udfd7\ufe0f","text":"<p>Middleware functions in Gin follow this signature:</p> <pre><code>func c.HandlerFunc\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#example-logging-middleware","title":"\u27a4 Example: Logging Middleware \ud83d\udcdd","text":"<pre><code>func LoggerMiddleware(c *gin.Context) {\n    log.Println(\"Incoming request:\", c.Request.Method, c.Request.URL.Path)\n    c.Next() // Pass execution to the next middleware or handler\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#applying-middleware","title":"\ud83d\udd39 Applying Middleware \ud83d\udee0\ufe0f","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#global-middleware-applies-to-all-routes","title":"\u27a4 Global Middleware \ud83c\udf0d (applies to all routes)","text":"<pre><code>r := gin.Default() // Default includes Logger &amp; Recovery middlewares\nr.Use(LoggerMiddleware) // Custom global middleware\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#route-specific-middleware","title":"\u27a4 Route-Specific Middleware \ud83d\udea6","text":"<pre><code>r.GET(\"/secure\", AuthMiddleware(), secureHandler)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#group-level-middleware","title":"\u27a4 Group-Level Middleware \ud83c\udfd7\ufe0f","text":"<pre><code>api := r.Group(\"/api\")\napi.Use(AuthMiddleware())\n{\n    api.GET(\"/dashboard\", dashboardHandler)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#common-built-in-middlewares","title":"\ud83d\udd39 Common Built-in Middlewares \ud83c\udfaf","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#recovery-middleware-handles-panics-prevents-crashes","title":"\u27a4 Recovery Middleware \ud83d\udd04 (Handles panics &amp; prevents crashes)","text":"<pre><code>r.Use(gin.Recovery())\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#cors-middleware-cross-origin-requests","title":"\u27a4 CORS Middleware \ud83c\udf0d (Cross-Origin Requests)","text":"<pre><code>import \"github.com/gin-contrib/cors\"\nr.Use(cors.Default())\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#authentication-middleware","title":"\u27a4 Authentication Middleware \ud83d\udd11","text":"<pre><code>func AuthMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        token := c.GetHeader(\"Authorization\")\n        if token == \"\" {\n            c.JSON(401, gin.H{\"error\": \"Unauthorized\"})\n            c.Abort()\n            return\n        }\n        c.Next()\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/6_middleware-in-gin/#best-practices","title":"\ud83d\udd39 Best Practices \u2705","text":"<ul> <li>Use <code>c.Next()</code> to pass control to the next handler.</li> <li>Use <code>c.Abort()</code> to stop further execution.</li> <li>Apply only necessary middlewares to avoid performance overhead.</li> <li>Use built-in Gin middlewares whenever possible.</li> </ul> <p>\ud83d\ude80 Next Step: Implement &amp; test middleware in your Gin application! \ud83c\udfaf</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/","title":"\ud83d\udccc Gin Context &amp; Lifecycle \ud83c\udf10","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#understanding-gincontext","title":"\ud83d\udd39 Understanding <code>gin.Context</code>","text":"<p><code>gin.Context</code> is a powerful object in Gin that handles request information, responses, middleware, and errors.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#key-functions-of-gincontext","title":"\u27a4 Key Functions of <code>gin.Context</code>","text":"<ul> <li>Request &amp; Response Handling</li> <li>Query, Form, and JSON Parsing</li> <li>Middleware &amp; Abort Control</li> <li>Setting &amp; Retrieving Data</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#request-response-handling","title":"\ud83d\udd39 Request &amp; Response Handling \ud83d\udd04","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#getting-request-data","title":"\u27a4 Getting Request Data","text":"<pre><code>func handler(c *gin.Context) {\n    name := c.Query(\"name\") // Query Parameter\n    id := c.Param(\"id\")     // URL Parameter\n    c.JSON(200, gin.H{\"name\": name, \"id\": id})\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#sending-response","title":"\u27a4 Sending Response","text":"<pre><code>c.JSON(200, gin.H{\"message\": \"Success\"})\nc.String(200, \"Hello, %s\", name)\nc.XML(200, gin.H{\"status\": \"ok\"})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#context-lifecycle-middleware","title":"\ud83d\udd39 Context Lifecycle &amp; Middleware \u23f3","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#middleware-example","title":"\u27a4 Middleware Example","text":"<pre><code>func AuthMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        token := c.GetHeader(\"Authorization\")\n        if token == \"\" {\n            c.AbortWithStatusJSON(401, gin.H{\"error\": \"Unauthorized\"})\n            return\n        }\n        c.Next() // Continue to next middleware/handler\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#context-data-storage","title":"\ud83d\udd39 Context Data Storage \ud83d\uddc4\ufe0f","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#setting-getting-data","title":"\u27a4 Setting &amp; Getting Data","text":"<pre><code>c.Set(\"username\", \"JohnDoe\")\nname, exists := c.Get(\"username\")\nif exists {\n    fmt.Println(\"Username:\", name)\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#aborting-requests","title":"\ud83d\udd39 Aborting Requests \u274c","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#stopping-execution","title":"\u27a4 Stopping Execution","text":"<pre><code>c.AbortWithStatusJSON(403, gin.H{\"error\": \"Forbidden\"})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#context-copy-timeout","title":"\ud83d\udd39 Context Copy &amp; Timeout \u23f3","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#copying-context-goroutines","title":"\u27a4 Copying Context (Goroutines)","text":"<pre><code>copyCtx := c.Copy()\ngo func() {\n    time.Sleep(2 * time.Second)\n    fmt.Println(\"Processing:\", copyCtx.Request.URL.Path)\n}()\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/7_gin-context--lifecycle/#setting-request-timeout","title":"\u27a4 Setting Request Timeout","text":"<pre><code>r.Use(gin.Timeout(5 * time.Second))\n</code></pre> <p>\ud83d\ude80 Efficient <code>gin.Context</code> usage ensures optimal request handling and middleware control!</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/8_grouping-routes--versioning/","title":"\ud83d\udccc Grouping Routes &amp; Versioning \u2013 Gin Framework \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/8_grouping-routes--versioning/#why-group-routes","title":"\ud83d\udd39 Why Group Routes? \ud83e\udd14","text":"<ul> <li>Organizes related endpoints for better maintainability.</li> <li>Reduces code duplication and improves readability.</li> <li>Useful for API versioning and feature segregation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/8_grouping-routes--versioning/#grouping-routes","title":"\ud83d\udd39 Grouping Routes \ud83c\udfd7\ufe0f","text":"<pre><code>package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n    r := gin.Default()\n\n    // Grouped routes under `/api`\n    api := r.Group(\"/api\")\n    {\n        api.GET(\"/users\", getUsers)\n        api.POST(\"/users\", createUser)\n    }\n\n    r.Run(\":8080\")\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/8_grouping-routes--versioning/#nested-route-groups","title":"\ud83d\udd39 Nested Route Groups \ud83d\udcc2","text":"<pre><code>v1 := r.Group(\"/api/v1\")\n{\n    users := v1.Group(\"/users\")\n    {\n        users.GET(\"/\", getUsers)\n        users.GET(\"/:id\", getUserByID)\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/8_grouping-routes--versioning/#api-versioning","title":"\ud83d\udd39 API Versioning \ud83d\udccc","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/8_grouping-routes--versioning/#url-based-versioning","title":"\u2705 URL-Based Versioning","text":"<pre><code>v1 := r.Group(\"/api/v1\")\nv2 := r.Group(\"/api/v2\")\n\nv1.GET(\"/status\", getStatusV1)\nv2.GET(\"/status\", getStatusV2)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/8_grouping-routes--versioning/#header-based-versioning","title":"\u2705 Header-Based Versioning","text":"<pre><code>r.GET(\"/status\", func(c *gin.Context) {\n    version := c.GetHeader(\"API-Version\")\n    if version == \"v2\" {\n        getStatusV2(c)\n    } else {\n        getStatusV1(c)\n    }\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/8_grouping-routes--versioning/#running-the-server","title":"\ud83d\udd39 Running the Server \ud83d\ude80","text":"<pre><code>r.Run(\":8080\") // Runs on port 8080\n</code></pre> <p>\u2705 Best Practices: - Use route grouping for modular API design. - Implement API versioning for backward compatibility. - Keep handlers lightweight and reusable.</p> <p>\ud83d\ude80 Next Steps: Implement middleware for authentication and logging! \ud83d\udd10\ud83d\udcdc</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/","title":"\u26a0\ufe0f Error Handling &amp; Recovery Middleware \u2013 Gin Framework \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#handling-errors-in-gin","title":"\ud83d\udd39 Handling Errors in Gin","text":"<p>Gin provides built-in mechanisms to handle errors efficiently and return appropriate responses.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#returning-errors-in-handlers","title":"\u27a4 Returning Errors in Handlers \u274c","text":"<pre><code>r.GET(\"/error\", func(c *gin.Context) {\nc.JSON(400, gin.H{\"error\": \"Bad Request\"})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#custom-error-handling","title":"\u27a4 Custom Error Handling \ud83d\udee0\ufe0f","text":"<pre><code>r.GET(\"/divide\", func(c *gin.Context) {\na, b := 10, 0\nif b == 0 {\nc.JSON(500, gin.H{\"error\": \"Division by zero\"})\nreturn\n}\nc.JSON(200, gin.H{\"result\": a / b})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#using-errors-for-advanced-handling","title":"\ud83d\udd39 Using <code>Errors</code> for Advanced Handling \ud83d\udccc","text":""},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#collecting-logging-errors","title":"\u27a4 Collecting &amp; Logging Errors","text":"<pre><code>r.GET(\"/process\", func(c *gin.Context) {\nerr := processRequest()\nif err != nil {\nc.Error(err) // Logs error internally\nc.JSON(500, gin.H{\"error\": err.Error()})\nreturn\n}\nc.JSON(200, gin.H{\"message\": \"Success\"})\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#recovery-middleware","title":"\ud83d\udd39 Recovery Middleware \ud83d\udee1\ufe0f","text":"<p>Prevents server crashes due to unexpected panics.</p>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#enabling-recovery-middleware","title":"\u27a4 Enabling Recovery Middleware","text":"<pre><code>r := gin.Default() // Automatically includes `Recovery()`\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#custom-recovery-middleware","title":"\u27a4 Custom Recovery Middleware","text":"<pre><code>r.Use(gin.RecoveryWithWriter(os.Stderr))\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#example-preventing-panic-crash","title":"\u27a4 Example: Preventing Panic Crash","text":"<pre><code>r.GET(\"/panic\", func(c *gin.Context) {\npanic(\"Something went wrong!\")\n})\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Golang/Gin/Notes/9_error-handling--recovery-middleware/#best-practices","title":"\ud83d\udd39 Best Practices \u2705","text":"<ul> <li>Always return meaningful error messages \ud83d\udce2</li> <li>Use <code>c.Error()</code> for structured error logging \ud83d\udcdd</li> <li>Enable <code>Recovery()</code> to handle unexpected crashes \ud83d\udd04</li> <li>Implement proper status codes for API responses \ud83d\udd22</li> <li>Log errors to a centralized system for debugging \ud83d\uded1</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/","title":"Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/#_1","title":"Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Core Java</li> <li>Sprint Boot</li> <li>Quick Revision</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/","title":"Core Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/#quick-access-links","title":"Quick Access Links","text":"<ul> <li>Contents</li> <li>Java RoadMap</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Java-OOP-Concepts</li> <li>JRE-JDK-JVM</li> <li>Primitive-Variables</li> <li>Non-Primitive-Variables</li> <li>Methods-And-Constructors</li> <li>Memory-Management-and-Garbage-Collection</li> <li>Classes</li> <li>POJO-Singleton</li> <li>Interface</li> <li>Reflection</li> <li>Annotations</li> <li>Exception-Handling</li> <li>Operators</li> <li>Control-Flow</li> <li>Collection</li> <li>Streams</li> <li>Multi-threading</li> <li>Thread-Pool</li> <li>Functional Programming</li> <li>Unit-Test</li> <li>Java Competitive Coding Notes\u0308</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/#code","title":"Code","text":"<ol> <li>Functional Programming</li> <li>Multithreading</li> <li>Thread Pool</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/#java-roadmap","title":"JAVA Roadmap","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/#recommended-resources","title":"Recommended Resources","text":"<ul> <li>Core Java Notes</li> <li>Youtube Playlist </li> <li>Udemy</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/1.%20Java-OOP-Concepts/","title":"Java OOP Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/1.%20Java-OOP-Concepts/#overview-of-oops","title":"Overview of OOPs","text":"<ul> <li>Object-Oriented Programming: Models real-world entities, like <code>Car</code>, <code>ATM</code>, <code>Bike</code>.</li> <li>Procedural vs OOP:<ul> <li>Procedural: Focus on functions; data moves freely (e.g., C, Pascal).</li> <li>OOP: Focus on data encapsulation, inheritance, and reusability (e.g., Java, Python).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/1.%20Java-OOP-Concepts/#key-concepts-and-examples","title":"Key Concepts and Examples","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/1.%20Java-OOP-Concepts/#1-objects-classes","title":"1. Objects &amp; Classes","text":"<ul> <li>Object: Entity with State (properties) &amp; Behavior (functions).<ul> <li>Example: A <code>Car</code> object has:<ul> <li>Properties: <code>color</code>, <code>type</code>, <code>brand</code></li> <li>Behavior: <code>applyBrake()</code>, <code>drive()</code></li> </ul> </li> </ul> </li> <li>Class: Blueprint for objects.<ul> <li>Example:   <code>java   class Car {       String color;       void applyBrake() { /*...*/ }   }   Car myCar = new Car();</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/1.%20Java-OOP-Concepts/#2-data-abstraction","title":"2. Data Abstraction","text":"<ul> <li>Definition: Hides internal details, exposing only essential features.</li> <li>Achieved by: Abstract classes, interfaces.</li> <li>Example:<ul> <li><code>Car</code>: You press the <code>brake</code> pedal without knowing the internal mechanism.</li> </ul> </li> <li>Advantages: Increases security &amp; reduces complexity.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/1.%20Java-OOP-Concepts/#3-encapsulation","title":"3. Encapsulation","text":"<ul> <li>Definition: Bundling data and methods in a single unit; also known as data-hiding.</li> <li>Achieved by: Private variables with public getters/setters.</li> <li>Example:   <code>java   class Dog {       private String color;       public String getColor() { return color; }       public void setColor(String color) { this.color = color; }   }</code></li> <li>Advantages: Loose coupling, enhanced security.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/1.%20Java-OOP-Concepts/#4-inheritance","title":"4. Inheritance","text":"<ul> <li>Definition: A class inherits properties/methods of another.</li> <li>Types:<ul> <li>Single: <code>class B extends A</code></li> <li>Multilevel: <code>class C extends B extends A</code></li> <li>Hierarchical: <code>class B and class C extend A</code></li> <li>Multiple (not directly in Java, but achievable via interfaces).</li> </ul> </li> <li>Example:   <code>java   class Vehicle { /*...*/ }   class Car extends Vehicle { /*...*/ }</code></li> <li>Advantages: Reusability, polymorphism.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/1.%20Java-OOP-Concepts/#5-polymorphism","title":"5. Polymorphism","text":"<ul> <li>Definition: Single interface, multiple implementations (many forms).</li> <li>Types:<ul> <li>Compile-time (Method Overloading)<ul> <li>Example: <code>doSum(int a, int b)</code>, <code>doSum(int a, int b, int c)</code></li> </ul> </li> <li>Run-time (Method Overriding)<ul> <li>Example: Overriding <code>getEngine()</code> in subclasses.</li> </ul> </li> </ul> </li> <li>Relationships:<ul> <li>IS-A: <code>Dog is-an Animal</code> (Inheritance).</li> <li>HAS-A: <code>School has Students</code> (Composition or Aggregation).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/1.%20Java-OOP-Concepts/#resources","title":"Resources:","text":"<ul> <li>Java OOP Concepts</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/10.%20Reflection/","title":"10. Reflection","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/11.%20%20ANNOTATIONS/","title":"11.  ANNOTATIONS","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/12.%20Exceptio-Handling/","title":"12. Exceptio Handling","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/13.%20Operators/","title":"13. Operators","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/13.%20Operators/#operators","title":"Operators","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/14.%20Control-Flow/","title":"14. Control Flow","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/15.%20Collection/","title":"15. Collection","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/16.%20Streams/","title":"16. Streams","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/17.%20Multi-threading/","title":"17. Multi threading","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/18.%20Thread-Pool/","title":"18. Thread Pool","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/18.%20Thread-Pool/#threadlocal-virtual-thread-and-platform-thread-in-java","title":"ThreadLocal, Virtual Thread, and Platform Thread in Java","text":"Feature ThreadLocal Virtual Thread Platform Thread Definition Provides thread-local variables, ensuring each thread has its own isolated copy of a variable. Lightweight threads introduced in Java 19 (Project Loom) that allow high concurrency with minimal resource usage. Traditional OS-managed threads backed by the JVM for executing tasks. Purpose To maintain thread-specific data that is not shared between threads. To enable massive concurrency by reducing the overhead of creating and managing threads. To execute tasks using OS-level threading capabilities. Usage Common in scenarios like transaction management, request context propagation, etc. Used for highly scalable, asynchronous, or parallelized tasks, such as server request handling or I/O-bound tasks. Suitable for general-purpose threading in CPU-bound or limited concurrency scenarios. Resource Management Memory is allocated per thread to store the ThreadLocal variable. Lightweight and managed by the JVM with minimal impact on memory and system resources. Heavyweight, with each thread consuming significant memory for stack and OS context. Performance Efficient for storing small thread-specific data. Highly efficient for applications requiring millions of concurrent threads. Can handle limited concurrency due to high resource usage per thread. Blocking I/O Not applicable to I/O operations directly. Supports blocking I/O without tying up system resources, as it uses non-blocking techniques internally. Blocking I/O directly ties up the thread, consuming system resources. Compatibility Works with both Virtual and Platform Threads. Fully integrated into the JVM, backward-compatible with traditional threading APIs. Traditional threading mechanism available in all Java versions. Lifecycle Bound to the lifecycle of the thread that holds the ThreadLocal. Managed by the JVM and optimized for short-lived tasks. Managed by the OS and suited for long-lived threads. Introduced In Available since early Java versions (Java 1.2). Introduced in Java 19 (Preview) and finalized in Java 21. Present since Java's inception."},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/18.%20Thread-Pool/#summary","title":"Summary","text":"<ul> <li>ThreadLocal: Isolates data for each thread, useful for thread-specific data storage.</li> <li>Virtual Thread: Lightweight, scalable, and optimized for high concurrency in modern applications.</li> <li>Platform Thread: Traditional threading mechanism, suited for tasks with moderate concurrency.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/","title":"Java Basics: JDK, JRE, and JVM","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/#overview","title":"Overview","text":"<ul> <li>Java: Platform-independent, object-oriented language.</li> <li>Portability: WORA - Write Once, Run Anywhere.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/#key-components","title":"Key Components","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/#1-java-virtual-machine-jvm","title":"1. Java Virtual Machine (JVM)","text":"<ul> <li>Definition: Abstract machine that executes Java bytecode; platform-dependent.</li> <li>Input: Takes bytecode, outputs machine code.</li> <li>Just-In-Time (JIT) Compiler: Converts bytecode to machine code at runtime.</li> <li>Platform Independence: Bytecode can be run on any platform with the respective JVM.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/#2-java-runtime-environment-jre","title":"2. Java Runtime Environment (JRE)","text":"<ul> <li>Definition: Environment to run Java programs, includes JVM and core class libraries.</li> <li>Contains:<ul> <li>JVM: Executes bytecode.</li> <li>Class Libraries: Required Java libraries for running applications.</li> </ul> </li> <li>Usage: Allows running Java programs but not developing them.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/#3-java-development-kit-jdk","title":"3. Java Development Kit (JDK)","text":"<ul> <li>Definition: Full Java development package, including tools for coding, compiling, and debugging.</li> <li>Contains:<ul> <li>JRE: For running Java applications.</li> <li>Compiler (<code>javac</code>): Compiles Java code to bytecode.</li> <li>Debugger: Tools for testing and debugging code.</li> </ul> </li> <li>Usage: Needed for Java development (coding, compiling).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/#java-editions","title":"Java Editions","text":"<ul> <li>Java Standard Edition (JSE): Core Java for general-purpose use.</li> <li>Java Enterprise Edition (JEE): Adds JSE plus web technologies like Servlets, JSP, Transaction API.</li> <li>Java Micro Edition (JME): APIs tailored for mobile and embedded devices.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/#_1","title":"Java Basics: JDK, JRE, and JVM","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/#resources","title":"Resources:","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/2.%20JRE-JDK-JVM/#-how-java-program-works","title":"- How Java Program Works","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/","title":"\ud83d\ude80 Must-Know Functional Programming Concepts in Java (for Spring Boot &amp; Microservices)","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#1-functional-interfaces-javautilfunction","title":"1\ufe0f\u20e3 Functional Interfaces (<code>java.util.function</code>)","text":"<p>Single Abstract Method (SAM) interfaces used in functional programming. Java provides built-in functional interfaces:</p> Functional Interface Method Purpose <code>Predicate&lt;T&gt;</code> <code>boolean test(T t)</code> Used for conditional checks (returns true/false). <code>Function&lt;T, R&gt;</code> <code>R apply(T t)</code> Converts <code>T</code> to <code>R</code>. <code>Consumer&lt;T&gt;</code> <code>void accept(T t)</code> Performs an action on <code>T</code>. <code>Supplier&lt;T&gt;</code> <code>T get()</code> Provides a value of type <code>T</code>. <pre><code>Predicate&lt;Integer&gt; isEven = n -&gt; n % 2 == 0;\nSystem.out.println(isEven.test(10)); // true\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-spring-boot-use-case-filtering-api-requests","title":"\ud83d\udd39 Example (Spring Boot use-case: Filtering API Requests)","text":"<pre><code>Predicate&lt;String&gt; isValidRequest = req -&gt; req.startsWith(\"VALID_\");\nSystem.out.println(isValidRequest.test(\"VALID_ORDER\")); // true\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#2-lambda-expressions-key-to-functional-programming","title":"2\ufe0f\u20e3 Lambda Expressions (\ud83d\udccc Key to Functional Programming)","text":"<p>Anonymous function for concise code. Syntax: <code>(parameters) -&gt; { body }</code></p> <pre><code>Function&lt;String, Integer&gt; length = str -&gt; str.length();\nSystem.out.println(length.apply(\"Hello\")); // 5\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-microservice-response-transformation","title":"\ud83d\udd39 Example (Microservice Response Transformation)","text":"<pre><code>Function&lt;Order, OrderDTO&gt; orderMapper = order -&gt; new OrderDTO(order.getId(), order.getTotal());\n</code></pre> <p>\u2705 Spring Boot Use-case: Mapping Entities to DTOs in Service Layer</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#3-method-references-shortcut-for-lambdas","title":"3\ufe0f\u20e3 Method References (\ud83d\ude80 Shortcut for Lambdas)","text":"<p>Refers to existing methods instead of using lambdas Syntax: <code>ClassName::methodName</code></p> <pre><code>Function&lt;String, Integer&gt; length = String::length;\nSystem.out.println(length.apply(\"World\")); // 5\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-logging-requests-in-a-microservice","title":"\ud83d\udd39 Example (Logging Requests in a Microservice)","text":"<pre><code>Consumer&lt;String&gt; logger = System.out::println;\nlogger.accept(\"Request received...\");\n</code></pre> <p>\u2705 Spring Boot Use-case: Logging incoming API requests using method references.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#4-stream-api-functional-operations-on-collections","title":"4\ufe0f\u20e3 Stream API (\ud83d\udd25 Functional Operations on Collections)","text":"<p>Efficient processing of collections.</p> <pre><code>List&lt;String&gt; names = List.of(\"Alice\", \"Bob\", \"Charlie\");\nnames.stream().filter(name -&gt; name.startsWith(\"A\")).forEach(System.out::println);\n</code></pre> <p>Output: Alice - \u2705 Key Stream Methods:   * filter(Predicate) \u2192 Filters elements   * map(Function) \u2192 Transforms elements   * forEach(Consumer) \u2192 Iterates over elements   * collect(Collectors.toList()) \u2192 Collects result into a list"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-processing-api-responses","title":"\ud83d\udd39 Example (Processing API Responses)","text":"<pre><code>List&lt;Order&gt; orders = orderRepository.findAll();\nList&lt;OrderDTO&gt; orderDTOs = orders.stream()\n    .filter(order -&gt; order.getTotal() &gt; 100)\n    .map(order -&gt; new OrderDTO(order.getId(), order.getTotal()))\n    .collect(Collectors.toList());\n</code></pre> <p>\u2705 Spring Boot Use-case: Processing a list of orders fetched from the database.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#5-optional-avoid-nullpointerexception","title":"5\ufe0f\u20e3 Optional (\ud83d\udee1\ufe0f Avoid NullPointerException)","text":"<p>Handles missing values safely.</p> <pre><code>Optional&lt;String&gt; name = Optional.ofNullable(null);\nSystem.out.println(name.orElse(\"Default\")); // Default\n</code></pre> <ul> <li>\u2705 Key Optional Methods:</li> <li>isPresent() \u2192 Checks if value exists</li> <li>orElse(T other) \u2192 Returns value or default</li> <li>map(Function) \u2192 Transforms value if present"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-handling-null-api-responses","title":"\ud83d\udd39 Example (Handling Null API Responses)","text":"<pre><code>Optional&lt;User&gt; user = userRepository.findById(1);\nuser.ifPresent(u -&gt; System.out.println(\"User found: \" + u.getName()));\n</code></pre> <p>\u2705 Spring Boot Use-case: Avoid null checks in database lookups.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#6-functional-composition-chain-functions","title":"6\ufe0f\u20e3 Functional Composition (\u23e9 Chain Functions)","text":"<p>Combining multiple functions.</p> <pre><code>Function&lt;Integer, Integer&gt; square = x -&gt; x * x;\nFunction&lt;Integer, Integer&gt; doubleIt = x -&gt; x * 2;\nSystem.out.println(square.andThen(doubleIt).apply(3)); // 18\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-data-transformation-pipeline-in-microservices","title":"\ud83d\udd39 Example (Data Transformation Pipeline in Microservices)","text":"<pre><code>Function&lt;String, String&gt; trim = String::trim;\nFunction&lt;String, String&gt; toUpper = String::toUpperCase;\nFunction&lt;String, String&gt; process = trim.andThen(toUpper);\n\nSystem.out.println(process.apply(\"  hello \")); // HELLO\n</code></pre> <p>\u2705 Spring Boot Use-case: Processing incoming request payloads before validation.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#7-higher-order-functions-function-as-parameterreturn","title":"7\ufe0f\u20e3 Higher-Order Functions (\ud83d\udce2 Function as Parameter/Return)","text":"<p>Pass functions as arguments or return them.</p> <pre><code>static Function&lt;Integer, Integer&gt; multiply(int num) {\n    return x -&gt; x * num;\n}\nFunction&lt;Integer, Integer&gt; triple = multiply(3);\nSystem.out.println(triple.apply(5)); // 15\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-custom-retry-mechanism-in-microservices","title":"\ud83d\udd39 Example (Custom Retry Mechanism in Microservices)","text":"<pre><code>public static &lt;T&gt; T retry(Supplier&lt;T&gt; task, int attempts) {\n    for (int i = 0; i &lt; attempts; i++) {\n        try {\n            return task.get();\n        } catch (Exception e) {\n            System.out.println(\"Retrying... \" + (i + 1));\n        }\n    }\n    throw new RuntimeException(\"Failed after retries\");\n}\n\n// Usage:\nSupplier&lt;String&gt; apiCall = () -&gt; callExternalAPI();\nString response = retry(apiCall, 3);\n</code></pre> <p>\u2705 Spring Boot Use-case: Retrying external API calls (circuit breaker pattern).</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#8-currying-breaking-function-into-smaller-functions","title":"8\ufe0f\u20e3 Currying (\ud83d\udd17 Breaking Function into Smaller Functions)","text":"<p>Transforms multi-argument functions into a series of functions</p> <pre><code>Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; add = x -&gt; y -&gt; x + y;\nSystem.out.println(add.apply(5).apply(3)); // 8\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-configurable-discount-service-in-e-commerce-microservices","title":"\ud83d\udd39 Example (Configurable Discount Service in E-Commerce Microservices)","text":"<pre><code>Function&lt;Double, Function&lt;Double, Double&gt;&gt; discount = rate -&gt; price -&gt; price * (1 - rate);\nFunction&lt;Double, Double&gt; tenPercentDiscount = discount.apply(0.10);\nSystem.out.println(tenPercentDiscount.apply(200.0)); // 180.0\n</code></pre> <p>\u2705 Spring Boot Use-case: Applying different discount strategies dynamically.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#9-parallel-streams-boost-performance-with-multi-threading","title":"9\ufe0f\u20e3 Parallel Streams (\u26a1 Boost Performance with Multi-threading)","text":"<p>Runs operations in parallel for large datasets.</p> <pre><code>List&lt;Integer&gt; numbers = List.of(1, 2, 3, 4, 5);\nnumbers.parallelStream().forEach(System.out::println);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-processing-large-order-lists-in-e-commerce-microservice","title":"\ud83d\udd39 Example (Processing Large Order Lists in E-Commerce Microservice)","text":"<pre><code>List&lt;Order&gt; orders = orderRepository.findAll();\norders.parallelStream()\n    .filter(order -&gt; order.getTotal() &gt; 100)\n    .forEach(System.out::println);\n</code></pre> <p>\u2705 Spring Boot Use-case: Optimizing bulk data processing in microservices.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#reactive-programming-with-functional-style-spring-webflux","title":"\ud83d\udd1f Reactive Programming with Functional Style (Spring WebFlux)","text":"<p>Handles async &amp; non-blocking API calls. <code>Mono</code> (single value) and <code>Flux</code> (multiple values) from Project Reactor.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#example-fetching-user-details-from-reactive-database-in-microservices","title":"\ud83d\udd39 Example (Fetching User Details from Reactive Database in Microservices)","text":"<pre><code>public Mono&lt;UserDTO&gt; getUser(Long id) {\n    return userRepository.findById(id)\n        .map(user -&gt; new UserDTO(user.getId(), user.getName()));\n}\n</code></pre> <p>\u2705 Spring Boot Use-case: Building high-performance non-blocking REST APIs.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#advanced-concepts-in-functional-java-for-microservices","title":"\ud83d\ude80 Advanced Concepts in Functional Java for Microservices","text":"Concept Use-case in Microservices Function Composition Data transformation pipelines. Supplier for Lazy Initialization Delayed execution of expensive operations. Parallel Streams Speeding up batch processing. Optional for Safe Code Avoiding NullPointerException in services. Reactive Programming Handling high-concurrency APIs. Higher-Order Functions Custom retry mechanisms for API calls. Currying Implementing dynamic pricing/discounts."},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/20.%20Functional-Programming/#summary","title":"\ud83d\udd1a Summary","text":"<p>\u2705 Functional Interfaces (<code>Predicate</code>, <code>Function</code>, <code>Consumer</code>, <code>Supplier</code>) \u2705 Lambda Expressions for concise, readable code \u2705 Method References for clean function calls \u2705 Stream API for processing large collections \u2705 Optional for null safety in services \u2705 Function Composition for data processing \u2705 Higher-Order Functions for flexibility \u2705 Currying for breaking down complex logic \u2705 Parallel Streams for performance boosts \u2705 Reactive Programming (WebFlux) for non-blocking API calls</p> <p>This should be a solid functional programming quick guide, especially for Spring Boot &amp; Microservices! \ud83d\ude80 Let me know if you need more refinements!</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/","title":"\ud83d\ude80 Java Competitive Coding Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ol> <li>\u26a1 Java Basics</li> <li>\ud83d\udee0\ufe0f OOP Concepts</li> <li>\ud83d\udcda Data Structures</li> <li>\ud83d\udccf Algorithmic Patterns</li> <li>\ud83d\udd04 Recursion &amp; Backtracking</li> <li>\ud83d\udd22 Dynamic Programming</li> <li>\ud83e\uddee Graph Algorithms</li> <li>\ud83d\udd17 Advanced Topics</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#java-basics","title":"\u26a1 Java Basics","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#fast-input-output","title":"\ud83c\udff7\ufe0f Fast Input &amp; Output","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int a = Integer.parseInt(st.nextToken());\n        int b = Integer.parseInt(st.nextToken());\n        System.out.println(a + b);\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#data-types-loops","title":"\ud83d\udd24 Data Types &amp; Loops","text":"<pre><code>int a = 10;\nlong b = 10000000000L;\nfloat c = 3.14f;\nchar d = 'A';\nboolean e = true;\nString s = \"Hello\";\n\nfor (int i = 0; i &lt; 5; i++) {\n        System.out.println(i);\n}\n\nint i = 0;\nwhile (i &lt; 5) {\n        System.out.println(i++);\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#oop-concepts","title":"\ud83d\udee0\ufe0f OOP Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#encapsulation-inheritance-polymorphism","title":"\ud83c\udfad Encapsulation, Inheritance &amp; Polymorphism","text":"<pre><code>class Animal {\n    void makeSound() {\n        System.out.println(\"Some sound\");\n    }\n}\n\nclass Dog extends Animal {\n    void makeSound() {\n        System.out.println(\"Bark\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#data-structures","title":"\ud83d\udcda Data Structures","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#arrays-lists","title":"\ud83c\udfd7\ufe0f Arrays &amp; Lists","text":"<pre><code>int[] arr = {1, 2, 3};\nArrays.sort(arr);\nArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(Arrays.asList(10, 20));\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#linked-list","title":"\ud83d\udd17 Linked List","text":"<pre><code>LinkedList&lt;Integer&gt; ll = new LinkedList&lt;&gt;();\nll.addFirst(1);\nll.addLast(2);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#hashmap-hashset","title":"\ud83d\udce6 HashMap &amp; HashSet","text":"<pre><code>HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\nmap.put(\"Alice\", 25);\nHashSet&lt;Integer&gt; set = new HashSet&lt;&gt;(Arrays.asList(1, 2, 3));\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#algorithmic-patterns","title":"\ud83d\udccf Algorithmic Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#sliding-window","title":"\ud83d\udd04 Sliding Window","text":"<pre><code>int maxSumSubarray(int[] arr, int k) {\n    int maxSum = 0, windowSum = 0;\n    for (int i = 0; i &lt; k; i++) windowSum += arr[i];\n    maxSum = windowSum;\n    for (int i = k; i &lt; arr.length; i++) {\n        windowSum += arr[i] - arr[i - k];\n        maxSum = Math.max(maxSum, windowSum);\n    }\n    return maxSum;\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#two-pointers","title":"\ud83d\udd04 Two Pointers","text":"<pre><code>boolean isPalindrome(String s) {\n    int left = 0, right = s.length() - 1;\n    while (left &lt; right) {\n        if (s.charAt(left++) != s.charAt(right--)) return false;\n    }\n    return true;\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#recursion-backtracking","title":"\ud83d\udd04 Recursion &amp; Backtracking","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#n-queens","title":"\ud83d\udccd N-Queens","text":"<pre><code>void solveNQueens(int n) {\n    char[][] board = new char[n][n];\n    for (char[] row : board) Arrays.fill(row, '.');\n    backtrack(board, 0);\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#dynamic-programming","title":"\ud83d\udd22 Dynamic Programming","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#fibonacci-top-down-memoization","title":"\ud83c\udfc6 Fibonacci (Top-Down Memoization)","text":"<pre><code>int[] dp = new int[100];\nArrays.fill(dp, -1);\nint fib(int n) {\n    if (n &lt;= 1) return n;\n    if (dp[n] != -1) return dp[n];\n    return dp[n] = fib(n-1) + fib(n-2);\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#graph-algorithms","title":"\ud83e\uddee Graph Algorithms","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#bfs-dfs","title":"\ud83c\udf09 BFS &amp; DFS","text":"<pre><code>void bfs(int start, List&lt;List&lt;Integer&gt;&gt; graph) {\n    Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();\n    boolean[] visited = new boolean[graph.size()];\n    queue.add(start);\n    visited[start] = true;\n    while (!queue.isEmpty()) {\n        int node = queue.poll();\n        for (int neighbor : graph.get(node)) {\n            if (!visited[neighbor]) {\n                queue.add(neighbor);\n                visited[neighbor] = true;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#advanced-topics","title":"\ud83d\udd17 Advanced Topics","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#union-find-dsu","title":"\ud83d\udd17 Union-Find (DSU)","text":"<pre><code>class UnionFind {\n    int[] parent, rank;\n    UnionFind(int n) {\n        parent = new int[n];\n        rank = new int[n];\n        for (int i = 0; i &lt; n; i++) parent[i] = i;\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#monotonic-stack-queue","title":"\ud83d\udcc8 Monotonic Stack &amp; Queue","text":"<pre><code>int[] nextGreaterElement(int[] nums) {\n    Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();\n    int[] res = new int[nums.length];\n    Arrays.fill(res, -1);\n    for (int i = 0; i &lt; nums.length; i++) {\n        while (!stack.isEmpty() &amp;&amp; nums[stack.peek()] &lt; nums[i]) {\n            res[stack.pop()] = nums[i];\n        }\n        stack.push(i);\n    }\n    return res;\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#segment-tree-range-queries","title":"\ud83c\udf32 Segment Tree (Range Queries)","text":"<pre><code>class SegmentTree {\n    int[] tree, arr;\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#advanced-java-tips","title":"\ud83c\udf1f Advanced Java Tips","text":"<ul> <li>Use <code>StringBuilder</code> for string concatenation.</li> <li>Use <code>PriorityQueue</code> for optimized sorting.</li> <li>Use <code>Bit Manipulation</code> for optimized calculations.</li> <li>Use <code>ConcurrentHashMap</code> for thread-safe operations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/21.%20Java%20Competitive%20Coding%20Notes/#keep-practicing-stay-consistent","title":"\ud83c\udfaf Keep Practicing &amp; Stay Consistent! \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/","title":"Java Primitive Variables &amp; Data Types","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/#1-what-is-a-variable","title":"1. What is a Variable?","text":"<ul> <li>Definition: A container holding data values, defined with a data type.</li> <li>Example: <code>int age = 30; // age is a container holding the integer 30</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/#2-java-variable-characteristics","title":"2. Java Variable Characteristics","text":"<ul> <li>Statically Typed: Must define the data type.</li> <li>Strongly Typed: Restricts variable type assignments.</li> <li>Naming Rules:<ul> <li>Case-sensitive</li> <li>Start with a letter, <code>$</code>, or <code>_</code></li> <li>Cannot use Java reserved words (<code>class</code>, <code>int</code>, <code>for</code>, etc.)</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/#3-types-of-variables","title":"3. Types of Variables","text":"<ul> <li>Primitive Types: <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>char</code>, <code>boolean</code></li> <li>Reference Types: Objects like <code>String</code>, arrays, classes</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/#4-primitive-data-types-overview","title":"4. Primitive Data Types Overview","text":"<ul> <li><code>char</code>: 2 bytes, ASCII values, e.g., <code>char initial = 'A';</code></li> <li><code>byte</code>: 1 byte, range -128 to 127, e.g., <code>byte smallNum = 100;</code></li> <li><code>short</code>: 2 bytes, range -32,768 to 32,767</li> <li><code>int</code>: 4 bytes, commonly used for whole numbers, e.g., <code>int items = 50;</code></li> <li><code>long</code>: 8 bytes, larger whole numbers, suffix with <code>L</code>, e.g., <code>long distance = 1000L;</code></li> <li><code>boolean</code>: 1 bit, only <code>true</code> or <code>false</code>, e.g., <code>boolean isOpen = true;</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/#5-variable-scopes","title":"5. Variable Scopes","text":"<ul> <li>Instance/Member Variables: Defined in class; each object has its own copy.</li> <li>Static/Class Variables: Shared by all instances, accessed via class name.</li> <li>Local Variables: Defined in methods, destroyed after method completes.</li> <li>Method Parameters: Variables passed to methods, e.g., <code>void print(int num)</code></li> <li>Constructor Parameters: Passed when creating an object.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/#6-type-conversion","title":"6. Type Conversion","text":"<ul> <li>Widening (Automatic): Small to larger types, e.g., <code>int to long</code>.   <code>java   int num = 10;   long bigNum = num; // auto converts to long</code></li> <li>Narrowing (Explicit): Larger to smaller, requires casting.   <code>java   long bigNum = 1000L;   int smallNum = (int) bigNum; // cast to fit into int</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/#7-promotions-in-expressions","title":"7. Promotions in Expressions","text":"<ul> <li>Automatically promotes smaller data types in expressions.<ul> <li><code>byte</code> or <code>short</code> \u2192 <code>int</code> if expression exceeds range.</li> </ul> </li> <li>Example:   <code>java   byte a = 50, b = 100;   int sum = a + b; // promoted to int due to range</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/#8-real-life-analogy-for-variables","title":"8. Real-Life Analogy for Variables","text":"<ul> <li>Think of a variable as a labeled jar that holds specific types of ingredients:<ul> <li>A \"sugar\" jar (int) holds teaspoons, while a \"spice\" jar (byte) holds small pinches.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/3.%20Primitive-Variables/#resources","title":"Resources:","text":"<ul> <li>Primitive Data Types</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/","title":"Java Non-Primitive Variables &amp; Reference Data Types","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/#1-reference-data-types-overview","title":"1. Reference Data Types Overview","text":"<ul> <li>Definition: Variables that store references to objects in memory.</li> <li>Types: <code>Class</code>, <code>String</code>, <code>Interface</code>, <code>Array</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/#2-what-is-a-reference","title":"2. What is a Reference?","text":"<ul> <li>Explanation: Reference variables hold the memory address of an object.</li> <li>Example:   <code>java   Employee emp = new Employee();</code><ul> <li><code>emp</code> holds a reference to the <code>Employee</code> object in memory (not the object itself).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/#3-string","title":"3. String","text":"<ul> <li>Immutable: Strings cannot be modified after creation.</li> <li>String Pool: Stores unique string literals for efficiency.<ul> <li>Example:   <code>java   String s1 = \"hello\";   String s2 = \"hello\"; // Points to same \"hello\" in the String Pool   String s3 = new String(\"hello\"); // Creates a new object in Heap</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/#4-interface","title":"4. Interface","text":"<ul> <li>Cannot create objects of an interface.</li> <li>Variables can store references to objects implementing the interface.</li> <li>Example:   <code>java   Person softwareEngineer = new Engineer(); // `Person` is an interface</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/#5-array","title":"5. Array","text":"<ul> <li>Definition: A sequence of elements of the same type stored in contiguous memory.</li> <li>Declaration:   <code>java   int[] arr = new int[5]; // Creates array with capacity of 5   arr[0] = 10; // Access array elements by index</code></li> <li>Arrays can hold both primitive and non-primitive types.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/#6-wrapper-classes","title":"6. Wrapper Classes","text":"<ul> <li>Definition: Reference classes for primitive types, allowing primitives to be used as objects.</li> <li>Examples:<ul> <li><code>int -&gt; Integer</code></li> <li><code>char -&gt; Character</code></li> <li><code>boolean -&gt; Boolean</code></li> </ul> </li> <li> <p>Uses:</p> <ul> <li>Enable collection usage, as collections require objects.</li> <li>Pass-by-reference advantages.</li> </ul> </li> <li> <p>Autoboxing: Converting primitive to wrapper.   <code>java   int a = 10;   Integer aWrapper = a; // Autoboxing</code></p> </li> <li>Unboxing: Converting wrapper back to primitive.   <code>java   Integer bWrapper = 20;   int b = bWrapper; // Unboxing</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/#7-constant-variable","title":"7. Constant Variable","text":"<ul> <li>Definition: A variable whose value cannot change, often declared with <code>final</code>.</li> <li>Example:   <code>java   static final int VAR = 10; // Constant value</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/#resources","title":"Resources:","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/4.%20Non-Primitive-Variables/#-referencenon-primitive-data-types","title":"- Reference/Non-Primitive Data Types","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/5.%20Methods-And-Constructors/","title":"Java Methods and Constructors","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/5.%20Methods-And-Constructors/#1-methods","title":"1. Methods","text":"<ul> <li>Definition: A set of instructions performing a specific task, enhancing code readability and reusability.</li> <li>Declaration:   <code>java   public int sum(int a, int b) {       return a + b;   }</code></li> <li> <p>Access Specifiers:</p> <ul> <li><code>public</code>: Accessible from any class</li> <li><code>private</code>: Accessible only within the same class</li> <li><code>protected</code>: Accessible in the same package or subclasses</li> <li><code>default</code>: Accessible only within the same package (no keyword needed)</li> </ul> </li> <li> <p>Types:</p> <ul> <li>System Defined: Built-in, like <code>Math.sqrt()</code></li> <li>User Defined: Created by the programmer</li> <li>Overloaded: Same name but different parameters</li> <li>Overridden: Same method in child and parent class</li> <li>Static: Belongs to the class, accessible without an instance</li> <li>Final: Cannot be overridden</li> <li>Abstract: Declared in abstract classes without implementation</li> </ul> </li> <li> <p>Variable Arguments (Varargs):   <code>java   public void printNumbers(int... numbers) { /* Accepts multiple arguments */ }</code></p> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/5.%20Methods-And-Constructors/#2-constructors","title":"2. Constructors","text":"<ul> <li>Definition: Initializes an instance of a class; name matches the class.</li> <li>Characteristics:<ul> <li>No return type</li> <li>Cannot be <code>final</code>, <code>abstract</code>, or <code>static</code></li> <li>Called with <code>new</code> keyword</li> </ul> </li> <li> <p>Types:</p> <ul> <li>Default Constructor: Automatically provided if none defined.</li> <li>No-Argument Constructor: Defined without parameters.</li> <li>Parameterized Constructor: Takes arguments for setting instance variables.</li> <li>Overloaded Constructor: Multiple constructors with different parameters.</li> <li>Private Constructor: Used in Singleton patterns to restrict instantiation.</li> </ul> </li> <li> <p>Constructor Chaining:</p> <ul> <li>Within Class: Use <code>this()</code> to call another constructor in the same class.</li> <li>With Superclass: Use <code>super()</code> to invoke a superclass constructor.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/5.%20Methods-And-Constructors/#resources","title":"Resources:","text":"<ul> <li>Methods</li> <li>Constructor</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/6.%20Memory-Management-and-Garbage-Collection/","title":"Java Memory Management","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/6.%20Memory-Management-and-Garbage-Collection/#memory-types","title":"Memory Types","text":"<ul> <li>Created by JVM and stored in RAM</li> <li>Stack Memory: Stores temporary variables and method references.<ul> <li>Each thread has its own stack.</li> <li>LIFO (Last-In-First-Out): Deletes variables when they go out of scope.</li> <li>Throws <code>java.lang.StackOverflowError</code> if full.</li> </ul> </li> <li>Heap Memory: Stores objects; managed by Garbage Collector (GC).<ul> <li>Divided into Young Generation (short-lived objects) and Old Generation (long-lived objects).</li> <li>Mark &amp; Sweep Algorithm: Used by GC to remove unreferenced objects.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/6.%20Memory-Management-and-Garbage-Collection/#types-of-references","title":"Types of References","text":"<ol> <li> <p>Strong Reference</p> <ul> <li>Standard reference to an object; GC won\u2019t delete until reference is null.</li> <li>Example:   <code>java   Person person = new Person();</code></li> </ul> </li> <li> <p>Weak Reference</p> <ul> <li>GC deletes object when no strong references exist, even if a weak reference remains.</li> <li>Example:   <code>java   WeakReference&lt;Person&gt; weakPerson = new WeakReference&lt;&gt;(new Person());</code></li> </ul> </li> <li> <p>Soft Reference</p> <ul> <li>GC deletes only if memory is low; otherwise, retains object.</li> <li>Useful for caching data that can be re-created if needed.</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/6.%20Memory-Management-and-Garbage-Collection/#heap-memory-structure","title":"Heap Memory Structure","text":"<ul> <li>Young Generation: New objects start here (in Eden space); surviving objects move to Survivor Spaces (S0, S1).</li> <li>Old Generation: Objects promoted here after reaching age threshold.</li> <li>Metaspace: Stores class metadata, constants; expandable since Java 8.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/6.%20Memory-Management-and-Garbage-Collection/#garbage-collection-algorithms","title":"Garbage Collection Algorithms","text":"<ol> <li>Mark &amp; Sweep: Identifies unreferenced objects (mark) and removes them (sweep).</li> <li>Mark &amp; Compact: Moves active objects to one memory block, freeing sequential space.</li> <li>Serial GC: Single-threaded; pauses application threads during GC (for both minor and major collections).</li> <li>Parallel GC: Multiple threads perform GC; reduces pause time.</li> <li>Concurrent Mark &amp; Sweep (CMS): Attempts to run GC concurrently with application threads; no memory compaction.</li> <li>G1 GC: Improved CMS; minimizes pause time and includes memory compaction.</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/6.%20Memory-Management-and-Garbage-Collection/#real-world-example-of-garbage-collection","title":"Real-World Example of Garbage Collection","text":"<ul> <li>Browser Cache: Like Soft Reference; objects (web resources) are removed if memory is low.</li> <li>Game Objects: Temporary entities stored in Young Generation; long-term objects like player stats move to Old Generation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/6.%20Memory-Management-and-Garbage-Collection/#resources","title":"Resources:","text":"<ul> <li>Java Memory Management and Garbage Collection</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/7.%20Classes/","title":"Java Classes Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/7.%20Classes/#types-of-classes","title":"Types of Classes","text":"<ol> <li> <p>Abstract Class</p> <ul> <li>Definition: Cannot be instantiated, only inherited.</li> <li>Example: Abstract class <code>Vehicle</code> with <code>move()</code> method, implemented by subclasses like <code>Car</code>, <code>Bike</code>.</li> <li>Usage: Common behavior shared among subclasses.    ```java abstract class Vehicle {     abstract void move(); // Abstract method     void start() {         System.out.println(\"Vehicle started\");     } }</li> </ul> <p>class Car extends Vehicle {     @Override     void move() {         System.out.println(\"Car is moving\");     } } ```</p> </li> <li> <p>Concrete Class</p> <ul> <li>Definition: A class with implementations for all methods; can be instantiated.</li> <li>Example: <code>LuxuryCar</code> inherits <code>Vehicle</code> and implements all abstract methods.    <code>java class LuxuryCar extends Vehicle {     @Override     void move() {         System.out.println(\"Luxury car is moving with style\");     } }</code></li> </ul> </li> <li> <p>Nested Classes</p> <ul> <li>Types:<ul> <li>Static Nested Class: Access static members directly.</li> <li>Non-static Inner Class: Needs an outer class instance.</li> </ul> </li> <li>Example: A <code>Car</code> class with a <code>Engine</code> inner class.</li> <li> <p>Access Modifiers: Can use public, private, protected, default. ```java class Car {     String model;</p> <p>Car(String model) {     this.model = model; }</p> <p>// Static nested class static class Engine {     void displayType() {         System.out.println(\"Engine type: V8\");     } }</p> <p>// Non-static inner class class Dashboard {     void showModel() {         System.out.println(\"Car model: \" + model);     } }     }     ```</p> </li> </ul> </li> <li> <p>Anonymous Inner Class</p> <ul> <li>Definition: Inline class, often for one-time use.</li> <li>Example: Used in event handling where interface method is implemented anonymously.</li> <li>Behavior: Compiler creates a subclass implicitly.  ```java interface Action {     void perform(); }</li> </ul> <p>public class ShareResource.SharedResourceMain {     public static void main(String[] args) {         Action action = new Action() {             @Override             public void perform() {                 System.out.println(\"Action performed using anonymous inner class\");             }         };         action.perform();     } } ```</p> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/7.%20Classes/#generic-classes","title":"Generic Classes","text":"<ol> <li> <p>Generic Class Basics</p> <ul> <li>Purpose: Avoid typecasting, increase reusability.</li> <li>Syntax: Define with <code>&lt;T&gt;</code>, where <code>T</code> can be any non-primitive type.</li> <li> <p>Example: <code>class Box&lt;T&gt; { T value; }</code>    ```java class Box {     private T value; <p>Box(T value) {     this.value = value; }</p> <p>T getValue() {     return value; }     }    ```</p> <li> <p>Generic Inheritance</p> <ul> <li>Non-Generic Subclass: Generic class extended by specifying type.</li> <li>Generic Subclass: Maintains generic type for flexibility.</li> <li>Example: <code>Box&lt;Integer&gt; intBox = new Box&lt;&gt;();</code>    ```java class GenericBox {     T item; } <p>class IntegerBox extends GenericBox {     // Inherits T as Integer } ``` <li> <p>Multiple Generics</p> <ul> <li>Syntax: <code>class Pair&lt;T, U&gt; { T first; U second; }</code></li> <li> <p>Example: <code>Pair&lt;String, Integer&gt; nameAge = new Pair&lt;&gt;();</code>    ```java class Pair {     private T first;     private U second; <p>Pair(T first, U second) {     this.first = first;     this.second = second; }</p> <p>T getFirst() {     return first; }</p> <p>U getSecond() {     return second; }     }     ```</p> <li> <p>Bounded Generics</p> <ul> <li>Upper Bound: Restricts types, e.g., <code>&lt;T extends Number&gt;</code>.</li> <li>Lower Bound: Allows superclass types, e.g., <code>List&lt;? super Vehicle&gt;</code>.</li> <li> <p>Usage: Useful for numeric operations or limiting collection types.    ```java class DataProcessor {     private T data; <p>DataProcessor(T data) {     this.data = data; }</p> <p>double getDoubleValue() {     return data.doubleValue(); }     }     ```</p> <li> <p>Wildcards in Generics</p> <ul> <li>Types:<ul> <li><code>&lt;?&gt;</code> Unbounded</li> <li><code>&lt;? extends T&gt;</code> Upper bounded</li> <li><code>&lt;? super T&gt;</code> Lower bounded</li> </ul> </li> <li> <p>Example: <code>List&lt;? extends Number&gt; numbers</code> allows <code>Integer</code>, <code>Float</code>, etc.    ```java public class ShareResource.SharedResourceMain {     public static void printList(List&lt;? extends Number&gt; list) {         for (Number num : list) {             System.out.println(num);         }     }</p> <p>public static void main(String[] args) {     List intList = new ArrayList&lt;&gt;();     intList.add(10);     intList.add(20);     printList(intList);     printList(intList); }     }     ```"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/7.%20Classes/#type-erasure","title":"Type Erasure","text":"<ol> <li> <p>Generic Class Erasure</p> <ul> <li>Definition: Type information removed at runtime; replaces with upper bounds or <code>Object</code>.</li> <li>Example: <code>Box&lt;T&gt;</code> in bytecode becomes <code>Box&lt;Object&gt;</code>.    <code>java class Box&lt;T&gt; {     T item; } // After type erasure: class Box {     Object item; }</code></li> </ul> </li> <li> <p>Generic Method Erasure</p> <ul> <li>Impact: Ensures compatibility with pre-generic code.    ```java    // Generic method definition    public  void printItem(T item) { System.out.println(item);    } <p>// After type erasure, this would become:    public void printItem(Object item) {     System.out.println(item);    }    ```</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/7.%20Classes/#interview-cheat-sheet","title":"Interview Cheat Sheet","text":"<ul> <li>Abstract Class vs Interface: Abstract allows some method implementations; interfaces are fully abstract (Java 8+ interfaces can have default methods).</li> <li>Static Nested Class: Useful for logically grouping classes to be used with the outer class.</li> <li>Generics Advantage: Prevents ClassCastException at runtime.</li> <li>Bounded Generics: Provides control over acceptable types (e.g.,  limits to numeric types)."},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/7.%20Classes/#resources","title":"Resources:","text":"<ul> <li>Java Classes in Depth</li> <li>Java Generic Classes</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/","title":"Java POJO, Enum, and Singleton Classes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/#pojo-plain-old-java-object","title":"POJO (Plain Old Java Object)","text":"<ul> <li>Definition: A simple Java class with private fields, public getters and setters, and a no-args constructor.</li> <li>Usage: Maps request data in a consistent format; centralizes changes to a single class.</li> <li>Example:   Public class with default constructor, fields, and getter &amp; setter methods. </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/#enum-class","title":"Enum Class","text":"<ol> <li> <p>Basic Enum Class</p> <ul> <li>Definition: Represents a fixed set of constants.</li> <li>Example: <code>enum Day { MONDAY, TUESDAY, WEDNESDAY }</code></li> <li>Methods:<ul> <li><code>values()</code>: Returns all constants as an array.</li> <li><code>valueOf(\"CONSTANT\")</code>: Matches and returns a constant.</li> </ul> </li> <li>Ordinals: Each constant has an index (0 for MONDAY, etc.)</li> </ul> </li> <li> <p>Enum with Custom Values</p> <ul> <li>Usage: Can assign custom values to each constant.</li> <li>Constructor: Define a parameterized constructor for custom values.</li> </ul> </li> <li> <p>Method Override by Constant</p> <ul> <li>Behavior: Constants can override methods for specific behaviors.</li> </ul> </li> <li> <p>Enum with Abstract Method</p> <ul> <li>Usage: Abstract methods implemented by all constants.</li> </ul> </li> <li> <p>Enum Implements Interface</p> <ul> <li>Definition: Enum can implement an interface for standardized behavior.</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/#enum-benefits-over-static-final-constants","title":"Enum Benefits over Static Final Constants","text":"<ul> <li>Advantages: Improved readability, controlled parameter values, and type safety.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/#enum-with-custom-values-example","title":"Enum with Custom Values Example","text":"<p>Enum representing days with working hours:</p> <pre><code>public enum Day {\n    MONDAY(8), TUESDAY(8), WEDNESDAY(8);\n\n    private int hours;\n\n    private Day(int hours) {\n        this.hours = hours;\n    }\n\n    public int getHours() {\n        return hours;\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/#final-class","title":"Final Class","text":"<ul> <li>Definition: A class that cannot be extended.</li> <li>Example: <code>final class Constants { ... }</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/#singleton-class","title":"Singleton Class","text":"<ul> <li>Objective: Restrict a class to a single instance (e.g., database connection).</li> <li> <p>Implementations:</p> <ol> <li> <p>Eager Initialization</p> <ul> <li>Steps:<ul> <li>Create a private static instance.</li> <li>Use a private constructor.</li> <li>Public static method to return the instance.</li> </ul> </li> </ul> </li> <li> <p>Lazy Initialization</p> <ul> <li>Definition: Instance is created only when requested.</li> <li>Drawback: Not thread-safe; two threads may create separate instances.</li> </ul> </li> <li> <p>Synchronized Method</p> <ul> <li>Definition: Ensures only one thread can access the creation method at a time.</li> <li>Drawback: Slower performance.</li> </ul> </li> <li> <p>Double-Checked Locking</p> <ul> <li>Definition: Applies synchronization to a block, reducing the performance hit.</li> <li>Issue: Cache vs. memory inconsistency, solved with the <code>volatile</code> keyword.</li> </ul> </li> <li> <p>Bill Pugh Solution</p> <ul> <li>Definition: Uses a private static nested class that loads the instance only when accessed.</li> </ul> </li> <li> <p>Enum Singleton</p> <ul> <li>Definition: Ensures a single instance per JVM by default, as enums restrict multiple instances.</li> </ul> </li> </ol> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/#singleton-implementation-example","title":"Singleton Implementation Example","text":"<p>Singleton class for a database connection:</p> <pre><code>public class DatabaseConnection {\n    private static DatabaseConnection instance;\n\n    private DatabaseConnection() { ... }\n\n    public static DatabaseConnection getInstance() {\n        if (instance == null) {\n            synchronized(DatabaseConnection.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnection();\n                }\n            }\n        }\n        return instance;\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/#immutable-class","title":"Immutable Class","text":"<ul> <li>Definition: Class whose state cannot be modified after creation.</li> <li>Implementation: Use private fields, no setters, and pass copies of mutable objects.</li> </ul> <pre><code>public final class ImmutablePerson {\n    private final String name;\n    private final List&lt;String&gt; hobbies;\n\n    public ImmutablePerson(String name, List&lt;String&gt; hobbies) {\n        this.name = name;\n        // Creating a copy of the original list to ensure immutability\n        this.hobbies = Collections.unmodifiableList(List.copyOf(hobbies));\n    }\n\n    public String getName() { return name; }\n    public List&lt;String&gt; getHobbies() { return hobbies; }\n}\n</code></pre> <ul> <li><code>final</code> class and fields ensure immutability.</li> <li>Defensive copy with <code>unmodifiableList</code> prevents modification of the hobbies list.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/8.%20POJO-Singleton/#resources","title":"Resources:","text":"<ul> <li>Java Enum, POJO and Final Classes</li> <li>Java Singleton and Immutable Class</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/9.%20Interface/","title":"9. Interface","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/","title":"\ud83d\ude80 \ud83d\udd25 Concurrency &amp; Concurrency Management in Distributed Systems \u2013 Quick Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#1-what-is-concurrency","title":"\u2705 1. What is Concurrency?","text":"<ul> <li>\ud83d\udd25 Concurrency refers to the execution of multiple tasks simultaneously to improve efficiency and responsiveness.</li> <li>\u2705 Parallelism \u2260 Concurrency:<ul> <li>\ud83d\udea6 Concurrency: Multiple tasks make progress simultaneously (interleaving execution).</li> <li>\ud83d\udea6 Parallelism: Multiple tasks execute truly in parallel (multi-core execution).</li> </ul> </li> <li>\ud83d\udd25 Challenges:<ul> <li>\u2705 Race conditions \u2013 Improper ordering of operations.</li> <li>\u2705 Deadlocks \u2013 Circular waiting on resources.</li> <li>\u2705 Consistency issues \u2013 Inconsistent data state.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#2-key-concurrency-concepts","title":"\ud83d\udd25 2. Key Concurrency Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#1-threading-multithreading","title":"\ud83d\udd25 1. Threading &amp; Multithreading","text":"<ul> <li>\u2705 Thread: A lightweight process running a task.</li> <li>\ud83d\udea6 Multithreading: Running multiple threads concurrently.</li> <li>\ud83d\udd25 Issues:<ul> <li>\u2705 Thread-safety: Ensuring shared resources are accessed safely.</li> <li>\u2705 Synchronization: Avoiding race conditions.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#2-locks-synchronization","title":"\ud83d\udd25 2. Locks &amp; Synchronization","text":"<ul> <li>\u2705 Mutex: Mutual exclusion lock, only one thread can access.</li> <li>\ud83d\udd25 Reentrant Lock: Allows a thread to acquire the same lock multiple times.</li> <li>\u2705 Read/Write Lock: Multiple readers, single writer.</li> <li>\ud83d\udd25 Optimistic &amp; Pessimistic Locking:<ul> <li>\u2705 Optimistic: Assumes no conflicts, validates before committing.</li> <li>\ud83d\udd25 Pessimistic: Locks immediately, preventing conflicts.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#3-thread-safety-techniques","title":"\ud83d\udd25 3. Thread Safety Techniques","text":"<ul> <li>\u2705 Volatile keyword: Ensures visibility of changes across threads.</li> <li>\ud83d\udd25 Synchronized blocks: Prevent concurrent access to a block.</li> <li>\u2705 Immutable objects: Immutable state is thread-safe.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#4-distributed-system-concurrency-challenges","title":"\ud83d\udd25 4. Distributed System Concurrency Challenges","text":"<ul> <li>\u2705 Eventual consistency: Data becomes consistent over time.</li> <li>\ud83d\udd25 Data replication: Ensures consistency across distributed nodes.</li> <li>\u2705 Sharding: Splitting data across multiple servers.</li> <li>\ud83d\udd25 Leader Election: Managing concurrency with distributed leader election.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#3-concurrency-patterns-in-distributed-systems","title":"\ud83d\ude80 3. Concurrency Patterns in Distributed Systems","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#1-leader-follower-pattern","title":"\ud83d\udd25 1. Leader-Follower Pattern","text":"<ul> <li>\u2705 Leader: Manages coordination.</li> <li>\ud83d\udd25 Followers: Execute tasks concurrently.</li> <li>\u2705 Used in distributed databases, cloud services.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#2-worker-queue-pattern","title":"\ud83d\udd25 2. Worker-Queue Pattern","text":"<ul> <li>\u2705 Queue: Manages tasks.</li> <li>\ud83d\udd25 Workers: Multiple threads consume tasks concurrently.</li> <li>\u2705 Improves parallel processing efficiency.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#3-actor-model","title":"\ud83d\udd25 3. Actor Model","text":"<ul> <li>\u2705 Actors: Independent units of computation.</li> <li>\ud83d\udd25 Concurrency: Managed by message-passing.</li> <li>\u2705 Used in distributed systems like Akka, Erlang.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#4-concurrency-control-techniques","title":"\ud83d\udea6 4. Concurrency Control Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#1-pessimistic-concurrency-control-pcc","title":"\ud83d\udd25 1. Pessimistic Concurrency Control (PCC)","text":"<ul> <li>\u2705 Locks the resource immediately to prevent conflicts.</li> <li>\ud83d\udd25 Pros: Ensures data consistency.</li> <li>\u2705 Cons: Reduced parallelism, risk of deadlocks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#2-optimistic-concurrency-control-occ","title":"\ud83d\udd25 2. Optimistic Concurrency Control (OCC)","text":"<ul> <li>\u2705 Assumes no conflict.</li> <li>\ud83d\udd25 Validates changes before committing.</li> <li>\u2705 Pros: Better performance for low-contention scenarios.</li> <li>\ud83d\udd25 Cons: Conflict overhead in high-contention scenarios.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#3-two-phase-locking-2pl","title":"\ud83d\udd25 3. Two-Phase Locking (2PL)","text":"<ul> <li>\u2705 Phase 1: Growing phase (acquiring locks).</li> <li>\ud83d\udd25 Phase 2: Shrinking phase (releasing locks).</li> <li>\u2705 Guarantees: Serializability.</li> <li>\ud83d\udd25 Used in database transactions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#5-concurrency-management-with-java-code-examples","title":"\ud83d\udd25 5. Concurrency Management with Java \u2013 Code Examples","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#1-multithreading-example-in-java","title":"\u2705 1. Multithreading Example in Java","text":"<pre><code>class Task implements Runnable {\n    private String name;\n\n    public Task(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(name + \" is executing by \" + Thread.currentThread().getName());\n    }\n}\n\npublic class ConcurrencyExample {\n    public static void main(String[] args) {\n        Thread thread1 = new Thread(new Task(\"Task 1\"));\n        Thread thread2 = new Thread(new Task(\"Task 2\"));\n\n        thread1.start();\n        thread2.start();\n    }\n}\n</code></pre> <p>\u2705 Explanation: - \ud83d\udd25 Runnable interface for concurrency. - \u2705 Thread execution with <code>start()</code>.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#2-synchronized-block-in-java","title":"\u2705 2. Synchronized Block in Java","text":"<pre><code>class Counter {\n    private int count = 0;\n\n    public void increment() {\n        synchronized (this) {  // Synchronizing the block\n            count++;\n        }\n    }\n\n    public int getCount() {\n        return count;\n    }\n}\n\npublic class SyncDemo {\n    public static void main(String[] args) throws InterruptedException {\n        Counter counter = new Counter();\n\n        Thread t1 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) counter.increment();\n        });\n\n        Thread t2 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) counter.increment();\n        });\n\n        t1.start();\n        t2.start();\n\n        t1.join();\n        t2.join();\n\n        System.out.println(\"Final Count: \" + counter.getCount());\n    }\n}\n</code></pre> <p>\u2705 Explanation: - \ud83d\udd25 Synchronized block ensures thread safety. - \u2705 Prevents race conditions.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management-in-Distributed-Systems/#6-final-tips-for-microsoft-interview","title":"\ud83d\ude80 6. Final Tips for Microsoft Interview:","text":"<ul> <li>\u2705 Understand concurrency challenges like race conditions, deadlocks, and livelocks.</li> <li>\ud83d\udd25 Be familiar with patterns like leader-follower, worker-queue, and actor models.</li> <li>\u2705 Demonstrate code efficiency using multithreading and concurrency control.</li> <li>\ud83d\udd25 Explain trade-offs between optimistic and pessimistic concurrency.</li> <li>\u2705 Know distributed transactions: Two-phase commit (2PC) and eventual consistency.</li> </ul> <p>\ud83d\udcaf You\u2019re fully prepared \u2013 Go ace your interview! \ud83d\udcaa\ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/","title":"\ud83d\udd25 Concurrency &amp; Concurrency Management \u2013 Quick Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#1-what-is-concurrency","title":"\u2705 1. What is Concurrency?","text":"<ul> <li>\ud83d\udd25 Concurrency: The ability to execute multiple tasks simultaneously.</li> <li>\u2705 Involves multiple threads or processes executing in overlapping time periods.</li> <li>\ud83d\ude80 Parallelism vs. Concurrency:<ul> <li>Concurrency \u2192 Multiple tasks start, run, and complete in overlapping time.</li> <li>Parallelism \u2192 Multiple tasks run at the same instant (truly simultaneous).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#2-key-concurrency-concepts","title":"\ud83d\ude80 2. Key Concurrency Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#1-threads-processes","title":"\ud83d\udd25 1. Threads &amp; Processes","text":"<ul> <li>\u2705 Thread: A lightweight sub-process within a process.</li> <li>\u2705 Process: Independent execution unit with its own memory space.</li> <li>\ud83d\udd25 Multithreading: Running multiple threads concurrently.</li> </ul> <pre><code>// Java Multithreading Example\nclass MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread is running...\");\n    }\n    public static void main(String[] args) {\n        MyThread t1 = new MyThread();\n        t1.start();\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#2-thread-safety","title":"\ud83d\udd25 2. Thread Safety","text":"<ul> <li>\u2705 Ensures correctness in multithreaded programs.</li> <li>\ud83d\udd25 Techniques:<ul> <li>\u2705 Synchronization: Locks shared resources.</li> <li>\u2705 Atomic operations: Ensures indivisible operations.</li> <li>\u2705 Volatile keyword: Ensures variable visibility.</li> </ul> </li> </ul> <pre><code>// Thread Safety using Synchronization\nclass Counter {\n    private int count = 0;\n\n    public synchronized void increment() {\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#3-race-conditions","title":"\ud83d\udd25 3. Race Conditions","text":"<ul> <li>\u2705 Occur when multiple threads access shared data simultaneously.</li> <li>\ud83d\udd25 Mitigation: Use synchronization, locks, or atomic variables.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#4-deadlock","title":"\ud83d\udd25 4. Deadlock","text":"<ul> <li>\u2705 Occurs when two or more threads are blocked waiting for each other.</li> <li>\ud83d\udd25 Mitigation:<ul> <li>\u2705 Lock ordering: Always acquire locks in a consistent order.</li> <li>\u2705 Timeouts: Use timeouts for lock acquisition.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#5-livelock-starvation","title":"\ud83d\udd25 5. Livelock &amp; Starvation","text":"<ul> <li>\u2705 Livelock: Threads respond to each other\u2019s actions but fail to make progress.</li> <li>\u2705 Starvation: A thread is perpetually denied access due to thread scheduling issues.</li> <li>\ud83d\udd25 Mitigation: Use fair locks and scheduling policies.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#3-concurrency-management-techniques","title":"\ud83d\udea6 3. Concurrency Management Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#1-locks-synchronization","title":"\ud83d\udd25 1. Locks &amp; Synchronization","text":"<ul> <li>\u2705 Prevents multiple threads from modifying shared resources simultaneously.</li> <li>\ud83d\udd25 Types:<ul> <li>\u2705 Reentrant Locks: Allows the same thread to acquire multiple locks.</li> <li>\u2705 Read-Write Locks: Optimizes performance by separating read and write operations.</li> </ul> </li> </ul> <pre><code>// Java ReentrantLock Example\nimport java.util.concurrent.locks.ReentrantLock;\n\nclass SharedResource {\n    private final ReentrantLock lock = new ReentrantLock();\n\n    public void accessResource() {\n        lock.lock();\n        try {\n            System.out.println(\"Thread: \" + Thread.currentThread().getName());\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#2-executors-thread-pools","title":"\ud83d\udd25 2. Executors &amp; Thread Pools","text":"<ul> <li>\u2705 Efficient thread management by using thread pools.</li> <li>\ud83d\udd25 Reduces overhead of thread creation and destruction.</li> </ul> <pre><code>import java.util.concurrent.*;\n\npublic class ThreadPoolExample {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(5);\n        for (int i = 0; i &lt; 10; i++) {\n            executor.execute(() -&gt; System.out.println(\"Thread: \" + Thread.currentThread().getName()));\n        }\n        executor.shutdown();\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#3-futures-callables","title":"\ud83d\udd25 3. Futures &amp; Callables","text":"<ul> <li>\u2705 Future: Represents the result of an asynchronous computation.</li> <li>\u2705 Callable: Similar to Runnable but can return a result and throw exceptions.</li> </ul> <pre><code>import java.util.concurrent.*;\n\npublic class FutureExample {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        Future&lt;Integer&gt; future = executor.submit(() -&gt; 42);\n        System.out.println(\"Result: \" + future.get());\n        executor.shutdown();\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#4-concurrent-collections","title":"\ud83d\udd25 4. Concurrent Collections","text":"<ul> <li>\u2705 Java provides thread-safe collections.</li> <li>\ud83d\udd25 Examples:<ul> <li>\u2705 <code>ConcurrentHashMap</code></li> <li>\u2705 <code>CopyOnWriteArrayList</code></li> </ul> </li> </ul> <pre><code>import java.util.concurrent.ConcurrentHashMap;\n\npublic class ConcurrentCollectionExample {\n    public static void main(String[] args) {\n        ConcurrentHashMap&lt;String, String&gt; map = new ConcurrentHashMap&lt;&gt;();\n        map.put(\"key1\", \"value1\");\n        System.out.println(map.get(\"key1\"));\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#4-best-practices-for-concurrency","title":"\ud83d\ude80 4. Best Practices for Concurrency","text":"<ul> <li>\u2705 Minimize shared resources \u2013 Use immutability wherever possible.</li> <li>\ud83d\udd25 Use thread-safe collections \u2013 <code>ConcurrentHashMap</code> over <code>HashMap</code>.</li> <li>\u2705 Limit the number of threads \u2013 Use thread pools efficiently.</li> <li>\ud83d\udd25 Avoid nested locks \u2013 Reduces the chance of deadlocks.</li> <li>\u2705 Use volatile wisely \u2013 Ensure visibility of variables.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#5-concurrency-challenges-solutions","title":"\ud83d\udea6 5. Concurrency Challenges &amp; Solutions","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#1-scalability-issues","title":"\ud83d\udd25 1. Scalability Issues","text":"<ul> <li>\u2705 Solution: Use non-blocking algorithms, asynchronous processing.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#2-memory-consistency-errors","title":"\ud83d\udd25 2. Memory Consistency Errors","text":"<ul> <li>\u2705 Solution: Use volatile variables and synchronized blocks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#3-performance-bottlenecks","title":"\ud83d\udd25 3. Performance Bottlenecks","text":"<ul> <li>\u2705 Solution: Use thread pools and efficient data structures.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Concurrency-Management/#final-tips-for-interview","title":"\ud83d\ude80 \ud83d\udd25 Final Tips for Interview:","text":"<ul> <li>\u2705 Explain multithreading concepts clearly with real-world examples.</li> <li>\ud83d\udd25 Demonstrate thread-safety techniques and their trade-offs.</li> <li>\u2705 Write clean, thread-safe code with proper synchronization.</li> <li>\ud83d\udd25 Show knowledge of concurrency pitfalls like deadlocks, livelocks, and race conditions.</li> </ul> <p>\ud83d\udd25 \ud83d\udcaf You're now interview-ready for concurrency questions! \ud83d\udcaa\ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Core-Java/Notes/Java%20Notes/Cloud-Notes-Links/","title":"Cloud Notes Links","text":"<ol> <li>Java Enum, POJO and Final Classes Explained with Examples</li> <li>Java Singleton and Immutable Class Explained with Examples</li> <li>Java Interface in Depth - Part 1</li> <li>Default, Static &amp; Private Method in Interface - Java 8 and Java 9 features, Interfaces Part 2</li> <li>Functional Interface and Lambda Expression - Java 8 features</li> <li>Java Reflection in Depth (Using Examples)</li> <li>Java Annotations with Examples</li> <li>Exception Handling in Java with Examples</li> <li>Operators in Java | Different Types of Operators in JAVA</li> <li>Control Flow Statements in Java | Decision Making, Looping and Branching Statements</li> <li>Collections in Java - Part 1 | Java Collections Framework in depth</li> <li>Collections in Java - Part 2 | Comparator Vs Comparable | PriorityQueue</li> <li>Collections in Java - Part 3 | Deque and List in Depth</li> <li>Collections in Java - Part 4 | HashMap Internal Working in Java and Link 2</li> <li>Collections in Java - Part 5 | LinkedHashMap and TreeMap in depth and Link 2</li> <li>Collections in Java - Part 6, SET and Link 2</li> <li>Streams in Java 8</li> <li>Multithreading and Concurrency in Java: Part 1</li> <li>Thread Creation, Thread Lifecycle and Inter-Thread Communication</li> <li>Thread Joining, Daemon Thread, Thread Priority</li> <li>Locks and Condition | Java Multithreading Part 4 | Reentrant, ReadWrite, Stamped &amp; Semaphore Lock</li> <li>Lock-Free Concurrency, Compare-and-Swap | Atomic &amp; Volatile Variables</li> <li>Thread Pools in Java</li> <li>Java 8 CompletableFuture</li> <li>Java ForkJoinPool</li> <li>Java ScheduledThreadPoolExecutor</li> <li>Java VirtualThreads vs Normal Threads</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/","title":"Quick Revision","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#java-revision-notes-table-of-contents","title":"\u2705 Java Revision Notes \u2013 Table of Contents","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#1-core-java-basics","title":"\ud83d\udcda 1. Core Java Basics","text":"<ul> <li>\u2699\ufe0f [ ] Java Introduction<ul> <li>Features of Java</li> <li>JVM, JRE, JDK Differences</li> <li>Platform Independence &amp; Bytecode Execution</li> </ul> </li> <li>\ud83d\udd25 [ ] Data Types &amp; Variables<ul> <li>Primitive &amp; Reference Types</li> <li>Type Casting (Widening &amp; Narrowing)</li> </ul> </li> <li>\ud83d\udd01 [ ] Operators<ul> <li>Arithmetic, Relational, Logical, Bitwise, and Assignment</li> <li>Ternary and instanceof Operators</li> </ul> </li> <li>\ud83d\udd04 [ ] Control Flow Statements<ul> <li>if-else, switch-case</li> <li>Loops: for, while, do-while</li> </ul> </li> <li>\ud83c\udfaf [ ] Arrays<ul> <li>Declaration, Initialization, Iteration</li> <li>Multidimensional Arrays</li> <li>Arrays class methods (sort(), binarySearch(), etc.)</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#2-oops-concepts-important-for-interviews","title":"\ud83d\udd25 2. OOPs Concepts (\u2b50\ufe0f Important for Interviews)","text":"<ul> <li>\ud83d\udd11 [ ] Encapsulation</li> <li>\ud83e\uddf1 [ ] Inheritance<ul> <li>Method Overriding, super and this keywords</li> </ul> </li> <li>\ud83d\udd25 [ ] Polymorphism<ul> <li>Compile-time vs Runtime</li> <li>Method Overloading &amp; Overriding</li> </ul> </li> <li>\ud83d\udd25 [ ] Abstraction<ul> <li>Abstract Classes vs Interfaces</li> <li>default and static methods in interfaces</li> </ul> </li> <li>\ud83d\udd25 [ ] Access Modifiers<ul> <li>public, private, protected, default</li> </ul> </li> <li>\ud83d\udd25 [ ] Composition vs Inheritance</li> <li>\ud83d\udee0\ufe0f [ ] SOLID Principles</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#3-important-java-classes","title":"\u2699\ufe0f 3. Important Java Classes","text":"<ul> <li>\ud83d\udee0\ufe0f [ ] Object Class<ul> <li>equals(), hashCode(), toString(), clone()</li> </ul> </li> <li>\ud83d\udcca [ ] String &amp; StringBuilder<ul> <li>Immutability &amp; Interning</li> <li>String manipulation methods</li> </ul> </li> <li>\ud83d\udd25 [ ] Wrapper Classes<ul> <li>Autoboxing &amp; Unboxing</li> </ul> </li> <li>\ud83d\uded1 [ ] Exception Handling<ul> <li>try-catch-finally, throw, throws</li> <li>Checked vs Unchecked Exceptions</li> <li>Custom Exceptions</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#4-java-collections-framework-highly-important-for-interviews","title":"\ud83d\ude80 4. Java Collections Framework (\u2b50\ufe0f Highly Important for Interviews)","text":"<ul> <li>\ud83d\udee0\ufe0f [ ] Collection Interfaces<ul> <li>List, Set, Map, Queue</li> </ul> </li> <li>\ud83d\udd25 [ ] List Implementations<ul> <li>ArrayList, LinkedList, Vector, Stack</li> </ul> </li> <li>\ud83d\udd25 [ ] Set Implementations<ul> <li>HashSet, LinkedHashSet, TreeSet</li> </ul> </li> <li>\ud83d\udd25 [ ] Map Implementations<ul> <li>HashMap, LinkedHashMap, TreeMap, ConcurrentHashMap</li> </ul> </li> <li>\ud83d\udd25 [ ] Queue &amp; Deque<ul> <li>PriorityQueue, ArrayDeque</li> </ul> </li> <li>\ud83d\ude80 [ ] Comparison &amp; Sorting<ul> <li>Comparable vs Comparator</li> </ul> </li> <li>\ud83d\udee0\ufe0f [ ] Collections Utility Class<ul> <li>sort(), binarySearch(), synchronizedList()</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#5-multithreading-concurrency-highly-important-for-interviews","title":"\u26a1 5. Multithreading &amp; Concurrency (\u2b50\ufe0f Highly Important for Interviews)","text":"<ul> <li>\ud83d\udd25 [ ] Thread Creation<ul> <li>Thread class &amp; Runnable interface</li> </ul> </li> <li>\ud83d\udd25 [ ] Thread Lifecycle &amp; States</li> <li>\ud83d\udd25 [ ] Thread Synchronization<ul> <li>synchronized, wait(), notify(), notifyAll()</li> </ul> </li> <li>\ud83d\udd25 [ ] Concurrency Utilities<ul> <li>ExecutorService, Future, Callable</li> <li>CountDownLatch, CyclicBarrier</li> </ul> </li> <li>\ud83d\udd25 [ ] Volatile &amp; Atomic Variables</li> <li>\ud83d\udd25 [ ] Java Memory Model (JMM)</li> <li>\ud83d\udd25 [ ] Thread Pooling &amp; Executor Framework</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#6-java-streams-functional-programming","title":"\ud83c\udf10 6. Java Streams &amp; Functional Programming","text":"<ul> <li>\ud83d\udd25 [ ] Java Streams API</li> <li>Stream Pipelines (map(), filter(), reduce())</li> <li>Intermediate &amp; Terminal Operations</li> <li>\ud83d\udd25 [ ] Lambda Expressions</li> <li>\ud83d\udd25 [ ] Functional Interfaces</li> <li>Consumer, Predicate, Function, Supplier</li> <li>\ud83d\udd25 [ ] Method References</li> <li>\ud83d\udd25 [ ] Optional Class</li> <li>orElse(), orElseGet(), orElseThrow()</li> <li>\ud83d\udd25 [ ] Collectors API</li> <li>toList(), toMap(), joining()</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#7-file-handling-io","title":"\ud83d\udee0\ufe0f 7. File Handling &amp; I/O","text":"<ul> <li>\ud83d\udd25 [ ] File I/O</li> <li>File, FileReader, FileWriter</li> <li>\ud83d\udd25 [ ] Buffered I/O Streams</li> <li>BufferedReader, BufferedWriter</li> <li>\ud83d\udd25 [ ] Serialization &amp; Deserialization</li> <li>ObjectOutputStream, ObjectInputStream</li> <li>\ud83d\udd25 [ ] NIO (New I/O)</li> <li>Path, Files, Channels, ByteBuffer</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#8-design-patterns-in-java-crucial-for-interviews","title":"\ud83d\udee0\ufe0f 8. Design Patterns in Java (\u2b50\ufe0f Crucial for Interviews)","text":"<ul> <li>\ud83d\udd25 [ ] Creational Patterns</li> <li>Singleton, Factory, Builder, Prototype</li> <li>\ud83d\udd25 [ ] Structural Patterns</li> <li>Adapter, Decorator, Composite, Proxy</li> <li>\ud83d\udd25 [ ] Behavioral Patterns</li> <li>Observer, Strategy, Command, Template Method</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#9-java-8-11-17-and-beyond-features","title":"\ud83c\udf10 9. Java 8, 11, 17, and Beyond Features","text":"<ul> <li>\ud83d\udd25 [ ] Java 8</li> <li>Lambdas, Streams, Default Methods, Optional</li> <li>\ud83d\udd25 [ ] Java 11</li> <li>var keyword, isBlank(), lines(), strip()</li> <li>\ud83d\udd25 [ ] Java 17</li> <li>Sealed Classes, Pattern Matching, Record Classes</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#10-memory-management-garbage-collection","title":"\ud83d\udd25 10. Memory Management &amp; Garbage Collection","text":"<ul> <li>\ud83d\udd25 [ ] JVM Memory Model</li> <li>Stack, Heap, Method Area, MetaSpace</li> <li>\ud83d\udd25 [ ] Garbage Collection (GC)</li> <li>Young, Old, and Permanent Generation </li> <li>GC Algorithms: G1, CMS, Parallel GC</li> <li>\ud83d\udd25 [ ] Memory Leaks &amp; Optimization</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#spring-framework","title":"\ud83c\udf31 Spring Framework","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#11-spring-framework-basic-advanced","title":"\ud83d\udd25 11. Spring Framework (Basic &amp; Advanced)","text":"<ul> <li>\ud83d\udd25 [ ] Core Spring Concepts</li> <li>Dependency Injection (DI)</li> <li>Inversion of Control (IoC)</li> <li>\ud83d\udd25 [ ] Spring Boot</li> <li>Auto-configuration </li> <li>REST APIs</li> <li>\ud83d\udd25 [ ] Spring Data JPA</li> <li>CRUD operations </li> <li>Pagination &amp; Sorting</li> <li>\ud83d\udd25 [ ] Spring Security</li> <li>Authentication &amp; Authorization</li> <li>\ud83d\udd25 [ ] Spring MVC</li> <li>Controllers, Interceptors, View Resolvers</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#12-microservices-cloud-integration","title":"\ud83c\udf10 12. Microservices &amp; Cloud Integration","text":"<ul> <li>\ud83d\udd25 [ ] REST APIs</li> <li>GET, POST, PUT, DELETE, PATCH</li> <li>\ud83d\udd25 [ ] Spring Boot with Microservices</li> <li>\ud83d\udd25 [ ] Cloud Integrations</li> <li>Docker, Kubernetes, AWS, Azure</li> <li>\ud83d\udd25 [ ] CI/CD</li> <li>Jenkins, GitLab CI</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/#13-best-practices-optimization","title":"\ud83d\udd25 13. Best Practices &amp; Optimization","text":"<ul> <li>\ud83d\udd25 [ ] Code Quality</li> <li>Clean Code, SOLID Principles, DRY, KISS</li> <li>\ud83d\udd25 [ ] Performance Optimization</li> <li>Efficient Memory Usage </li> <li>Avoiding Common Pitfalls</li> <li>\ud83d\udd25 [ ] Designing for Scalability</li> <li>\ud83d\udd25 [ ] Code Review Guidelines</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/","title":"1 arrays","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#arrays-in-java","title":"\ud83c\udfaf Arrays in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#1-introduction-to-arrays","title":"\u2705 1. Introduction to Arrays","text":"<ul> <li>Definition:<ul> <li>An array is a collection of variables of the same type stored in contiguous memory locations.</li> </ul> </li> <li>Characteristics:<ul> <li>Fixed-size: Once declared, the size cannot be changed.</li> <li>Index-based: Index starts at <code>0</code>.</li> <li>Efficient data retrieval: Faster access by index.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#2-declaration-initialization-iteration","title":"\ud83d\udd25 2. Declaration, Initialization &amp; Iteration","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#declaration","title":"\ud83d\udccc Declaration:","text":"<pre><code>// Syntax: datatype[] arrayName;\nint[] numbers;   // Recommended syntax\nint numbers[];   // Valid but less preferred\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#initialization","title":"\ud83d\udccc Initialization:","text":"<pre><code>int[] nums = new int[5];          // Array of size 5 (default values = 0)\nint[] primes = {2, 3, 5, 7, 11};  // Array with initialized values\n</code></pre> <ul> <li>Default values:<ul> <li><code>int</code> \u2192 <code>0</code></li> <li><code>float</code> \u2192 <code>0.0</code></li> <li><code>boolean</code> \u2192 <code>false</code></li> <li><code>String</code> \u2192 <code>null</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#iteration-methods","title":"\ud83d\udccc Iteration Methods:","text":"<ul> <li>For Loop:</li> </ul> <pre><code>int[] arr = {1, 2, 3, 4};\nfor (int i = 0; i &lt; arr.length; i++) {\n    System.out.println(arr[i]);\n}\n</code></pre> <ul> <li>Enhanced For Loop (for-each):</li> </ul> <pre><code>for (int num : arr) {\n    System.out.println(num);\n}\n</code></pre> <ul> <li>Using <code>Arrays.stream()</code> (Java 8+):</li> </ul> <pre><code>Arrays.stream(arr).forEach(System.out::println);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#3-multidimensional-arrays","title":"\ud83d\udd25 3. Multidimensional Arrays","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#declaration-initialization","title":"\ud83d\udccc Declaration &amp; Initialization:","text":"<pre><code>int[][] matrix = new int[3][4];     // 3x4 matrix\nint[][] grid = {{1, 2}, {3, 4}, {5, 6}}; // Initialization\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#iteration","title":"\ud83d\udccc Iteration:","text":"<pre><code>for (int i = 0; i &lt; matrix.length; i++) {\n    for (int j = 0; j &lt; matrix[i].length; j++) {\n        System.out.print(matrix[i][j] + \" \");\n    }\n    System.out.println();\n}\n</code></pre> <ul> <li>Jagged Arrays: (rows can have different column sizes)</li> </ul> <pre><code>int[][] jagged = new int[3][];\njagged[0] = new int[2];\njagged[1] = new int[3];\njagged[2] = new int[1];\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#4-array-operations-methods","title":"\u2699\ufe0f 4. Array Operations &amp; Methods","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#sorting-an-array","title":"\u2705 Sorting an Array:","text":"<pre><code>int[] numbers = {5, 1, 4, 2, 3};\nArrays.sort(numbers);  // Ascending order\n</code></pre> <ul> <li>Descending Sort:</li> </ul> <pre><code>Arrays.sort(numbers, Collections.reverseOrder());\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#searching-in-an-array","title":"\u2705 Searching in an Array:","text":"<pre><code>int[] nums = {2, 4, 6, 8, 10};\nint index = Arrays.binarySearch(nums, 6);  // Returns index of 6\n</code></pre> <ul> <li>If the element is not found \u2192 Returns <code>-(insertion_point) - 1</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#filling-an-array","title":"\u2705 Filling an Array:","text":"<pre><code>int[] arr = new int[5];\nArrays.fill(arr, 7);    // Fills all elements with 7\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#copying-arrays","title":"\u2705 Copying Arrays:","text":"<pre><code>int[] original = {1, 2, 3};\nint[] copy = Arrays.copyOf(original, 5);   // Copy with size 5\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#comparing-arrays","title":"\u2705 Comparing Arrays:","text":"<pre><code>int[] arr1 = {1, 2, 3};\nint[] arr2 = {1, 2, 3};\nSystem.out.println(Arrays.equals(arr1, arr2));  // true\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#converting-arrays-to-strings","title":"\u2705 Converting Arrays to Strings:","text":"<pre><code>System.out.println(Arrays.toString(arr));\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#5-best-practices-tips","title":"\ud83d\ude80 5. Best Practices &amp; Tips","text":"<ul> <li>\u2705 Use <code>Arrays.stream()</code> and <code>forEach()</code> for concise iteration (Java 8+).</li> <li>\u2705 Prefer <code>List</code> (ArrayList) over raw arrays for dynamic sizing.</li> <li>\u2705 Use <code>System.arraycopy()</code> or <code>Arrays.copyOf()</code> for efficient copying.</li> <li>\u2705 Be aware of <code>ArrayIndexOutOfBoundsException</code> while accessing elements.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#6-time-space-complexities","title":"\ud83d\udd25 6. Time &amp; Space Complexities","text":"Operation Time Complexity Space Complexity Access by index <code>O(1)</code> <code>O(1)</code> Insertion at end <code>O(1)</code> (amortized) <code>O(1)</code> Insertion at middle <code>O(n)</code> <code>O(1)</code> Deletion at middle <code>O(n)</code> <code>O(1)</code> Search (Linear) <code>O(n)</code> <code>O(1)</code> Binary Search <code>O(log n)</code> (Sorted) <code>O(1)</code> Sorting <code>O(n log n)</code> <code>O(n)</code> (merge sort)"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-arrays/#key-takeaways","title":"\u2705 Key Takeaways:","text":"<ul> <li>Arrays in Java are fixed-size and store homogeneous data.</li> <li>Multidimensional arrays allow storing data in matrix form.</li> <li>Use <code>Arrays</code> class methods for efficient operations (e.g., <code>sort()</code>, <code>binarySearch()</code>, <code>fill()</code>).</li> <li>Time complexity for accessing elements is <code>O(1)</code>; searching takes <code>O(n)</code> in unsorted arrays.</li> <li>Prefer <code>ArrayList</code> for dynamic sizing in real-world applications.</li> </ul> <p>\ud83d\udcda Next: Let me know if you want detailed notes on any specific Java topic! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/","title":"1 control flow","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#control-flow-statements-in-java","title":"\ud83d\udd04 Control Flow Statements in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#1-introduction-to-control-flow-statements","title":"\u2699\ufe0f 1. Introduction to Control Flow Statements","text":"<ul> <li>Control flow statements determine the order of execution in a program.</li> <li>Types of control flow statements:<ul> <li>Conditional Statements: <code>if</code>, <code>if-else</code>, <code>if-else-if</code>, <code>switch</code></li> <li>Looping Statements: <code>for</code>, <code>while</code>, <code>do-while</code></li> <li>Jump Statements: <code>break</code>, <code>continue</code>, <code>return</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#2-conditional-statements","title":"\u2705 2. Conditional Statements","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#21-if-else-statement","title":"\ud83d\udd25 2.1 if-else Statement","text":"<ul> <li>Used for decision-making based on conditions.</li> <li>Syntax:</li> </ul> <pre><code>if (condition) {\n    // Executes if the condition is true\n} else {\n    // Executes if the condition is false\n}\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>int num = 10;\nif (num &gt; 0) {\n    System.out.println(\"Positive\");\n} else {\n    System.out.println(\"Negative\");\n}\n</code></pre> <ul> <li>Nested if-else:</li> </ul> <pre><code>int a = 10, b = 20;\nif (a &gt; b) {\n    System.out.println(\"a is greater\");\n} else if (a &lt; b) {\n    System.out.println(\"b is greater\");\n} else {\n    System.out.println(\"Both are equal\");\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#22-switch-case-statement","title":"\ud83d\udd25 2.2 switch-case Statement","text":"<ul> <li>Used for multiple condition checking.</li> <li>More efficient than a long chain of <code>if-else</code> statements.</li> <li>Syntax:</li> </ul> <pre><code>switch(expression) {\n    case value1:\n        // Code to execute if expression == value1\n        break;\n    case value2:\n        // Code to execute if expression == value2\n        break;\n    default:\n        // Code to execute if no case matches\n}\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>int day = 3;\nswitch(day) {\n    case 1: System.out.println(\"Monday\"); break;\n    case 2: System.out.println(\"Tuesday\"); break;\n    case 3: System.out.println(\"Wednesday\"); break;\n    default: System.out.println(\"Invalid Day\");\n}\n</code></pre> <ul> <li>Enhancements in Java 12+:<ul> <li>Switch Expressions introduced in Java 12, simplify the syntax:</li> </ul> </li> </ul> <pre><code>String result = switch (day) {\n    case 1 -&gt; \"Monday\";\n    case 2 -&gt; \"Tuesday\";\n    case 3 -&gt; \"Wednesday\";\n    default -&gt; \"Invalid Day\";\n};\nSystem.out.println(result);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#3-looping-statements","title":"\ud83d\udd01 3. Looping Statements","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#31-for-loop","title":"\ud83d\udd25 3.1 for Loop","text":"<ul> <li>Used to iterate over a block of code a fixed number of times.</li> <li>Syntax:</li> </ul> <pre><code>for(initialization; condition; increment/decrement) {\n    // Code to execute repeatedly\n}\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    System.out.println(i);\n}\n</code></pre> <ul> <li>Enhanced for-loop (for-each) introduced in Java 5, used with arrays and collections:</li> </ul> <pre><code>int[] nums = {1, 2, 3, 4, 5};\nfor (int num : nums) {\n    System.out.println(num);\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#32-while-loop","title":"\ud83d\udd25 3.2 while Loop","text":"<ul> <li>Repeats the block of code as long as the condition is true.</li> <li>Syntax:</li> </ul> <pre><code>while (condition) {\n    // Code to execute repeatedly\n}\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>int i = 1;\nwhile (i &lt;= 5) {\n    System.out.println(i);\n    i++;\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#33-do-while-loop","title":"\ud83d\udd25 3.3 do-while Loop","text":"<ul> <li>Similar to <code>while</code> loop but executes at least once.</li> <li>Syntax:</li> </ul> <pre><code>do {\n    // Code to execute repeatedly\n} while (condition);\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>int i = 1;\ndo {\n    System.out.println(i);\n    i++;\n} while (i &lt;= 5);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#4-jump-statements","title":"\ud83d\ude80 4. Jump Statements","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#41-break-statement","title":"\ud83d\udd25 4.1 break Statement","text":"<ul> <li>Used to terminate a loop or switch-case immediately.</li> <li>Example:</li> </ul> <pre><code>for (int i = 1; i &lt;= 10; i++) {\n    if (i == 5) {\n        break;   // Exit the loop\n    }\n    System.out.println(i);\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#42-continue-statement","title":"\ud83d\udd25 4.2 continue Statement","text":"<ul> <li>Skips the current iteration and continues with the next one.</li> <li>Example:</li> </ul> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) {\n        continue;   // Skip iteration when i == 3\n    }\n    System.out.println(i);\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#43-return-statement","title":"\ud83d\udd25 4.3 return Statement","text":"<ul> <li>Exits from the current method and returns a value.</li> <li>Example:</li> </ul> <pre><code>public int add(int a, int b) {\n    return a + b;  // Returns the sum of a and b\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#5-key-takeaways","title":"\u2705 5. Key Takeaways","text":"<ul> <li>if-else: Used for binary decisions.</li> <li>switch-case: Better for multiple condition checks.</li> <li>for loop: When the number of iterations is known.</li> <li>while loop: When the condition is checked before executing the loop.</li> <li>do-while loop: Ensures at least one iteration.</li> <li>break and continue: Modify loop execution.</li> <li>return: Exits from the current method and optionally returns a value.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#6-best-practices-tips","title":"\ud83d\ude80 6. Best Practices &amp; Tips","text":"<ul> <li>\u2705 Use <code>switch-case</code> for readability when handling multiple conditions.</li> <li>\u2705 Use Enhanced for-loops when iterating over collections or arrays.</li> <li>\u2705 Avoid infinite loops with proper termination conditions.</li> <li>\u2705 Use <code>break</code> and <code>continue</code> cautiously to avoid unexpected behavior.</li> <li>\u2705 Always initialize loop variables properly to prevent errors.</li> <li>\u2705 Use Java 12+ switch expressions for cleaner, concise code.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-control-flow/#7-interview-tips","title":"\ud83d\udd25 7. Interview Tips","text":"<ul> <li>Expect questions on loop optimizations and nested loops.</li> <li>Be familiar with switch expressions (Java 12+) as they are commonly asked.</li> <li>Understand the difference between while and do-while loops, and when to use each.</li> <li>Know how to use break and continue effectively in complex loops.</li> </ul> <p>\u2705 This covers all essential control flow statements with examples, syntax, and best practices. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-data-types/","title":"1 data types","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-data-types/#java-data-types-variables","title":"\ud83d\udd25 Java Data Types &amp; Variables","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-data-types/#1-introduction-to-data-types-variables","title":"\ud83d\udcda 1. Introduction to Data Types &amp; Variables","text":"<ul> <li>\ud83d\udca1 Data Types: Define the type of data a variable can hold.</li> <li>\ud83d\udce6 Variables: Containers that store data values.</li> <li>\ud83d\udee0\ufe0f Syntax:</li> </ul> <pre><code>int age = 30;         // Integer variable\nString name = \"John\";  // String variable\n</code></pre> <ul> <li>\ud83d\udd11 Rules for Variable Names:<ul> <li>Must begin with a letter, underscore <code>_</code>, or <code>$</code>.</li> <li>Cannot start with a digit.</li> <li>Case-sensitive (<code>age</code> \u2260 <code>Age</code>).</li> <li>Reserved keywords cannot be used as variable names.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-data-types/#2-primitive-data-types","title":"\u2699\ufe0f 2. Primitive Data Types","text":"<ul> <li>\ud83d\udee0\ufe0f Definition: Basic building blocks of data in Java, directly representing values.</li> <li>\ud83d\udd22 Types:</li> </ul> Data Type Size Default Value Range <code>byte</code> 1 byte 0 -128 to 127 <code>short</code> 2 bytes 0 -32,768 to 32,767 <code>int</code> 4 bytes 0 -2^31 to 2^31 - 1 <code>long</code> 8 bytes 0L -2^63 to 2^63 - 1 <code>float</code> 4 bytes 0.0f \u00b11.4E-45 to \u00b13.4028235E+38 <code>double</code> 8 bytes 0.0d \u00b14.9E-324 to \u00b11.7976931348623157E+308 <code>char</code> 2 bytes '\\u0000' 0 to 65,535 (Unicode) <code>boolean</code> 1 bit false <code>true</code> or <code>false</code> <ul> <li>\ud83d\udd25 Example:</li> </ul> <pre><code>byte b = 100;\nshort s = 32000;\nint i = 2147483647;\nlong l = 9223372036854775807L;\nfloat f = 3.14f;\ndouble d = 3.14159;\nchar c = 'A';\nboolean flag = true;\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-data-types/#3-reference-data-types","title":"\ud83d\udee0\ufe0f 3. Reference Data Types","text":"<ul> <li>\ud83d\udd39 Definition: Store references (memory addresses) of objects.</li> <li>\ud83d\ude80 Includes:<ul> <li>Classes: Custom data types.</li> <li>Arrays: Contiguous memory locations.</li> <li>Interfaces: Blueprint for classes.</li> <li>Strings: Special reference type in Java (immutable).</li> </ul> </li> <li>\ud83d\udd25 Example:</li> </ul> <pre><code>String name = \"Alice\";  // Reference type (String object)\nint[] numbers = {1, 2, 3};  // Array reference\nPerson person = new Person();  // Custom class reference\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-data-types/#4-type-casting","title":"\ud83d\udd25 4. Type Casting","text":"<ul> <li>\ud83d\udca1 Definition: Converting a variable from one data type to another.</li> <li>\ud83d\udd04 Types:<ul> <li>\u2705 Widening (Implicit): Automatic conversion from smaller to larger data type.<ul> <li>No data loss.</li> <li>Done by the compiler.</li> <li>Example: <code>int \u2192 long</code>, <code>float \u2192 double</code>.</li> </ul> </li> <li>\u26a0\ufe0f Narrowing (Explicit): Manual conversion from larger to smaller data type.<ul> <li>May cause data loss.</li> <li>Requires explicit casting using parentheses.</li> <li>Example: <code>double \u2192 int</code>, <code>long \u2192 short</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-data-types/#widening-implicit","title":"\ud83d\ude80 Widening (Implicit)","text":"<pre><code>int num = 100;\nlong bigNum = num;        // int \u2192 long (Widening)\nfloat f = bigNum;         // long \u2192 float (Widening)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-data-types/#narrowing-explicit","title":"\ud83d\udd25 Narrowing (Explicit)","text":"<pre><code>double d = 100.99;\nint i = (int) d;           // double \u2192 int (Narrowing)\nSystem.out.println(i);     // Output: 100 (truncation)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-data-types/#5-key-takeaways","title":"\u2705 5. Key Takeaways:","text":"<ul> <li>Primitive types hold actual values, while reference types hold memory addresses.</li> <li>Widening is automatic and safe, whereas narrowing requires explicit casting and may lead to data loss.</li> <li>Reference types include objects, arrays, and strings, which are crucial in Java.</li> <li>Type safety is essential in Java, preventing unintended conversions.</li> </ul> <p>\ud83d\ude80 Next: Explore advanced Java topics like OOP concepts and collections for senior-level expertise!</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/","title":"1 introduction","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/#java-introduction-revision-notes","title":"\ud83d\ude80 Java Introduction \u2013 Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/#1-what-is-java","title":"\u2705 1. What is Java?","text":"<ul> <li>\ud83c\udf10 General-purpose, high-level, object-oriented programming language.</li> <li>\u2615 Developed by James Gosling at Sun Microsystems (1995).</li> <li>\ud83c\udf0d Platform-independent: Write once, run anywhere (WORA).</li> <li>\ud83d\udca1 Influenced by C++ but simpler with automatic memory management (Garbage Collection).</li> <li>\ud83d\udd25 Used for:<ul> <li>Desktop applications (Swing, AWT)</li> <li>Web applications (JSP, Servlets)</li> <li>Mobile applications (Android)</li> <li>Enterprise applications (Spring, Hibernate)</li> <li>Cloud and Microservices (Spring Boot, Docker, Kubernetes)</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/#2-features-of-java","title":"\ud83d\udd25 2. Features of Java","text":"<ul> <li>\ud83d\udca1 Simple:<ul> <li>Syntax similar to C/C++ but with fewer complex features (e.g., no pointers).</li> </ul> </li> <li>\ud83d\udee1\ufe0f Secure:<ul> <li>Bytecode verification, runtime security checks.</li> <li>No explicit memory access (prevents memory leaks).</li> </ul> </li> <li>\ud83d\udd25 Platform-Independent:<ul> <li>Java code is compiled into bytecode which runs on any platform with JVM.</li> </ul> </li> <li>\ud83d\ude80 Object-Oriented:<ul> <li>Based on OOP principles: Encapsulation, Inheritance, Polymorphism, and Abstraction.</li> </ul> </li> <li>\u2699\ufe0f Robust:<ul> <li>Strong memory management with automatic garbage collection.</li> <li>Exception handling with <code>try-catch</code> blocks.</li> </ul> </li> <li>\ud83d\udd01 Multithreading:<ul> <li>Built-in support for concurrent programming.</li> </ul> </li> <li>\ud83d\udcca Portable:<ul> <li>Write once, run anywhere without modification.</li> </ul> </li> <li>\u26a1 High Performance:<ul> <li>JIT (Just-In-Time) compiler improves runtime performance.</li> </ul> </li> <li>\ud83d\udd27 Dynamic &amp; Extensible:<ul> <li>Supports dynamic memory allocation and dynamic linking of classes.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/#3-jvm-jre-and-jdk-differences","title":"\ud83d\udee0\ufe0f 3. JVM, JRE, and JDK Differences","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/#jvm-java-virtual-machine","title":"\ud83d\udca1 JVM (Java Virtual Machine)","text":"<ul> <li>\u2705 JVM: The engine that executes Java bytecode.</li> <li>\ud83d\udce6 Platform-specific implementation.</li> <li>\ud83d\udee1\ufe0f Provides runtime environment.</li> <li>\ud83d\ude80 Key Responsibilities:<ul> <li>Memory management (heap, stack).</li> <li>Garbage collection.</li> <li>Security checks and runtime optimizations.</li> </ul> </li> <li>\ud83d\udd25 Execution Flow:<ul> <li><code>.java</code> \u2192 Compiled to <code>.class</code> (bytecode) \u2192 Executed by JVM.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/#jre-java-runtime-environment","title":"\ud83d\udd25 JRE (Java Runtime Environment)","text":"<ul> <li>\u2705 Includes JVM + core libraries + runtime dependencies.</li> <li>\ud83d\udd25 Required to run Java applications.</li> <li>\ud83d\ude80 Components:<ul> <li>JVM</li> <li>Core libraries (rt.jar)</li> <li>Other runtime resources.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/#jdk-java-development-kit","title":"\u2699\ufe0f JDK (Java Development Kit)","text":"<ul> <li>\u2705 Includes JRE + Development tools.</li> <li>\ud83d\udd27 Required to develop and compile Java programs.</li> <li>\ud83d\ude80 Components:<ul> <li>JRE (JVM + core libraries).</li> <li>Compiler (<code>javac</code>), debugger (<code>jdb</code>), and documentation generator (<code>javadoc</code>).</li> <li>Development tools.</li> </ul> </li> <li>\ud83d\udcca JDK vs JRE vs JVM:</li> </ul> Component Purpose Contains JVM Runs Java bytecode Memory management, GC, etc. JRE Runtime environment for Java JVM + Core libraries JDK Development environment JRE + Compiler + Dev tools"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/#4-platform-independence-bytecode-execution","title":"\ud83c\udf10 4. Platform Independence &amp; Bytecode Execution","text":"<ul> <li> <p>\u2705 Platform Independence:</p> <ul> <li>Java applications are compiled into bytecode (.class file).</li> <li>Bytecode is not platform-specific \u2192 runs on any OS with a compatible JVM.</li> <li>WORA: Write Once, Run Anywhere.</li> </ul> </li> <li> <p>\ud83d\ude80 Compilation &amp; Execution Flow:</p> <ul> <li>Step 1: <code>.java</code> \u2192 Compiled by <code>javac</code> \u2192 <code>.class</code> (bytecode).</li> <li>Step 2: Bytecode interpreted or compiled by JVM.</li> </ul> </li> <li> <p>\u26a1 Bytecode Execution:</p> <ul> <li>JIT (Just-In-Time) Compiler:<ul> <li>Compiles bytecode to native machine code at runtime.</li> <li>Improves execution performance.</li> </ul> </li> <li>Interpreter:<ul> <li>Line-by-line execution of bytecode.</li> <li>Slower than JIT but useful for debugging.</li> </ul> </li> <li>HotSpot Compiler:<ul> <li>Optimizes frequently executed bytecode for performance.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-introduction/#key-takeaways","title":"\u2705 Key Takeaways:","text":"<ul> <li>\u2615 Java is platform-independent due to bytecode and JVM.</li> <li>\ud83d\udee0\ufe0f JVM, JRE, and JDK have distinct roles (JDK for development, JRE for runtime).</li> <li>\ud83d\ude80 Bytecode execution uses JIT for performance optimization.</li> <li>\ud83d\udd25 WORA makes Java highly portable and widely used across platforms.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/","title":"1 operators","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#java-operators-revision-notes","title":"\ud83d\udd01 Java Operators \u2013 Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#1-introduction-to-operators","title":"\u2705 1. Introduction to Operators","text":"<ul> <li>Operators are symbols used to perform operations on variables and values.</li> <li>Java provides several types of operators categorized by their functionality.</li> <li>Syntax: <code>result = operand1 operator operand2;</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#2-arithmetic-operators","title":"\u2797 2. Arithmetic Operators","text":"<p>Used for basic mathematical operations.</p> Operator Description Example Result <code>+</code> Addition <code>int sum = 5 + 3;</code> <code>sum = 8</code> <code>-</code> Subtraction <code>int diff = 9 - 4;</code> <code>diff = 5</code> <code>*</code> Multiplication <code>int prod = 3 * 4;</code> <code>prod = 12</code> <code>/</code> Division <code>int div = 10 / 2;</code> <code>div = 5</code> <code>%</code> Modulus (remainder) <code>int rem = 10 % 3;</code> <code>rem = 1</code> <p>\ud83d\udca1 Key Points: - Integer Division: Division of two integers gives an integer result (fraction truncated). - Modulo Operator: Returns the remainder after division.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#3-relational-comparison-operators","title":"\ud83d\udd0d 3. Relational (Comparison) Operators","text":"<p>Used to compare values and return a boolean result (<code>true</code> or <code>false</code>).</p> Operator Description Example Result <code>==</code> Equal to <code>5 == 5</code> <code>true</code> <code>!=</code> Not equal to <code>5 != 4</code> <code>true</code> <code>&gt;</code> Greater than <code>10 &gt; 5</code> <code>true</code> <code>&lt;</code> Less than <code>3 &lt; 7</code> <code>true</code> <code>&gt;=</code> Greater than or equal <code>6 &gt;= 6</code> <code>true</code> <code>&lt;=</code> Less than or equal <code>4 &lt;= 5</code> <code>true</code> <p>\ud83d\udca1 Key Points: - Used in control flow statements (if, while) and loops. - Comparison results in boolean output only.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#4-logical-operators","title":"\ud83d\udd25 4. Logical Operators","text":"<p>Used to combine multiple boolean expressions.</p> Operator Description Example Result <code>&amp;&amp;</code> Logical AND <code>(5 &gt; 3) &amp;&amp; (8 &gt; 4)</code> <code>true</code> <code>||</code> Logical OR <code>(5 &gt; 3) || (8 &lt; 4)</code> <code>true</code> <code>!</code> Logical NOT <code>!(5 &gt; 3)</code> <code>false</code> <p>\ud83d\udca1 Key Points: - <code>&amp;&amp;</code> \u2192 Returns <code>true</code> if both conditions are true. - <code>||</code> \u2192 Returns <code>true</code> if at least one condition is true. - <code>!</code> \u2192 Negates the boolean value. - Short-circuiting:     - For <code>&amp;&amp;</code>, if the first condition is false, the second is not evaluated.     - For <code>||</code>, if the first condition is true, the second is not evaluated.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#5-bitwise-operators","title":"\u2699\ufe0f 5. Bitwise Operators","text":"<p>Used to manipulate individual bits of integer values.</p> Operator Description Example Result <code>&amp;</code> Bitwise AND <code>5 &amp; 3</code> \u2192 <code>101 &amp; 011</code> <code>001</code> (1) <code>|</code> Bitwise OR <code>5 | 3</code> \u2192 <code>101 | 011</code> <code>111</code> (7) <code>^</code> Bitwise XOR <code>5 ^ 3</code> \u2192 <code>101 ^ 011</code> <code>110</code> (6) <code>~</code> Bitwise Complement <code>~5</code> \u2192 <code>~00000101</code> <code>11111010</code> (-6) <code>&lt;&lt;</code> Left Shift <code>5 &lt;&lt; 1</code> \u2192 <code>00000101 &lt;&lt; 1</code> <code>00001010</code> (10) <code>&gt;&gt;</code> Right Shift <code>5 &gt;&gt; 1</code> \u2192 <code>00000101 &gt;&gt; 1</code> <code>00000010</code> (2) <code>&gt;&gt;&gt;</code> Unsigned Right Shift <code>-5 &gt;&gt;&gt; 1</code> Fills with 0 bits <p>\ud83d\udca1 Key Points: - Left Shift (<code>&lt;&lt;</code>) \u2192 Multiplies by <code>2^n</code>. - Right Shift (<code>&gt;&gt;</code>) \u2192 Divides by <code>2^n</code>. - Unsigned Right Shift (<code>&gt;&gt;&gt;</code>) \u2192 Fills 0 for positive and negative numbers. - Use Cases:     - Cryptography, compression, low-level programming.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#6-assignment-operators","title":"\ud83d\udd25 6. Assignment Operators","text":"<p>Used to assign values to variables.</p> Operator Description Example Equivalent To <code>=</code> Assign <code>a = 5</code> <code>a = 5</code> <code>+=</code> Add and assign <code>a += 3</code> <code>a = a + 3</code> <code>-=</code> Subtract and assign <code>a -= 2</code> <code>a = a - 2</code> <code>*=</code> Multiply and assign <code>a *= 4</code> <code>a = a * 4</code> <code>/=</code> Divide and assign <code>a /= 2</code> <code>a = a / 2</code> <code>%=</code> Modulus and assign <code>a %= 3</code> <code>a = a % 3</code> <p>\ud83d\udca1 Key Points: - Compound operators reduce verbosity. - Improves code readability and efficiency.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#7-ternary-operator","title":"\ud83c\udfaf 7. Ternary Operator","text":"<ul> <li>A shorthand for if-else statements.</li> <li>Syntax: <code>variable = (condition) ? expr1 : expr2;</code></li> <li>Example:</li> </ul> <pre><code>int a = 10, b = 5;\nint max = (a &gt; b) ? a : b;  // max = 10\n</code></pre> <ul> <li>\u2705 Use Cases:<ul> <li>Simple condition checking.</li> <li>Code simplification.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#8-instanceof-operator","title":"\ud83d\udd25 8. instanceof Operator","text":"<ul> <li>Used to check object type at runtime.</li> <li>Syntax: <code>object instanceof ClassName</code></li> <li>Example:</li> </ul> <pre><code>String str = \"Java\";\nSystem.out.println(str instanceof String);  // true\n</code></pre> <p>\ud83d\udca1 Key Points: - Returns <code>true</code> if the object is an instance of the specified class or subclass. - Commonly used for type checking in inheritance and polymorphism.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/1/1-operators/#9-key-takeaways","title":"\u2705 9. Key Takeaways","text":"<ul> <li>Understand operator precedence to avoid unexpected results.</li> <li>Use bitwise operators carefully in performance-critical applications.</li> <li>Use ternary operators for concise code but avoid nested ternaries for readability.</li> <li>Leverage instanceof in polymorphic code for safe type casting.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/","title":"10 gc","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#garbage-collection-gc-in-java","title":"\u267b\ufe0f Garbage Collection (GC) in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#overview","title":"\ud83e\udde0 Overview","text":"<ul> <li>Garbage Collection (GC) is a process in JVM that automatically deallocates memory by destroying unreachable objects.</li> <li>Enhances performance and prevents memory leaks.</li> <li>Key focus: reclaim heap memory used by objects no longer reachable.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#memory-areas-in-jvm","title":"\ud83c\udfd7\ufe0f Memory Areas in JVM","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#1-young-generation-yg","title":"\ud83d\udd39 1. Young Generation (YG)","text":"<ul> <li>Subdivided into: <code>Eden</code> and two <code>Survivor</code> spaces.</li> <li>Most objects are created here.</li> <li>Minor GC: Frequent, short pauses.</li> <li>If objects survive multiple GCs, they are promoted to Old Generation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#2-old-generation-og","title":"\ud83d\udd39 2. Old Generation (OG)","text":"<ul> <li>Stores long-lived objects.</li> <li>Major GC / Full GC occurs less frequently.</li> <li>Higher pause times due to larger memory area.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#3-permanent-generation-permgen-java-7-and-earlier","title":"\ud83d\udd39 3. Permanent Generation (PermGen) (Java 7 and earlier)","text":"<ul> <li>Stores metadata like class definitions, method info.</li> <li>Removed in Java 8 and replaced with Metaspace (allocated in native memory).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#4-metaspace-java-8","title":"\ud83d\udd39 4. Metaspace (Java 8+)","text":"<ul> <li>No fixed limit, grows dynamically.</li> <li>Improves class metadata handling and reduces <code>OutOfMemoryError</code> risk.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#garbage-collection-algorithms","title":"\u2699\ufe0f Garbage Collection Algorithms","text":"\ud83d\ude80 Algorithm \ud83d\udccc Description \ud83d\udd0d Best Use Case G1 (Garbage First) Splits heap into regions, does concurrent marking &amp; compaction. Low-pause, large heap applications. CMS (Concurrent Mark Sweep) Concurrent marking with shorter pause times. Low latency. Apps needing low GC latency. Deprecated in Java 14. Parallel GC (Throughput Collector) Uses multiple threads for GC. Focus on throughput, not pause time. High-performance batch or backend systems."},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#advanced-considerations","title":"\ud83e\uddea Advanced Considerations","text":"<ul> <li>Stop-the-World (STW) Events: All application threads pause during GC. G1 and CMS try to minimize these.</li> <li>Tuning GC: Use <code>-XX</code> flags like <code>-XX:+UseG1GC</code>, <code>-XX:+UseParallelGC</code>, <code>-XX:MaxGCPauseMillis</code>, etc.</li> <li>GC Logs: Enable with <code>-Xlog:gc*</code> or older <code>-verbose:gc</code> flags to analyze behavior.</li> <li>Object Promotion: Young -&gt; Old happens based on tenuring threshold.</li> <li>Allocation Failure: Triggers GC when there isn't enough space in Young Gen.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#pro-tips-for-senior-engineers","title":"\ud83d\udee0\ufe0f Pro Tips for Senior Engineers","text":"<ul> <li>Monitor GC using JVisualVM, GCViewer, or JMC (Java Mission Control).</li> <li>Avoid creating unnecessary short-lived objects inside loops.</li> <li>Consider object pooling for heavy or reusable objects.</li> <li>Profile your app using real data before choosing GC algorithms.</li> <li>GC behavior changes between JVM versions \u2014 always test under your environment.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#useful-jvm-flags","title":"\ud83d\udcda Useful JVM Flags","text":"<pre><code># Use G1 GC\n-XX:+UseG1GC\n\n# Set max pause time goal\n-XX:MaxGCPauseMillis=200\n\n# Enable GC logging (Java 9+)\n-Xlog:gc*\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-gc/#summary","title":"\u2705 Summary","text":"<ul> <li>GC automates memory management but must be monitored and tuned.</li> <li>Choosing the right GC strategy is crucial for low-latency, high-throughput systems.</li> <li>Senior engineers should combine profiling, logging, and JVM options to optimize GC.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-jvm-memory/","title":"10 jvm memory","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-jvm-memory/#jvm-memory-model","title":"\ud83e\udde0 JVM Memory Model","text":"<p>The Java Virtual Machine (JVM) memory model is divided into several memory areas, each responsible for different aspects of program execution and memory management. Understanding these areas is critical for performance tuning, debugging memory leaks, and writing efficient, scalable Java applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-jvm-memory/#1-heap-memory","title":"\ud83d\udce6 1. Heap Memory","text":"<ul> <li>Purpose: Stores all objects and class instances.</li> <li>Lifecycle: Exists as long as the JVM process is alive.</li> <li>Managed by: Garbage Collector (GC) \u267b\ufe0f.</li> <li>Divided into:<ul> <li>\ud83d\udd39 Young Generation: Newly created objects.<ul> <li>Eden Space \u2795 Survivor Spaces (S0 &amp; S1)</li> </ul> </li> <li>\ud83d\udd39 Old Generation (Tenured): Long-lived objects.</li> </ul> </li> <li>Tuning: Critical for reducing GC pauses.</li> <li>GC Algorithms: G1, CMS, ZGC, Shenandoah.</li> </ul> <pre><code>// Example: Object stored in Heap\nEmployee emp = new Employee();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-jvm-memory/#2-stack-memory","title":"\ud83e\uddee 2. Stack Memory","text":"<ul> <li>Purpose: Stores primitive variables, method calls, and references to objects in heap.</li> <li>Structure: Each thread has its own stack \ud83e\uddf5.</li> <li>Contains:<ul> <li>Stack Frames (per method call)</li> <li>Local variables, operand stack, return address</li> </ul> </li> <li>Memory is automatically freed after method execution.</li> <li>Faster access than heap memory.</li> <li>Exception: <code>StackOverflowError</code> when recursion is too deep.</li> </ul> <pre><code>void doSomething() {\n    int count = 10; // Stored in Stack\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-jvm-memory/#3-method-area-aka-class-area","title":"\ud83d\uddc3\ufe0f 3. Method Area (aka Class Area)","text":"<ul> <li>Purpose: Stores class metadata, static variables, and method code.</li> <li>Shared among all threads.</li> <li>Contents:<ul> <li>Runtime constant pool</li> <li>Method and constructor bytecode</li> <li>Field and method data</li> </ul> </li> <li>Part of the Metaspace (since Java 8).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-jvm-memory/#4-metaspace-java-8","title":"\ud83e\udde9 4. MetaSpace (Java 8+)","text":"<ul> <li>Replaces: PermGen (pre-Java 8).</li> <li>Purpose: Stores class metadata, class definitions, method data.</li> <li>Allocated in native memory (outside heap).</li> <li>Grows dynamically by default (can be tuned).</li> <li>Tuning Flags:<ul> <li><code>-XX:MaxMetaspaceSize</code></li> <li><code>-XX:MetaspaceSize</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-jvm-memory/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Memory Area Stores Thread Scoped GC Managed Allocated In \ud83e\uddee Stack Method calls, local variables \u2705 Yes \u274c No JVM Memory \ud83d\udce6 Heap Objects, class instances \u274c No \u2705 Yes JVM Memory \ud83d\uddc3\ufe0f Method Area Class structure, bytecode, statics \u274c No \u2705 Yes Part of MetaSpace \ud83e\udde9 MetaSpace Class metadata (Java 8+) \u274c No \u2705 Yes Native Memory"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-jvm-memory/#advanced-considerations","title":"\ud83d\udd0d Advanced Considerations","text":"<ul> <li>Use tools like <code>jconsole</code>, <code>jvisualvm</code>, <code>jstat</code>, and <code>MAT</code> to monitor memory.</li> <li>Analyze GC logs for performance bottlenecks.</li> <li>Be cautious of classloader leaks in MetaSpace.</li> <li>JVM flags for fine-tuning can drastically affect latency and throughput.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-jvm-memory/#recommended-reads","title":"\ud83d\udcda Recommended Reads","text":"<ul> <li>Java Performance: The Definitive Guide by Scott Oaks</li> <li>JVM tuning documentation for G1, ZGC, and Shenandoah</li> <li>Oracle's official Java memory tuning guide</li> </ul> <p>\u2705 Mastery of the JVM memory model is essential for backend engineers, especially when scaling microservices or dealing with high-throughput, low-latency systems.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/","title":"10 memory optimization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#memory-leaks-optimization-in-java","title":"\ud83e\udde0 Memory Leaks &amp; Optimization in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#what-is-a-memory-leak","title":"\ud83d\udd0d What is a Memory Leak?","text":"<ul> <li>A memory leak occurs when unused objects remain referenced, preventing the garbage collector from reclaiming memory.</li> <li>Leads to increased memory usage, OutOfMemoryError, and application slowdowns over time.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#common-causes-of-memory-leaks","title":"\ud83e\uddea Common Causes of Memory Leaks","text":"<ul> <li>\ud83d\udd01 Static references<ul> <li>Long-lived static fields holding onto large objects.</li> </ul> </li> <li>\ud83d\udce6 Collections not cleared<ul> <li><code>List</code>, <code>Map</code>, <code>Set</code> holding obsolete object references.</li> </ul> </li> <li>\ud83e\uddf5 Unclosed resources<ul> <li>Streams, DB connections, or threads not closed after use.</li> </ul> </li> <li>\ud83e\udde9 Listeners/Callbacks<ul> <li>Unregistered event listeners preventing GC.</li> </ul> </li> <li>\ud83d\udd04 Inner classes holding outer class references<ul> <li>Anonymous classes leading to retention of enclosing objects.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#techniques-for-memory-optimization","title":"\ud83d\udee0\ufe0f Techniques for Memory Optimization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#general-practices","title":"\u2705 General Practices","text":"<ul> <li>\ud83e\uddf9 Use <code>null</code> assignments to remove references explicitly when no longer needed.</li> <li>\ud83d\uddc2\ufe0f Use appropriate data structures (e.g., <code>WeakHashMap</code>, <code>EnumSet</code>).</li> <li>\ud83d\udccc Avoid memory leaks in singleton/static fields.</li> <li>\ud83d\udccf Limit object scope; avoid global variables unless necessary.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#java-specific-tools-techniques","title":"\ud83e\uddf0 Java-Specific Tools &amp; Techniques","text":"\ud83e\uddea Tool/Technique \ud83d\udd0d Purpose <code>jconsole</code>, <code>jvisualvm</code> Monitor heap usage, GC, thread status <code>Eclipse MAT</code> Analyze memory dumps, find memory leaks <code>GC Logs</code> Understand GC behavior &amp; tuning <code>WeakReference</code> Allows GC to collect objects when not in use"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#best-practices-for-experienced-devs","title":"\ud83d\udca1 Best Practices for Experienced Devs","text":"<ul> <li>\ud83d\udd0d Profile memory regularly in load and stress testing.</li> <li>\ud83d\udcca Monitor allocation rate and object retention.</li> <li>\u2699\ufe0f Tune JVM options (<code>-Xmx</code>, <code>-Xms</code>, <code>-XX:+UseG1GC</code>) for heap size and GC strategy.</li> <li>\ud83e\uddea Perform heap dump analysis post-crash or during high memory usage.</li> <li>\u267b\ufe0f Reuse objects where possible (e.g., <code>StringBuilder</code>, thread pools).</li> <li>\ud83d\udd12 Be mindful of thread-local variables causing retention.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#bonus-preventive-code-patterns","title":"\ud83d\udd10 Bonus: Preventive Code Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#weak-reference-pattern-for-listenerscache","title":"\ud83d\udd01 Weak Reference Pattern (for listeners/cache)","text":"<pre><code>Map&lt;Key, WeakReference&lt;Value&gt;&gt; cache = new WeakHashMap&lt;&gt;();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#try-with-resources-for-auto-closing","title":"\ud83e\uddfc Try-with-resources for auto-closing","text":"<pre><code>try (InputStream in = new FileInputStream(\"data.txt\")) {\n    // use the stream\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/10/10-memory-optimization/#summary-cheatsheet","title":"\u2705 Summary Cheatsheet","text":"<ul> <li>\u274c Avoid: Unused static references, unclosed resources</li> <li>\u2705 Use: Weak refs, try-with-resources, JVM tuning, regular profiling</li> <li>\ud83d\udd0d Monitor: Heap, GC logs, thread usage, collection growth</li> <li>\ud83e\uddf0 Tools: VisualVM, Eclipse MAT, GC viewer, heap dumps</li> <li>\ud83c\udfaf Goal: Minimize retention, improve GC efficiency, prevent OOM</li> </ul> <p>\"Memory leaks are silent killers. You won't know until your app dies in production. Be proactive, not reactive.\"</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/","title":"11 core spring","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#core-spring-concepts-revision-notes","title":"\ud83c\udf31 Core Spring Concepts \u2013 Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#inversion-of-control-ioc","title":"\ud83d\udd04 Inversion of Control (IoC)","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#definition","title":"\ud83d\udccc Definition","text":"<ul> <li>A design principle where the control of object creation and dependency management is transferred from the application code to the Spring container.</li> <li>Promotes loose coupling and better testability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#how-it-works-in-spring","title":"\u2699\ufe0f How it works in Spring","text":"<ul> <li>The Spring IoC Container is responsible for:<ul> <li>Instantiating beans</li> <li>Configuring beans</li> <li>Wiring dependencies</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#expert-insight","title":"\ud83e\udde0 Expert Insight","text":"<ul> <li>Think of IoC as Hollywood Principle: \"Don\u2019t call us, we\u2019ll call you.\"</li> <li>Useful in replacing <code>new</code> keyword-based instantiation with container-managed instantiation.</li> </ul> <pre><code>ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\nMyService service = context.getBean(MyService.class);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#dependency-injection-di","title":"\ud83e\udde9 Dependency Injection (DI)","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#definition_1","title":"\ud83d\udccc Definition","text":"<ul> <li>A design pattern where the dependencies of an object are injected externally rather than being created internally.</li> <li>Implements IoC.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#types-of-di-in-spring","title":"\ud83d\udca1 Types of DI in Spring","text":"<ul> <li>Constructor Injection (preferred for mandatory dependencies)</li> <li>Setter Injection (flexible, supports optional dependencies)</li> <li>Field Injection (discouraged in production \u2013 harder to test &amp; less explicit)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#spring-annotations-for-di","title":"\u2699\ufe0f Spring Annotations for DI","text":"<ul> <li><code>@Autowired</code> \u2013 automatically injects dependencies</li> <li><code>@Qualifier</code> \u2013 used with <code>@Autowired</code> to resolve ambiguity</li> <li><code>@Inject</code>, <code>@Resource</code> \u2013 JSR-330 &amp; JSR-250 annotations (optional alternatives)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#constructor-injection-example","title":"\u2705 Constructor Injection Example","text":"<pre><code>@Component\npublic class OrderService {\n    private final PaymentService paymentService;\n\n    @Autowired\n    public OrderService(PaymentService paymentService) {\n        this.paymentService = paymentService;\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#best-practices","title":"\u26a0\ufe0f Best Practices","text":"<ul> <li>Use constructor injection for required dependencies</li> <li>Avoid field injection for testability and immutability</li> <li>Keep configuration centralized and explicit (e.g., Java config classes or profiles)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#quick-summary-table","title":"\ud83e\udde0 Quick Summary Table","text":"Concept Purpose Spring Mechanism Best Practice Tip IoC Shift control to container BeanFactory, ApplicationContext Delegate lifecycle to Spring container DI Inject dependencies externally <code>@Autowired</code>, XML, Java config Prefer constructor injection for clarity"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-core-spring/#for-experienced-developers","title":"\ud83d\udee0\ufe0f For Experienced Developers","text":"<ul> <li>Use Java-based configuration over XML for type safety and better refactoring.</li> <li>Combine profiles with DI to inject environment-specific beans.</li> <li>Integrate with Spring Boot's auto-configuration to reduce boilerplate.</li> </ul> <pre><code>@Configuration\n@Profile(\"dev\")\npublic class DevConfig {\n    @Bean\n    public DataSource dataSource() {\n        return new HikariDataSource(...);\n    }\n}\n</code></pre> <p>\ud83e\uddd8\u200d\u2642\ufe0f Embrace Spring's IoC container as your core backbone \u2014 everything else (AOP, Data, MVC) builds on top of it.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/","title":"11 spring boot","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#spring-boot-core-concepts","title":"\ud83d\ude80 Spring Boot Core Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#what-is-spring-boot","title":"\ud83d\udce6 What is Spring Boot?","text":"<ul> <li>An opinionated framework built on top of Spring to simplify microservice and web app development.</li> <li>Eliminates boilerplate configuration via:<ul> <li>\ud83d\udd27 Auto-configuration</li> <li>\ud83e\udde9 Starter dependencies</li> <li>\ud83d\ude80 Embedded servers (Tomcat, Jetty)</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#auto-configuration-deep-dive","title":"\u2699\ufe0f Auto-Configuration (Deep Dive)","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#overview","title":"\ud83d\udd0d Overview","text":"<ul> <li>Uses <code>@EnableAutoConfiguration</code> or implicitly via <code>@SpringBootApplication</code>.</li> <li>Spring Boot intelligently configures beans based on dependencies in the classpath.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#how-it-works","title":"\ud83e\udde0 How It Works","text":"<ul> <li>Uses <code>spring.factories</code> to map auto-configuration classes.</li> <li>Auto-configurations run after user-defined beans (can override defaults).</li> <li>Driven by conditional annotations like:<ul> <li><code>@ConditionalOnClass</code></li> <li><code>@ConditionalOnMissingBean</code></li> <li><code>@ConditionalOnProperty</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Use <code>@ConfigurationProperties</code> for external configs.</li> <li>Exclude auto-config classes if needed:   <code>java   @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#advanced-insights","title":"\u26a0\ufe0f Advanced Insights","text":"<ul> <li>Can lead to hidden complexity \u2014 trace beans with <code>--debug</code> flag or use <code>spring-boot-actuator</code>.</li> <li>Profiles (<code>@Profile</code>) help manage different environments (dev, prod).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#rest-apis-with-spring-boot","title":"\ud83c\udf10 REST APIs with Spring Boot","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#key-features","title":"\u2728 Key Features","text":"<ul> <li>Uses Spring MVC under the hood.</li> <li>Supports both synchronous (REST) and asynchronous (WebFlux) models.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#common-annotations","title":"\ud83d\udd27 Common Annotations","text":"Annotation Purpose <code>@RestController</code> Declares a RESTful controller <code>@RequestMapping</code> Maps HTTP requests to handler methods <code>@GetMapping</code>, etc. Specialized mapping annotations <code>@PathVariable</code>, <code>@RequestParam</code> Extracts data from URI/query params <code>@RequestBody</code>, <code>@ResponseBody</code> Maps HTTP body to object/response"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#example","title":"\ud83d\udee0\ufe0f Example","text":"<pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String sayHello() {\n        return \"Hello, World!\";\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#pro-level-notes","title":"\ud83e\udde0 Pro-Level Notes","text":"<ul> <li>Leverage <code>@Validated</code> and custom <code>@ExceptionHandler</code> for validation and error handling.</li> <li>Use DTOs to avoid exposing entities directly.</li> <li>Enable OpenAPI/Swagger via <code>springdoc-openapi</code> for API docs:   <code>xml   &lt;dependency&gt;     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;     &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;     &lt;version&gt;1.6.14&lt;/version&gt;   &lt;/dependency&gt;</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-boot/#performance-tips","title":"\ud83d\udcca Performance Tips","text":"<ul> <li>Use connection pooling for DB access (e.g., HikariCP).</li> <li>Optimize serialization via Jackson views or custom serializers.</li> <li>Use <code>@Async</code> and caching (<code>@Cacheable</code>) where applicable.</li> </ul> <p>\u2705 Next Steps: Explore Actuator, Spring Security, and Spring Data JPA to build production-ready apps.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/","title":"11 spring data jpa","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#spring-data-jpa-concise-revision-notes","title":"\ud83d\udcd8 Spring Data JPA - Concise Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#overview","title":"\ud83d\ude80 Overview","text":"<ul> <li>Spring Data JPA is part of the Spring ecosystem, simplifying the implementation of JPA-based repositories.</li> <li>It provides an abstraction layer over JPA (Java Persistence API) and eliminates boilerplate code for database operations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#core-concepts","title":"\ud83d\udd27 Core Concepts","text":"<ul> <li>Repository Interfaces: Extend <code>JpaRepository</code>, <code>CrudRepository</code>, or <code>PagingAndSortingRepository</code>.</li> <li>Entity Classes: Annotated with <code>@Entity</code>, mapped to database tables.</li> <li>Derived Queries: Automatically generated queries from method names.</li> <li>JPQL/Native Queries: Custom queries using <code>@Query</code> annotation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#crud-operations","title":"\u2728 CRUD Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#basic-repositories","title":"\ud83d\udee0\ufe0f Basic Repositories","text":"<pre><code>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#built-in-methods","title":"\ud83d\udd04 Built-in Methods","text":"<ul> <li><code>save(entity)</code> \u2013 Create or update</li> <li><code>findById(id)</code> \u2013 Retrieve by primary key</li> <li><code>findAll()</code> \u2013 Retrieve all records</li> <li><code>deleteById(id)</code> \u2013 Delete by primary key</li> <li><code>count()</code> \u2013 Get total count</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#derived-query-example","title":"\ud83d\udd0d Derived Query Example","text":"<pre><code>List&lt;User&gt; findByLastName(String lastName);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#pagination-sorting","title":"\ud83d\udce6 Pagination &amp; \ud83d\udd03 Sorting","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#paging-with-pageable","title":"\ud83d\udcc4 Paging with Pageable","text":"<pre><code>Page&lt;User&gt; findAll(Pageable pageable);\n</code></pre> <ul> <li>Use <code>PageRequest.of(page, size)</code> to request specific pages.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#sorting-with-sort","title":"\ud83d\udd22 Sorting with Sort","text":"<pre><code>List&lt;User&gt; findAll(Sort.by(\"lastName\"));\n</code></pre> <ul> <li>Combine paging &amp; sorting:</li> </ul> <pre><code>Page&lt;User&gt; findByFirstName(String name, Pageable pageable);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#pageable-example","title":"\u2705 Pageable Example","text":"<pre><code>Pageable pageable = PageRequest.of(0, 10, Sort.by(\"createdAt\").descending());\nPage&lt;User&gt; users = userRepository.findAll(pageable);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#expert-insights","title":"\ud83e\udde0 Expert Insights","text":"<ul> <li>Prefer <code>JpaRepository</code> over <code>CrudRepository</code> for additional features like pagination and flushing.</li> <li>Use DTO projection for optimized reads when not all fields are required.</li> <li>Handle N+1 problems using <code>@EntityGraph</code> or batch fetching.</li> <li>Enable auditing using <code>@CreatedDate</code>, <code>@LastModifiedDate</code> with <code>@EnableJpaAuditing</code>.</li> <li>Leverage Specification API or QueryDSL for dynamic queries in complex filtering scenarios.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#best-practices","title":"\ud83e\uddea Best Practices","text":"<ul> <li>Avoid heavy logic in repository interfaces.</li> <li>Keep queries expressive but not overly complex.</li> <li>Use native queries sparingly \u2014 prefer JPQL or derived queries.</li> <li>Use proper indexing and DB constraints to boost performance &amp; integrity.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-data-jpa/#references","title":"\ud83d\udcda References","text":"<ul> <li>Spring Data JPA Docs</li> <li>Baeldung Spring Data JPA</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/","title":"11 spring mvc","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#spring-mvc-revision-notes","title":"\ud83c\udf31 Spring MVC - Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#overview","title":"\ud83d\udcd8 Overview","text":"<ul> <li>Spring MVC (Model-View-Controller) is a part of the Spring Framework used to build robust, loosely coupled web applications.</li> <li>Follows the MVC architectural pattern, promoting separation of concerns:<ul> <li>Model \u2013 Business logic &amp; data</li> <li>View \u2013 UI rendering</li> <li>Controller \u2013 Request handling &amp; routing</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#controllers","title":"\ud83d\udd39 Controllers \ud83d\udea6","text":"<ul> <li>Annotated with <code>@Controller</code> or <code>@RestController</code> (for REST APIs)</li> <li>Handles incoming HTTP requests, maps to handler methods using <code>@RequestMapping</code>, <code>@GetMapping</code>, etc.</li> </ul> <pre><code>@Controller\npublic class MyController {\n    @GetMapping(\"/welcome\")\n    public String welcome(Model model) {\n        model.addAttribute(\"message\", \"Hello, Spring MVC!\");\n        return \"welcome\"; // resolves to welcome.jsp or view via ViewResolver\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#key-features","title":"\u2705 Key Features","text":"<ul> <li>Can accept path variables, query params, form data</li> <li>Inject request objects using <code>HttpServletRequest</code>, <code>@RequestParam</code>, <code>@ModelAttribute</code></li> <li><code>@RestController</code> = <code>@Controller + @ResponseBody</code> for JSON APIs</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#interceptors","title":"\ud83d\udd39 Interceptors \ud83e\udded","text":"<ul> <li>Used for pre- and post-processing of requests (like filters/middleware)</li> <li>Implement <code>HandlerInterceptor</code> interface or extend <code>HandlerInterceptorAdapter</code></li> <li>Useful for logging, authentication, performance monitoring, locale setting</li> </ul> <pre><code>public class AuthInterceptor implements HandlerInterceptor {\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\n        // Authentication check logic\n        return true; // Continue or false to block\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#registering-interceptor","title":"\ud83d\udee0\ufe0f Registering Interceptor","text":"<pre><code>@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new AuthInterceptor()).addPathPatterns(\"/secure/**\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#view-resolvers","title":"\ud83d\udd39 View Resolvers \ud83d\uddbc\ufe0f","text":"<ul> <li>Responsible for resolving logical view names to actual view files (e.g., JSP, Thymeleaf, PDF)</li> <li>Abstracts view rendering mechanism from controller logic</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#common-viewresolvers","title":"\u2728 Common ViewResolvers","text":"ViewResolver Type Description <code>InternalResourceViewResolver</code> Resolves to JSP files (prefix/suffix-based) <code>ThymeleafViewResolver</code> Supports Thymeleaf templates <code>BeanNameViewResolver</code> Uses bean name as view name <code>XmlViewResolver</code> Uses XML file to map view names to views"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#example-configuration","title":"\ud83e\udde9 Example Configuration","text":"<pre><code>@Bean\npublic InternalResourceViewResolver viewResolver() {\n    InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n    resolver.setPrefix(\"/WEB-INF/views/\");\n    resolver.setSuffix(\".jsp\");\n    return resolver;\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#deep-dive-tips-for-experts","title":"\ud83d\udd0d Deep Dive Tips for Experts","text":"<ul> <li>Use @InitBinder to pre-process request parameters.</li> <li>Combine with AOP for centralized cross-cutting concerns.</li> <li>Leverage HandlerMethodArgumentResolver for custom param bindings.</li> <li>Prefer Thymeleaf over JSP for modern UI rendering.</li> <li>Consider replacing Interceptors with Spring Filters when Servlet-level control is needed.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-mvc/#summary","title":"\ud83e\udde0 Summary","text":"<ul> <li><code>@Controller</code> handles request \u2192 returns view name</li> <li>Interceptors add cross-cutting behavior</li> <li>ViewResolvers map logical view names to UI templates</li> <li>Use annotations &amp; configurations smartly for scalable design</li> </ul> <p>\u2705 Ideal for building scalable, testable, and maintainable web applications with Spring.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-security/","title":"11 spring security","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-security/#spring-security-cheat-sheet-for-experienced-engineers","title":"\ud83d\udd10 Spring Security \u2013 Cheat Sheet for Experienced Engineers","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-security/#overview","title":"\ud83d\ude80 Overview","text":"<ul> <li>Spring Security is a powerful and customizable authentication and access-control framework for Java applications.</li> <li>Supports declarative security for Spring-based apps using filters and annotations.</li> <li>Key pillars: \ud83d\udd11 Authentication (who are you?) and \u2705 Authorization (what can you access?).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-security/#authentication","title":"\ud83d\udd11 Authentication","text":"<ul> <li>\u2705 Purpose: Verifies identity of the user/system.</li> <li>\ud83e\uddf1 Core Components:<ul> <li><code>AuthenticationManager</code>: Authenticates the user credentials.</li> <li><code>UserDetailsService</code>: Loads user-specific data.</li> <li><code>UserDetails</code>: Custom implementation to wrap user info.</li> <li><code>PasswordEncoder</code>: Encrypts and matches passwords.</li> </ul> </li> <li>\ud83d\udd10 Common Authentication Methods:<ul> <li>HTTP Basic / Digest</li> <li>Form-based Login</li> <li>OAuth2 / JWT / OpenID Connect</li> <li>LDAP / SAML (enterprise)</li> </ul> </li> <li>\ud83d\udee0\ufe0f Custom Implementation:</li> </ul> <pre><code>@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(myUserDetailsService).passwordEncoder(passwordEncoder());\n  }\n\n  @Bean\n  public PasswordEncoder passwordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-security/#authorization","title":"\u2705 Authorization","text":"<ul> <li>\ud83c\udfaf Purpose: Decides what resources a user can access.</li> <li>\ud83d\udcda Strategies:<ul> <li>Role-Based Access Control (RBAC)</li> <li>Attribute-Based Access Control (ABAC) \u2013 for fine-grained, rule-based access.</li> </ul> </li> <li>\ud83d\udd10 Techniques:<ul> <li>URL-Based: <code>http.authorizeRequests()</code></li> <li>Method-Based: <code>@PreAuthorize</code>, <code>@Secured</code>, <code>@RolesAllowed</code></li> <li>Domain Object-Level: <code>@PostAuthorize</code>, ACLs (Advanced)</li> </ul> </li> </ul> <pre><code>@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.authorizeRequests()\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n      .antMatchers(\"/user/**\").hasAnyRole(\"USER\", \"ADMIN\")\n      .anyRequest().authenticated()\n      .and().formLogin();\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-security/#filters-security-chain","title":"\ud83d\udd04 Filters &amp; Security Chain","text":"<ul> <li>\ud83d\udd01 Spring Security Filter Chain executes a series of filters before hitting the controller.</li> <li>\ud83d\udd39 Common Filters:<ul> <li><code>UsernamePasswordAuthenticationFilter</code></li> <li><code>BasicAuthenticationFilter</code></li> <li><code>ExceptionTranslationFilter</code></li> <li><code>SecurityContextPersistenceFilter</code></li> </ul> </li> <li>\ud83e\udde9 Filter order is critical. Misplacement can lead to vulnerabilities.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-security/#best-practices-for-enterprise-applications","title":"\ud83d\udee1\ufe0f Best Practices for Enterprise Applications","text":"<ul> <li>\u2705 Use BCrypt for password hashing.</li> <li>\u2705 Prefer stateless authentication (JWT, OAuth2) for microservices.</li> <li>\u2705 Enable CSRF protection for state-changing operations.</li> <li>\u2705 Avoid exposing sensitive endpoints like <code>/actuator</code>, unless secured.</li> <li>\u2705 Externalize configurations and secrets (e.g., use Vault, KMS).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-security/#pro-tips","title":"\ud83d\udccc Pro Tips","text":"<ul> <li>\ud83d\udd10 Always secure endpoints with <code>authenticated()</code> or specific roles.</li> <li>\ud83d\udd0d Leverage <code>SecurityContextHolder</code> for current user info.</li> <li>\u2699\ufe0f Use <code>SecurityExpressionHandler</code> for advanced custom authorization logic.</li> <li>\ud83e\uddea Use <code>@WithMockUser</code> or <code>TestSecurityContextHolder</code> in tests.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/11/11-spring-security/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Spring Security Docs</li> <li>Baeldung Spring Security Tutorials</li> <li>OAuth2 with Spring Boot</li> </ul> <p>\u2705 Revise this regularly before interviews or system architecture discussions!</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/","title":"12 cicd","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/#microservices-cloud-integration","title":"\u2601\ufe0f Microservices &amp; Cloud Integration","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/#cicd-continuous-integration-continuous-deployment","title":"\ud83d\ude80 CI/CD (Continuous Integration / Continuous Deployment)","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/#1-overview","title":"\ud83e\udde9 1. Overview","text":"<ul> <li>CI/CD is a core practice in DevOps that ensures frequent, reliable delivery of software.</li> <li>Enables automation of build, test, and deployment pipelines.</li> <li>Crucial in Microservices architecture to independently develop, test, and deploy each service.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/#2-cicd-pipeline-stages","title":"\ud83d\udd04 2. CI/CD Pipeline Stages","text":"Stage Description \u2705 Commit Code changes pushed to version control (e.g., GitHub, GitLab). \ud83d\udee0\ufe0f Build Compile source code, resolve dependencies. Generates artifacts. \ud83e\uddea Test Run unit, integration, and functional tests. \ud83d\udce6 Package Package code into deployable formats (e.g., Docker image, JAR file). \ud83d\ude80 Deploy Push to staging/production environments, often via Kubernetes/Cloud Run. \ud83d\udd0d Monitor Track performance, errors, and logs via monitoring tools (e.g., Prometheus)."},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/#3-jenkins","title":"\u2699\ufe0f 3. Jenkins","text":"<ul> <li>\ud83d\udee0\ufe0f Open-source automation server for building, testing, and deploying code.</li> <li>Supports pipeline-as-code via <code>Jenkinsfile</code>.</li> <li>Wide plugin ecosystem (Docker, Kubernetes, Git, Slack).</li> <li>Example <code>Jenkinsfile</code>:</li> </ul> <pre><code>pipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn clean install'\n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'mvn test'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh './deploy.sh'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/#4-gitlab-cicd","title":"\ud83e\uddea 4. GitLab CI/CD","text":"<ul> <li>Fully integrated with GitLab repositories.</li> <li>Configuration via <code>.gitlab-ci.yml</code> file.</li> <li>Offers runners (shared or custom) for job execution.</li> <li>Built-in support for Docker, Kubernetes, Helm, Terraform.</li> <li>Example <code>.gitlab-ci.yml</code>:</li> </ul> <pre><code>stages:\n  - build\n  - test\n  - deploy\n\nbuild-job:\n  stage: build\n  script:\n    - mvn clean package\n\ntest-job:\n  stage: test\n  script:\n    - mvn test\n\ndeploy-job:\n  stage: deploy\n  script:\n    - ./deploy.sh\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/#5-best-practices","title":"\ud83e\udde0 5. Best Practices","text":"<ul> <li>\u2705 Keep pipelines fast and isolated.</li> <li>\ud83d\udd10 Secure credentials using Vaults/Secrets Managers.</li> <li>\ud83d\udc33 Use containerized builds (Docker) for consistency.</li> <li>\ud83d\udcc1 Maintain artifact versioning.</li> <li>\ud83d\udcca Integrate quality gates (e.g., SonarQube).</li> <li>\ud83d\udea5 Use feature flags for safer rollouts.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/#6-cloud-integration-in-cicd","title":"\ud83c\udf29\ufe0f 6. Cloud Integration in CI/CD","text":"\u2601\ufe0f Cloud Service \ud83d\udd27 Usage in CI/CD AWS CodePipeline Native CI/CD on AWS, integrates with CodeBuild, Lambda. GCP Cloud Build Build and deploy Docker images, GKE deploys. Azure DevOps Full CI/CD platform, integrates with GitHub and Azure."},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cicd/#summary","title":"\ud83d\udccc Summary","text":"<ul> <li>CI/CD enables faster delivery, higher quality, and reduced risk.</li> <li>Jenkins and GitLab CI are robust choices for pipeline orchestration.</li> <li>Integration with cloud-native tooling enhances scalability and reliability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cloud-integration/","title":"12 cloud integration","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cloud-integration/#microservices-cloud-integration","title":"\u2601\ufe0f Microservices &amp; Cloud Integration","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cloud-integration/#12-cloud-integrations","title":"\ud83d\udd0c 12. Cloud Integrations","text":"<p>Cloud integrations are essential to scale microservices effectively, ensure fault tolerance, and enable rapid deployment across platforms.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cloud-integration/#docker-containerization","title":"\ud83d\udc33 Docker \u2013 Containerization","text":"<ul> <li>\ud83e\uddf1 Encapsulates app &amp; dependencies in portable containers.</li> <li>\ud83c\udfc3\u200d\u2642\ufe0f Enables consistent environments across dev, test, prod.</li> <li>\ud83e\uddea Ideal for running isolated microservices.</li> <li>\ud83d\udce6 Core Concepts:<ul> <li><code>Dockerfile</code> \u2192 Blueprint for image.</li> <li><code>docker image</code> \u2192 Built artifact.</li> <li><code>docker container</code> \u2192 Running instance.</li> </ul> </li> <li>\u2705 Great for CI/CD pipelines &amp; version-controlled deployment.</li> </ul> <pre><code># Sample Dockerfile\nFROM openjdk:17-jdk-alpine\nCOPY ./app.jar /app/app.jar\nCMD [\"java\", \"-jar\", \"/app/app.jar\"]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cloud-integration/#kubernetes-k8s-orchestration","title":"\u2638\ufe0f Kubernetes (K8s) \u2013 Orchestration","text":"<ul> <li>\ud83d\udce6 Automates deployment, scaling, and management of containers.</li> <li>\u2699\ufe0f Self-healing: Restarts failed containers.</li> <li>\ud83c\udf0d Load balancing, service discovery built-in.</li> <li>\ud83e\udde0 Concepts:<ul> <li>Pod: Smallest deployable unit.</li> <li>Deployment: Declarative updates.</li> <li>Service: Exposes a pod.</li> <li>ConfigMap/Secret: App configs.</li> </ul> </li> <li>\ud83d\ude80 Supports blue/green and canary deployments.</li> </ul> <pre><code># Sample Deployment YAML\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-service\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-service\n  template:\n    metadata:\n      labels:\n        app: my-service\n    spec:\n      containers:\n      - name: app\n        image: my-app:latest\n        ports:\n        - containerPort: 8080\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cloud-integration/#aws-amazon-web-services","title":"\u2601\ufe0f AWS \u2013 Amazon Web Services","text":"<ul> <li>\ud83d\udcc8 Scalable, pay-as-you-go infrastructure for microservices.</li> <li>\ud83d\udd27 Key Services:<ul> <li>EC2: VMs for compute.</li> <li>ECS/EKS: Container orchestration.</li> <li>Lambda: Serverless microservices.</li> <li>API Gateway: Manage RESTful APIs.</li> <li>CloudWatch: Logging &amp; Monitoring.</li> <li>RDS/DynamoDB: Relational &amp; NoSQL storage.</li> </ul> </li> <li>\ud83d\udee1\ufe0f IAM roles &amp; VPCs for security.</li> <li>\ud83c\udf10 S3, SNS, SQS, and more for integration.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cloud-integration/#azure-microsoft-cloud","title":"\u2601\ufe0f Azure \u2013 Microsoft Cloud","text":"<ul> <li>\ud83d\udc68\u200d\ud83d\udcbc Enterprise-friendly, hybrid-cloud capable.</li> <li>\ud83d\udd27 Key Services:<ul> <li>App Service: PaaS hosting.</li> <li>AKS (Azure Kubernetes Service): Manage K8s clusters.</li> <li>Functions: Event-driven serverless compute.</li> <li>Service Bus: Messaging backbone.</li> <li>Cosmos DB: Globally distributed DB.</li> <li>Monitor &amp; Application Insights: Observability.</li> </ul> </li> <li>\ud83d\udcbc Tight integration with enterprise ecosystems (AD, .NET).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cloud-integration/#summary-table","title":"\ud83d\udd04 Summary Table","text":"\u2601\ufe0f Tool/Platform \ud83d\udd0d Purpose \ud83d\udd27 Key Feature(s) Docker Containerization Consistent environments, portable apps Kubernetes Orchestration Auto-scaling, self-healing, service discovery AWS Scalable cloud infra ECS, Lambda, API Gateway, RDS Azure Hybrid &amp; enterprise cloud AKS, App Service, Cosmos DB, Service Bus"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-cloud-integration/#expert-insight","title":"\ud83e\udde0 Expert Insight","text":"<ul> <li>Embrace Immutable Infrastructure with Docker + K8s.</li> <li>Use Helm Charts for reusable K8s deployments.</li> <li>Prefer serverless (Lambda/Functions) for event-driven microservices.</li> <li>Ensure observability with centralized logging (CloudWatch / Azure Monitor).</li> <li>Secure with IAM Roles, Secrets Management, and Zero Trust Networks.</li> </ul> <p>\u2705 Next Steps: - Hands-on with <code>docker-compose</code>, <code>kubectl</code>, and <code>eksctl</code>. - Explore <code>Terraform</code> for infra-as-code in cloud microservices. - Try setting up CI/CD via GitHub Actions or AWS CodePipeline.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-rest-apis/","title":"12 rest apis","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-rest-apis/#microservices-cloud-integration","title":"\u2601\ufe0f Microservices &amp; Cloud Integration","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-rest-apis/#121-rest-apis-core-to-microservices-communication","title":"\ud83d\udd0c 12.1 REST APIs \u2013 Core to Microservices Communication","text":"<p>REST (Representational State Transfer) is an architectural style used in designing stateless, cacheable, and uniform APIs. It's widely used for inter-service communication in microservices architectures.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-rest-apis/#key-http-methods-in-rest-apis","title":"\ud83d\udcd8 Key HTTP Methods in REST APIs","text":"\ud83e\udde9 Method \ud83d\udd27 Usage \ud83d\udce6 Typical Use Case <code>GET</code> \ud83d\udd0d Read/Fetch data (safe, idempotent) Fetch user details, list products <code>POST</code> \u2795 Create new resource Add a new order, create a user <code>PUT</code> \ud83d\udcdd Update/Replace entire resource Replace full user profile <code>PATCH</code> \u2702\ufe0f Partially update a resource Update user's email only <code>DELETE</code> \u274c Delete a resource Remove a product, delete account"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-rest-apis/#best-practices-for-rest-apis-in-microservices","title":"\ud83d\udee0\ufe0f Best Practices for REST APIs in Microservices","text":"<ul> <li>\u2705 Statelessness: Each request contains all info required for processing.</li> <li>\ud83d\udcdb Use standard HTTP status codes (e.g., 200 OK, 201 Created, 400 Bad Request).</li> <li>\ud83d\udd12 Secure with OAuth2/JWT for service-to-service authentication.</li> <li>\ud83e\uddf5 Use versioning (<code>/api/v1/resource</code>) to manage API changes.</li> <li>\ud83d\udcc4 Use OpenAPI/Swagger for documentation and validation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-rest-apis/#advanced-considerations","title":"\ud83d\udd0d Advanced Considerations","text":"<ul> <li>\u26d3\ufe0f Circuit Breaker &amp; Retry (e.g., Resilience4j, Hystrix) for fault tolerance.</li> <li>\ud83e\udde9 API Gateway (e.g., Kong, Zuul, AWS API Gateway) to manage routing, rate-limiting.</li> <li>\ud83d\udcc8 Observability: Include correlation IDs in headers for tracing across services.</li> <li>\ud83d\udce6 Payload Optimization: Use compression (GZIP) and only return necessary fields.</li> <li>\u2699\ufe0f Asynchronous APIs: Use messaging (Kafka, RabbitMQ) where REST is not ideal.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-rest-apis/#example-restful-user-api","title":"\ud83d\udd17 Example: RESTful User API","text":"<pre><code>GET /users/123           // Retrieve user with ID 123\nPOST /users              // Create a new user\nPUT /users/123           // Replace user with ID 123\nPATCH /users/123         // Update part of user 123\nDELETE /users/123        // Delete user 123\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-rest-apis/#summary","title":"\ud83d\udcda Summary","text":"<ul> <li>REST APIs are foundational for communication between microservices.</li> <li>Choose the right HTTP method based on intent (read, create, update, delete).</li> <li>Ensure scalability, security, and resilience in your API design.</li> <li>Invest in observability, standards, and documentation.</li> </ul> <p>\ud83e\udde0 \u201cDesign APIs like products \u2014 think about the consumer experience.\u201d</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/","title":"12 spring microservices","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#microservices-cloud-integration","title":"\u2601\ufe0f Microservices &amp; Cloud Integration","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#spring-boot-with-microservices","title":"\ud83d\udd27 Spring Boot with Microservices","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#1-what-are-microservices","title":"\ud83d\ude80 1. What are Microservices?","text":"<ul> <li>\ud83e\udde9 Architectural style where an application is composed of small, independent services.</li> <li>\ud83d\udd04 Each service is autonomous, responsible for a specific business functionality.</li> <li>\ud83d\udce6 Services are deployed independently, typically run in containers (like Docker).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#2-why-spring-boot-for-microservices","title":"\ud83c\udfd7\ufe0f 2. Why Spring Boot for Microservices?","text":"<ul> <li>\u26a1 Fast development with opinionated defaults.</li> <li>\ud83d\udd0c Easy integration with Spring Cloud tools.</li> <li>\ud83e\uddea Embedded servers (Tomcat, Jetty) for easy deployment.</li> <li>\ud83d\udcc8 Production-ready with Actuator for health checks, metrics, etc.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#3-spring-boot-microservices-components","title":"\u2699\ufe0f 3. Spring Boot Microservices Components","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#a-spring-boot-starter-web","title":"\ud83d\udccd a. Spring Boot Starter Web","text":"<ul> <li>RESTful API support via @RestController and @RequestMapping.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#b-spring-data-jpa","title":"\ud83e\uddfe b. Spring Data JPA","text":"<ul> <li>ORM support, transactional persistence with Hibernate.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#c-spring-cloud-config","title":"\ud83d\udce6 c. Spring Cloud Config","text":"<ul> <li>Centralized configuration management for distributed systems.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#d-eureka-service-registry","title":"\ud83c\udfaf d. Eureka (Service Registry)","text":"<ul> <li>\ud83d\udd0d Discovery server where services register themselves.</li> <li>\u2699\ufe0f Enables load balancing and failover.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#e-spring-cloud-gateway-zuul","title":"\ud83d\udee1\ufe0f e. Spring Cloud Gateway / Zuul","text":"<ul> <li>API Gateway pattern implementation.</li> <li>\ud83c\udf09 Routes requests, adds filters (auth, logging).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#f-feign-client-resttemplate-webclient","title":"\ud83d\udce1 f. Feign Client / RestTemplate / WebClient","text":"<ul> <li>Declarative HTTP clients to call other services.</li> <li>Feign integrates with Eureka + Ribbon for load-balanced REST calls.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#g-resilience4j-hystrix","title":"\ud83e\udde0 g. Resilience4j / Hystrix","text":"<ul> <li>Circuit Breaker, Retry, Rate Limiting support.</li> <li>\ud83d\udee1\ufe0f Ensures fault tolerance.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#4-cloud-integration-concepts","title":"\u2601\ufe0f 4. Cloud Integration Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#a-containerization-docker","title":"\u2601\ufe0f a. Containerization (Docker)","text":"<ul> <li>\ud83d\udc33 Package microservices with all dependencies.</li> <li>Promotes immutable infrastructure.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#b-orchestration-kubernetes","title":"\ud83e\uddf0 b. Orchestration (Kubernetes)","text":"<ul> <li>\ud83d\ude80 Automated deployment, scaling, and management of containerized apps.</li> <li>Health checks, rolling updates, service discovery.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#c-cicd-pipelines","title":"\ud83e\uddd1\u200d\ud83d\udd27 c. CI/CD Pipelines","text":"<ul> <li>Tools: Jenkins, GitHub Actions, GitLab CI.</li> <li>Automates build \u2192 test \u2192 deploy cycle.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#d-security-with-oauth2-jwt","title":"\ud83d\udd10 d. Security with OAuth2 / JWT","text":"<ul> <li>Identity management and stateless authentication for microservices.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#e-monitoring-logging","title":"\ud83d\udcc8 e. Monitoring &amp; Logging","text":"<ul> <li>Tools: ELK Stack, Prometheus + Grafana, Zipkin for tracing.</li> <li>\ud83d\udcca Provides insights into system performance.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#5-expert-insights","title":"\ud83e\udde0 5. Expert Insights","text":"<ul> <li>\u2638\ufe0f Prefer event-driven architecture (Kafka, RabbitMQ) for async communication.</li> <li>\ud83d\udee0\ufe0f Use API versioning to evolve services safely.</li> <li>\ud83c\udf0d Handle distributed transactions with Saga pattern or eventual consistency.</li> <li>\ud83d\udd0d Use centralized log correlation IDs for traceability.</li> <li>\u2705 Automate contract testing (e.g., Pact) to avoid integration failures.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#6-code-snippet-example","title":"\u2705 6. Code Snippet Example","text":"<pre><code>@RestController\n@RequestMapping(\"/orders\")\npublic class OrderController {\n\n    @Autowired\n    private OrderService orderService;\n\n    @PostMapping\n    public ResponseEntity&lt;String&gt; placeOrder(@RequestBody OrderRequest request) {\n        orderService.processOrder(request);\n        return ResponseEntity.ok(\"Order placed successfully\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/12/12-spring-microservices/#summary","title":"\ud83d\udcda Summary","text":"<ul> <li>\ud83e\udde9 Microservices enable modular, scalable systems.</li> <li>\u2615 Spring Boot simplifies microservice development.</li> <li>\u2601\ufe0f Cloud-native tools enhance deployment, observability, and resilience.</li> <li>\ud83e\udde0 With 8+ years experience, focus on automation, observability, fault tolerance, and inter-service communication best practices.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-quality/","title":"13 code quality","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-quality/#13-best-practices-optimization","title":"\ud83d\udd0d 13. Best Practices &amp; Optimization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-quality/#code-quality-principles-practices","title":"\u2728 Code Quality: Principles &amp; Practices","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-quality/#1-clean-code","title":"\u2705 1. Clean Code \ud83e\uddfc","text":"<ul> <li>Code should be easy to read, understand, and maintain.</li> <li>Follow meaningful naming conventions for variables, methods, classes.</li> <li>Keep functions short, with a single responsibility.</li> <li>Remove dead code, avoid nested complexity, and prefer early returns.</li> </ul> <pre><code>// \u274c Bad\npublic void d(int a, int b) { ... }\n\n// \u2705 Good\npublic void drawRectangle(int width, int height) { ... }\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-quality/#2-dry-principle-dont-repeat-yourself","title":"\ud83d\udd01 2. DRY Principle (Don't Repeat Yourself) \ud83d\udce6","text":"<ul> <li>Avoid code duplication \u2013 extract repeated logic into methods or utility classes.</li> <li>Improves maintainability and reduces bugs.</li> </ul> <pre><code>// \u274c Repeated logic\ncalculateTax();\ncalculateTax();\n\n// \u2705 DRY\nTaxService.calculate();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-quality/#3-kiss-principle-keep-it-simple-stupid","title":"\ud83e\udde0 3. KISS Principle (Keep It Simple, Stupid) \ud83c\udfaf","text":"<ul> <li>Aim for simplicity over cleverness.</li> <li>Avoid over-engineering \u2013 make the design as simple as possible, but not simpler.</li> <li>Use standard libraries, avoid unnecessary abstractions.</li> </ul> <pre><code>// \u274c Overcomplicated\nOptional.ofNullable(obj).ifPresent(o -&gt; doSomething());\n\n// \u2705 Simple\nif (obj != null) {\n    doSomething();\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-quality/#4-solid-principles","title":"\ud83e\uddf1 4. SOLID Principles \ud83e\udde0","text":"<p>A set of five design principles for writing maintainable object-oriented code:</p> Principle Description Benefit S - Single Responsibility Principle A class should have only one reason to change Simplifies testing &amp; reduces coupling O - Open/Closed Principle Software entities should be open for extension, but closed for modification Supports new features without touching existing code L - Liskov Substitution Principle Subtypes must be substitutable for their base types Enables polymorphism reliably I - Interface Segregation Principle Prefer multiple specific interfaces over one general-purpose interface Avoids \"fat\" interfaces D - Dependency Inversion Principle High-level modules should not depend on low-level modules Encourages decoupling via abstractions"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-quality/#pro-tips-for-experienced-engineers","title":"\ud83d\ude80 Pro Tips for Experienced Engineers \ud83e\uddd1\u200d\ud83d\udcbb","text":"<ul> <li>Use static analysis tools (e.g., SonarQube, PMD) to enforce code quality.</li> <li>Apply automated testing &amp; CI/CD pipelines to catch issues early.</li> <li>Embrace code reviews for continuous learning and quality control.</li> <li>Use design patterns judiciously \u2013 avoid pattern overuse.</li> <li>Prioritize readability over brevity. Code is read more often than written.</li> <li>Follow language-specific idioms and conventions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-quality/#summary","title":"\ud83d\udccc Summary","text":"<ul> <li>\u2705 Clean, readable, and simple code lasts longer.</li> <li>\u2705 DRY &amp; SOLID improve maintainability.</li> <li>\u2705 Use KISS to avoid unnecessary complexity.</li> <li>\u2705 Optimize with tools, reviews, and principles.</li> </ul> <p>\"Clean code always looks like it was written by someone who cares.\" \u2013 Robert C. Martin</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/","title":"13 code review guidelines","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#13-best-practices-optimization","title":"\ud83d\udd0d 13. Best Practices &amp; Optimization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#code-review-guidelines","title":"\u2705 Code Review Guidelines","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#1-purpose-of-code-reviews","title":"\ud83d\udccc 1. Purpose of Code Reviews","text":"<ul> <li>Ensure code quality, maintainability, and readability</li> <li>Prevent bugs, security flaws, and performance issues</li> <li>Encourage knowledge sharing and team collaboration</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#2-reviewer-responsibilities","title":"\ud83e\udde0 2. Reviewer Responsibilities","text":"<ul> <li>\u2705 Understand the context and requirements of the code change</li> <li>\u2705 Check for adherence to coding standards and style guides</li> <li>\u2705 Review logic for correctness, edge cases, and test coverage</li> <li>\u2705 Suggest improvements without being overly critical or personal</li> <li>\u2705 Look out for duplication, redundancy, or code smell</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#3-author-responsibilities","title":"\u2699\ufe0f 3. Author Responsibilities","text":"<ul> <li>\u2705 Write self-explanatory, clean, and modular code</li> <li>\u2705 Ensure code is well-tested and covered by unit/integration tests</li> <li>\u2705 Include meaningful commit messages and PR descriptions</li> <li>\u2705 Highlight areas of concern or focus for reviewers</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#4-technical-checklist","title":"\ud83d\udd27 4. Technical Checklist","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#code-quality","title":"\ud83e\uddf9 Code Quality","text":"<ul> <li>[ ] Follows SOLID principles</li> <li>[ ] DRY (Don\u2019t Repeat Yourself)</li> <li>[ ] YAGNI (You Aren\u2019t Gonna Need It)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#security","title":"\ud83d\udee1\ufe0f Security","text":"<ul> <li>[ ] No hardcoded credentials or sensitive data</li> <li>[ ] Input validation and sanitization present</li> <li>[ ] Use of secure protocols and encryption where needed</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#performance","title":"\ud83d\udcc8 Performance","text":"<ul> <li>[ ] Avoids unnecessary computation or I/O</li> <li>[ ] Efficient use of data structures and algorithms</li> <li>[ ] Proper resource cleanup (e.g., streams, DB connections)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#testing","title":"\ud83e\uddea Testing","text":"<ul> <li>[ ] Adequate unit test coverage</li> <li>[ ] Negative &amp; edge cases tested</li> <li>[ ] Follows test naming conventions</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#documentation","title":"\ud83d\udcc3 Documentation","text":"<ul> <li>[ ] Code comments where necessary</li> <li>[ ] Public methods and classes are documented</li> <li>[ ] README / API contracts updated</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#5-review-etiquette","title":"\ud83e\udd1d 5. Review Etiquette","text":"<ul> <li>\ud83e\uddd8\u200d\u2642\ufe0f Be constructive and respectful</li> <li>\ud83d\udcac Prefer suggestions over commands (e.g., \"consider renaming\" vs \"rename\")</li> <li>\ud83e\udde9 Ask clarifying questions instead of assuming</li> <li>\u23f1\ufe0f Be prompt \u2014 avoid delaying PRs unnecessarily</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#6-tools-automation","title":"\ud83d\ude80 6. Tools &amp; Automation","text":"<ul> <li>\ud83d\udee0\ufe0f Use linters (e.g., ESLint, Pylint), formatters (e.g., Prettier, Black)</li> <li>\ud83d\udd0d Enable static code analysis tools (e.g., SonarQube, CodeQL)</li> <li>\u2705 Integrate CI pipelines to auto-run tests and lint checks</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-code-review-guidelines/#7-final-thoughts","title":"\ud83c\udfc1 7. Final Thoughts","text":"<ul> <li>Code review is not just a gatekeeping process \u2014 it's a collaborative practice</li> <li>Focus on continuous improvement and shared code ownership</li> <li>Optimize for long-term readability and maintainability, not just immediate correctness</li> </ul> <p>\"Always leave the codebase better than you found it.\" \u2728</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/","title":"13 desigining scalability","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#best-practices-optimization-designing-for-scalability","title":"\ud83d\ude80 Best Practices &amp; Optimization: Designing for Scalability","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#what-is-scalability","title":"\ud83d\udccc What is Scalability?","text":"<ul> <li>Scalability is the system's ability to handle increased load (requests, data, users) without compromising performance.</li> <li>Key to supporting growth, resilience, and cost efficiency in production systems.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#types-of-scalability","title":"\ud83e\udde0 Types of Scalability","text":"<ul> <li>\ud83d\udd04 Vertical Scaling (Scale Up)<ul> <li>Increase resources (CPU, RAM) on a single machine.</li> <li>Limited by hardware.</li> </ul> </li> <li>\ud83c\udf10 Horizontal Scaling (Scale Out)<ul> <li>Add more machines/instances to the pool.</li> <li>More complex, but offers higher fault tolerance and elasticity.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#best-practices-for-designing-scalable-systems","title":"\u2705 Best Practices for Designing Scalable Systems","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#1-decouple-components","title":"\ud83d\udcd0 1. Decouple Components","text":"<ul> <li>Use microservices or modular monoliths.</li> <li>Enables independent scaling of services.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#2-use-asynchronous-communication","title":"\ud83d\udd78\ufe0f 2. Use Asynchronous Communication","text":"<ul> <li>Employ message queues (Kafka, RabbitMQ) to buffer and decouple processing.</li> <li>Reduces response time, improves throughput.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#3-implement-caching-strategically","title":"\ud83d\udcca 3. Implement Caching Strategically","text":"<ul> <li>Use in-memory stores (Redis, Memcached) to cache frequent reads.</li> <li>Reduces DB load, latency.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#4-design-for-load-balancing","title":"\ud83c\udfd7\ufe0f 4. Design for Load Balancing","text":"<ul> <li>Distribute traffic using load balancers (e.g., NGINX, HAProxy, ELB).</li> <li>Ensures even load and availability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#5-choose-the-right-data-storage","title":"\ud83d\udcbe 5. Choose the Right Data Storage","text":"<ul> <li>Normalize vs. denormalize based on access patterns.</li> <li>Use scalable databases (e.g., NoSQL for unstructured, SQL with sharding for large RDBMS).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#6-implement-rate-limiting-throttling","title":"\u23f1\ufe0f 6. Implement Rate Limiting &amp; Throttling","text":"<ul> <li>Prevent abuse and system overload.</li> <li>Tools: API gateways (e.g., Kong, AWS API Gateway).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#7-auto-scaling-resource-monitoring","title":"\ud83e\udde9 7. Auto-Scaling &amp; Resource Monitoring","text":"<ul> <li>Use cloud-native autoscaling (Kubernetes HPA, AWS ASG).</li> <li>Monitor with Prometheus, Grafana, Datadog.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#8-test-for-scalability","title":"\ud83e\uddea 8. Test for Scalability","text":"<ul> <li>Perform load testing (e.g., JMeter, k6) and chaos testing (e.g., Chaos Monkey).</li> <li>Identify bottlenecks before production.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#patterns-tools-for-scalability","title":"\ud83d\udee0\ufe0f Patterns &amp; Tools for Scalability","text":"\ud83e\uddf0 Category \ud83d\udd27 Tools/Techniques Caching Redis, Memcached Load Balancing NGINX, HAProxy, AWS ELB Asynchronous Tasks Kafka, RabbitMQ, Celery Database Scaling Sharding, Replication, Partitioning Auto-scaling Kubernetes HPA, AWS Auto Scaling Groups Monitoring Prometheus, Grafana, Datadog"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#expert-tips-for-senior-engineers","title":"\ud83e\udde0 Expert Tips (For Senior Engineers)","text":"<ul> <li>Prefer idempotent APIs for retries in distributed systems.</li> <li>Use backpressure strategies when consuming streams.</li> <li>Always monitor latency percentiles (P95, P99), not just averages.</li> <li>Consider circuit breakers (e.g., Hystrix) to handle failures gracefully.</li> <li>Architect for multi-AZ or multi-region deployment for true scalability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-desigining-scalability/#summary","title":"\ud83d\udd1a Summary","text":"<ul> <li>Design systems that scale both vertically and horizontally.</li> <li>Emphasize modularity, fault-tolerance, and observability.</li> <li>Regularly benchmark, test, and iterate to ensure scalability meets real-world demands.</li> </ul> <p>\"Scalability isn\u2019t just about surviving growth \u2014 it\u2019s about thriving through it.\"</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-performance-optimization/","title":"13 performance optimization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-performance-optimization/#13-best-practices-optimization","title":"\ud83d\udd27 13. Best Practices &amp; Optimization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-performance-optimization/#performance-optimization","title":"\ud83d\ude80 Performance Optimization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-performance-optimization/#1-efficient-memory-usage","title":"\ud83e\udde0 1. Efficient Memory Usage","text":"<ul> <li>\ud83e\uddf5 Use primitives instead of wrappers (e.g., <code>int</code> vs <code>Integer</code>) in tight loops or memory-critical code.</li> <li>\ud83c\udfaf Avoid memory leaks:<ul> <li>Remove unused listeners, observers, or event handlers.</li> <li>Close database/resultset/connections properly.</li> </ul> </li> <li>\ud83d\udce6 Use object pooling for expensive object creation (e.g., <code>ThreadPoolExecutor</code>, <code>Connection Pool</code>).</li> <li>\ud83e\uddf9 Prefer short-lived objects to leverage generational GC optimizations.</li> <li>\ud83d\udd01 Reuse immutable objects (e.g., <code>String</code>, <code>BigDecimal</code>) where applicable.</li> <li>\ud83d\uded1 Beware of unintended object retention via static fields or caches.</li> <li>\ud83e\uddca Avoid unnecessary object creation inside frequently called methods (e.g., in <code>equals()</code>, <code>hashCode()</code>, loops).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-performance-optimization/#2-avoiding-common-pitfalls","title":"\ud83d\udd73\ufe0f 2. Avoiding Common Pitfalls","text":"<ul> <li>\ud83e\ude93 Avoid premature optimization \u2014 focus on clean code and measure performance before optimizing.</li> <li>\u23f1\ufe0f Use efficient data structures:<ul> <li><code>ArrayList</code> vs <code>LinkedList</code> based on access patterns.</li> <li><code>HashMap</code> vs <code>TreeMap</code> for lookup vs sorted data.</li> </ul> </li> <li>\ud83e\uddf0 Prefer algorithms with better time complexity \u2014 O(n log n) &gt; O(n\u00b2)!</li> <li>\ud83e\uddea Profile before optimizing using tools like:<ul> <li><code>VisualVM</code>, <code>JProfiler</code>, <code>Java Mission Control</code></li> </ul> </li> <li>\ud83d\udd2c Benchmark critical code using JMH (Java Microbenchmark Harness).</li> <li>\ud83c\udf0d Minimize IO and network latency by caching responses, batching calls, and using CDNs.</li> <li>\ud83e\uddf5 Minimize thread contention:<ul> <li>Use concurrent collections (<code>ConcurrentHashMap</code>, <code>CopyOnWriteArrayList</code>).</li> <li>Avoid global locks; use granular locking (<code>ReentrantLock</code>, <code>StampedLock</code>).</li> </ul> </li> <li>\ud83d\udd04 Lazy initialization where possible to reduce startup time and memory footprint.</li> <li>\ud83e\uddf1 Use StringBuilder/StringBuffer instead of <code>+</code> in loops for string concatenation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-performance-optimization/#pro-tips-for-experienced-engineers","title":"\ud83e\uddd1\u200d\ud83d\udcbb Pro Tips (For Experienced Engineers)","text":"<ul> <li>\ud83d\udd01 Loop Unrolling in performance-critical sections (though compiler often does this).</li> <li>\ud83d\udce6 Zero-Copy Techniques (e.g., <code>FileChannel.transferTo</code>) to improve IO throughput.</li> <li>\ud83e\udde0 Memory alignment awareness (on-heap vs off-heap, false sharing).</li> <li>\ud83d\udea6 Non-blocking I/O (NIO) for high-performance server-side code.</li> <li>\u2699\ufe0f Use thread-safe, lock-free data structures (like <code>AtomicInteger</code>, <code>LongAdder</code>) in concurrent environments.</li> <li>\ud83d\udcca Tune JVM with appropriate GC strategy (<code>G1GC</code>, <code>ZGC</code>, <code>Shenandoah</code>) based on application workload.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/13/13-performance-optimization/#summary","title":"\ud83d\udccc Summary","text":"<p>\"Make it work, make it right, then make it fast.\" \u2013 Kent Beck</p> <ul> <li>\u2705 Write clean, testable, maintainable code first.</li> <li>\ud83e\uddea Profile and benchmark before attempting optimizations.</li> <li>\ud83d\udee0\ufe0f Use tools, design patterns, and JVM knowledge to tune performance.</li> <li>\ud83d\udca1 Always understand why you're optimizing \u2014 not just how.</li> </ul> <p>\u2705 Keep this as a quick reference before system tuning, code reviews, or performance debugging.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/","title":"2 abstraction","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#abstraction-in-java","title":"\ud83d\udd25 Abstraction in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#what-is-abstraction","title":"\u2705 What is Abstraction?","text":"<ul> <li>Definition: Abstraction is the process of hiding implementation details and showing only the essential features of an object.</li> <li>Purpose:<ul> <li>Simplifies complexity by exposing only relevant parts.</li> <li>Achieves loose coupling between classes.</li> </ul> </li> <li>Real-World Example:<ul> <li>Car: You interact with the steering wheel and pedals but don\u2019t need to know how the engine works internally.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#abstract-classes-vs-interfaces","title":"\ud83d\udd25 Abstract Classes vs Interfaces","text":"\u2699\ufe0f Feature \ud83d\udee0\ufe0f Abstract Class \ud83c\udf10 Interface Definition A class with abstract methods (incomplete methods) A collection of abstract methods (blueprint) Inheritance Supports single inheritance Supports multiple inheritance Method Implementation Can have both abstract and concrete methods Methods are abstract by default Default Access Can define protected and public members Only public members by default Static &amp; Default Methods Not allowed Supported from Java 8+ Use Case Used for common behavior with partial abstraction Used for full abstraction and contract enforcement"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#abstract-classes-in-java","title":"\ud83d\udd25 Abstract Classes in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#key-characteristics","title":"\ud83d\udccc Key Characteristics:","text":"<ul> <li>Declared using the <code>abstract</code> keyword.</li> <li>Cannot be instantiated directly.</li> <li>Can have abstract and non-abstract methods.</li> <li>Can have constructors, variables, and methods.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#syntax","title":"\ud83d\udee0\ufe0f Syntax:","text":"<pre><code>abstract class Animal {\n    abstract void makeSound(); // Abstract method\n    void sleep() {              // Concrete method\n        System.out.println(\"Sleeping...\");\n    }\n}\n\nclass Dog extends Animal {\n    void makeSound() {\n        System.out.println(\"Bark\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#use-case","title":"\u2705 Use Case:","text":"<ul> <li>When you want to provide common functionality to multiple subclasses while enforcing them to implement specific methods.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#interfaces-in-java","title":"\ud83c\udf10 Interfaces in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#key-characteristics_1","title":"\ud83d\udccc Key Characteristics:","text":"<ul> <li>Declared using the <code>interface</code> keyword.</li> <li>All methods are abstract by default (before Java 8).</li> <li>Supports multiple inheritance.</li> <li>Cannot have constructors.</li> <li>From Java 8 onwards, interfaces can have:<ul> <li>Default methods</li> <li>Static methods</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#syntax_1","title":"\ud83d\udee0\ufe0f Syntax:","text":"<pre><code>interface Vehicle {\n    void start();          // Abstract method\n    default void stop() {  // Default method (Java 8+)\n        System.out.println(\"Vehicle stopped\");\n    }\n    static void service() { // Static method (Java 8+)\n        System.out.println(\"Vehicle service\");\n    }\n}\n\nclass Car implements Vehicle {\n    public void start() {\n        System.out.println(\"Car started\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#use-case_1","title":"\u2705 Use Case:","text":"<ul> <li>When you want to define a contract that multiple classes must follow.</li> <li>Useful for polymorphism and achieving loose coupling.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#default-and-static-methods-in-interfaces-java-8","title":"\ud83d\udd25 Default and Static Methods in Interfaces (Java 8)","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#default-methods","title":"\u2705 Default Methods:","text":"<ul> <li>Introduced in Java 8 to allow adding new functionality without breaking existing classes.</li> <li>Uses the <code>default</code> keyword.</li> <li>Can have a method body.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#syntax_2","title":"\ud83d\udee0\ufe0f Syntax:","text":"<pre><code>interface Printer {\n    default void print() {\n        System.out.println(\"Printing...\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#static-methods","title":"\u2705 Static Methods:","text":"<ul> <li>Introduced in Java 8.</li> <li>Defined with the <code>static</code> keyword.</li> <li>Can only be called using the interface name, not by implementing classes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#syntax_3","title":"\ud83d\udee0\ufe0f Syntax:","text":"<pre><code>interface Logger {\n    static void log(String message) {\n        System.out.println(\"Log: \" + message);\n    }\n}\n\n// Usage\nLogger.log(\"System error\");\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#key-differences-between-abstract-classes-and-interfaces","title":"\ud83d\ude80 Key Differences Between Abstract Classes and Interfaces","text":"<ul> <li>Multiple Inheritance:<ul> <li>Abstract classes do not support multiple inheritance.</li> <li>Interfaces support multiple inheritance.</li> </ul> </li> <li>Default Implementation:<ul> <li>Abstract classes can have constructors.</li> <li>Interfaces cannot have constructors.</li> </ul> </li> <li>Performance:<ul> <li>Abstract classes are faster.</li> <li>Interfaces introduce a bit of overhead due to dynamic method resolution.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#when-to-use-what","title":"\u2705 When to Use What?","text":"<ul> <li>Use Abstract Class:<ul> <li>When you need common behavior across multiple classes.</li> <li>When you want to partially implement functionality.</li> </ul> </li> <li>Use Interface:<ul> <li>When you want to enforce a contract.</li> <li>When you need multiple inheritance.</li> <li>For defining pure abstraction.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#best-practices","title":"\ud83d\ude80 Best Practices:","text":"<ul> <li>Use interfaces for defining contracts and abstract classes for base behaviors.</li> <li>Prefer interfaces for extensibility and flexibility.</li> <li>Use default methods sparingly to avoid ambiguity in multiple inheritance.</li> <li>Document static methods properly to avoid confusion.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-abstraction/#interview-tips","title":"\u2705 Interview Tips:","text":"<ul> <li>Be prepared to explain the differences with examples.</li> <li>Demonstrate knowledge of default and static methods in interfaces.</li> <li>Understand when to use abstract classes vs interfaces in real-world scenarios.</li> <li>Highlight multiple inheritance with interfaces.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/","title":"2 access modifiers","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#access-modifiers-in-java","title":"\ud83d\udd25 Access Modifiers in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#1-what-are-access-modifiers","title":"\ud83d\ude80 1. What are Access Modifiers?","text":"<ul> <li>Access Modifiers control the visibility and accessibility of classes, methods, variables, and constructors.</li> <li>They define which parts of the code can be accessed from other classes, packages, or subclasses.</li> <li>Improper use can lead to tight coupling, reduced encapsulation, and security issues.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#2-types-of-access-modifiers","title":"\ud83d\udd25 2. Types of Access Modifiers","text":"\ud83d\udd25 Modifier \ud83c\udf10 Scope \u2705 Accessible From \ud83d\udd12 Usage in Classes <code>public</code> Anywhere Same class, same package, different package, subclass \u2705 Allowed <code>protected</code> Same package + Subclasses Same class, same package, different package via inheritance \u274c Not allowed at class level <code>default</code> (package-private) Same package only Same class, same package only \u2705 Allowed <code>private</code> Within the same class only Same class only \u2705 Allowed"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#3-detailed-explanation-with-examples","title":"\u2705 3. Detailed Explanation with Examples","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#1-public-access-modifier","title":"\ud83d\udd25 1. <code>public</code> Access Modifier","text":"<ul> <li>Scope: Accessible from anywhere.</li> <li>Usage: Best for utility classes, constants, and APIs meant for global access.</li> <li>Example:</li> </ul> <pre><code>public class Vehicle {\n    public String brand = \"Toyota\";\n    public void display() {\n        System.out.println(\"Brand: \" + brand);\n    }\n}\n</code></pre> <ul> <li>\u2705 Accessible from any package or class.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#2-protected-access-modifier","title":"\ud83d\udd25 2. <code>protected</code> Access Modifier","text":"<ul> <li>Scope: Accessible in the same package and by subclasses (even in different packages).</li> <li>Usage: Ideal for methods meant for inheritance or extensibility.</li> <li>Example:</li> </ul> <pre><code>package com.example;\n\npublic class Car {\n    protected String model = \"Sedan\";\n\n    protected void showModel() {\n        System.out.println(\"Model: \" + model);\n    }\n}\n</code></pre> <pre><code>package com.inherited;\nimport com.example.Car;\n\npublic class SUV extends Car {\n    public void display() {\n        showModel();  // Accessible due to inheritance\n    }\n}\n</code></pre> <ul> <li>\u2705 Accessible in subclasses across different packages.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#3-default-package-private-access-modifier","title":"\ud83d\udd25 3. <code>default</code> (Package-Private) Access Modifier","text":"<ul> <li>Scope: Accessible within the same package only.</li> <li>Usage: Suitable for package-level utilities.</li> <li>Example:</li> </ul> <pre><code>class Vehicle {  // Default access\n    String type = \"Car\";  // Default access\n\n    void displayType() {   // Default access\n        System.out.println(\"Type: \" + type);\n    }\n}\n</code></pre> <ul> <li>\u274c Not accessible outside the package.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#4-private-access-modifier","title":"\ud83d\udd25 4. <code>private</code> Access Modifier","text":"<ul> <li>Scope: Accessible within the same class only.</li> <li>Usage: Ideal for data encapsulation and internal implementation details.</li> <li>Example:</li> </ul> <pre><code>public class Person {\n    private String name = \"John\";\n\n    private void display() {\n        System.out.println(\"Name: \" + name);\n    }\n}\n</code></pre> <ul> <li>\u274c Not accessible outside the class.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#4-key-takeaways-and-best-practices","title":"\ud83d\udd25 4. Key Takeaways and Best Practices","text":"<ul> <li>Use <code>private</code> for fields and methods that should not be accessed directly.</li> <li>Use <code>protected</code> for inheritance-based extensibility.</li> <li>Use <code>public</code> only for APIs or methods meant to be accessed globally.</li> <li>Favor encapsulation: Keep fields private and provide public getter/setter methods.</li> <li>Minimize <code>protected</code> access to reduce unintentional misuse.</li> <li>Default access is package-private, suitable for classes only meant to be used within the same package.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-access-modifiers/#5-interview-tips-key-points","title":"\ud83d\ude80 5. Interview Tips &amp; Key Points","text":"<ul> <li>Inheritance &amp; Protected: Methods with <code>protected</code> access can be accessed in child classes from different packages.</li> <li>Default Access: Often a common source of confusion\u2014only accessible within the same package.</li> <li>Encapsulation Principle: <code>private</code> variables with public getters/setters maintain control over the data.</li> <li>Memory &amp; Security: Use <code>private</code> access for sensitive data (e.g., passwords, IDs).</li> <li>Avoid exposing internals: Favor access restriction over excessive public access.</li> </ul> <p>\u2705 Mastering access modifiers is essential for writing secure, modular, and maintainable Java applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/","title":"2 composition vs inheritance","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#composition-vs-inheritance-in-java","title":"\ud83d\udd25 Composition vs Inheritance in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#1-overview","title":"\ud83d\ude80 1. Overview","text":"<ul> <li>Composition and Inheritance are two fundamental object-oriented programming (OOP) principles used for code reuse and creating relationships between classes.</li> <li>Choosing between them impacts code flexibility, reusability, and maintainability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#2-what-is-inheritance","title":"\ud83d\udd25 2. What is Inheritance?","text":"<ul> <li>Inheritance is an OOP principle where a child class derives the properties and behaviors of a parent class.</li> <li>It promotes code reuse but leads to tight coupling.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#key-features","title":"\u2705 Key Features:","text":"<ul> <li>Enables hierarchical relationships between classes.</li> <li>Supports method overriding (polymorphism).</li> <li>Follows the IS-A relationship.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#syntax","title":"\ud83d\udd25 Syntax:","text":"<pre><code>class Animal {\n    void eat() {\n        System.out.println(\"This animal eats food\");\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\n        System.out.println(\"Dog barks\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.eat();  // Inherited from Animal\n        dog.bark();\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#disadvantages-of-inheritance","title":"\u26a0\ufe0f Disadvantages of Inheritance:","text":"<ul> <li>Tight Coupling: Changes in the parent class can break child classes.</li> <li>Multiple Inheritance Issues: Java doesn\u2019t support multiple inheritance to avoid ambiguity.</li> <li>Can lead to rigid class hierarchies.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#3-what-is-composition","title":"\ud83d\udd25 3. What is Composition?","text":"<ul> <li>Composition refers to creating classes with references to other classes.</li> <li>It promotes code flexibility and supports loose coupling.</li> <li>Follows the HAS-A relationship.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#key-features_1","title":"\u2705 Key Features:","text":"<ul> <li>Combines smaller classes into complex structures.</li> <li>Encapsulates behavior using delegation.</li> <li>Improves code flexibility and testability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#syntax_1","title":"\ud83d\udd25 Syntax:","text":"<pre><code>class Engine {\n    void start() {\n        System.out.println(\"Engine starting...\");\n    }\n}\n\nclass Car {\n    private Engine engine = new Engine();  // Composition\n\n    void drive() {\n        engine.start();\n        System.out.println(\"Car is moving...\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.drive();\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#advantages-of-composition","title":"\u2705 Advantages of Composition:","text":"<ul> <li>Loose Coupling: More flexible and easier to modify.</li> <li>Better Code Reusability: Components can be reused independently.</li> <li>Supports Dependency Injection (DI) in frameworks like Spring.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#4-key-differences-between-composition-and-inheritance","title":"\ud83d\udd25 4. Key Differences Between Composition and Inheritance","text":"\ud83d\ude80 Feature \ud83d\udd25 Inheritance \ud83c\udf10 Composition Relationship IS-A relationship HAS-A relationship Coupling Tight coupling Loose coupling Code Reuse Reuses parent class functionality Reuses class behavior via delegation Flexibility Less flexible (fixed hierarchy) More flexible, easier to extend Multiple Inheritance Not supported Supported through multiple objects Testability Difficult to test Easier to test Modification Impact Affects all child classes Only affects composed objects"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#5-when-to-use-what","title":"\ud83d\udd25 5. When to Use What?","text":"<p>\u2705 Use Inheritance When: - There is a clear IS-A relationship (e.g., Dog IS-A Animal). - You want to reuse base class behavior. - Polymorphism and method overriding are required.</p> <p>\u2705 Use Composition When: - There is a HAS-A relationship (e.g., Car HAS-A Engine). - You need loose coupling and flexibility. - To delegate behavior without creating rigid hierarchies. - Dependency injection or plug-and-play design is required.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#6-best-practices-and-tips","title":"\ud83d\ude80 6. Best Practices and Tips","text":"<ul> <li>Favor Composition over Inheritance in most cases for better flexibility and maintainability.</li> <li>Use Inheritance for base behavior, but avoid deep inheritance trees.</li> <li>Use Composition for reusability, dependency injection, and adaptability.</li> <li>In frameworks like Spring, Composition is widely used through Dependency Injection (DI).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-composition-vs-inheritance/#key-takeaway","title":"\u2705 Key Takeaway:","text":"<ul> <li>Inheritance \u2192 Code reuse with tight coupling (IS-A relationship).</li> <li>Composition \u2192 Code reuse with loose coupling (HAS-A relationship).</li> <li>For robust, flexible, and extensible applications, prefer composition over inheritance in most scenarios.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/","title":"2 encapsulation","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#encapsulation-in-java","title":"\ud83d\udd11 Encapsulation in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#1-what-is-encapsulation","title":"\u2705 1. What is Encapsulation?","text":"<ul> <li>Encapsulation is a fundamental Object-Oriented Programming (OOP) concept.</li> <li>It refers to the bundling of data (variables) and methods that operate on the data into a single unit (class).</li> <li>It restricts direct access to some of an object's components and only exposes controlled access via methods.</li> <li>Promotes data hiding and abstraction.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#2-key-characteristics-of-encapsulation","title":"\ud83d\ude80 2. Key Characteristics of Encapsulation","text":"<ul> <li>\u2705 Data Hiding:<ul> <li>Hides internal state and requires all interactions through methods.</li> </ul> </li> <li>\ud83d\udd12 Access Control:<ul> <li>Provides controlled access using getters and setters.</li> </ul> </li> <li>\ud83d\udd27 Improved Maintainability:<ul> <li>Enhances flexibility by allowing modifications without affecting external code.</li> </ul> </li> <li>\ud83d\udd25 Modularity:<ul> <li>Improves modularity by grouping related variables and methods together.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#3-benefits-of-encapsulation","title":"\u2699\ufe0f 3. Benefits of Encapsulation","text":"<ul> <li>\ud83d\udd25 Security:<ul> <li>Protects sensitive data by preventing direct access.</li> </ul> </li> <li>\u26a1 Flexibility:<ul> <li>Allows modification of the internal representation without impacting external code.</li> </ul> </li> <li>\ud83d\udcda Improved Code Reusability:<ul> <li>Encapsulated code can be reused easily.</li> </ul> </li> <li>\ud83d\udca1 Easier Debugging and Maintenance:<ul> <li>Simplifies debugging by keeping related data and methods together.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#4-how-to-achieve-encapsulation-in-java","title":"\ud83d\udee0\ufe0f 4. How to Achieve Encapsulation in Java?","text":"<ul> <li>\u2705 Use Private Access Modifiers:<ul> <li>Declare instance variables as <code>private</code>.</li> </ul> </li> <li>\ud83d\udd25 Provide Public Getter and Setter Methods:<ul> <li>Use <code>get</code> and <code>set</code> methods for controlled access.</li> </ul> </li> <li>\ud83d\udd12 Use Constructors:<ul> <li>Initialize variables through constructors to enforce encapsulation.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#5-example-of-encapsulation-in-java","title":"\ud83d\udee0\ufe0f 5. Example of Encapsulation in Java","text":"<pre><code>public class Employee {\n    // Private variables (data hiding)\n    private String name;\n    private int age;\n    private double salary;\n\n    // Constructor to initialize variables\n    public Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n\n    // Getter and Setter methods for controlled access\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n}\n</code></pre> <p>\u2705 Explanation: - Variables <code>name</code>, <code>age</code>, and <code>salary</code> are private to prevent direct access. - Public getter and setter methods allow controlled access. - Encapsulation ensures data hiding and maintains the integrity of the object's state.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#6-best-practices-for-encapsulation","title":"\ud83d\udd25 6. Best Practices for Encapsulation","text":"<ul> <li>\u2705 Always use private access modifiers for instance variables.</li> <li>\ud83d\udd25 Use immutable classes where possible (no setters, only constructors).</li> <li>\ud83d\udd12 Avoid exposing internal fields directly; always use getters and setters.</li> <li>\u26a1 Minimize mutability:<ul> <li>Make fields <code>final</code> where applicable.</li> <li>Return defensive copies of mutable objects.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#7-differences-between-encapsulation-and-abstraction","title":"\ud83d\ude80 7. Differences Between Encapsulation and Abstraction","text":"Feature Encapsulation Abstraction Definition Bundling data and methods into a single unit. Hiding implementation details and showing only the functionality. Focus Protects internal details of an object. Hides complexity from the user. Implementation Achieved through private variables and methods. Achieved through abstract classes or interfaces. Purpose Controls access to sensitive data. Hides unnecessary details from the user. Example Private variables with public getters and setters. Abstract classes, interfaces."},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#8-encapsulation-in-real-world-applications","title":"\u26a1 8. Encapsulation in Real-World Applications","text":"<ul> <li>\u2705 Banking System:<ul> <li>Customer details (name, balance) are encapsulated and accessed via methods.</li> </ul> </li> <li>\ud83d\udd25 Healthcare System:<ul> <li>Patient records are hidden from direct access.</li> </ul> </li> <li>\ud83d\udd12 E-commerce:<ul> <li>Payment and order details are encapsulated to prevent unauthorized access.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-encapsulation/#9-interview-tips-common-questions","title":"\ud83d\udd25 9. Interview Tips &amp; Common Questions","text":"<ul> <li>\u2705 Explain encapsulation with a real-world example.</li> <li>\ud83d\udd25 Difference between encapsulation and abstraction.</li> <li>\ud83d\udd12 Why use getters and setters instead of public variables?</li> <li>\ud83d\udca1 Benefits of encapsulation in large-scale applications.</li> </ul> <p>\u2705 Encapsulation is a powerful OOP concept that enhances security, flexibility, and modularity by controlling access to object data. It is widely used in enterprise applications for maintaining clean and maintainable code.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/","title":"2 inheritance","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/#inheritance-in-java","title":"\ud83e\uddf1 Inheritance in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/#1-what-is-inheritance","title":"\ud83d\ude80 1. What is Inheritance?","text":"<ul> <li>Definition: Inheritance is a mechanism where one class acquires the properties and behaviors of another class.</li> <li>Purpose:<ul> <li>Code reusability \u279d Reduce redundancy.</li> <li>Extends functionality \u279d Add new features.</li> <li>Polymorphism \u279d Achieved through method overriding.</li> </ul> </li> <li>Syntax:</li> </ul> <pre><code>class Parent {\n    int a = 10;\n    void display() {\n        System.out.println(\"Parent class\");\n    }\n}\n\nclass Child extends Parent {\n    void show() {\n        System.out.println(\"Child class\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/#2-types-of-inheritance-in-java","title":"\ud83d\udd25 2. Types of Inheritance in Java","text":"\ud83d\udee0\ufe0f Inheritance Type \u2699\ufe0f Description \u2705 Example Single Inheritance One child inherits from one parent. <code>class A extends B</code> Multilevel Inheritance A child inherits from another child. <code>class C extends B extends A</code> Hierarchical Inheritance Multiple children inherit from one parent. <code>class B, C extends A</code> Multiple Inheritance Not supported in Java (via classes) but achieved using interfaces. <code>interface A, B</code> implemented by <code>class C</code> <p>\u2705 Note: Java does not support multiple inheritance through classes to avoid ambiguity problems but supports it via interfaces.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/#3-method-overriding-in-inheritance","title":"\u26a1 3. Method Overriding in Inheritance","text":"<ul> <li>Definition: When a child class provides its own implementation of a method inherited from the parent class.</li> <li>Rules:<ul> <li>Method name and parameters must be the same.</li> <li>Return type must be the same or covariant.</li> <li>Access modifier cannot be more restrictive in the child class.</li> </ul> </li> <li>Use Cases:<ul> <li>Implementing polymorphism.</li> <li>Customizing behavior of inherited methods.</li> </ul> </li> </ul> <p>\u2705 Example:</p> <pre><code>class Parent {\n    void display() {\n        System.out.println(\"Parent display\");\n    }\n}\n\nclass Child extends Parent {\n    @Override\n    void display() {  // Overriding the parent method\n        System.out.println(\"Child display\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/#4-the-super-keyword-in-inheritance","title":"\ud83d\udd25 4. The <code>super</code> Keyword in Inheritance","text":"<ul> <li>Definition: <code>super</code> is used to access the parent class methods, constructors, or variables.</li> <li>Use Cases:<ul> <li>Calling Parent Methods: <code>java super.methodName();</code></li> <li>Accessing Parent Variables: <code>java super.variableName;</code></li> <li>Invoking Parent Constructor: <code>java super();</code></li> </ul> </li> <li>Example:</li> </ul> <pre><code>class Parent {\n    Parent() {\n        System.out.println(\"Parent constructor\");\n    }\n}\n\nclass Child extends Parent {\n    Child() {\n        super();  // Calls parent constructor\n        System.out.println(\"Child constructor\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/#5-the-this-keyword-in-inheritance","title":"\ud83d\udd25 5. The <code>this</code> Keyword in Inheritance","text":"<ul> <li>Definition: <code>this</code> refers to the current class instance.</li> <li>Use Cases:<ul> <li>To access instance variables.</li> <li>To invoke current class methods.</li> <li>To call current class constructors.</li> </ul> </li> <li>Syntax:</li> </ul> <pre><code>this.variableName;     // Accessing instance variable\nthis.methodName();      // Calling current class method\nthis();                 // Calling current class constructor\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>class Person {\n    String name;\n\n    Person(String name) {\n        this.name = name;  // Refers to instance variable\n    }\n\n    void display() {\n        System.out.println(\"Name: \" + this.name);\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/#6-key-differences-super-vs-this","title":"\ud83d\ude80 6. Key Differences: <code>super</code> vs <code>this</code>","text":"\ud83d\udd25 Keyword \u2705 Purpose \ud83d\udccc Use Case <code>this</code> Refers to current class instance Access current class variables/methods <code>super</code> Refers to parent class instance Access parent class variables/methods <code>this()</code> Invokes current class constructor Constructor chaining <code>super()</code> Invokes parent class constructor Access parent constructor"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/#7-best-practices-in-inheritance","title":"\u2705 7. Best Practices in Inheritance","text":"<ul> <li>Use inheritance only when necessary \u279d Avoid deep inheritance hierarchies.</li> <li>Favor composition over inheritance \u279d Easier to extend and modify.</li> <li>Use <code>@Override</code> annotation \u279d Ensures proper overriding.</li> <li>Always call <code>super()</code> in constructors \u279d Ensures parent class initialization.</li> <li>Avoid inheriting irrelevant classes \u279d Leads to tight coupling.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-inheritance/#8-key-takeaways","title":"\ud83d\udcda 8. Key Takeaways:","text":"<ul> <li>Inheritance \u279d Enables code reuse and polymorphism.</li> <li>Method Overriding \u279d Achieves runtime polymorphism.</li> <li><code>super</code> \u279d Accesses parent class members.</li> <li><code>this</code> \u279d Refers to current class members.</li> <li>Use inheritance carefully to avoid complexity and tight coupling.</li> </ul> <p>\u2705 Next Steps: Practice coding inheritance examples and understand how method overriding, <code>super</code>, and <code>this</code> work in real-world scenarios!</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/","title":"2 polymorphism","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#polymorphism-in-java","title":"\ud83d\udd25 Polymorphism in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#1-overview-of-polymorphism","title":"\ud83d\udcda 1. Overview of Polymorphism","text":"<ul> <li>Polymorphism: Derived from Greek words \u2013 poly (many) and morph (forms).</li> <li>It allows an object to take multiple forms, enabling a single interface to represent different types.</li> <li>Achieved through:<ul> <li>Compile-time Polymorphism \u2192 Method Overloading</li> <li>Runtime Polymorphism \u2192 Method Overriding</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#2-compile-time-polymorphism-static-binding","title":"\u2699\ufe0f 2. Compile-Time Polymorphism (Static Binding)","text":"<ul> <li>Definition:<ul> <li>Achieved through method overloading.</li> <li>The method to be executed is determined at compile time.</li> </ul> </li> <li>Key Characteristics:<ul> <li>Multiple methods with the same name but different parameter lists.</li> <li>Resolved during compilation.</li> </ul> </li> <li>Advantages:<ul> <li>Improves code readability and reusability.</li> <li>Provides better performance (since binding happens at compile time).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#method-overloading","title":"\u2705 Method Overloading","text":"<ul> <li>Method Overloading: Multiple methods with the same name but different parameters (number, type, or sequence).</li> </ul> <pre><code>class OverloadExample {\n    void show(int a) {\n        System.out.println(\"Int method: \" + a);\n    }\n    void show(String b) {\n        System.out.println(\"String method: \" + b);\n    }\n    void show(int a, String b) {\n        System.out.println(\"Int + String: \" + a + \", \" + b);\n    }\n    public static void main(String[] args) {\n        OverloadExample obj = new OverloadExample();\n        obj.show(5);\n        obj.show(\"Hello\");\n        obj.show(10, \"Java\");\n    }\n}\n</code></pre> <p>\u2714\ufe0f Output:</p> <pre><code>Int method: 5\nString method: Hello\nInt + String: 10, Java\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#3-runtime-polymorphism-dynamic-binding","title":"\ud83d\udd25 3. Runtime Polymorphism (Dynamic Binding)","text":"<ul> <li>Definition:<ul> <li>Achieved through method overriding.</li> <li>The method to be executed is determined at runtime.</li> </ul> </li> <li>Key Characteristics:<ul> <li>Allows a child class to provide its own implementation of a method defined in the parent class.</li> <li>Resolved during runtime.</li> </ul> </li> <li>Advantages:<ul> <li>Enables dynamic method invocation.</li> <li>Supports loose coupling and extensibility.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#method-overriding","title":"\u2705 Method Overriding","text":"<ul> <li>Method Overriding: Redefining a method in a child class that exists in the parent class.</li> <li>Rules:<ul> <li>The method name, return type, and parameters must be identical.</li> <li>The access modifier in the child class cannot be more restrictive.</li> <li>The overridden method can throw fewer or no exceptions.</li> </ul> </li> </ul> <pre><code>class Parent {\n    void display() {\n        System.out.println(\"Parent display\");\n    }\n}\nclass Child extends Parent {\n    @Override\n    void display() {\n        System.out.println(\"Child display\");\n    }\n    public static void main(String[] args) {\n        Parent obj = new Child(); // Runtime polymorphism\n        obj.display();\n    }\n}\n</code></pre> <p>\u2714\ufe0f Output:</p> <pre><code>Child display\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#4-key-differences-overloading-vs-overriding","title":"\u26a1 4. Key Differences: Overloading vs Overriding","text":"Aspect Method Overloading Method Overriding Binding Type Compile-time (Static Binding) Runtime (Dynamic Binding) Method Name Same name with different parameters Same name and parameters Inheritance Required Not required Required (inherited classes) Execution Resolved at compile time Resolved at runtime Access Modifiers No restrictions Child method can't be more restrictive Return Type Can have different return types Must have the same return type Performance Faster execution Slightly slower due to dynamic binding"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#5-best-practices-and-tips","title":"\u2705 5. Best Practices and Tips","text":"<ul> <li> <p>For Overloading:</p> <ul> <li>Use it to improve code readability and reusability.</li> <li>Avoid excessive overloading; it can make the code complex.</li> </ul> </li> <li> <p>For Overriding:</p> <ul> <li>Always use <code>@Override</code> annotation to avoid accidental overloading.</li> <li>Follow Liskov Substitution Principle (child class objects can replace parent class objects).</li> <li>Use <code>super</code> keyword to access the parent class\u2019s overridden method.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#6-real-world-use-cases-of-polymorphism","title":"\ud83d\ude80 6. Real-world Use Cases of Polymorphism","text":"<ul> <li>Database Connectivity:<ul> <li><code>Connection con = DriverManager.getConnection()</code> \u2192 Different DB drivers (MySQL, Oracle, etc.) implement the same interface.</li> </ul> </li> <li>Collections Framework:<ul> <li><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></li> <li>Here, <code>ArrayList</code> is a concrete implementation of <code>List</code> interface.</li> </ul> </li> <li>Method Overriding in Web Frameworks:<ul> <li><code>HttpServlet</code> class methods like <code>doGet()</code> and <code>doPost()</code> are overridden in custom servlets.</li> </ul> </li> <li>Spring Framework:<ul> <li>Dependency Injection uses polymorphism to inject different implementations of an interface at runtime.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-polymorphism/#7-key-takeaways","title":"\u2705 7. Key Takeaways","text":"<ul> <li>Compile-time polymorphism \u2192 Achieved via method overloading.</li> <li>Runtime polymorphism \u2192 Achieved via method overriding.</li> <li>Overloading occurs in the same class, while overriding requires inheritance.</li> <li>Polymorphism enhances code reusability, extensibility, and flexibility.</li> <li>Best Practices: Use <code>@Override</code> annotation, avoid excessive overloading, and follow proper access modifier rules.</li> </ul> <p>\ud83d\ude80 Mastering polymorphism is essential for clean, maintainable, and scalable Java applications!</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/","title":"2 solid principles","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#solid-principles-in-java","title":"\ud83d\udee0\ufe0f SOLID Principles in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#1-what-are-solid-principles","title":"\ud83d\ude80 1. What are SOLID Principles?","text":"<ul> <li>SOLID is an acronym representing five design principles that improve the maintainability, scalability, and flexibility of software systems.</li> <li>They promote clean, modular, and reusable code with better abstraction and minimal coupling.</li> <li>Widely used in Object-Oriented Programming (OOP) for building robust and extensible applications.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#2-the-solid-acronym","title":"\ud83d\udd25 2. The SOLID Acronym","text":"\ud83d\udd25 Principle \ud83d\udcdc Description \u2705 Benefits S: Single Responsibility A class should have only one reason to change. Increases cohesion, reduces complexity O: Open-Closed Open for extension, closed for modification. Easier to add new features L: Liskov Substitution Subtypes must be replaceable by their base types. Ensures consistent behavior I: Interface Segregation No client should be forced to depend on unused methods. Reduces unnecessary dependencies D: Dependency Inversion Depend on abstractions, not on concrete implementations. Loosely coupled, flexible design"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#3-detailed-explanation-of-each-principle","title":"\u2705 3. Detailed Explanation of Each Principle","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#s-single-responsibility-principle-srp","title":"\ud83d\udd25 S \u2013 Single Responsibility Principle (SRP)","text":"<ul> <li>Definition: A class should have one and only one reason to change.</li> <li>Each class should handle a single functionality.</li> <li>Violation Example:</li> </ul> <pre><code>class Employee {\n    void calculateSalary() { /* Salary logic */ }\n    void printEmployeeDetails() { /* Print logic */ }\n}\n</code></pre> <ul> <li>Correct Implementation:</li> </ul> <pre><code>class SalaryCalculator {\n    void calculateSalary(Employee emp) { /* Salary logic */ }\n}\nclass EmployeePrinter {\n    void printEmployeeDetails(Employee emp) { /* Print logic */ }\n}\n</code></pre> <p>\u2705 Benefits: - Improves cohesion. - Easier to maintain and extend.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#o-open-closed-principle-ocp","title":"\ud83d\udd25 O \u2013 Open-Closed Principle (OCP)","text":"<ul> <li>Definition: Classes should be open for extension but closed for modification.</li> <li>Avoid changing existing code when adding new functionality.</li> <li>Violation Example:</li> </ul> <pre><code>class Shape {\n    void draw() {\n        // Drawing logic for circle and square\n    }\n}\n</code></pre> <ul> <li>Correct Implementation: (Using polymorphism)</li> </ul> <pre><code>interface Shape {\n    void draw();\n}\nclass Circle implements Shape {\n    public void draw() { /* Circle drawing logic */ }\n}\nclass Square implements Shape {\n    public void draw() { /* Square drawing logic */ }\n}\n</code></pre> <p>\u2705 Benefits: - Enhances extensibility without modifying existing code.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#l-liskov-substitution-principle-lsp","title":"\ud83d\udd25 L \u2013 Liskov Substitution Principle (LSP)","text":"<ul> <li>Definition: Subclasses must be replaceable by their parent class without breaking functionality.</li> <li>Ensures that derived classes extend the behavior of the base class.</li> <li>Violation Example:</li> </ul> <pre><code>class Bird {\n    void fly() { /* Fly logic */ }\n}\nclass Penguin extends Bird {\n    void fly() { /* Penguins can't fly */ }\n}\n</code></pre> <ul> <li>Correct Implementation:</li> </ul> <pre><code>interface FlyingBird {\n    void fly();\n}\nclass Sparrow implements FlyingBird {\n    public void fly() { /* Sparrow can fly */ }\n}\nclass Penguin {\n    void swim() { /* Penguin can swim */ }\n}\n</code></pre> <p>\u2705 Benefits: - Prevents unexpected behavior. - Ensures substitutability.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#i-interface-segregation-principle-isp","title":"\ud83d\udd25 I \u2013 Interface Segregation Principle (ISP)","text":"<ul> <li>Definition: No client should be forced to depend on interfaces it does not use.</li> <li>Split large interfaces into smaller, specific ones.</li> <li>Violation Example:</li> </ul> <pre><code>interface Worker {\n    void work();\n    void eat();\n}\nclass Robot implements Worker {\n    public void work() { /* Robot working */ }\n    public void eat() { /* Irrelevant for Robot */ }\n}\n</code></pre> <ul> <li>Correct Implementation:</li> </ul> <pre><code>interface Workable {\n    void work();\n}\ninterface Eatable {\n    void eat();\n}\nclass Human implements Workable, Eatable {\n    public void work() { /* Human working */ }\n    public void eat() { /* Human eating */ }\n}\nclass Robot implements Workable {\n    public void work() { /* Robot working */ }\n}\n</code></pre> <p>\u2705 Benefits: - Improves modularity. - Avoids unnecessary dependencies.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#d-dependency-inversion-principle-dip","title":"\ud83d\udd25 D \u2013 Dependency Inversion Principle (DIP)","text":"<ul> <li>Definition: Depend on abstractions, not on concrete implementations.</li> <li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li> <li>Violation Example:</li> </ul> <pre><code>class MySQLDatabase {\n    void connect() { /* MySQL connection logic */ }\n}\nclass DataService {\n    MySQLDatabase db = new MySQLDatabase();\n    void getData() { db.connect(); }\n}\n</code></pre> <ul> <li>Correct Implementation:</li> </ul> <pre><code>interface Database {\n    void connect();\n}\nclass MySQLDatabase implements Database {\n    public void connect() { /* MySQL connection logic */ }\n}\nclass DataService {\n    private Database db;\n    public DataService(Database db) { this.db = db; }\n    void getData() { db.connect(); }\n}\n</code></pre> <p>\u2705 Benefits: - Promotes loose coupling. - Enhances testability and flexibility.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/2/2-solid-principles/#4-key-takeaways","title":"\u2705 4. Key Takeaways","text":"<ul> <li>SOLID principles are essential for scalable, maintainable, and modular Java applications.</li> <li>Following these principles leads to cleaner code with fewer bugs and easier future modifications.</li> <li>Interview Tip: Be prepared to explain real-world applications of SOLID principles with examples.</li> </ul> <p>\u2705 Mastering SOLID principles is a key skill for senior software engineers, ensuring you write flexible, reusable, and robust Java applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/","title":"3 exception handling","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#exception-handling-in-java","title":"\ud83d\uded1 Exception Handling in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#1-what-is-exception-handling","title":"\ud83d\ude80 1. What is Exception Handling?","text":"<ul> <li>Exception Handling is a mechanism to handle runtime errors gracefully, ensuring the program doesn't crash unexpectedly.</li> <li>Exception: An event that disrupts the normal flow of the program.</li> <li>Objective: To catch errors, prevent abnormal termination, and provide meaningful messages.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#2-exception-hierarchy-in-java","title":"\ud83d\udd25 2. Exception Hierarchy in Java","text":"<ul> <li>Java exceptions are derived from the <code>Throwable</code> class.</li> <li>Hierarchy:</li> </ul> <pre><code>               Throwable\n               /      \\\n         Error       Exception\n                   /         \\\n          Checked    Unchecked\n</code></pre> <ul> <li>Error:<ul> <li>Irrecoverable issues (e.g., <code>OutOfMemoryError</code>, <code>StackOverflowError</code>).</li> <li>Should not be handled using exception handling.</li> </ul> </li> <li>Exception:<ul> <li>Represents recoverable issues.</li> <li>Two types:<ul> <li>Checked Exception: Caught at compile-time.</li> <li>Unchecked Exception: Caught at runtime.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#3-types-of-exceptions","title":"\ud83d\udd25 3. Types of Exceptions","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#checked-exceptions-compile-time","title":"\u2705 Checked Exceptions (Compile-time)","text":"<ul> <li>Checked at compile-time, mandatory to handle or declare using <code>throws</code>.</li> <li>Examples:<ul> <li><code>IOException</code></li> <li><code>SQLException</code></li> <li><code>FileNotFoundException</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#unchecked-exceptions-runtime","title":"\u26a0\ufe0f Unchecked Exceptions (Runtime)","text":"<ul> <li>Occur during runtime, not checked by the compiler.</li> <li>Examples:<ul> <li><code>NullPointerException</code></li> <li><code>ArrayIndexOutOfBoundsException</code></li> <li><code>ArithmeticException</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#4-exception-handling-keywords","title":"\ud83d\udee0\ufe0f 4. Exception Handling Keywords","text":"\ud83d\udd25 Keyword \u2705 Purpose \ud83d\udca1 Example Usage <code>try</code> Defines a block of code to test for exceptions. <code>try { int a = 10 / 0; }</code> <code>catch</code> Handles the exception thrown by <code>try</code>. <code>catch (Exception e) {}</code> <code>finally</code> Always executed (optional). Used for cleanup. <code>finally { System.out.println(); }</code> <code>throw</code> Used to throw an exception explicitly. <code>throw new NullPointerException();</code> <code>throws</code> Declares exceptions that may occur. <code>void myMethod() throws IOException</code>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#5-try-catch-finally-block","title":"\ud83d\udd25 5. Try-Catch-Finally Block","text":"<ul> <li>Syntax:</li> </ul> <pre><code>try {\n    // Code that may throw an exception\n} catch (ExceptionType e) {\n    // Handle exception\n} finally {\n    // Optional cleanup block\n}\n</code></pre> <ul> <li>Flow:<ul> <li><code>try</code>: Code execution starts here.</li> <li><code>catch</code>: Executes if an exception is thrown.</li> <li><code>finally</code>: Executes always, whether an exception occurs or not.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#6-throw-vs-throws","title":"\ud83d\ude80 6. Throw vs Throws","text":"\u2705 <code>throw</code> \u26a0\ufe0f <code>throws</code> Used to throw an exception explicitly. Declares exceptions in method signature. Used within a method. Used with method declaration. Throws a single exception. Can declare multiple exceptions. Example: <code>throw new NullPointerException();</code> Example: <code>void myMethod() throws IOException</code>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#7-custom-exceptions","title":"\ud83d\udd25 7. Custom Exceptions","text":"<ul> <li>You can create your own exception classes by extending <code>Exception</code> or <code>RuntimeException</code>.</li> <li>Syntax:</li> </ul> <pre><code>class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws CustomException {\n        throw new CustomException(\"Custom Exception Occurred\");\n    }\n}\n</code></pre> <ul> <li>When to use:<ul> <li>When existing exceptions are insufficient.</li> <li>To create meaningful, specific exceptions for business logic.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-exception-handling/#8-best-practices-for-exception-handling","title":"\ud83d\ude80 8. Best Practices for Exception Handling","text":"<ul> <li>\u2705 Use specific exceptions instead of generic <code>Exception</code> or <code>Throwable</code>.</li> <li>\ud83d\udd25 Use multiple catch blocks for handling different exceptions separately.</li> <li>\ud83d\udca1 Don\u2019t suppress exceptions by using empty <code>catch</code> blocks.</li> <li>\u26a0\ufe0f Log exceptions properly with relevant information (message, stack trace).</li> <li>\ud83d\uded1 Avoid using exceptions for flow control as it is costly in performance.</li> <li>\ud83d\ude80 Use <code>finally</code> blocks for cleanup operations (closing files, releasing resources).</li> <li>\ud83d\udd25 Create meaningful custom exceptions for better debugging and maintenance.</li> </ul> <p>\u2705 Key Takeaways: - Exception handling makes your code more robust and prevents crashes. - Proper handling improves code reliability and maintainability. - Use custom exceptions to handle application-specific errors effectively.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-object-class/","title":"3 object class","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-object-class/#java-object-class-revision-notes","title":"\ud83d\udee0\ufe0f Java Object Class \u2013 Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-object-class/#1-overview-of-object-class","title":"\ud83d\ude80 1. Overview of <code>Object</code> Class","text":"<ul> <li>The <code>Object</code> class is the root class of the Java class hierarchy.</li> <li>Every class in Java implicitly inherits from the <code>Object</code> class (except <code>Object</code> itself).</li> <li>It provides basic methods that all Java objects can use.</li> <li>Common Methods:<ul> <li><code>equals()</code></li> <li><code>hashCode()</code></li> <li><code>toString()</code></li> <li><code>clone()</code></li> <li><code>getClass()</code></li> <li><code>finalize()</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-object-class/#2-equals-method","title":"\ud83d\udd25 2. <code>equals()</code> Method","text":"<ul> <li>\u2705 Definition: Compares two objects for equality.</li> <li>Default Implementation:<ul> <li>Inherited from <code>Object</code>, uses reference equality (compares memory addresses).</li> </ul> </li> <li>Syntax:</li> </ul> <pre><code>public boolean equals(Object obj)\n</code></pre> <ul> <li>Custom Implementation: Override to compare content equality.</li> </ul> <pre><code>class Person {\n    private String name;\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n        Person person = (Person) obj;\n        return name.equals(person.name);\n    }\n}\n</code></pre> <ul> <li>Best Practices:<ul> <li>Use <code>==</code> for reference comparison.</li> <li>Use <code>equals()</code> for content comparison.</li> <li>Ensure <code>equals()</code> is consistent with <code>hashCode()</code>.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-object-class/#3-hashcode-method","title":"\ud83d\udd25 3. <code>hashCode()</code> Method","text":"<ul> <li>\u2705 Definition: Returns the hash code for the object.</li> <li>Used in hash-based collections (e.g., <code>HashMap</code>, <code>HashSet</code>).</li> <li>Syntax:</li> </ul> <pre><code>public int hashCode()\n</code></pre> <ul> <li>Default Implementation:<ul> <li>Derived from the memory reference of the object.</li> </ul> </li> <li>Custom Implementation: Override to ensure consistent hashing.</li> </ul> <pre><code>class Person {\n    private String name;\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name);\n    }\n}\n</code></pre> <ul> <li>Best Practices:<ul> <li>Always override <code>hashCode()</code> when <code>equals()</code> is overridden.</li> <li>Ensure it provides a uniform distribution.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-object-class/#4-tostring-method","title":"\ud83d\udd25 4. <code>toString()</code> Method","text":"<ul> <li>\u2705 Definition: Returns a string representation of the object.</li> <li>Syntax:</li> </ul> <pre><code>public String toString()\n</code></pre> <ul> <li>Default Implementation:<ul> <li>Returns the class name + @ + hashcode.</li> </ul> </li> <li>Custom Implementation: Override for better readability.</li> </ul> <pre><code>class Person {\n    private String name;\n\n    @Override\n    public String toString() {\n        return \"Person{name='\" + name + \"'}\";\n    }\n}\n</code></pre> <ul> <li>Best Practices:<ul> <li>Always override <code>toString()</code> in custom classes for readability.</li> <li>Use <code>String.format()</code> or <code>StringBuilder</code> for complex formatting.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-object-class/#5-clone-method","title":"\ud83d\udd25 5. <code>clone()</code> Method","text":"<ul> <li>\u2705 Definition: Creates a copy of the object.</li> <li>Syntax:</li> </ul> <pre><code>protected Object clone() throws CloneNotSupportedException\n</code></pre> <ul> <li>Default Implementation:<ul> <li>Performs a shallow copy of the object.</li> </ul> </li> <li>Custom Implementation: Override <code>clone()</code> in classes that implement <code>Cloneable</code> interface.</li> </ul> <pre><code>class Person implements Cloneable {\n    private String name;\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n</code></pre> <ul> <li>Best Practices:<ul> <li>Use <code>Cloneable</code> interface to avoid <code>CloneNotSupportedException</code>.</li> <li>For deep cloning, manually clone mutable fields.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-object-class/#6-key-takeaways-best-practices","title":"\ud83d\ude80 6. Key Takeaways &amp; Best Practices","text":"<ul> <li><code>equals()</code> and <code>hashCode()</code> should be consistent with each other.</li> <li>Always override <code>toString()</code> for better readability.</li> <li>Use deep cloning for complex objects.</li> <li>Implement <code>Cloneable</code> interface when using <code>clone()</code>.</li> <li>Use <code>Objects.equals()</code> and <code>Objects.hash()</code> for null-safe operations.</li> </ul> <p>\u2705 These notes cover essential details and best practices for the <code>Object</code> class in Java, crucial for interviews and real-world applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/","title":"3 string","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/#string-stringbuilder-in-java","title":"\ud83d\udcca String &amp; StringBuilder in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/#1-string-in-java","title":"\ud83d\ude80 1. String in Java","text":"<ul> <li>String is a sequence of characters represented as an object of the <code>String</code> class.</li> <li>Immutable: Once a <code>String</code> object is created, its value cannot be changed.</li> <li>Stored in the String Pool: Improves memory efficiency by storing identical string literals only once.</li> <li>Syntax:</li> </ul> <pre><code>String str1 = \"Hello\";  // String literal\nString str2 = new String(\"World\");  // String object\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/#2-immutability-in-string","title":"\ud83d\udd25 2. Immutability in String","text":"<ul> <li>Definition: When a <code>String</code> object is created, its value cannot be modified.</li> <li>Why immutable?<ul> <li>Thread-safety: Multiple threads can safely access <code>String</code> objects without synchronization.</li> <li>Security: Immutable strings are used in sensitive operations (e.g., database credentials).</li> <li>String Pooling: Prevents duplicate <code>String</code> objects, improving memory usage.</li> </ul> </li> <li>Example:</li> </ul> <pre><code>String str = \"Java\";\nstr.concat(\" Rocks\");    // Creates a new String object, doesn't modify original\nSystem.out.println(str);  // Output: Java\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/#3-string-interning","title":"\ud83d\udd25 3. String Interning","text":"<ul> <li>Definition: String interning is the process of storing only one copy of each distinct string value in the String Pool.</li> <li>When you create a string using literals, Java automatically interns them.</li> <li>Use <code>String.intern()</code> to manually intern a string.</li> <li>Example:</li> </ul> <pre><code>String str1 = \"Java\";   // Interned string (in the pool)\nString str2 = new String(\"Java\").intern();  // Interns the object\nSystem.out.println(str1 == str2);  // true (both refer to the same pool object)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/#4-string-manipulation-methods","title":"\ud83d\udd25 4. String Manipulation Methods","text":"<ul> <li>Length &amp; Extraction:</li> </ul> <pre><code>String str = \"Hello, Java!\";\nSystem.out.println(str.length());           // 12\nSystem.out.println(str.charAt(1));          // e\nSystem.out.println(str.substring(0, 5));    // Hello\n</code></pre> <ul> <li>Concatenation:</li> </ul> <pre><code>String s1 = \"Hello\";\nString s2 = \" World\";\nSystem.out.println(s1.concat(s2));   // Hello World\n</code></pre> <ul> <li>Comparison:</li> </ul> <pre><code>String str1 = \"Java\";\nString str2 = \"JAVA\";\nSystem.out.println(str1.equals(str2));       // false\nSystem.out.println(str1.equalsIgnoreCase(str2));  // true\n</code></pre> <ul> <li>String Replacement:</li> </ul> <pre><code>String str = \"Java is awesome\";\nSystem.out.println(str.replace(\"awesome\", \"powerful\"));\n// Output: Java is powerful\n</code></pre> <ul> <li>Trimming &amp; Formatting:</li> </ul> <pre><code>String str = \"  Hello  \";\nSystem.out.println(str.trim());             // \"Hello\" (removes leading &amp; trailing spaces)\nSystem.out.println(String.format(\"%s %d\", \"Age:\", 30));  // Age: 30\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/#5-stringbuilder-in-java","title":"\ud83d\ude80 5. StringBuilder in Java","text":"<ul> <li><code>StringBuilder</code> is a mutable sequence of characters used for efficient string manipulation.</li> <li>Faster performance compared to <code>String</code> for frequent modifications (append, insert).</li> <li>Not thread-safe, but faster than <code>StringBuffer</code>.</li> <li>Syntax:</li> </ul> <pre><code>StringBuilder sb = new StringBuilder(\"Hello\");\nsb.append(\" World\");\nSystem.out.println(sb);  // Hello World\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/#6-key-differences-string-vs-stringbuilder","title":"\ud83d\udd25 6. Key Differences: <code>String</code> vs <code>StringBuilder</code>","text":"\ud83d\udd25 Feature \ud83d\udd25 <code>String</code> \u26a1 <code>StringBuilder</code> Mutability Immutable Mutable Performance Slower for frequent operations Faster for modifications Thread Safety Thread-safe Not thread-safe Memory Usage More memory usage Efficient memory usage Storage Stored in the String Pool Stored in heap"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/#7-when-to-use-what","title":"\ud83d\ude80 7. When to Use What?","text":"<ul> <li>\u2705 Use <code>String</code> when:<ul> <li>You need immutable data (e.g., constants).</li> <li>Data is accessed by multiple threads.</li> </ul> </li> <li>\u26a1 Use <code>StringBuilder</code> when:<ul> <li>Frequent modifications are required.</li> <li>Performance is critical.</li> <li>Only a single thread accesses the object.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-string/#key-takeaways","title":"\u2705 Key Takeaways","text":"<ul> <li>String is immutable \u2192 Better for thread-safety and security.</li> <li>StringBuilder is mutable \u2192 Ideal for performance-intensive operations.</li> <li>Use interning for efficient memory usage.</li> <li>Choose <code>StringBuilder</code> over <code>String</code> for repeated operations to avoid unnecessary object creation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/","title":"3 wrapper classes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#wrapper-classes-in-java","title":"\ud83d\udd25 Wrapper Classes in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#1-what-are-wrapper-classes","title":"\ud83d\ude80 1. What are Wrapper Classes?","text":"<ul> <li>Wrapper Classes provide a way to use primitive data types (<code>int</code>, <code>double</code>, etc.) as objects.</li> <li>Each primitive type in Java has a corresponding wrapper class in the <code>java.lang</code> package.</li> <li>Why use Wrapper Classes?<ul> <li>Collections (e.g., <code>ArrayList</code>, <code>HashMap</code>) store objects, not primitives.</li> <li>Enable null values representation.</li> <li>Provide utility methods for parsing, comparison, and conversion.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#2-primitive-types-vs-wrapper-classes","title":"\ud83d\udd25 2. Primitive Types vs Wrapper Classes","text":"\u2705 Primitive Type \ud83d\udd25 Wrapper Class \u2705 Example <code>byte</code> <code>Byte</code> <code>Byte b = 10;</code> <code>short</code> <code>Short</code> <code>Short s = 100;</code> <code>int</code> <code>Integer</code> <code>Integer i = 1000;</code> <code>long</code> <code>Long</code> <code>Long l = 10000L;</code> <code>float</code> <code>Float</code> <code>Float f = 10.5f;</code> <code>double</code> <code>Double</code> <code>Double d = 20.5;</code> <code>char</code> <code>Character</code> <code>Character c = 'A';</code> <code>boolean</code> <code>Boolean</code> <code>Boolean flag = true;</code>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#3-autoboxing-and-unboxing","title":"\ud83d\udd25 3. Autoboxing and Unboxing","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#autoboxing","title":"\ud83d\udd11 Autoboxing:","text":"<ul> <li>Automatic conversion of primitive types into their corresponding wrapper classes.</li> <li>Introduced in Java 5.</li> <li>Improves readability and reduces boilerplate code.</li> </ul> <p>\u2705 Example:</p> <pre><code>int a = 10;\nInteger obj = a;    // Autoboxing (int \u2192 Integer)\nSystem.out.println(obj);  // Output: 10\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#unboxing","title":"\ud83d\udd11 Unboxing:","text":"<ul> <li>Automatic conversion of wrapper classes into their corresponding primitive types.</li> <li>Makes it easier to work with Collections and APIs that expect objects.</li> </ul> <p>\u2705 Example:</p> <pre><code>Integer obj = 100;\nint num = obj;       // Unboxing (Integer \u2192 int)\nSystem.out.println(num);  // Output: 100\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#4-benefits-of-autoboxing-unboxing","title":"\ud83d\ude80 4. Benefits of Autoboxing &amp; Unboxing","text":"<ul> <li>Code simplicity: Eliminates the need for manual conversion.</li> <li>Cleaner syntax: Reduces explicit calls to <code>.valueOf()</code> and <code>.intValue()</code>.</li> <li>Enhanced compatibility with Collections API.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#5-pitfalls-of-autoboxing-unboxing","title":"\u26a0\ufe0f 5. Pitfalls of Autoboxing &amp; Unboxing","text":"<ul> <li>Performance overhead:<ul> <li>Autoboxing creates a new object, which increases memory usage.</li> </ul> </li> <li>NullPointerException (NPE):<ul> <li>When unboxing <code>null</code> into a primitive type.</li> </ul> </li> </ul> <p>\u2705 Example of NPE:</p> <pre><code>Integer obj = null;\nint num = obj;   // Throws NullPointerException\n</code></pre> <ul> <li>Equality issues:<ul> <li>Comparison between wrapped and primitive types can lead to unexpected results.</li> </ul> </li> </ul> <p>\u2705 Example:</p> <pre><code>Integer a = 127;\nInteger b = 127;\nSystem.out.println(a == b);    // true (values from cache)\n\nInteger x = 128;\nInteger y = 128;\nSystem.out.println(x == y);    // false (different objects)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#6-wrapper-class-methods","title":"\ud83d\udee0\ufe0f 6. Wrapper Class Methods","text":"<ul> <li>Parsing Strings:</li> </ul> <pre><code>int num = Integer.parseInt(\"123\");\nDouble d = Double.parseDouble(\"3.14\");\n</code></pre> <ul> <li>Value conversion:</li> </ul> <pre><code>Integer i = Integer.valueOf(100);    // Convert int to Integer\nint n = i.intValue();                // Convert Integer to int\n</code></pre> <ul> <li>Comparisons:</li> </ul> <pre><code>Integer a = 10, b = 20;\nSystem.out.println(a.compareTo(b));    // Output: -1\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/3/3-wrapper-classes/#key-takeaways","title":"\u2705 Key Takeaways:","text":"<ul> <li>Autoboxing and Unboxing simplify working with Collections and APIs.</li> <li>Wrapper classes offer utility methods for parsing, comparison, and conversion.</li> <li>Be aware of performance pitfalls and NPEs when using wrapper classes.</li> <li>Use <code>.equals()</code> for content comparison, not <code>==</code> (which compares references).</li> </ul> <p>\ud83d\udd25 Mastering wrapper classes and understanding the nuances of autoboxing and unboxing is essential for writing efficient and bug-free Java applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/","title":"4 collection interfaces","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/#collection-interfaces-in-java","title":"\ud83d\udee0\ufe0f Collection Interfaces in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/#1-introduction-to-collection-framework","title":"\ud83d\ude80 1. Introduction to Collection Framework","text":"<ul> <li>Java Collection Framework provides a set of interfaces and classes to store, manipulate, and retrieve data efficiently.</li> <li>Interfaces define the abstract data structures, while classes provide concrete implementations.</li> <li>Collections are part of the <code>java.util</code> package.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/#2-key-collection-interfaces","title":"\ud83d\udd25 2. Key Collection Interfaces","text":"\ud83d\udd25 Interface \u2705 Definition \u26a1 Key Implementations <code>List&lt;E&gt;</code> Ordered collection, allows duplicates <code>ArrayList</code>, <code>LinkedList</code>, <code>Vector</code>, <code>Stack</code> <code>Set&lt;E&gt;</code> Unordered collection, no duplicates allowed <code>HashSet</code>, <code>LinkedHashSet</code>, <code>TreeSet</code> <code>Map&lt;K, V&gt;</code> Key-Value pairs, unique keys <code>HashMap</code>, <code>LinkedHashMap</code>, <code>TreeMap</code>, <code>ConcurrentHashMap</code> <code>Queue&lt;E&gt;</code> FIFO (First In, First Out) structure <code>LinkedList</code>, <code>PriorityQueue</code>, <code>ArrayDeque</code> <code>Deque&lt;E&gt;</code> Double-ended queue (FIFO + LIFO) <code>ArrayDeque</code>, <code>LinkedList</code>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/#3-list-interface","title":"\ud83d\udd25 3. List Interface","text":"<ul> <li>Ordered collection allowing duplicates.</li> <li>Elements can be accessed by index.</li> <li>Allows null values.</li> </ul> <p>\u2705 Key Methods:</p> <pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"A\");           // Add element\nlist.get(0);              // Get element at index\nlist.remove(\"A\");         // Remove element\nlist.set(0, \"B\");         // Replace element at index\nlist.size();               // Get list size\n</code></pre> <p>\u2705 Common Implementations: - <code>ArrayList</code>: Dynamic array, fast random access, slower insertion/deletion. - <code>LinkedList</code>: Doubly linked list, faster insertion/deletion, slower random access. - <code>Vector</code>: Synchronized, slower than <code>ArrayList</code>. - <code>Stack</code>: LIFO (Last In, First Out) structure.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/#4-set-interface","title":"\ud83d\udd25 4. Set Interface","text":"<ul> <li>Unordered collection with unique elements.</li> <li>No duplicates allowed.</li> </ul> <p>\u2705 Key Methods:</p> <pre><code>Set&lt;String&gt; set = new HashSet&lt;&gt;();\nset.add(\"A\");           // Add element\nset.remove(\"A\");        // Remove element\nset.contains(\"A\");      // Check existence\nset.size();               // Get size\n</code></pre> <p>\u2705 Common Implementations: - <code>HashSet</code>: Unordered, fast operations, backed by a HashMap. - <code>LinkedHashSet</code>: Ordered by insertion, maintains insertion order. - <code>TreeSet</code>: Sorted collection, backed by a Red-Black tree.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/#5-map-interface","title":"\ud83d\udd25 5. Map Interface","text":"<ul> <li>Key-Value pairs collection.</li> <li>Unique keys, multiple values can map to the same key.</li> <li>No direct inheritance from <code>Collection</code> interface.</li> </ul> <p>\u2705 Key Methods:</p> <pre><code>Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\nmap.put(\"A\", 1);          // Add key-value pair\nmap.get(\"A\");             // Get value by key\nmap.remove(\"A\");          // Remove key-value pair\nmap.containsKey(\"A\");     // Check for key\nmap.size();                // Get size\n</code></pre> <p>\u2705 Common Implementations: - <code>HashMap</code>: Unordered, allows null keys and values. - <code>LinkedHashMap</code>: Ordered by insertion, maintains order. - <code>TreeMap</code>: Sorted by keys, uses Red-Black tree. - <code>ConcurrentHashMap</code>: Thread-safe, allows concurrent access.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/#6-queue-interface","title":"\ud83d\udd25 6. Queue Interface","text":"<ul> <li>FIFO (First In, First Out) data structure.</li> <li>Allows null values (except <code>PriorityQueue</code>).</li> </ul> <p>\u2705 Key Methods:</p> <pre><code>Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();\nqueue.add(\"A\");            // Add element\nqueue.poll();               // Remove head\nqueue.peek();               // Get head without removing\nqueue.size();                // Get size\n</code></pre> <p>\u2705 Common Implementations: - <code>LinkedList</code>: Implements both Queue and Deque. - <code>PriorityQueue</code>: Elements are ordered based on natural ordering or custom comparator. - <code>ArrayDeque</code>: Resizable array implementation.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/#7-differences-between-list-set-map-and-queue","title":"\ud83c\udf1f 7. Differences Between List, Set, Map, and Queue","text":"\u2699\ufe0f Feature \ud83d\udcda List \ud83d\udd25 Set \ud83d\ude80 Map \ud83d\udd01 Queue Order Maintains insertion order No guaranteed order No guaranteed order FIFO order Duplicates Allows duplicates No duplicates Keys must be unique Allows duplicates Null values Allows null One null value allowed One null key, multiple null values One null value (except <code>PriorityQueue</code>) Key-Value pairs No No Yes No Best Use Case Random access, ordered list Unique elements Key-Value pairs FIFO operations"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collection-interfaces/#key-takeaways","title":"\u2705 Key Takeaways:","text":"<ul> <li>List: Ordered collection, allows duplicates.</li> <li>Set: Unordered, unique elements.</li> <li>Map: Key-value pairs, unique keys.</li> <li>Queue: FIFO structure, ideal for scheduling.</li> </ul> <p>\ud83d\ude80 Mastering Collection Interfaces is essential for handling data efficiently and is frequently tested in Java interviews!</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/","title":"4 collections utility","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/#collections-utility-class-in-java","title":"\ud83d\udee0\ufe0f Collections Utility Class in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/#1-overview","title":"\ud83d\ude80 1. Overview","text":"<ul> <li>The <code>Collections</code> class is part of <code>java.util</code> package.</li> <li>It provides static utility methods for performing operations on collections, such as:<ul> <li>Sorting</li> <li>Searching</li> <li>Synchronizing</li> <li>Thread-safe operations</li> </ul> </li> <li>Enhances the functionality of the Collection framework with efficient and convenient methods.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/#2-key-methods-with-examples","title":"\ud83d\udd25 2. Key Methods with Examples","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/#1-sorting-collections-collectionssort","title":"\u2705 1. Sorting Collections \u2013 <code>Collections.sort()</code>","text":"<ul> <li>Used to sort elements of <code>List</code>, <code>ArrayList</code>, <code>LinkedList</code> in ascending or custom order.</li> <li>Uses Timsort (a hybrid of merge sort and insertion sort).</li> </ul> <pre><code>import java.util.*;\n\npublic class SortExample {\n    public static void main(String[] args) {\n        List&lt;String&gt; names = Arrays.asList(\"John\", \"Alice\", \"Bob\");\n        Collections.sort(names);   // Ascending order\n        System.out.println(names); // Output: [Alice, Bob, John]\n    }\n}\n</code></pre> <p>\u2705 Custom Sorting with Comparator:</p> <pre><code>Collections.sort(list, (a, b) -&gt; b.compareTo(a));  // Descending order\n</code></pre> <p>\u2705 Sorting Primitive Arrays:</p> <pre><code>int[] nums = {3, 1, 4, 1, 5};\nArrays.sort(nums);  // Output: [1, 1, 3, 4, 5]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/#2-binary-search-collectionsbinarysearch","title":"\ud83d\udd25 2. Binary Search \u2013 <code>Collections.binarySearch()</code>","text":"<ul> <li>Performs binary search on a sorted <code>List</code>.</li> <li>Returns the index of the search key if it is found, otherwise returns <code>-1</code>.</li> </ul> <p>\u2705 Example:</p> <pre><code>import java.util.*;\n\npublic class BinarySearchExample {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; numbers = Arrays.asList(1, 3, 5, 7, 9);\n        Collections.sort(numbers);   // Ensure the list is sorted\n        int index = Collections.binarySearch(numbers, 5);\n        System.out.println(\"Index of 5: \" + index);  // Output: Index of 5: 2\n    }\n}\n</code></pre> <p>\u2705 Binary Search on Custom Objects:</p> <pre><code>Collections.binarySearch(list, target, Comparator.comparing(MyClass::getField));\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/#3-synchronized-collection-collectionssynchronizedlist","title":"\ud83d\udd25 3. Synchronized Collection \u2013 <code>Collections.synchronizedList()</code>","text":"<ul> <li>Creates thread-safe versions of non-thread-safe collections.</li> <li>Helps prevent <code>ConcurrentModificationException</code> in multi-threaded environments.</li> </ul> <p>\u2705 Example:</p> <pre><code>import java.util.*;\n\npublic class SyncListExample {\n    public static void main(String[] args) {\n        List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());\n        list.add(\"Apple\");\n        list.add(\"Banana\");\n        System.out.println(list);\n    }\n}\n</code></pre> <p>\u2705 Usage with Iterators (to avoid race conditions):</p> <pre><code>synchronized(list) {\n    Iterator&lt;String&gt; it = list.iterator();\n    while (it.hasNext()) {\n        System.out.println(it.next());\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/#3-additional-utility-methods-in-collections-class","title":"\u26a1 3. Additional Utility Methods in <code>Collections</code> Class","text":"\ud83d\udd25 Method \u2705 Description \ud83d\udd0d Usage <code>reverse(List)</code> Reverses the order of elements in a list. <code>Collections.reverse(list)</code> <code>shuffle(List)</code> Randomly shuffles the list elements. <code>Collections.shuffle(list)</code> <code>max(Collection)</code> Returns the maximum element. <code>Collections.max(list)</code> <code>min(Collection)</code> Returns the minimum element. <code>Collections.min(list)</code> <code>fill(List, obj)</code> Replaces all elements with the specified obj. <code>Collections.fill(list, \"X\")</code> <code>nCopies(int, obj)</code> Creates immutable list with N copies. <code>Collections.nCopies(5, \"Hi\")</code> <code>disjoint(Collection, C2)</code> Returns <code>true</code> if collections have no elements in common. <code>Collections.disjoint(list1, list2)</code>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/#4-best-practices-and-tips","title":"\ud83d\ude80 4. Best Practices and Tips","text":"<ul> <li>\u2705 Use <code>Collections.unmodifiableList()</code> for read-only collections.</li> <li>\u2705 Leverage <code>synchronizedList()</code> in multi-threaded environments to prevent race conditions.</li> <li>\u2705 Prefer <code>List.copyOf()</code> (Java 10+) over <code>Collections.unmodifiableList()</code> for better performance.</li> <li>\u2705 Use <code>binarySearch()</code> only on sorted collections for accurate results.</li> <li>\u2705 Choose parallel sorting (<code>Arrays.parallelSort()</code>) for better performance on large data sets.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-collections-utility/#key-takeaways","title":"\u2705 Key Takeaways:","text":"<ul> <li><code>Collections.sort()</code> \u2192 Sorts list in ascending order by default.</li> <li><code>Collections.binarySearch()</code> \u2192 Performs efficient binary search on sorted collections.</li> <li><code>Collections.synchronizedList()</code> \u2192 Creates a thread-safe list wrapper.</li> <li>Use utility methods for efficient operations on collections with minimal code.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/","title":"4 comparison sorting","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#comparison-sorting-in-java","title":"\ud83d\ude80 Comparison &amp; Sorting in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#1-what-is-comparison-sorting","title":"\u2705 1. What is Comparison &amp; Sorting?","text":"<ul> <li>Comparison: The process of evaluating two objects based on a defined ordering logic.</li> <li>Sorting: The process of arranging elements in a specific order (ascending/descending).</li> <li>Java provides two main interfaces for comparison:<ul> <li><code>Comparable</code> \u2192 Natural ordering.</li> <li><code>Comparator</code> \u2192 Custom ordering.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#2-comparable-vs-comparator-key-differences","title":"\ud83d\udd25 2. Comparable vs Comparator \u2013 Key Differences","text":"\ud83d\udd25 Feature \u2705 Comparable \ud83d\ude80 Comparator Package <code>java.lang</code> <code>java.util</code> Purpose Defines the natural ordering Defines custom ordering Method <code>compareTo(Object o)</code> <code>compare(Object o1, Object o2)</code> Syntax <code>class Student implements Comparable&lt;Student&gt;</code> <code>class AgeComparator implements Comparator&lt;Student&gt;</code> Modification Modifies the class itself Used outside the class Multiple Sorting \u274c Not supported \u2705 Multiple sorting logics supported Used in <code>Collections.sort(list)</code> <code>Collections.sort(list, comparator)</code>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#3-comparable-interface-natural-ordering","title":"\ud83d\ude80 3. Comparable Interface \u2013 Natural Ordering","text":"<ul> <li>Definition: Provides one sorting logic.</li> <li>Method: <code>int compareTo(T o)</code> \u2192 Compares <code>this</code> object with the specified object.</li> <li>Returns:<ul> <li><code>0</code> \u2192 if both objects are equal.</li> <li><code>&lt; 0</code> \u2192 if <code>this</code> object is less than the specified object.</li> <li><code>&gt; 0</code> \u2192 if <code>this</code> object is greater than the specified object.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#example-with-comparable","title":"\u2705 Example with <code>Comparable</code>:","text":"<pre><code>import java.util.*;\n\nclass Student implements Comparable&lt;Student&gt; {\n    int id;\n    String name;\n\n    public Student(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public int compareTo(Student s) {\n        return this.name.compareTo(s.name);  // Natural ordering by name\n    }\n\n    public String toString() {\n        return id + \" - \" + name;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;Student&gt; students = new ArrayList&lt;&gt;();\n        students.add(new Student(1, \"Alice\"));\n        students.add(new Student(2, \"Bob\"));\n        students.add(new Student(3, \"Charlie\"));\n\n        Collections.sort(students);  // Sorting using Comparable\n        System.out.println(students);\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#4-comparator-interface-custom-ordering","title":"\ud83d\udd25 4. Comparator Interface \u2013 Custom Ordering","text":"<ul> <li>Definition: Provides multiple sorting logics.</li> <li>Method: <code>int compare(T o1, T o2)</code> \u2192 Compares two different objects.</li> <li>Returns:<ul> <li><code>0</code> \u2192 if both objects are equal.</li> <li><code>&lt; 0</code> \u2192 if <code>o1</code> is less than <code>o2</code>.</li> <li><code>&gt; 0</code> \u2192 if <code>o1</code> is greater than <code>o2</code>.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#example-with-comparator","title":"\u2705 Example with <code>Comparator</code>:","text":"<pre><code>import java.util.*;\n\nclass Student {\n    int id;\n    String name;\n\n    public Student(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    public String toString() {\n        return id + \" - \" + name;\n    }\n}\n\nclass NameComparator implements Comparator&lt;Student&gt; {\n    public int compare(Student s1, Student s2) {\n        return s1.name.compareTo(s2.name);  // Custom ordering by name\n    }\n}\n\nclass IdComparator implements Comparator&lt;Student&gt; {\n    public int compare(Student s1, Student s2) {\n        return Integer.compare(s1.id, s2.id);  // Custom ordering by ID\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;Student&gt; students = new ArrayList&lt;&gt;();\n        students.add(new Student(3, \"Charlie\"));\n        students.add(new Student(1, \"Alice\"));\n        students.add(new Student(2, \"Bob\"));\n\n        Collections.sort(students, new NameComparator());  // Sorting by Name\n        System.out.println(\"By Name: \" + students);\n\n        Collections.sort(students, new IdComparator());    // Sorting by ID\n        System.out.println(\"By ID: \" + students);\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#5-when-to-use-comparable-vs-comparator","title":"\ud83d\ude80 5. When to Use <code>Comparable</code> vs <code>Comparator</code>?","text":"<p>\u2705 Use <code>Comparable</code>: - When natural ordering is required (e.g., sorting by <code>name</code>, <code>id</code>). - For default sorting logic within the class itself. - Suitable for single sorting criteria.</p> <p>\ud83d\ude80 Use <code>Comparator</code>: - When custom ordering is required. - For multiple sorting logics (e.g., sorting by <code>age</code>, <code>salary</code>, etc.). - Ideal for external sorting and when the class doesn\u2019t implement <code>Comparable</code>.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#6-best-practices-for-comparison-sorting","title":"\ud83d\udd25 6. Best Practices for Comparison &amp; Sorting","text":"<ul> <li>Use <code>Comparator.comparing()</code> \u2192 When using Java 8+ for simpler syntax.</li> <li>Use lambda expressions \u2192 To reduce boilerplate code.</li> <li>Use <code>Collections.sort()</code> or <code>List.sort()</code> \u2192 When dealing with lists.</li> <li>Use <code>TreeSet</code> or <code>TreeMap</code> \u2192 For automatic sorting by natural/comparator order.</li> <li>Handle <code>null</code> values carefully \u2192 To avoid <code>NullPointerException</code> during sorting.</li> <li>Override <code>equals()</code> and <code>hashCode()</code> \u2192 When comparing custom objects.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-comparison-sorting/#7-key-takeaways","title":"\u2705 7. Key Takeaways","text":"<ul> <li><code>Comparable</code> \u2192 For natural ordering within the class (single sorting logic).</li> <li><code>Comparator</code> \u2192 For custom ordering outside the class (multiple sorting logics).</li> <li>Use Java 8+ features for cleaner and efficient sorting.</li> <li>Apply sorting on collections using <code>Collections.sort()</code> or <code>List.sort()</code>.</li> </ul> <p>\ud83d\ude80 Mastering comparison and sorting is essential for writing efficient and maintainable Java applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-list-implementations/","title":"4 list implementations","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-list-implementations/#list-implementations-in-java","title":"\ud83d\ude80 List Implementations in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-list-implementations/#1-what-is-the-list-interface","title":"\ud83d\udd25 1. What is the List Interface?","text":"<ul> <li><code>List</code> is a part of the Java Collections Framework (extends <code>Collection</code> interface).</li> <li>Ordered collection of objects (maintains insertion order).</li> <li>Allows duplicate elements.</li> <li>Provides indexed access to elements.</li> <li>Implementations: <code>ArrayList</code>, <code>LinkedList</code>, <code>Vector</code>, and <code>Stack</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-list-implementations/#2-key-list-implementations-comparison","title":"\ud83d\udd25 2. Key List Implementations Comparison","text":"\ud83d\udd25 Implementation \u26a1 Performance \ud83d\udd04 Data Structure \ud83d\udd25 Best Use Case <code>ArrayList</code> \u2705 Fast random access (O(1)) Dynamic array Frequent retrieval operations <code>LinkedList</code> \u274c Slow random access (O(n)) Doubly linked list Frequent insertion/deletion <code>Vector</code> \u2705 Thread-safe, slower than ArrayList Resizable array Legacy code, thread-safe operations <code>Stack</code> \u274c LIFO operations only Extends Vector Stack-specific operations (LIFO)"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-list-implementations/#3-arraylist","title":"\ud83d\udd25 3. <code>ArrayList</code>","text":"<ul> <li>Dynamic array implementation.</li> <li>Provides fast random access (O(1) for get operations).</li> <li>Not synchronized (not thread-safe).</li> <li>Resizable: Automatically grows when capacity is exceeded.</li> <li>Default capacity: 10 (doubles when exceeded).</li> </ul> <pre><code>import java.util.ArrayList;\n\nArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Java\");\nlist.add(\"Python\");\nSystem.out.println(list.get(0));  // Output: Java\n</code></pre> <p>\u2705 Best for: Frequent access operations.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-list-implementations/#4-linkedlist","title":"\ud83d\udd25 4. <code>LinkedList</code>","text":"<ul> <li>Doubly linked list implementation.</li> <li>Efficient for insertions/deletions (O(1)).</li> <li>Slower random access (O(n)).</li> <li>Implements Queue and Deque interfaces.</li> </ul> <pre><code>import java.util.LinkedList;\n\nLinkedList&lt;String&gt; list = new LinkedList&lt;&gt;();\nlist.add(\"Apple\");\nlist.addFirst(\"Orange\");\nSystem.out.println(list);  // Output: [Orange, Apple]\n</code></pre> <p>\u2705 Best for: Frequent insert/delete operations.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-list-implementations/#5-vector","title":"\ud83d\udd25 5. <code>Vector</code>","text":"<ul> <li>Legacy class (since Java 1.0).</li> <li>Synchronized (thread-safe but less efficient).</li> <li>Resizable array (doubles in size when full).</li> <li>Slower than <code>ArrayList</code> due to synchronization overhead.</li> </ul> <pre><code>import java.util.Vector;\n\nVector&lt;String&gt; vector = new Vector&lt;&gt;();\nvector.add(\"Java\");\nvector.add(\"C++\");\nSystem.out.println(vector);  // Output: [Java, C++]\n</code></pre> <p>\u2705 Best for: Legacy systems requiring thread-safe operations.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-list-implementations/#6-stack","title":"\ud83d\udd25 6. <code>Stack</code>","text":"<ul> <li>LIFO (Last-In-First-Out) data structure.</li> <li>Extends <code>Vector</code> (inherits synchronization).</li> <li>Push, pop, peek operations.</li> <li>Slower than <code>Deque</code> for stack operations.</li> </ul> <pre><code>import java.util.Stack;\n\nStack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nstack.push(10);\nstack.push(20);\nSystem.out.println(stack.pop());  // Output: 20\n</code></pre> <p>\u2705 Best for: LIFO-specific operations.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-list-implementations/#7-key-differences-and-use-cases","title":"\ud83d\udd25 7. Key Differences and Use Cases","text":"<ul> <li><code>ArrayList</code> \u279d Best for random access, frequent retrieval.</li> <li><code>LinkedList</code> \u279d Best for frequent insert/delete operations.</li> <li><code>Vector</code> \u279d Legacy, thread-safe but less efficient.</li> <li><code>Stack</code> \u279d Best for LIFO-based operations.</li> </ul> <p>\u2705 Tip: Prefer <code>ArrayList</code> over <code>Vector</code> for non-thread-safe operations due to better performance. \u2705 Tip: Use <code>Deque</code> over <code>Stack</code> for stack operations due to better performance in modern Java.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/","title":"4 map implementations","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/#map-implementations-in-java","title":"\ud83d\udd25 Map Implementations in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/#1-what-is-a-map-in-java","title":"\ud83d\ude80 1. What is a Map in Java?","text":"<ul> <li>A Map is part of the Java Collections Framework and stores key-value pairs.</li> <li>Each key is unique, and it maps to one value.</li> <li>Allows efficient retrieval, insertion, and deletion operations.</li> <li>Key characteristics:<ul> <li>No duplicate keys allowed.</li> <li>Multiple null values are allowed, but only one null key is allowed (except for <code>ConcurrentHashMap</code>).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/#2-map-implementations-overview","title":"\ud83d\udd25 2. Map Implementations Overview","text":"\ud83d\udd25 Implementation \u2705 Ordering \u26a1 Synchronization \ud83d\ude80 Performance \ud83d\udd12 Null Handling <code>HashMap</code> No ordering Not synchronized O(1) for get/put operations 1 null key, multiple null values <code>LinkedHashMap</code> Insertion-order Not synchronized Slightly slower than <code>HashMap</code> 1 null key, multiple null values <code>TreeMap</code> Natural-order (sorted keys) Not synchronized O(log n) time complexity No null keys, multiple null values <code>ConcurrentHashMap</code> No ordering Thread-safe Slightly slower than <code>HashMap</code> No null keys or null values"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/#3-hashmap","title":"\ud83d\udd25 3. HashMap","text":"<ul> <li>Unordered collection of key-value pairs.</li> <li>Uses hashing to store keys for fast retrieval.</li> <li>Key Features:<ul> <li>Allows one null key and multiple null values.</li> <li>Not synchronized \u2013 not thread-safe.</li> </ul> </li> <li>Complexity:<ul> <li>O(1) for <code>get()</code>, <code>put()</code>, and <code>remove()</code> in average case.</li> <li>O(n) in worst-case (when multiple keys hash to the same bucket).</li> </ul> </li> <li>Usage:</li> </ul> <pre><code>Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\nmap.put(\"Java\", 1);\nmap.put(\"Python\", 2);\nSystem.out.println(map);  // Output: {Java=1, Python=2}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/#4-linkedhashmap","title":"\ud83d\udd25 4. LinkedHashMap","text":"<ul> <li>Ordered version of <code>HashMap</code>.</li> <li>Maintains a doubly-linked list of entries in insertion order.</li> <li>Key Features:<ul> <li>Preserves insertion order.</li> <li>Slightly slower than <code>HashMap</code> due to order maintenance.</li> <li>Allows one null key and multiple null values.</li> </ul> </li> <li>Complexity:<ul> <li>O(1) for basic operations.</li> </ul> </li> <li>Usage:</li> </ul> <pre><code>Map&lt;String, Integer&gt; map = new LinkedHashMap&lt;&gt;();\nmap.put(\"Java\", 1);\nmap.put(\"Python\", 2);\nSystem.out.println(map);  // Output: {Java=1, Python=2}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/#5-treemap","title":"\ud83d\udd25 5. TreeMap","text":"<ul> <li>Sorted map based on natural ordering or a custom comparator.</li> <li>Internally implemented using a Red-Black Tree.</li> <li>Key Features:<ul> <li>No null keys allowed.</li> <li>Multiple null values allowed.</li> <li>Not synchronized \u2013 not thread-safe.</li> </ul> </li> <li>Complexity:<ul> <li>O(log n) for basic operations.</li> </ul> </li> <li>Usage:</li> </ul> <pre><code>Map&lt;Integer, String&gt; map = new TreeMap&lt;&gt;();\nmap.put(3, \"C\");\nmap.put(1, \"A\");\nmap.put(2, \"B\");\nSystem.out.println(map);  // Output: {1=A, 2=B, 3=C}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/#6-concurrenthashmap","title":"\ud83d\udd25 6. ConcurrentHashMap","text":"<ul> <li>Thread-safe map implementation for concurrent access.</li> <li>Achieves high performance using segment-level locking.</li> <li>Key Features:<ul> <li>No null keys or null values allowed.</li> <li>Thread-safe and highly performant.</li> <li>Suitable for multi-threaded environments.</li> </ul> </li> <li>Complexity:<ul> <li>O(1) for basic operations.</li> </ul> </li> <li>Usage:</li> </ul> <pre><code>Map&lt;String, Integer&gt; map = new ConcurrentHashMap&lt;&gt;();\nmap.put(\"Java\", 1);\nmap.put(\"Python\", 2);\nSystem.out.println(map);  // Output: {Java=1, Python=2}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/#7-key-differences-when-to-use","title":"\ud83d\ude80 7. Key Differences &amp; When to Use","text":"\ud83d\udd25 Implementation \u2705 When to Use <code>HashMap</code> For general-purpose key-value storage when thread-safety is not needed. <code>LinkedHashMap</code> When you need to maintain insertion order. <code>TreeMap</code> When you need sorted keys. <code>ConcurrentHashMap</code> In multi-threaded applications for safety."},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-map-implementations/#key-takeaways","title":"\u2705 Key Takeaways:","text":"<ul> <li><code>HashMap</code> is the most commonly used for basic mapping needs.</li> <li><code>LinkedHashMap</code> is ideal when ordering matters.</li> <li><code>TreeMap</code> is used for sorted maps but is slower.</li> <li><code>ConcurrentHashMap</code> is the best choice for concurrency.</li> <li>Choose the appropriate implementation based on your performance and thread-safety needs.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/","title":"4 queue deque","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/#queue-deque-in-java","title":"\ud83d\udd25 Queue &amp; Deque in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/#1-what-are-queue-deque","title":"\ud83d\ude80 1. What are Queue &amp; Deque?","text":"<ul> <li>Queue \u2192 Follows FIFO (First-In-First-Out) principle.</li> <li>Deque (Double-ended Queue) \u2192 Allows insertion and removal from both ends.</li> <li>Both are part of Java Collections Framework.</li> <li>Used in buffering, scheduling, caching, and task management scenarios.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/#2-queue-interface","title":"\ud83d\udd25 2. Queue Interface","text":"<ul> <li>Part of: <code>java.util</code> package.</li> <li>Implements: <code>Collection</code> interface.</li> <li>Key Operations:<ul> <li><code>add(E e)</code> \u2192 Inserts the element, throws exception if full.</li> <li><code>offer(E e)</code> \u2192 Inserts the element, returns <code>false</code> if full.</li> <li><code>remove()</code> \u2192 Removes head element, throws exception if empty.</li> <li><code>poll()</code> \u2192 Removes head element, returns <code>null</code> if empty.</li> <li><code>element()</code> \u2192 Retrieves head without removal, throws exception if empty.</li> <li><code>peek()</code> \u2192 Retrieves head without removal, returns <code>null</code> if empty.</li> </ul> </li> </ul> <p>\u2705 Queue Example:</p> <pre><code>import java.util.*;\n\nQueue&lt;String&gt; queue = new LinkedList&lt;&gt;();\nqueue.add(\"Apple\");\nqueue.add(\"Banana\");\nqueue.add(\"Cherry\");\n\nSystem.out.println(queue.poll());   // Removes and prints: Apple\nSystem.out.println(queue.peek());   // Prints: Banana (head element)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/#3-priorityqueue-queue-implementation","title":"\ud83d\ude80 3. PriorityQueue (Queue Implementation)","text":"<ul> <li>Implements: <code>Queue</code> interface.</li> <li>Ordered collection based on natural ordering or custom comparator.</li> <li>Not thread-safe (use <code>PriorityBlockingQueue</code> for concurrency).</li> <li>Time complexity:<ul> <li>Insertion \u2192 <code>O(log n)</code></li> <li>Removal \u2192 <code>O(log n)</code></li> </ul> </li> </ul> <p>\u2705 PriorityQueue Example:</p> <pre><code>import java.util.*;\n\nPriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;();\n\npq.add(30);\npq.add(10);\npq.add(20);\n\nSystem.out.println(pq.poll());   // Removes and prints: 10 (smallest element)\n</code></pre> <p>\ud83d\udd39 Custom Comparator Example:</p> <pre><code>PriorityQueue&lt;String&gt; pq = new PriorityQueue&lt;&gt;(Comparator.reverseOrder());\npq.add(\"Apple\");\npq.add(\"Banana\");\npq.add(\"Cherry\");\n\nSystem.out.println(pq.poll());   // Removes and prints: Cherry (largest element)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/#4-deque-interface","title":"\ud83d\ude80 4. Deque Interface","text":"<ul> <li>Part of: <code>java.util</code> package.</li> <li>Implements: <code>Queue</code> interface.</li> <li>Allows insertion/removal from both ends.</li> <li>Key Methods:<ul> <li><code>addFirst(E e)</code> / <code>offerFirst(E e)</code> \u2192 Inserts at the front.</li> <li><code>addLast(E e)</code> / <code>offerLast(E e)</code> \u2192 Inserts at the rear.</li> <li><code>removeFirst()</code> / <code>pollFirst()</code> \u2192 Removes from the front.</li> <li><code>removeLast()</code> / <code>pollLast()</code> \u2192 Removes from the rear.</li> <li><code>getFirst()</code> / <code>peekFirst()</code> \u2192 Retrieves the front element.</li> <li><code>getLast()</code> / <code>peekLast()</code> \u2192 Retrieves the rear element.</li> </ul> </li> </ul> <p>\u2705 Deque Example:</p> <pre><code>import java.util.*;\n\nDeque&lt;String&gt; deque = new ArrayDeque&lt;&gt;();\n\ndeque.addFirst(\"Apple\");\ndeque.addLast(\"Banana\");\ndeque.addFirst(\"Cherry\");\n\nSystem.out.println(deque.pollFirst());   // Removes and prints: Cherry\nSystem.out.println(deque.pollLast());    // Removes and prints: Banana\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/#5-arraydeque-deque-implementation","title":"\ud83d\ude80 5. ArrayDeque (Deque Implementation)","text":"<ul> <li>Implements: <code>Deque</code> interface.</li> <li>Resizable array implementation of <code>Deque</code>.</li> <li>More efficient than <code>LinkedList</code> for adding/removing elements.</li> <li>Not thread-safe.</li> <li>Time complexity:<ul> <li>Insertion/Removal \u2192 <code>O(1)</code></li> </ul> </li> </ul> <p>\u2705 ArrayDeque Example:</p> <pre><code>import java.util.*;\n\nDeque&lt;Integer&gt; deque = new ArrayDeque&lt;&gt;();\n\ndeque.add(10);\ndeque.add(20);\ndeque.add(30);\n\nSystem.out.println(deque.pollFirst());   // Removes and prints: 10\nSystem.out.println(deque.pollLast());    // Removes and prints: 30\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/#6-differences-queue-vs-deque","title":"\ud83d\ude80 6. Differences: Queue vs Deque","text":"\ud83d\udd25 Feature \u2705 Queue \ud83d\udd25 Deque Data structure type FIFO (First-In-First-Out) Double-ended queue (both ends) Insertion End of the queue Both ends Removal From the front only From both ends Null values Allows null values Does not allow <code>null</code> values Performance Slower for modifications Faster insertions/removals Thread safety Not thread-safe Not thread-safe"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/#7-when-to-use","title":"\ud83d\udd25 7. When to Use?","text":"<p>\u2705 Use Queue: - Task Scheduling (e.g., printer queue, OS scheduling). - Buffer management (e.g., I/O buffering). - Breadth-first search (BFS) in graphs.</p> <p>\u2705 Use Deque: - Undo/Redo functionality (backtracking). - Deque as Stack (LIFO) or Queue (FIFO). - Sliding window problems (Deque optimizes performance).</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-queue-deque/#8-best-practices-tips","title":"\ud83d\ude80 8. Best Practices &amp; Tips","text":"<ul> <li>Use <code>ConcurrentLinkedQueue</code> for thread-safe queues.</li> <li>Prefer <code>ArrayDeque</code> over <code>LinkedList</code> due to better performance.</li> <li>Use <code>PriorityBlockingQueue</code> for concurrent environments.</li> <li>Always use <code>offer()</code> and <code>poll()</code> over <code>add()</code> and <code>remove()</code> to avoid exceptions in boundary cases.</li> </ul> <p>\u2705 Key Takeaway: - <code>Queue</code>: FIFO with basic operations. - <code>Deque</code>: Flexible structure with double-ended operations. - <code>PriorityQueue</code>: Order-sensitive queue for priority-based tasks. - <code>ArrayDeque</code>: Efficient for both stack and queue operations.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/","title":"4 set implementations","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/#set-implementations-in-java","title":"\ud83d\udd25 Set Implementations in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/#1-what-is-a-set","title":"\ud83d\ude80 1. What is a Set?","text":"<ul> <li>A Set is a collection that cannot contain duplicate elements.</li> <li>It models the mathematical set abstraction.</li> <li>No defined order (except <code>LinkedHashSet</code> and <code>TreeSet</code> which have specific ordering).</li> <li>Part of the Java Collections Framework.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/#2-key-set-implementations","title":"\ud83d\udd25 2. Key Set Implementations","text":"\ud83d\udd25 Implementation \u2699\ufe0f Ordering \u2705 Duplicates Allowed \u26a1 Performance \ud83d\udccc Use Cases <code>HashSet</code> \u274c No ordering \u274c No \u2705 Fast (O(1) for add, remove, contains) When ordering is not required <code>LinkedHashSet</code> \u2705 Insertion-order maintained \u274c No \u26a1 Slightly slower than <code>HashSet</code> When insertion order is important <code>TreeSet</code> \u2705 Sorted in natural order \u274c No \ud83d\udd25 O(log n) for operations When sorted set is required"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/#3-hashset","title":"\ud83d\udd25 3. <code>HashSet</code>","text":"<ul> <li>Unordered collection of unique elements.</li> <li>Uses a <code>HashMap</code> internally for storage.</li> <li>Offers constant-time performance for basic operations.</li> <li>Allows <code>null</code> values.</li> <li>Not synchronized \u2192 Use <code>Collections.synchronizedSet()</code> for thread safety.</li> </ul> <p>\u2705 Code Example:</p> <pre><code>import java.util.HashSet;\n\npublic class HashSetExample {\n    public static void main(String[] args) {\n        HashSet&lt;String&gt; set = new HashSet&lt;&gt;();\n        set.add(\"Apple\");\n        set.add(\"Banana\");\n        set.add(\"Apple\");  // Duplicate ignored\n        System.out.println(set);  // Output: [Apple, Banana]\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/#4-linkedhashset","title":"\ud83d\udd25 4. <code>LinkedHashSet</code>","text":"<ul> <li>Preserves insertion order.</li> <li>Uses a combination of <code>HashMap</code> and doubly linked list.</li> <li>Faster iteration compared to <code>HashSet</code> due to linked list.</li> <li>Allows <code>null</code> values.</li> </ul> <p>\u2705 Code Example:</p> <pre><code>import java.util.LinkedHashSet;\n\npublic class LinkedHashSetExample {\n    public static void main(String[] args) {\n        LinkedHashSet&lt;Integer&gt; set = new LinkedHashSet&lt;&gt;();\n        set.add(10);\n        set.add(20);\n        set.add(10);  // Duplicate ignored\n        System.out.println(set);  // Output: [10, 20]\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/#5-treeset","title":"\ud83d\udd25 5. <code>TreeSet</code>","text":"<ul> <li>Sorted set based on <code>NavigableSet</code> interface.</li> <li>Implements <code>Red-Black Tree</code> internally \u2192 maintains ascending order.</li> <li>Operations take O(log n) time.</li> <li>Does not allow <code>null</code> values.</li> </ul> <p>\u2705 Code Example:</p> <pre><code>import java.util.TreeSet;\n\npublic class TreeSetExample {\n    public static void main(String[] args) {\n        TreeSet&lt;String&gt; set = new TreeSet&lt;&gt;();\n        set.add(\"Orange\");\n        set.add(\"Apple\");\n        set.add(\"Banana\");\n        System.out.println(set);  // Output: [Apple, Banana, Orange]\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/#6-key-differences-when-to-use","title":"\ud83d\ude80 6. Key Differences &amp; When to Use","text":"\u2705 Feature \ud83d\udd25 <code>HashSet</code> \u26a1 <code>LinkedHashSet</code> \ud83d\ude80 <code>TreeSet</code> Ordering No order Insertion order Natural order (sorted) Performance Fast (O(1)) Slower than <code>HashSet</code> O(log n) Duplicates Allowed No No No Null Values \u2705 Yes \u2705 Yes \u274c No Thread Safety \u274c Not synchronized \u274c Not synchronized \u274c Not synchronized Use Case Unordered, unique collection Ordered, unique collection Sorted, unique collection"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/#7-best-practices-tips","title":"\u2705 7. Best Practices &amp; Tips","text":"<ul> <li>Use <code>HashSet</code> for fast performance and when ordering is not required.</li> <li>Use <code>LinkedHashSet</code> when you need consistent iteration order.</li> <li>Use <code>TreeSet</code> when you need a sorted collection.</li> <li>For thread-safety, wrap them with <code>Collections.synchronizedSet()</code>.</li> </ul> <p>\u2705 Thread-safe example:</p> <pre><code>import java.util.Collections;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class ThreadSafeSet {\n    public static void main(String[] args) {\n        Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());\n        set.add(\"Java\");\n        set.add(\"Python\");\n        System.out.println(set);\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/4/4-set-implementations/#key-takeaways","title":"\ud83d\ude80 Key Takeaways:","text":"<ul> <li><code>HashSet</code> \u2192 Fast, unordered, allows <code>null</code> values.</li> <li><code>LinkedHashSet</code> \u2192 Ordered by insertion, slightly slower than <code>HashSet</code>.</li> <li><code>TreeSet</code> \u2192 Sorted, O(log n) performance, no <code>null</code> values.</li> <li>Choose the appropriate Set implementation based on performance, ordering, and sorting needs.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/","title":"5 concurrency utilities","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#java-concurrency-utilities","title":"\ud83d\ude80 Java Concurrency Utilities","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#overview","title":"\ud83d\udd27 Overview","text":"<ul> <li>Java's <code>java.util.concurrent</code> package provides powerful concurrency utilities to simplify thread management and synchronization.</li> <li>Useful for building scalable, high-performance, and thread-safe applications.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#executorservice","title":"\ud83e\uddf5 ExecutorService","text":"<ul> <li>\ud83d\udca1 A high-level replacement for managing threads manually.</li> <li>Manages a pool of threads and handles task execution lifecycle.</li> <li>\ud83d\udd01 Supports scheduling, shutting down, and submitting tasks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#key-methods","title":"\u2705 Key Methods","text":"<pre><code>ExecutorService executor = Executors.newFixedThreadPool(5);\nexecutor.submit(() -&gt; doWork());\nexecutor.shutdown();\n</code></pre> <ul> <li><code>submit(Runnable/Callable)</code> \u2013 submits a task for execution.</li> <li><code>shutdown()</code> \u2013 initiates an orderly shutdown.</li> <li><code>shutdownNow()</code> \u2013 attempts to stop all actively executing tasks.</li> <li><code>invokeAll()/invokeAny()</code> \u2013 manage multiple tasks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#benefits","title":"\ud83d\udd25 Benefits","text":"<ul> <li>Avoids manual thread creation.</li> <li>Reuses thread pool \u2192 better resource utilization.</li> <li>Fine-grained control over task execution.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#future","title":"\ud83d\udd2e Future <ul> <li>Represents the result of an asynchronous computation.</li> <li>Returned when you submit a <code>Callable</code> or <code>Runnable</code> to <code>ExecutorService</code>.</li> </ul>","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#key-methods_1","title":"\u2705 Key Methods","text":"<pre><code>Future&lt;String&gt; future = executor.submit(callableTask);\nString result = future.get(); // blocks until result is available\n</code></pre> <ul> <li><code>get()</code> \u2013 waits if necessary for the computation to complete.</li> <li><code>cancel(true/false)</code> \u2013 attempts to cancel execution.</li> <li><code>isDone()</code> \u2013 checks if the task is completed.</li> <li><code>isCancelled()</code> \u2013 checks if the task was cancelled.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#callable","title":"\ud83e\udde0 Callable <ul> <li>Similar to <code>Runnable</code> but returns a result and can throw exceptions.</li> <li>Used for asynchronous task execution.</li> </ul>","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#example","title":"\u2705 Example","text":"<pre><code>Callable&lt;String&gt; task = () -&gt; \"Result\";\nFuture&lt;String&gt; future = executor.submit(task);\nString result = future.get();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#countdownlatch","title":"\ud83d\uded1 CountDownLatch <ul> <li>Allows one or more threads to wait until a set of operations complete.</li> <li>Useful for one-time events like starting a service after all preconditions are met.</li> </ul>","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#example_1","title":"\u2705 Example","text":"<pre><code>CountDownLatch latch = new CountDownLatch(3);\nRunnable worker = () -&gt; {\n    doWork();\n    latch.countDown();\n};\nlatch.await(); // main thread waits until count reaches 0\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#use-case","title":"\ud83d\udd0d Use Case","text":"<ul> <li>Starting a main task only after several threads finish their initialization.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#cyclicbarrier","title":"\ud83d\udd04 CyclicBarrier <ul> <li>Allows a set of threads to wait for each other to reach a common barrier point.</li> <li>Can be reused (unlike <code>CountDownLatch</code>).</li> </ul>","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#example_2","title":"\u2705 Example","text":"<pre><code>CyclicBarrier barrier = new CyclicBarrier(3);\nRunnable worker = () -&gt; {\n    prepare();\n    barrier.await(); // waits for other threads\n    proceed();\n};\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#use-case_1","title":"\ud83d\udd0d Use Case","text":"<ul> <li>Performing multi-phase tasks where each phase needs synchronization.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#summary-table","title":"\ud83e\udde0 Summary Table    Utility Purpose Return Value Reusable Blocks?     <code>ExecutorService</code> Manage thread pool + task lifecycle No Yes No   <code>Future&lt;T&gt;</code> Represents async computation result Yes (<code>T</code>) N/A <code>get()</code> blocks   <code>Callable&lt;T&gt;</code> Task that returns result Yes (<code>T</code>) N/A No   <code>CountDownLatch</code> Wait for other threads to complete No No Yes   <code>CyclicBarrier</code> Sync threads at a barrier point No Yes Yes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-concurrency-utilities/#pro-tips-for-experienced-engineers","title":"\ud83e\uddf0 Pro Tips for Experienced Engineers <ul> <li>Use <code>ThreadPoolExecutor</code> for fine-tuned thread pool control.</li> <li>Prefer <code>CompletableFuture</code> in modern code for better composition.</li> <li>Always handle <code>InterruptedException</code> properly \u2013 it signals cancellation.</li> <li>Avoid deadlocks by designing for timeouts and using non-blocking constructs where possible.</li> <li>Profile thread pools with tools like VisualVM or Java Mission Control.</li> </ul>   <p>\"Concurrency is not parallelism. Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.\" \u2014 Rob Pike</p>","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/","title":"5 jmm","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#java-memory-model-jmm-deep-dive-for-experienced-engineers","title":"\ud83e\udde0 Java Memory Model (JMM) - Deep Dive for Experienced Engineers","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#1-what-is-jmm","title":"\ud83d\ude80 1. What is JMM?","text":"<ul> <li>JMM defines how threads interact through memory in Java.</li> <li>Ensures visibility, ordering, and atomicity across threads in a concurrent environment.</li> <li>Part of the Java Language Specification (JLS).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#2-key-concepts","title":"\ud83e\udde9 2. Key Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#happens-before-relationship","title":"\ud83d\udd01 Happens-Before Relationship","text":"<ul> <li>Core principle of JMM for thread safety.</li> <li>If one action happens-before another, the first is visible and ordered before the second.</li> <li>Examples:<ul> <li>Unlocking a lock happens-before subsequent locking.</li> <li>Writing to a <code>volatile</code> variable happens-before reading it.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#visibility","title":"\ud83d\udca1 Visibility","text":"<ul> <li>Changes made by one thread must be visible to others.</li> <li>Without synchronization, threads may cache variables and not reflect latest changes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#atomicity","title":"\ud83e\uddf1 Atomicity","text":"<ul> <li>Operations like <code>int i = 5;</code> are atomic for primitives except <code>long</code> and <code>double</code> (on 32-bit JVMs).</li> <li>Use <code>AtomicInteger</code>, etc., for compound atomic operations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#ordering","title":"\ud83d\udcd0 Ordering","text":"<ul> <li>Compiler/CPU reordering can cause unexpected behavior.</li> <li>JMM provides guarantees via <code>synchronized</code>, <code>volatile</code>, and atomic classes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#3-tools-to-enforce-memory-consistency","title":"\ud83e\uddf0 3. Tools to Enforce Memory Consistency","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#synchronized","title":"\ud83d\udd12 <code>synchronized</code>","text":"<ul> <li>Enforces mutual exclusion and establishes happens-before relationships.</li> <li>Acquiring a lock makes previous writes visible to current thread.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#volatile","title":"\u26a1 <code>volatile</code>","text":"<ul> <li>Guarantees visibility and prevents reordering.</li> <li>No atomicity for compound actions (e.g., <code>i++</code>).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#javautilconcurrent-juc","title":"\u2699\ufe0f <code>java.util.concurrent</code> (JUC)","text":"<ul> <li>Provides high-level concurrency tools:<ul> <li><code>Atomic*</code> classes \u2192 atomic ops without locking.</li> <li><code>ReentrantLock</code>, <code>CountDownLatch</code>, <code>Semaphore</code>, etc.</li> <li><code>ExecutorService</code> for managed thread execution.</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#4-jmm-vs-cpu-caches","title":"\ud83e\uddee 4. JMM vs CPU Caches","text":"<ul> <li>Modern CPUs reorder instructions for optimization \u2192 can conflict with thread expectations.</li> <li>JMM ensures that Java code behaves predictably regardless of hardware.</li> <li>Memory barriers (inserted by JVM) prevent reordering when needed.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#5-common-concurrency-issues-addressed-by-jmm","title":"\ud83e\uddea 5. Common Concurrency Issues Addressed by JMM","text":"<ul> <li>\u274c Stale data: A thread sees outdated value due to no visibility.</li> <li>\u274c Race conditions: Multiple threads access shared data unsafely.</li> <li>\u274c Instruction reordering: Causes subtle bugs if not properly synchronized.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#6-best-practices","title":"\ud83d\udccc 6. Best Practices","text":"<ul> <li>Always use <code>synchronized</code>, <code>volatile</code>, or JUC tools for shared mutable state.</li> <li>Prefer immutable objects when possible to avoid concurrency bugs.</li> <li>Be mindful of lock granularity to avoid deadlocks or contention.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#7-bonus-sample-code-for-visibility-issue","title":"\ud83d\udcda 7. Bonus: Sample Code for Visibility Issue","text":"<pre><code>class Example {\n    private static boolean flag = false;\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -&gt; {\n            while (!flag) {\n                // Busy wait\n            }\n            System.out.println(\"Flag is true!\");\n        });\n\n        Thread t2 = new Thread(() -&gt; {\n            flag = true;\n        });\n\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre> <p>\u2757 Without <code>volatile</code>, <code>flag = true</code> may not be visible to <code>t1</code>. Fix: declare <code>flag</code> as <code>volatile</code>.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#8-summary-table","title":"\u2705 8. Summary Table","text":"Concept Problem Solved Tool/Keyword Notes Visibility Stale data <code>volatile</code>, <code>sync</code> Ensures updated value is seen Atomicity Inconsistent updates <code>Atomic*</code>, <code>sync</code> One thread completes operation fully Ordering Out-of-order execution JMM rules, sync tools Prevents unsafe reorderings Communication Cross-thread data sharing <code>volatile</code>, <code>Locks</code> Sync enables safe data flow"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-jmm/#final-thought","title":"\ud83e\udde0 Final Thought:","text":"<p>The JMM is the backbone of thread-safe programming in Java. Deep understanding helps write predictable, performant, and bug-free concurrent code.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/","title":"5 thread creation","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#thread-creation-in-java","title":"\ud83d\udd25 Thread Creation in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#1-introduction-to-multithreading","title":"\ud83d\ude80 1. Introduction to Multithreading","text":"<ul> <li>Multithreading allows multiple parts of a program (threads) to execute concurrently.</li> <li>Improves application performance by utilizing CPU cores efficiently.</li> <li>Each thread runs in its own stack memory, allowing parallel execution.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#2-ways-to-create-threads-in-java","title":"\ud83d\udd25 2. Ways to Create Threads in Java","text":"<ul> <li>Java provides two main ways to create threads:<ol> <li>Extending the <code>Thread</code> class</li> <li>Implementing the <code>Runnable</code> interface</li> </ol> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#3-extending-the-thread-class","title":"\u2705 3. Extending the <code>Thread</code> Class","text":"<ul> <li>In this approach, you create a class that extends <code>Thread</code> and overrides the <code>run()</code> method.</li> <li>Use the <code>start()</code> method to begin execution of the thread.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#syntax","title":"\u2699\ufe0f Syntax:","text":"<pre><code>class MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread is running...\");\n    }\n\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();  // Starts the new thread\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#key-points","title":"\ud83d\udd25 Key Points:","text":"<ul> <li>The <code>run()</code> method contains the code to be executed by the thread.</li> <li><code>start()</code> method invokes the thread and calls the <code>run()</code> method internally.</li> <li>Thread scheduling is handled by the JVM.</li> </ul> <p>\u2705 Advantages: - Simplicity in syntax for small-scale applications.</p> <p>\u274c Disadvantages: - Single inheritance restriction: Since Java does not support multiple inheritance, you cannot extend another class.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#4-implementing-the-runnable-interface","title":"\u2705 4. Implementing the <code>Runnable</code> Interface","text":"<ul> <li>The <code>Runnable</code> interface has a single abstract method <code>run()</code> that must be implemented.</li> <li>Create an instance of the <code>Thread</code> class by passing a <code>Runnable</code> object as a parameter.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#syntax_1","title":"\u2699\ufe0f Syntax:","text":"<pre><code>class MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"Runnable thread is running...\");\n    }\n\n    public static void main(String[] args) {\n        MyRunnable runnable = new MyRunnable();\n        Thread thread = new Thread(runnable);\n        thread.start();  // Starts the new thread\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#key-points_1","title":"\ud83d\udd25 Key Points:","text":"<ul> <li>Runnable interface provides a way to achieve multithreading without inheritance.</li> <li><code>Thread</code> class takes the <code>Runnable</code> instance as an argument.</li> <li><code>start()</code> method is used to begin the execution.</li> </ul> <p>\u2705 Advantages: - No inheritance limitation: The class can extend another class while still implementing <code>Runnable</code>. - Suitable for large-scale applications.</p> <p>\u274c Disadvantages: - Slightly more complex syntax compared to extending <code>Thread</code>.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#5-differences-between-thread-and-runnable","title":"\ud83d\udd25 5. Differences Between <code>Thread</code> and <code>Runnable</code>","text":"\ud83d\ude80 Aspect \u2705 Extending <code>Thread</code> \ud83d\udd25 Implementing <code>Runnable</code> Inheritance Inherits from <code>Thread</code> class Implements <code>Runnable</code> interface Multiple Inheritance \u274c Not possible \u2705 Possible Memory Overhead Slightly higher (creates new thread) Lower (uses shared thread object) Flexibility Less flexible More flexible Preferred For Small projects Large, scalable applications"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#6-best-practices-for-thread-creation","title":"\ud83d\ude80 6. Best Practices for Thread Creation","text":"<ul> <li>Use <code>Runnable</code> over <code>Thread</code>: More flexible and allows multiple inheritance.</li> <li>Prefer ExecutorService and <code>Callable</code> over raw thread creation for better management.</li> <li>Use Thread pooling for managing multiple threads efficiently.</li> <li>Always handle exceptions inside <code>run()</code> to avoid unexpected termination.</li> <li>Use synchronized blocks to prevent race conditions in shared resources.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-creation/#7-key-takeaways","title":"\u2705 7. Key Takeaways","text":"<ul> <li>Use <code>Runnable</code> for better flexibility and scalability.</li> <li>Avoid creating too many threads manually \u2013 use ExecutorService.</li> <li>Always handle exceptions properly to prevent crashes.</li> <li>Use synchronization where necessary to prevent race conditions.</li> </ul> <p>\ud83d\ude80 Next Step: Learn about Thread Synchronization and Concurrency utilities in Java.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-lifecycle/","title":"5 thread lifecycle","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-lifecycle/#thread-lifecycle-states-in-java","title":"\ud83d\udd25 Thread Lifecycle &amp; States in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-lifecycle/#1-what-is-a-thread","title":"\ud83d\ude80 1. What is a Thread?","text":"<ul> <li>A Thread is a lightweight sub-process; smallest unit of CPU execution.</li> <li>Threads in Java are instances of <code>java.lang.Thread</code>.</li> <li>Enable concurrent execution and improve resource utilization.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-lifecycle/#2-thread-lifecycle-states","title":"\ud83d\udd04 2. Thread Lifecycle (States)","text":"<p>A thread in Java can be in one of the following 6 states, defined in <code>java.lang.Thread.State</code> enum:</p> \ud83e\udde0 State \ud83d\udccb Description <code>NEW</code> Thread object is created but <code>start()</code> not called. <code>RUNNABLE</code> Eligible to run, waiting for CPU scheduler. May be running or ready to run. <code>BLOCKED</code> Waiting to acquire a monitor lock to enter a <code>synchronized</code> block/method. <code>WAITING</code> Waiting indefinitely for another thread to perform a specific action. <code>TIMED_WAITING</code> Waiting for a specified time (e.g., <code>sleep()</code>, <code>join(timeout)</code>, <code>wait(timeout)</code>). <code>TERMINATED</code> Thread has exited normally or due to an exception."},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-lifecycle/#3-lifecycle-transitions","title":"\ud83e\uddf5 3. Lifecycle Transitions","text":"<pre> ```mermaid graph TD NEW --&gt;|start()| RUNNABLE RUNNABLE --&gt;|OS Scheduler| RUNNING RUNNING --&gt;|wait()| WAITING RUNNING --&gt;|sleep()/join(timeout)| TIMED_WAITING RUNNING --&gt;|synchronized block| BLOCKED BLOCKED --&gt;|acquire lock| RUNNABLE WAITING --&gt;|notify()/interrupt()| RUNNABLE TIMED_WAITING --&gt;|timeout expires| RUNNABLE RUNNING --&gt;|execution completes| TERMINATED ``` </pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-lifecycle/#4-key-methods-triggers","title":"\ud83d\udee0\ufe0f 4. Key Methods &amp; Triggers","text":"\ud83e\udde9 Method \ud83d\udd0d Impact on Lifecycle <code>start()</code> Moves thread from <code>NEW</code> to <code>RUNNABLE</code> <code>sleep(ms)</code> Moves thread to <code>TIMED_WAITING</code> <code>wait()</code> Moves thread to <code>WAITING</code> <code>wait(ms)</code> Moves thread to <code>TIMED_WAITING</code> <code>notify()</code> / <code>notifyAll()</code> Moves thread from <code>WAITING</code> to <code>RUNNABLE</code> <code>join()</code> Causes calling thread to wait <code>interrupt()</code> Can exit <code>WAITING</code>, <code>BLOCKED</code>, or <code>TIMED_WAITING</code>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-lifecycle/#5-expert-tips-for-experienced-engineers","title":"\ud83d\udca1 5. Expert Tips (For Experienced Engineers)","text":"<ul> <li>Always prefer <code>Executors</code> over manual thread creation for managing thread pools.</li> <li>Handle <code>InterruptedException</code> gracefully; it's key to responsive &amp; cooperative multithreading.</li> <li>Avoid holding locks during <code>wait()</code> to reduce deadlocks.</li> <li>Combine <code>volatile</code> + <code>synchronized</code> carefully to avoid visibility and atomicity issues.</li> <li>Use <code>Thread.State</code> introspection only for debugging; never rely on it for application logic.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-lifecycle/#6-summary-cheat-sheet","title":"\ud83e\udde0 6. Summary Cheat Sheet","text":"<ul> <li><code>NEW</code>: Just born \ud83d\udc76</li> <li><code>RUNNABLE</code>: Ready to go \ud83d\udea6</li> <li><code>BLOCKED</code>: Locked out \ud83d\udd10</li> <li><code>WAITING</code>: Waiting forever \u23f3</li> <li><code>TIMED_WAITING</code>: Delayed wait \u23f1\ufe0f</li> <li><code>TERMINATED</code>: Done \u2620\ufe0f</li> </ul> <p>\ud83d\udd0d Deep understanding of thread lifecycle is essential for writing robust, scalable, and deadlock-free concurrent applications.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/","title":"5 thread pooling","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#thread-pooling-executor-framework-in-java","title":"\ud83d\udd25 Thread Pooling &amp; Executor Framework in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#1-what-is-thread-pooling","title":"\ud83d\ude80 1. What is Thread Pooling? \ud83e\uddf5","text":"<ul> <li>Reuses a fixed number of threads to execute multiple tasks.</li> <li>Prevents overhead of creating/destroying threads per task.</li> <li>Essential for building scalable and efficient multithreaded systems.</li> <li>Improves CPU utilization, response time, and reduces resource consumption.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#2-executor-framework-overview","title":"\ud83d\udce6 2. Executor Framework Overview \ud83e\udde0","text":"<ul> <li>Introduced in Java 5 (java.util.concurrent).</li> <li>Decouples task submission from task execution.</li> <li>Provides factory methods for various types of thread pools.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#3-core-interfaces-classes","title":"\ud83e\uddf0 3. Core Interfaces &amp; Classes","text":"Interface / Class Role \ud83d\udca1 <code>Executor</code> Base interface for executing tasks. <code>ExecutorService</code> Sub-interface; adds methods like <code>submit()</code> <code>ThreadPoolExecutor</code> Core implementation class. <code>Executors</code> Utility class for factory methods."},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#4-common-thread-pool-types","title":"\u2699\ufe0f 4. Common Thread Pool Types","text":"<pre><code>Executors.newFixedThreadPool(n);     // Fixed number of threads\nExecutors.newCachedThreadPool();     // Creates new threads as needed\nExecutors.newSingleThreadExecutor(); // Single worker thread\nExecutors.newScheduledThreadPool(n); // For scheduled tasks\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#5-example-usage","title":"\ud83e\uddea 5. Example Usage","text":"<pre><code>ExecutorService executor = Executors.newFixedThreadPool(4);\nfor (int i = 0; i &lt; 10; i++) {\n    executor.submit(() -&gt; {\n        System.out.println(Thread.currentThread().getName() + \" is running task\");\n    });\n}\nexecutor.shutdown();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#6-graceful-shutdown","title":"\ud83d\uded1 6. Graceful Shutdown","text":"<ul> <li><code>shutdown()</code> \u2013 Initiates an orderly shutdown.</li> <li><code>shutdownNow()</code> \u2013 Attempts to stop all actively executing tasks.</li> <li>Always follow shutdown with <code>awaitTermination()</code> in production.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#7-advanced-concepts-deep-dive-for-experts","title":"\ud83e\udde0 7. Advanced Concepts (Deep Dive for Experts)","text":"<ul> <li>Custom ThreadPoolExecutor with bounded queue, rejection handler, core/max pool size tuning.</li> <li>Rejection policies: <code>AbortPolicy</code>, <code>CallerRunsPolicy</code>, <code>DiscardPolicy</code>, <code>DiscardOldestPolicy</code>.</li> <li>Use <code>Future.get()</code> for result handling and exception propagation.</li> <li>Use <code>CompletionService</code> for handling results of multiple async tasks in order of completion.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#8-best-practices","title":"\u2696\ufe0f 8. Best Practices","text":"<ul> <li>Prefer using ExecutorService over manually managing threads.</li> <li>Always shutdown executor to free resources.</li> <li>Avoid using static thread pools across unbounded tasks.</li> <li>Monitor with <code>ThreadPoolExecutor#getActiveCount()</code> and <code>getQueue().size()</code>.</li> <li>Profile system under load to tune pool size &amp; queue strategy.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-pooling/#summary","title":"\ud83d\udccc Summary","text":"<ul> <li>\u2705 Thread pooling boosts performance in concurrent apps.</li> <li>\u2705 Executor Framework provides a flexible, pluggable threading model.</li> <li>\u2705 Use <code>ExecutorService</code>, tune <code>ThreadPoolExecutor</code>, and follow shutdown protocols.</li> <li>\u2705 Mastering this improves back-end performance, task scheduling, and system stability.</li> </ul> <p>\ud83e\uddd1\u200d\ud83d\udcbb Ideal for: High-throughput servers, I/O-bound services, batch processing, async APIs.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/","title":"5 thread synchronization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#thread-synchronization-in-java","title":"\ud83d\udd25 Thread Synchronization in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#what-is-thread-synchronization","title":"\ud83e\udde0 What is Thread Synchronization?","text":"<ul> <li>Ensures that shared resources (e.g., variables, objects) are accessed by only one thread at a time.</li> <li>Prevents race conditions, data inconsistency, and thread interference in multithreaded environments.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#key-concepts-apis","title":"\ud83e\uddf1 Key Concepts &amp; APIs","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#synchronized","title":"\ud83d\udd12 <code>synchronized</code>","text":"<ul> <li>A keyword used to lock a block or method so that only one thread can execute it at a time.</li> <li>Can be applied to:<ul> <li>Instance methods \u2192 Locks on the current object (<code>this</code>).</li> <li>Static methods \u2192 Locks on the Class object.</li> <li>Code blocks \u2192 Explicit lock on an object.</li> </ul> </li> </ul> <pre><code>synchronized void criticalSection() {\n    // thread-safe code\n}\n\nsynchronized (lockObj) {\n    // thread-safe block\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#wait","title":"\u23f3 <code>wait()</code>","text":"<ul> <li>Releases the lock and puts the thread into waiting state until it is notified.</li> <li>Must be called within a synchronized block/method.</li> <li>Suspends execution without consuming CPU cycles.</li> </ul> <pre><code>synchronized(lockObj) {\n    lockObj.wait();\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#notify","title":"\ud83d\udce2 <code>notify()</code>","text":"<ul> <li>Wakes up one waiting thread on the same object's monitor.</li> <li>Only notifies, does not immediately release the lock.</li> </ul> <pre><code>synchronized(lockObj) {\n    lockObj.notify();\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#notifyall","title":"\ud83d\udce3 <code>notifyAll()</code>","text":"<ul> <li>Wakes up all waiting threads on the object's monitor.</li> <li>All will compete to acquire the lock once released.</li> </ul> <pre><code>synchronized(lockObj) {\n    lockObj.notifyAll();\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#best-practices-expert-insights","title":"\u26a0\ufe0f Best Practices &amp; Expert Insights","text":"<ul> <li>Prefer <code>java.util.concurrent</code> (e.g., <code>ReentrantLock</code>, <code>Semaphore</code>) for advanced control.</li> <li>Avoid using <code>wait()</code>/<code>notify()</code> if you can use <code>BlockingQueue</code>, <code>CountDownLatch</code>, or <code>CyclicBarrier</code>.</li> <li>Always guard <code>wait()</code>/<code>notify()</code> with a condition to avoid spurious wakeups:</li> </ul> <pre><code>synchronized(lockObj) {\n    while (!condition) {\n        lockObj.wait();\n    }\n    // perform action once condition is met\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#summary-table","title":"\ud83e\udde9 Summary Table","text":"\ud83d\udd27 API/Keyword \ud83d\udcdd Description \ud83d\udee1\ufe0f Used For <code>synchronized</code> Acquires an object/class level lock Mutual exclusion <code>wait()</code> Releases lock &amp; waits to be notified Inter-thread communication <code>notify()</code> Wakes up one waiting thread Efficient thread signaling <code>notifyAll()</code> Wakes up all waiting threads Broadcast notification"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-thread-synchronization/#pro-tips-for-senior-engineers","title":"\ud83e\udde0 Pro Tips for Senior Engineers","text":"<ul> <li>Always evaluate lock contention vs. throughput.</li> <li>Use <code>Thread.sleep()</code> for delays, not for synchronization.</li> <li>Prefer explicit lock objects instead of synchronizing on <code>this</code>.</li> <li>Use tools like JVisualVM, Java Flight Recorder, and Thread dump analysis to debug deadlocks.</li> </ul> <p>\ud83e\uddf5 Mastering synchronization is key to writing high-performance, thread-safe enterprise-grade systems. \u2728</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/","title":"5 volatile atomic","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#volatile-atomic-variables-in-java","title":"\u26a1 Volatile &amp; Atomic Variables in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#overview","title":"\ud83d\udd0d Overview","text":"<ul> <li>Java provides concurrency primitives to deal with multithreading issues.</li> <li>Two such primitives: <code>volatile</code> and <code>Atomic</code> variables are used to ensure data visibility and atomicity.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#volatile-keyword","title":"\ud83e\udde0 Volatile Keyword","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#definition","title":"\u2705 Definition:","text":"<ul> <li><code>volatile</code> is a field modifier used to indicate that a variable's value will be modified by different threads.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#key-properties","title":"\u2699\ufe0f Key Properties:","text":"<ul> <li>Ensures visibility, not atomicity.</li> <li>Always reads from and writes to main memory, avoiding thread-local caches.</li> <li>Lightweight compared to <code>synchronized</code> blocks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#use-cases","title":"\ud83d\udd12 Use Cases:","text":"<ul> <li>Flags or state indicators (e.g. <code>boolean shutdown = false;</code>)</li> <li>Situations where no compound actions (read-modify-write) are needed.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#limitations","title":"\u2757 Limitations:","text":"<ul> <li>Does not guarantee atomic compound actions.</li> <li>Can lead to race conditions in increment/update logic.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#example","title":"\ud83d\udca1 Example:","text":"<pre><code>class SharedData {\n    volatile boolean flag = false;\n\n    public void setFlagTrue() {\n        flag = true;\n    }\n\n    public boolean checkFlag() {\n        return flag;\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#atomic-variables-javautilconcurrentatomic","title":"\ud83e\uddf1 Atomic Variables (java.util.concurrent.atomic)","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#definition_1","title":"\u2705 Definition:","text":"<ul> <li>Atomic classes like <code>AtomicInteger</code>, <code>AtomicBoolean</code>, <code>AtomicReference</code> etc., provide lock-free, thread-safe operations on single variables.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#key-properties_1","title":"\u2699\ufe0f Key Properties:","text":"<ul> <li>Guarantees atomicity and visibility.</li> <li>Based on Compare-And-Swap (CAS) mechanism.</li> <li>Avoids use of synchronized blocks, boosting performance under contention.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#common-classes","title":"\ud83d\udce6 Common Classes:","text":"<ul> <li><code>AtomicInteger</code>, <code>AtomicLong</code>, <code>AtomicBoolean</code>, <code>AtomicReference</code>, <code>AtomicStampedReference</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#example_1","title":"\ud83d\udca1 Example:","text":"<pre><code>import java.util.concurrent.atomic.AtomicInteger;\n\nclass Counter {\n    private AtomicInteger count = new AtomicInteger(0);\n\n    public void increment() {\n        count.incrementAndGet();\n    }\n\n    public int get() {\n        return count.get();\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#use-cases_1","title":"\ud83d\udee0\ufe0f Use Cases:","text":"<ul> <li>Counters, sequence generators, thread-safe caches.</li> <li>Optimistic concurrency control.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#deep-dive-comparison","title":"\ud83e\udde0 Deep-Dive Comparison","text":"Feature <code>volatile</code> <code>Atomic Variables</code> \ud83d\udd04 Visibility \u2705 Yes \u2705 Yes \ud83d\udd01 Atomicity \u274c No \u2705 Yes \u2692\ufe0f Operations Read/Write only Read/Write + Compound (increment, CAS) \ud83d\udd12 Lock-free \u2705 Yes \u2705 Yes \ud83e\udde0 Memory Consistency \u2705 Happens-before guaranteed \u2705 Happens-before guaranteed \ud83d\udca1 Ideal For State flags Counters, updates, concurrent data"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#pro-tip-for-senior-engineers","title":"\ud83e\udde9 Pro Tip for Senior Engineers","text":"<ul> <li>For compound actions (e.g. <code>count++</code>), <code>volatile</code> is not enough; use <code>AtomicInteger</code> or synchronized blocks.</li> <li>Avoid premature optimization \u2014 use <code>Atomic*</code> when true contention occurs; else go with synchronized.</li> <li>Know the underlying CPU architecture (memory model, reordering) for effective concurrency design.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/5/5-volatile-atomic/#references","title":"\ud83d\udcda References","text":"<ul> <li>Java Memory Model (JMM)</li> <li><code>java.util.concurrent.atomic</code> Package Docs</li> <li>Brian Goetz - Java Concurrency in Practice</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/","title":"6 collectors","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#collectors-api-in-java","title":"\ud83d\ude80 Collectors API in Java","text":"<p>The Collectors API is part of <code>java.util.stream</code> and is used in terminal operations to collect the results of a stream pipeline.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#overview","title":"\ud83d\udd0d Overview","text":"<ul> <li>Provides reduction operations (like collecting elements into a <code>List</code>, <code>Set</code>, <code>Map</code>, or <code>String</code>).</li> <li>Used in conjunction with <code>Stream.collect()</code> method.</li> <li>Highly used in Java functional programming and data transformation pipelines.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#common-collectors","title":"\ud83d\udce6 Common Collectors","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#collectorstolist","title":"\ud83e\uddfe <code>Collectors.toList()</code>","text":"<ul> <li>Purpose: Collects elements of the stream into a <code>List</code>.</li> <li>Return Type: <code>List&lt;T&gt;</code></li> <li>\u2705 Preserves insertion order (like <code>ArrayList</code>)</li> </ul> <pre><code>List&lt;String&gt; names = list.stream().collect(Collectors.toList());\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#collectorstomap","title":"\ud83d\uddfa\ufe0f <code>Collectors.toMap()</code>","text":"<ul> <li>Purpose: Collects elements into a <code>Map</code> using key/value mapper functions.</li> <li>\u26a0\ufe0f Throws <code>IllegalStateException</code> on duplicate keys unless a merge function is specified.</li> <li>\ud83d\udccc Use-case: Building lookup tables or grouping data.</li> </ul> <pre><code>Map&lt;Integer, String&gt; map =\n    list.stream().collect(Collectors.toMap(\n        obj -&gt; obj.getId(),\n        obj -&gt; obj.getName()\n    ));\n\n// Handling duplicates\nMap&lt;String, String&gt; safeMap =\n    list.stream().collect(Collectors.toMap(\n        k -&gt; k.getKey(),\n        v -&gt; v.getValue(),\n        (v1, v2) -&gt; v1  // merge function\n    ));\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#collectorsjoining","title":"\ud83d\udd17 <code>Collectors.joining()</code>","text":"<ul> <li>Purpose: Concatenates the elements of a stream into a single <code>String</code>.</li> <li>\ud83d\udca1 Optional: delimiter, prefix, suffix</li> </ul> <pre><code>String joined =\n    list.stream().map(String::valueOf)\n        .collect(Collectors.joining(\", \", \"[\", \"]\"));\n// Output: [1, 2, 3]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#use-case-patterns-advanced","title":"\ud83d\udccc Use-case Patterns (Advanced)","text":"<ul> <li>\ud83d\udd04 Converting DTOs to entities and vice versa.</li> <li>\ud83d\udcca Aggregation pipelines (grouping, mapping, summarizing).</li> <li>\ud83c\udf10 API Response Transformation using nested collectors.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#expert-notes","title":"\ud83e\udde0 Expert Notes","text":"<ul> <li>Avoid mutable collectors manually (e.g., adding to list inside <code>forEach</code>) \u2014 use built-in Collectors.</li> <li>Consider <code>Collectors.collectingAndThen()</code> for post-processing.</li> <li>Use <code>toUnmodifiableList()</code> (Java 10+) for immutable collections.</li> </ul> <pre><code>List&lt;String&gt; immutable =\n    list.stream().collect(Collectors.collectingAndThen(\n        Collectors.toList(),\n        Collections::unmodifiableList\n    ));\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#summary-table","title":"\u2705 Summary Table","text":"\ud83e\uddf0 Collector \ud83d\udd0d Description \ud83d\udce6 Returns <code>toList()</code> Collects stream into a <code>List</code> <code>List&lt;T&gt;</code> <code>toMap()</code> Collects stream into a <code>Map&lt;K,V&gt;</code> <code>Map&lt;K, V&gt;</code> <code>joining()</code> Joins stream into <code>String</code> with delimiters <code>String</code> <code>collectingAndThen()</code> Post-process collected result Depends on function"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-collectors/#references","title":"\ud83d\udcda References","text":"<ul> <li><code>java.util.stream.Collectors</code></li> <li>Effective Java, Item 46: Prefer side-effect-free functions in streams</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/","title":"6 functional interfaces","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#functional-interfaces-in-java","title":"\ud83d\udd25 Functional Interfaces in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#1-what-is-a-functional-interface","title":"\ud83e\udde0 1. What is a Functional Interface?","text":"<ul> <li>An interface with exactly one abstract method.</li> <li>Can have multiple default or static methods.</li> <li>Enables usage of lambda expressions and method references.</li> <li>Annotated with <code>@FunctionalInterface</code> for compile-time validation (optional but recommended).</li> </ul> <pre><code>@FunctionalInterface\npublic interface MyFunctionalInterface {\n    void execute();\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#2-built-in-functional-interfaces-javautilfunction","title":"\u2699\ufe0f 2. Built-in Functional Interfaces (java.util.function)","text":"<p>Java 8 introduced commonly used functional interfaces in the <code>java.util.function</code> package:</p> \ud83d\udd39 Interface \u2705 Method Signature \ud83c\udfaf Purpose \ud83d\udd01 Input \ud83c\udf81 Output <code>Consumer&lt;T&gt;</code> <code>void accept(T t)</code> Performs action on a value, returns nothing 1 void <code>Supplier&lt;T&gt;</code> <code>T get()</code> Supplies a value, no input 0 1 <code>Predicate&lt;T&gt;</code> <code>boolean test(T t)</code> Tests a condition on input, returns boolean 1 boolean <code>Function&lt;T,R&gt;</code> <code>R apply(T t)</code> Transforms input to output 1 1"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#3-use-cases-examples","title":"\ud83d\udd0d 3. Use Cases &amp; Examples","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#consumer-side-effects-like-logging-printing","title":"\u2705 Consumer: Side-effects like logging, printing","text":"<pre><code>Consumer&lt;String&gt; printer = msg -&gt; System.out.println(msg);\nprinter.accept(\"Hello \ud83d\udc4b\");\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#supplier-lazy-evaluation-dependency-injection","title":"\u2705 Supplier: Lazy evaluation, dependency injection","text":"<pre><code>Supplier&lt;Double&gt; randomSupplier = () -&gt; Math.random();\nSystem.out.println(randomSupplier.get());\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#predicate-filtering-validations","title":"\u2705 Predicate: Filtering, validations","text":"<pre><code>Predicate&lt;Integer&gt; isEven = n -&gt; n % 2 == 0;\nSystem.out.println(isEven.test(4)); // true\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#function-mapping-transformations","title":"\u2705 Function: Mapping, transformations","text":"<pre><code>Function&lt;String, Integer&gt; lengthFunc = s -&gt; s.length();\nSystem.out.println(lengthFunc.apply(\"Java\")); // 4\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#4-advanced-usage-tips-for-experienced-developers","title":"\ud83d\ude80 4. Advanced Usage Tips (for experienced developers)","text":"<ul> <li>\ud83e\udde9 Composing functions: Chain using <code>andThen()</code>, <code>compose()</code> (for <code>Function</code>)</li> </ul> <pre><code>Function&lt;String, String&gt; trim = String::trim;\nFunction&lt;String, Integer&gt; length = String::length;\nFunction&lt;String, Integer&gt; pipeline = trim.andThen(length);\n</code></pre> <ul> <li>\ud83d\udd17 Chaining predicates:</li> </ul> <pre><code>Predicate&lt;String&gt; startsWithJ = s -&gt; s.startsWith(\"J\");\nPredicate&lt;String&gt; lengthCheck = s -&gt; s.length() &gt; 3;\nPredicate&lt;String&gt; combined = startsWithJ.and(lengthCheck);\n</code></pre> <ul> <li>\ud83d\udca1 Functional interfaces + Streams = expressive, readable code</li> </ul> <pre><code>List&lt;String&gt; names = List.of(\"John\", \"Jill\", \"Bob\");\nnames.stream()\n     .filter(s -&gt; s.startsWith(\"J\"))\n     .map(String::toUpperCase)\n     .forEach(System.out::println);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-functional-interfaces/#summary","title":"\ud83d\udccc Summary","text":"<ul> <li>Functional interfaces enable clean, declarative, and functional programming in Java.</li> <li>Core to building blocks of lambda expressions, streams, and modern Java patterns.</li> <li>Use with caution in complex logic: prefer clarity over cleverness.</li> </ul> <p>\ud83d\udd25 Pro Tip: You can create custom functional interfaces to model your domain-specific operations more clearly when built-in ones aren't expressive enough.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/","title":"6 lambda","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#lambda-expressions-in-java","title":"\ud83d\udd25 Lambda Expressions in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#1-what-are-lambda-expressions","title":"\ud83d\ude80 1. What are Lambda Expressions?","text":"<ul> <li>\ud83e\udde0 Lambda Expressions are a feature introduced in Java 8.</li> <li>Enable treating functionality as method arguments or treating code as data.</li> <li>Support functional programming using concise and expressive syntax.</li> <li>Eliminate boilerplate code used in anonymous inner classes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#2-syntax","title":"\ud83e\udde9 2. Syntax","text":"<pre><code>(parameters) -&gt; expression\n(parameters) -&gt; { statements; }\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#examples","title":"\u2705 Examples:","text":"<pre><code>Runnable r = () -&gt; System.out.println(\"Hello from Lambda!\");\nComparator&lt;Integer&gt; comp = (a, b) -&gt; Integer.compare(a, b);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#3-key-characteristics","title":"\ud83d\udd0d 3. Key Characteristics","text":"<ul> <li>\ud83d\udd39 Can be used only with functional interfaces (interfaces with a single abstract method).</li> <li>\ud83d\udd39 Can capture effectively final variables from the enclosing scope.</li> <li>\ud83d\udd39 Promotes cleaner and readable code.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#4-functional-interface-examples","title":"\ud83d\udee0\ufe0f 4. Functional Interface Examples","text":"<pre><code>@FunctionalInterface\ninterface MyFunctionalInterface {\n    void execute();\n}\n</code></pre> <ul> <li>\u2705 Predefined interfaces in <code>java.util.function</code> package:<ul> <li><code>Predicate&lt;T&gt;</code> \u2013 returns boolean</li> <li><code>Function&lt;T, R&gt;</code> \u2013 takes T, returns R</li> <li><code>Supplier&lt;T&gt;</code> \u2013 provides object of type T</li> <li><code>Consumer&lt;T&gt;</code> \u2013 consumes T with no return</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#5-use-cases-in-real-world-applications","title":"\ud83d\udcda 5. Use Cases in Real-World Applications","text":"<ul> <li>\ud83d\udd01 Iteration with <code>forEach()</code>:   <code>java   list.forEach(item -&gt; System.out.println(item));</code></li> <li>\ud83d\udcca Filtering and mapping in Streams:   <code>java   List&lt;String&gt; filtered = names.stream()                                .filter(name -&gt; name.startsWith(\"A\"))                                .collect(Collectors.toList());</code></li> <li>\ud83d\udd27 Event handling in GUI frameworks</li> <li>\ud83e\uddea Unit testing: mocking and stubbing with frameworks like Mockito</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#6-advanced-considerations-for-experienced-developers","title":"\u2699\ufe0f 6. Advanced Considerations for Experienced Developers","text":"<ul> <li>\ud83d\udd0d Debugging is less intuitive\u2014use named methods when debugging complex lambdas.</li> <li>\ud83e\uddf5 Thread safety: avoid mutating shared state within lambdas used in parallel streams.</li> <li>\ud83d\udd01 Recursive behavior not directly supported\u2014workaround via static helper methods.</li> <li>\ud83d\udd12 Checked exceptions must be handled inside the lambda or rethrown indirectly.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#7-benefits","title":"\u2705 7. Benefits","text":"<ul> <li>\ud83d\ude80 Concise and expressive code</li> <li>\ud83d\udd04 Enhanced use of Stream API and Collections API</li> <li>\ud83d\udd27 Better suited for functional pipelines</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#8-limitations","title":"\u26a0\ufe0f 8. Limitations","text":"<ul> <li>\u274c Can\u2019t have multiple abstract methods in the target interface</li> <li>\u2757 Overuse can make code less readable for large teams</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#9-best-practices","title":"\ud83e\udde0 9. Best Practices","text":"<ul> <li>\u2705 Use for small, simple operations</li> <li>\u2705 Use method references (<code>ClassName::method</code>) when possible for readability</li> <li>\u274c Avoid long or nested lambda expressions\u2014prefer named functions</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-lambda/#10-quick-summary-table","title":"\ud83d\udccc 10. Quick Summary Table","text":"\ud83d\udd27 Feature \u2705 Supported In Lambda Access outer variables \u2705 If effectively final Multiple parameters \u2705 Checked exceptions \u26a0\ufe0f Manual handling Functional interface use \u2705 Required Return statements \u2705 Optional for 1-liners Recursion \u274c Use workaround <p>\ud83e\udde9 Pro Tip: Combine Streams + Lambdas to express powerful data transformations elegantly.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/","title":"6 method references","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/#method-references-in-java-8","title":"\ud83d\udd27 Method References in Java 8+","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/#what-are-method-references","title":"\ud83d\ude80 What Are Method References?","text":"<ul> <li>Introduced in Java 8 as part of lambda expressions and functional programming.</li> <li>A shorthand notation to call a method via a reference instead of writing a full lambda.</li> <li>Helps improve readability, conciseness, and reusability of code.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/#syntax-overview","title":"\ud83e\udde0 Syntax Overview","text":"<pre><code>ClassName::methodName\nobjectRef::instanceMethod\nClassName::staticMethod\nClassName::new   // Constructor reference\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/#types-of-method-references","title":"\ud83d\udd25 Types of Method References","text":"\ud83c\udff7\ufe0f Type \ud83e\uddfe Syntax Example \ud83d\udccc Description Static Method <code>ClassName::staticMethod</code> Refers to a static method Instance Method (object) <code>objectRef::instanceMethod</code> Refers to a method of a specific object Instance Method (class) <code>ClassName::instanceMethod</code> Method is called on the parameter (like in streams) Constructor Reference <code>ClassName::new</code> Refers to a constructor"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/#when-to-use","title":"\u2705 When to Use?","text":"<ul> <li>When you are only calling a method in a lambda body.</li> <li>Useful in Streams, Collections, and functional interfaces.</li> <li>Helps avoid boilerplate in functional pipelines.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/#examples","title":"\ud83d\udccc Examples","text":"<pre><code>List&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\n\n// Lambda way\nnames.forEach(name -&gt; System.out.println(name));\n\n// Method reference way\nnames.forEach(System.out::println);\n</code></pre> <pre><code>Function&lt;String, Integer&gt; strLength = String::length;\nSupplier&lt;List&lt;String&gt;&gt; listSupplier = ArrayList::new;\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/#behind-the-scenes-advanced","title":"\ud83e\udde0 Behind the Scenes (Advanced)","text":"<ul> <li>Method references are converted to lambda expressions by the compiler.</li> <li>Must match the target functional interface\u2019s method signature.</li> <li>Ideal with interfaces like <code>Function&lt;T,R&gt;</code>, <code>Supplier&lt;T&gt;</code>, <code>Consumer&lt;T&gt;</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/#best-practices-for-experienced-developers","title":"\ud83e\uddea Best Practices for Experienced Developers","text":"<ul> <li>Prefer method references only when it enhances clarity.</li> <li>Don\u2019t overuse\u2014can obfuscate logic if method name isn't self-explanatory.</li> <li>Combine with Stream API for clean, declarative code.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-method-references/#summary","title":"\ud83d\udd1a Summary","text":"<ul> <li>\u2705 Cleaner and more expressive than verbose lambdas.</li> <li>\ud83d\udca1 Think of method references as pointers to behavior.</li> <li>\ud83e\udde9 Integrates seamlessly with Java's functional interfaces.</li> </ul> <p>\ud83d\udcac Pro Tip: Use method references as a stepping stone to mastering functional paradigms in Java.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/","title":"6 optional","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/#optional-class-in-java-javautiloptional","title":"\ud83d\udd0d Optional Class in Java (<code>java.util.Optional</code>)","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/#1-what-is-optional","title":"\ud83d\ude80 1. What is <code>Optional</code>?","text":"<ul> <li>\u2705 A container object which may or may not contain a non-null value.</li> <li>\ud83d\udca1 Introduced in Java 8 to reduce NullPointerException and encourage functional programming.</li> <li>\ud83d\udce6 Located in <code>java.util</code> package.</li> <li>\u274c Not meant to replace all null checks \u2014 best used in method return types.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/#2-common-methods-of-optional","title":"\ud83d\udd27 2. Common Methods of <code>Optional</code>","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/#orelset-other","title":"\ud83d\udfe2 <code>orElse(T other)</code>","text":"<ul> <li>\ud83d\udcad Returns the value if present, else returns the default value provided.</li> </ul> <pre><code>Optional&lt;String&gt; name = Optional.ofNullable(null);\nString result = name.orElse(\"Default\"); // \u27a1\ufe0f \"Default\"\n</code></pre> <ul> <li>\u2757 <code>other</code> is evaluated eagerly (always computed, even if value is present).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/#orelsegetsupplier-extends-t-supplier","title":"\ud83d\udfe2 <code>orElseGet(Supplier&lt;? extends T&gt; supplier)</code>","text":"<ul> <li>\ud83d\udcad Returns the value if present, else invokes the Supplier lambda to get the value.</li> </ul> <pre><code>Optional&lt;String&gt; name = Optional.ofNullable(null);\nString result = name.orElseGet(() -&gt; getDefault());\n</code></pre> <ul> <li>\u26a1 Lazily evaluated \u2014 better performance if <code>getDefault()</code> is expensive.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/#orelsethrowsupplier-extends-throwable-exceptionsupplier","title":"\ud83d\udd34 <code>orElseThrow(Supplier&lt;? extends Throwable&gt; exceptionSupplier)</code>","text":"<ul> <li>\ud83d\udcad Returns value if present; else throws an exception provided by Supplier.</li> </ul> <pre><code>Optional&lt;String&gt; name = Optional.ofNullable(null);\nString result = name.orElseThrow(() -&gt; new IllegalArgumentException(\"Value not present\"));\n</code></pre> <ul> <li>\ud83d\udd10 Best used when absence of value is exceptional and must be handled explicitly.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/#3-best-practices-for-senior-engineers","title":"\ud83e\udde0 3. Best Practices for Senior Engineers","text":"<ul> <li>\u2705 Use <code>Optional</code> for return types, not for fields or parameters.</li> <li>\u2705 Favor <code>orElseGet()</code> over <code>orElse()</code> when the fallback is expensive to compute.</li> <li>\u26a0\ufe0f Avoid using <code>Optional.get()</code> \u2014 it's unsafe without a presence check.</li> <li>\u2705 Combine with <code>map()</code>, <code>filter()</code>, and <code>flatMap()</code> for declarative data transformations.</li> </ul> <pre><code>String result = Optional.ofNullable(user)\n    .map(User::getProfile)\n    .map(Profile::getEmail)\n    .orElse(\"Email not available\");\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/#4-summary-table","title":"\ud83e\uddea 4. Summary Table","text":"Method Purpose Evaluation Type Exception on Absence Recommended Use Case <code>orElse()</code> Return value or default Eager \u274c Simple fallback <code>orElseGet()</code> Return value or compute fallback Lazy \u274c Expensive fallback logic <code>orElseThrow()</code> Return value or throw exception Lazy \u2705 When absence is truly exceptional"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-optional/#reference-use-cases","title":"\ud83d\udcda Reference Use Cases","text":"<ul> <li>\u2705 Return Optional from repository or service layer.</li> <li>\u2705 Chain operations using <code>map()</code> instead of nested null checks.</li> <li>\u274c Don\u2019t overuse Optional in performance-critical code paths.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/","title":"6 streams","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#java-streams-api-revision-notes","title":"\ud83d\ude80 Java Streams API \u2013 Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#what-is-the-java-streams-api","title":"\ud83c\udf0a What is the Java Streams API?","text":"<ul> <li>Introduced in Java 8 for functional-style operations on collections.</li> <li>Streams allow declarative data processing: think of what to do, not how to do it.</li> <li>Operates on data pipelines, not data structures.</li> <li>Supports parallel execution for performance improvements.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#stream-pipeline","title":"\ud83d\udee0\ufe0f Stream Pipeline","text":"<p>A pipeline is a sequence of stream operations:</p> <pre><code>Collection.stream()\n          .intermediateOp1()\n          .intermediateOp2()\n          ...\n          .terminalOp();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#intermediate-operations-lazy","title":"\ud83d\udd01 Intermediate Operations (Lazy)","text":"<ul> <li>Don't execute until a terminal operation is called.</li> <li>Return a new Stream each time.</li> </ul> Operation Purpose Example <code>map()</code> Transform each element <code>stream.map(String::toUpperCase)</code> <code>filter()</code> Select elements matching a condition <code>stream.filter(s -&gt; s.length() &gt; 3)</code> <code>sorted()</code> Sort elements <code>stream.sorted()</code> <code>distinct()</code> Remove duplicates <code>stream.distinct()</code> <code>limit()</code> Limit the size of the stream <code>stream.limit(5)</code>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#terminal-operations-eager","title":"\ud83c\udfc1 Terminal Operations (Eager)","text":"<ul> <li>Trigger the pipeline and produce a result or side-effect.</li> <li>Once called, the stream is consumed and cannot be reused.</li> </ul> Operation Purpose Example <code>forEach()</code> Iterate and apply action <code>stream.forEach(System.out::println)</code> <code>collect()</code> Convert to List, Set, Map, etc. <code>stream.collect(Collectors.toList())</code> <code>reduce()</code> Aggregate elements into a single value <code>stream.reduce(0, Integer::sum)</code> <code>count()</code> Count elements <code>stream.count()</code> <code>anyMatch()</code> Check if any match a predicate <code>stream.anyMatch(s -&gt; s.isEmpty())</code>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#key-functional-interfaces-used","title":"\u2699\ufe0f Key Functional Interfaces Used","text":"<ul> <li><code>Function&lt;T, R&gt;</code> \u2192 used in <code>map()</code></li> <li><code>Predicate&lt;T&gt;</code> \u2192 used in <code>filter()</code></li> <li><code>Consumer&lt;T&gt;</code> \u2192 used in <code>forEach()</code></li> <li><code>BinaryOperator&lt;T&gt;</code> \u2192 used in <code>reduce()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#deep-dive-reduce-explained","title":"\ud83d\udca1 Deep Dive: <code>reduce()</code> Explained","text":"<pre><code>Optional&lt;Integer&gt; result = Stream.of(1, 2, 3, 4)\n    .reduce((a, b) -&gt; a + b); // Optional[10]\n</code></pre> <ul> <li>Used for aggregation, like sum, min, max.</li> <li>Can be used with identity value and accumulator function.</li> <li>Parallel reduction possible via <code>Stream.parallel()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#pro-tips-for-experienced-engineers","title":"\ud83e\udde0 Pro Tips for Experienced Engineers","text":"<ul> <li>\u2705 Prefer Streams over loops for readability and maintainability.</li> <li>\ud83d\udd04 Combine filter \u2192 map \u2192 collect for cleaner code.</li> <li>\ud83e\uddf5 Use <code>.parallelStream()</code> cautiously \u2014 test performance &amp; thread-safety.</li> <li>\ud83d\udeab Avoid stateful operations (e.g., shared mutable state) inside streams.</li> <li>\ud83e\uddf9 Use <code>Collectors.groupingBy()</code> and <code>Collectors.partitioningBy()</code> for data grouping needs.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#summary-cheat-sheet","title":"\ud83d\udccc Summary Cheat Sheet","text":"<pre><code>List&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\nList&lt;String&gt; upper = names.stream()\n                          .filter(n -&gt; n.length() &gt; 3)\n                          .map(String::toUpperCase)\n                          .collect(Collectors.toList());\nSystem.out.println(upper); // [ALICE, CHARLIE]\n</code></pre> <p>\u27a1\ufe0f Streams = Clean, functional, parallel-friendly code for processing collections.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/6/6-streams/#explore-more","title":"\ud83d\udcda Explore More","text":"<ul> <li><code>Collectors.toMap()</code> for building maps.</li> <li><code>flatMap()</code> for flattening nested streams.</li> <li>Custom collectors using <code>Collector.of()</code>.</li> <li>Performance tuning with Spliterators.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/","title":"7 buffered io","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#buffered-io-streams-in-java","title":"\ud83d\udd04 Buffered I/O Streams in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#overview","title":"\ud83e\udde0 Overview","text":"<ul> <li>Buffered I/O Streams improve I/O performance by minimizing native I/O calls.</li> <li>They use an internal buffer to read/write data in bulk rather than byte-by-byte or char-by-char.</li> <li>Used in scenarios involving large data processing, file operations, or network communications.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#bufferedreader","title":"\ud83d\udce5 BufferedReader","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#purpose","title":"\u2705 Purpose:","text":"<ul> <li>Efficiently reads characters, arrays, or lines from a character input stream.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#key-features","title":"\ud83d\udccc Key Features:","text":"<ul> <li>Wraps around <code>Reader</code> classes (e.g., <code>FileReader</code>).</li> <li>Reads text line-by-line with <code>readLine()</code>.</li> <li>Helps reduce disk access latency.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#example","title":"\ud83e\uddea Example:","text":"<pre><code>BufferedReader reader = new BufferedReader(new FileReader(\"data.txt\"));\nString line;\nwhile ((line = reader.readLine()) != null) {\n    System.out.println(line);\n}\nreader.close();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#threading","title":"\ud83e\uddf5 Threading:","text":"<ul> <li>Not thread-safe by default.</li> <li>Wrap with <code>Collections.synchronizedXXX()</code> if shared.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#bufferedwriter","title":"\ud83d\udce4 BufferedWriter","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#purpose_1","title":"\u2705 Purpose:","text":"<ul> <li>Efficiently writes characters, arrays, or strings to a character output stream.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#key-features_1","title":"\ud83d\udccc Key Features:","text":"<ul> <li>Wraps around <code>Writer</code> classes (e.g., <code>FileWriter</code>).</li> <li>Supports <code>newLine()</code> to write system-specific line separators.</li> <li>Reduces number of write system calls.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#example_1","title":"\ud83e\uddea Example:","text":"<pre><code>BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"));\nwriter.write(\"Hello, world!\");\nwriter.newLine();\nwriter.write(\"Buffered I/O is efficient!\");\nwriter.close();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#buffer-flush","title":"\ud83d\udd04 Buffer Flush:","text":"<ul> <li>Always call <code>flush()</code> or <code>close()</code> to ensure buffer is written to disk.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#deep-dive-for-experienced-engineers","title":"\ud83e\udde0 Deep Dive for Experienced Engineers","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#internal-working","title":"\u2699\ufe0f Internal Working:","text":"<ul> <li>Maintains a char array buffer (default 8192 chars).</li> <li>On <code>read()</code>, fills buffer once and serves from memory.</li> <li>On <code>write()</code>, fills buffer and flushes once full or on command.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#performance-tips","title":"\ud83d\udcca Performance Tips:","text":"<ul> <li>Use for batch processing, not for small, frequent reads/writes.</li> <li>Consider <code>BufferedReader</code> + <code>InputStreamReader</code> when reading bytes as characters.</li> <li>Use <code>try-with-resources</code> for better resource management:</li> </ul> <pre><code>try (BufferedReader br = new BufferedReader(new FileReader(\"file.txt\"))) {\n    // use br\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#comparison-table","title":"\ud83e\uddfe Comparison Table","text":"\ud83d\udd27 Class \ud83d\udd0d Use Case \ud83d\udd04 Buffering \ud83c\udf10 Thread-Safe \ud83d\udd1a Close Needed BufferedReader Reading text line-by-line \u2705 Yes \u274c No \u2705 Yes BufferedWriter Writing text efficiently \u2705 Yes \u274c No \u2705 Yes"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-buffered-io/#summary","title":"\u2705 Summary","text":"<ul> <li>Use BufferedReader/Writer when working with text-based I/O.</li> <li>Ensure to flush/close writers to persist data.</li> <li>Wrap readers/writers to boost performance in I/O intensive apps.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/","title":"7 file io","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#file-io-in-java","title":"\ud83d\udcc2 File I/O in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#overview","title":"\ud83d\udd0d Overview","text":"<ul> <li>File I/O (Input/Output) in Java allows interaction with files \u2014 reading from and writing to files.</li> <li>Java provides java.io and java.nio packages for low-level and high-performance I/O respectively.</li> <li>Here we focus on core classes: <code>File</code>, <code>FileReader</code>, <code>FileWriter</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#file-class","title":"\ud83d\udcc1 <code>File</code> Class","text":"<ul> <li>Package: <code>java.io</code></li> <li>Purpose: Represents a file or directory path in an abstract manner.</li> <li>Does not handle actual I/O \u2014 used for metadata operations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#key-methods","title":"\ud83d\udd27 Key Methods","text":"<pre><code>File file = new File(\"data.txt\");\nfile.exists();      // \u2705 Checks if file exists\nfile.createNewFile(); // \ud83d\udcc4 Creates a new file\nfile.delete();      // \u274c Deletes the file\nfile.isDirectory(); // \ud83d\udcc1 Checks if it's a directory\nfile.length();      // \ud83d\udccf Gets file size in bytes\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#notes-for-experts","title":"\u26a0\ufe0f Notes for Experts","text":"<ul> <li><code>File</code> is part of legacy I/O. For NIO, prefer <code>Path</code> from <code>java.nio.file</code>.</li> <li>Use with <code>FileReader</code>, <code>FileWriter</code>, <code>Scanner</code>, <code>BufferedReader</code> for full operations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#filereader-class","title":"\ud83d\udcd6 <code>FileReader</code> Class","text":"<ul> <li>Purpose: Reads file content as character stream (suitable for text).</li> <li>Package: <code>java.io</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#usage-example","title":"\ud83d\udd27 Usage Example","text":"<pre><code>FileReader reader = new FileReader(\"data.txt\");\nint ch;\nwhile ((ch = reader.read()) != -1) {\n    System.out.print((char) ch);\n}\nreader.close();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#notes-for-experts_1","title":"\u26a0\ufe0f Notes for Experts","text":"<ul> <li>Not suitable for binary files \u2014 use <code>FileInputStream</code> for those.</li> <li>For efficiency, wrap in <code>BufferedReader</code> to reduce I/O calls:</li> </ul> <pre><code>BufferedReader br = new BufferedReader(new FileReader(\"data.txt\"));\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#filewriter-class","title":"\u270d\ufe0f <code>FileWriter</code> Class","text":"<ul> <li>Purpose: Writes data to file as character stream.</li> <li>Package: <code>java.io</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#usage-example_1","title":"\ud83d\udd27 Usage Example","text":"<pre><code>FileWriter writer = new FileWriter(\"output.txt\");\nwriter.write(\"Hello, world!\\n\");\nwriter.close();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#notes-for-experts_2","title":"\u26a0\ufe0f Notes for Experts","text":"<ul> <li>Overwrites file by default \u2014 to append:</li> </ul> <pre><code>FileWriter writer = new FileWriter(\"output.txt\", true);\n</code></pre> <ul> <li>Wrap with <code>BufferedWriter</code> for buffered output:</li> </ul> <pre><code>BufferedWriter bw = new BufferedWriter(writer);\nbw.write(\"Line\");\nbw.newLine();\nbw.close();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#expert-insights","title":"\ud83e\udde0 Expert Insights","text":"<ul> <li>Prefer <code>try-with-resources</code> for safe resource handling:</li> </ul> <pre><code>try (FileWriter fw = new FileWriter(\"log.txt\")) {\n    fw.write(\"Log Entry\\n\");\n} // Automatically closes fw\n</code></pre> <ul> <li>For large-scale I/O, use <code>java.nio.file.Files</code> or <code>FileChannel</code> (non-blocking I/O).</li> <li>Use <code>Charset</code> explicitly for encoding-sensitive files:</li> </ul> <pre><code>new InputStreamReader(new FileInputStream(\"data.txt\"), StandardCharsets.UTF_8);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-file-io/#summary-table","title":"\u2705 Summary Table","text":"\ud83e\uddf1 Class \ud83d\udcc4 Reads/Writes \ud83d\udd24 Type \ud83d\ude80 Performance \ud83d\udca1 Notes <code>File</code> \u274c No Metadata \u26a1 Fast Use for path/meta operations <code>FileReader</code> \u2705 Read Characters \ud83d\udc22 Unbuffered Wrap with <code>BufferedReader</code> <code>FileWriter</code> \u2705 Write Characters \ud83d\udc22 Unbuffered Use <code>BufferedWriter</code> for speed <p>\ud83d\udcd8 For advanced use-cases like file watching, look into:</p> <ul> <li><code>WatchService</code> (java.nio.file)</li> <li><code>AsynchronousFileChannel</code></li> <li><code>Memory-mapped files</code> via <code>FileChannel.map()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-nio/","title":"7 nio","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-nio/#nio-new-io-in-java","title":"\ud83d\udd25 NIO (New I/O) in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-nio/#overview","title":"\ud83d\udccc Overview","text":"<ul> <li>Introduced in Java 1.4, enhanced in Java 7 (NIO.2).</li> <li>Designed for scalable, non-blocking, buffer-oriented I/O.</li> <li>Allows direct interaction with the underlying OS for high-performance I/O operations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-nio/#path-javaniofilepath","title":"\ud83d\udcc1 Path (java.nio.file.Path)","text":"<p>\ud83d\udd39 Represents a location in the file system in an OS-independent way.</p> <ul> <li>Created via <code>Paths.get()</code> or <code>FileSystems.getDefault().getPath()</code></li> </ul> <pre><code>Path path = Paths.get(\"/home/user/file.txt\");\n</code></pre> <ul> <li>Supports path manipulation:<ul> <li><code>getFileName()</code>, <code>getParent()</code>, <code>resolve()</code>, <code>relativize()</code></li> </ul> </li> <li>Immutable and thread-safe.</li> </ul> <p>\u2705 Use Case: Elegant file system traversal and manipulation in a cross-platform way.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-nio/#files-javaniofilefiles","title":"\ud83d\udcc2 Files (java.nio.file.Files)","text":"<p>\ud83d\udd39 Utility class for common file operations.</p> <ul> <li>Methods are static and work with <code>Path</code>:</li> </ul> <pre><code>Files.readAllLines(path);\nFiles.copy(src, dest, StandardCopyOption.REPLACE_EXISTING);\nFiles.exists(path);\n</code></pre> <ul> <li>Supports:<ul> <li>File creation, deletion, copying, moving</li> <li>Reading and writing text/binary</li> <li>Metadata inspection (e.g., size, attributes)</li> </ul> </li> </ul> <p>\u2705 Use Case: High-level operations on files without manually handling streams.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-nio/#channels-javaniochannels","title":"\ud83d\udd17 Channels (java.nio.channels)","text":"<p>\ud83d\udd39 Abstraction for reading/writing data to/from buffers.</p> <ul> <li>Types: <code>FileChannel</code>, <code>SocketChannel</code>, <code>DatagramChannel</code>, <code>ServerSocketChannel</code></li> <li>Supports non-blocking I/O and selectors for multiplexing.</li> <li><code>FileChannel</code> can map files to memory (memory-mapped I/O):</li> </ul> <pre><code>FileChannel channel = FileChannel.open(path, StandardOpenOption.READ);\n</code></pre> <ul> <li>Supports scattering (read into multiple buffers) and gathering (write from multiple buffers).</li> </ul> <p>\u2705 Use Case: High-throughput I/O, network communication, large file processing.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-nio/#bytebuffer-javaniobytebuffer","title":"\ud83d\udce6 ByteBuffer (java.nio.ByteBuffer)","text":"<p>\ud83d\udd39 Core of NIO buffer-based architecture.</p> <ul> <li>Types: <code>ByteBuffer</code>, <code>CharBuffer</code>, <code>IntBuffer</code>, etc.</li> <li>Stores raw binary data.</li> <li>Key methods:<ul> <li><code>put()</code>, <code>get()</code></li> <li><code>flip()</code>, <code>rewind()</code>, <code>clear()</code>, <code>compact()</code></li> </ul> </li> </ul> <pre><code>ByteBuffer buffer = ByteBuffer.allocate(1024);\nbuffer.put(data);\nbuffer.flip();\nchannel.write(buffer);\n</code></pre> <ul> <li>Can be direct (off-heap, faster) or heap-based.</li> </ul> <p>\u2705 Use Case: Efficient binary data manipulation and zero-copy operations.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-nio/#advanced-notes-for-experienced-engineers","title":"\ud83e\udde0 Advanced Notes (For Experienced Engineers)","text":"<ul> <li>Zero-Copy: Using <code>FileChannel.transferTo()</code> / <code>transferFrom()</code> to avoid copying data between kernel and user space.</li> <li>Memory-Mapped Files: <code>FileChannel.map()</code> maps files directly into memory \u2014 useful for large datasets.</li> <li>Selectors &amp; Multiplexing: With <code>Selector</code>, multiple channels can be managed with a single thread.</li> <li>Thread-Safety: Buffers are not thread-safe. Use synchronization or thread-local buffers if needed.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-nio/#summary-table","title":"\ud83d\udccc Summary Table","text":"Component Description Key Methods / Classes <code>Path</code> File system path abstraction <code>Paths.get()</code>, <code>resolve()</code>, <code>relativize()</code> <code>Files</code> Utility class for file operations <code>Files.readAllLines()</code>, <code>copy()</code>, <code>exists()</code> <code>Channel</code> Connection to I/O source/sink <code>FileChannel</code>, <code>SocketChannel</code>, <code>transferTo()</code> <code>ByteBuffer</code> Memory buffer to read/write binary data <code>put()</code>, <code>get()</code>, <code>flip()</code>, <code>compact()</code> <p>\u2705 Best Practice: Combine Channels + Buffers + Selectors for performant, scalable I/O in real-world applications like file servers, log processors, and high-load network apps.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-serialization/","title":"7 serialization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-serialization/#serialization-deserialization-in-java","title":"\ud83d\udd04 Serialization &amp; Deserialization in Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-serialization/#what-is-serialization","title":"\ud83d\ude80 What is Serialization? \ud83e\udde0","text":"<ul> <li>Serialization is the process of converting a Java object into a byte stream \ud83d\udce6.</li> <li>Enables persistence (saving object state) and network transmission \ud83c\udf10.</li> <li>Used when storing objects to a file, database, or sending over sockets/RMI.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-serialization/#what-is-deserialization","title":"\ud83d\udd01 What is Deserialization? \ud83d\udd13","text":"<ul> <li>Deserialization is the reverse process: converting a byte stream back to a Java object.</li> <li>Helps in reconstructing objects from persistent storage or network.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-serialization/#java-classes-used","title":"\ud83d\udee0\ufe0f Java Classes Used","text":"\ud83d\udce6 Class \ud83d\udd0d Purpose <code>ObjectOutputStream</code> Serializes Java objects and writes to OutputStream <code>ObjectInputStream</code> Reads serialized objects from InputStream"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-serialization/#code-example","title":"\ud83e\udde9 Code Example","text":"<pre><code>import java.io.*;\n\nclass Person implements Serializable {\n    private static final long serialVersionUID = 1L;\n    String name;\n    int age;\n}\n\n// Serialization\nFileOutputStream fileOut = new FileOutputStream(\"person.ser\");\nObjectOutputStream out = new ObjectOutputStream(fileOut);\nout.writeObject(new Person(\"Alice\", 30));\nout.close();\n\n// Deserialization\nFileInputStream fileIn = new FileInputStream(\"person.ser\");\nObjectInputStream in = new ObjectInputStream(fileIn);\nPerson p = (Person) in.readObject();\nin.close();\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-serialization/#important-points-for-experienced-developers","title":"\u2699\ufe0f Important Points for Experienced Developers","text":"<ul> <li>\ud83d\udd10 serialVersionUID: Ensures version compatibility between serialized objects and class definition.</li> <li>\u26a0\ufe0f Fields marked as <code>transient</code> are not serialized \u2014 useful for sensitive info like passwords.</li> <li>\ud83d\udeab If a class contains non-serializable fields, those must be marked <code>transient</code> or handled manually.</li> <li>\u2705 Inheritance &amp; Interfaces:<ul> <li>Subclasses are serializable only if all superclasses implement <code>Serializable</code>.</li> <li><code>Serializable</code> is a marker interface (no methods).</li> </ul> </li> <li>\ud83d\udd04 Custom behavior via:</li> </ul> <pre><code>private void writeObject(ObjectOutputStream out) throws IOException {}\nprivate void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {}\n</code></pre> <ul> <li>\ud83d\udcc9 Overhead: Serialized objects may be larger in size, and deserialization can be a performance bottleneck.</li> <li>\u26a0\ufe0f Avoid serialization of heavy objects in high-throughput systems.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-serialization/#best-practices","title":"\ud83d\udccc Best Practices","text":"<ul> <li>Always declare <code>serialVersionUID</code>.</li> <li>Avoid serializing large object graphs.</li> <li>Validate input when deserializing \u2014 prevents deserialization attacks (RCE).</li> <li>Prefer external libraries (e.g., Kryo, Protobuf, Jackson) for better control and performance in production systems.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/7/7-serialization/#use-cases","title":"\u2705 Use Cases","text":"<ul> <li>Session management in web apps \ud83e\udde0</li> <li>Distributed systems for data transfer \u2699\ufe0f</li> <li>Caching (e.g., storing serialized objects in Redis) \ud83d\udcbe</li> <li>Deep cloning of objects \ud83c\udf00</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/","title":"8 behavioral patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#behavioral-design-patterns","title":"\ud83e\udd16 Behavioral Design Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#overview","title":"\ud83d\udccc Overview","text":"<ul> <li>Behavioral patterns define how objects interact and communicate with each other.</li> <li>Focus on responsibility delegation, runtime behavior, and communication.</li> <li>Ideal for achieving flexibility, reusability, and maintainability in complex systems.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#observer-pattern","title":"\ud83d\udc41\ufe0f Observer Pattern","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#intent","title":"\u2705 Intent:","text":"<ul> <li>Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified automatically.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#use-cases","title":"\ud83d\udce6 Use Cases:","text":"<ul> <li>Event handling systems (e.g., GUI listeners)</li> <li>Messaging systems (e.g., Kafka subscribers)</li> <li>Real-time update scenarios (e.g., stock prices, dashboards)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#key-concepts","title":"\ud83e\udde0 Key Concepts:","text":"<ul> <li>Subject: Maintains list of observers, notifies them of changes.</li> <li>Observer: Defines the interface for receiving updates.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#uml-components","title":"\ud83d\udd27 UML Components:","text":"<ul> <li><code>Subject</code>, <code>ConcreteSubject</code>, <code>Observer</code>, <code>ConcreteObserver</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#pros","title":"\u2705 Pros:","text":"<ul> <li>Promotes loose coupling.</li> <li>Allows dynamic subscriber management.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#cons","title":"\u26a0\ufe0f Cons:","text":"<ul> <li>Complex dependency graph can lead to performance issues.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#strategy-pattern","title":"\ud83e\udde0 Strategy Pattern","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#intent_1","title":"\u2705 Intent:","text":"<ul> <li>Enables selecting an algorithm at runtime by encapsulating them in separate strategy classes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#use-cases_1","title":"\ud83d\udce6 Use Cases:","text":"<ul> <li>Payment gateways (credit card, UPI, etc.)</li> <li>Sorting algorithms</li> <li>Compression strategies (ZIP, RAR, etc.)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#key-concepts_1","title":"\ud83e\udde0 Key Concepts:","text":"<ul> <li>Context: Uses a strategy.</li> <li>Strategy Interface: Defines the algorithm interface.</li> <li>Concrete Strategies: Implement different versions of the algorithm.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#code-sketch-java","title":"\ud83d\udd27 Code Sketch (Java):","text":"<pre><code>interface Strategy {\n    int execute(int a, int b);\n}\nclass AddStrategy implements Strategy {\n    public int execute(int a, int b) { return a + b; }\n}\nclass Context {\n    private Strategy strategy;\n    public Context(Strategy strategy) { this.strategy = strategy; }\n    public int executeStrategy(int a, int b) {\n        return strategy.execute(a, b);\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#pros_1","title":"\u2705 Pros:","text":"<ul> <li>Reduces conditional logic.</li> <li>Improves code flexibility and testing.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#cons_1","title":"\u26a0\ufe0f Cons:","text":"<ul> <li>Overhead of multiple classes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#command-pattern","title":"\ud83d\udd79\ufe0f Command Pattern","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#intent_2","title":"\u2705 Intent:","text":"<ul> <li>Encapsulates a request as an object, thereby allowing users to parameterize, queue, and log requests.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#use-cases_2","title":"\ud83d\udce6 Use Cases:","text":"<ul> <li>Undo/Redo operations</li> <li>Task scheduling systems</li> <li>GUI actions</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#key-concepts_2","title":"\ud83e\udde0 Key Concepts:","text":"<ul> <li>Command Interface: Declares <code>execute()</code>.</li> <li>ConcreteCommand: Implements the command.</li> <li>Invoker: Triggers the command.</li> <li>Receiver: Knows how to perform the operation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#uml-flow","title":"\ud83d\udd27 UML Flow:","text":"<ul> <li><code>Client</code> \u2192 <code>Invoker</code> \u2192 <code>Command</code> \u2192 <code>Receiver</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#pros_2","title":"\u2705 Pros:","text":"<ul> <li>Supports undo, logging, transaction systems.</li> <li>Decouples sender and receiver.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#cons_2","title":"\u26a0\ufe0f Cons:","text":"<ul> <li>Increased number of classes.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#template-method-pattern","title":"\ud83e\uddec Template Method Pattern","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#intent_3","title":"\u2705 Intent:","text":"<ul> <li>Define the skeleton of an algorithm in the superclass but let subclasses override specific steps.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#use-cases_3","title":"\ud83d\udce6 Use Cases:","text":"<ul> <li>Frameworks that require extension (e.g., test runners)</li> <li>Code generation or parsing</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#key-concepts_3","title":"\ud83e\udde0 Key Concepts:","text":"<ul> <li>Abstract Class: Implements the template method.</li> <li>Concrete Class: Implements custom steps.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#code-sketch-java_1","title":"\ud83d\udd27 Code Sketch (Java):","text":"<pre><code>abstract class DataProcessor {\n    public final void process() {\n        readData();\n        processData();\n        saveData();\n    }\n    abstract void readData();\n    abstract void processData();\n    void saveData() { System.out.println(\"Saving...\"); }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#pros_3","title":"\u2705 Pros:","text":"<ul> <li>Promotes code reuse and inversion of control.</li> <li>Easy to enforce standard behavior.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#cons_3","title":"\u26a0\ufe0f Cons:","text":"<ul> <li>Tight coupling with the base class.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-behavioral-patterns/#summary-table","title":"\ud83e\uddfe Summary Table","text":"Pattern Intent Key Participants Ideal Use Case Observer Notify dependents of state change Subject, Observer Real-time updates, Event systems Strategy Swap algorithms at runtime Context, Strategy Runtime algorithm flexibility Command Encapsulate requests as objects Command, Receiver, Invoker Undo, Logging, Task Queues Template Method Define algorithm skeleton with hook steps AbstractClass, ConcreteClass Frameworks, Reusable behavior"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/","title":"8 creational patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#creational-design-patterns-gof","title":"\ud83d\udd27 Creational Design Patterns (GoF)","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#purpose","title":"\ud83d\udccc Purpose:","text":"<p>Deal with object creation mechanisms, aiming to increase flexibility and reuse of existing code.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#1-singleton-pattern","title":"\ud83e\uddf1 1. Singleton Pattern \ud83d\udd12","text":"<ul> <li>Ensures only one instance of a class exists.</li> <li>Provides a global access point to it.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#use-case","title":"\u2705 Use Case:","text":"<ul> <li>Logging, configuration management, DB connections.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#key-concepts","title":"\ud83e\udde0 Key Concepts:","text":"<ul> <li>Private constructor</li> <li>Static instance reference</li> <li>Thread-safe lazy initialization</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#example-java","title":"\ud83d\udca1 Example (Java):","text":"<pre><code>public class Singleton {\n    private static volatile Singleton instance;\n\n    private Singleton() {}\n\n    public static Singleton getInstance() {\n        if (instance == null) {\n            synchronized (Singleton.class) {\n                if (instance == null) {\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#2-factory-pattern","title":"\ud83c\udfed 2. Factory Pattern \ud83c\udfd7\ufe0f","text":"<ul> <li>Delegates object creation to subclasses or factory classes.</li> <li>Hides the logic of instantiation from the client.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#use-case_1","title":"\u2705 Use Case:","text":"<ul> <li>When object creation involves complex logic or conditions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#key-concepts_1","title":"\ud83e\udde0 Key Concepts:","text":"<ul> <li>Abstract class/interface for product</li> <li>Factory method to decide which object to instantiate</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#example","title":"\ud83d\udca1 Example:","text":"<pre><code>interface Shape {\n    void draw();\n}\nclass Circle implements Shape { public void draw() { System.out.println(\"Circle\"); } }\nclass Square implements Shape { public void draw() { System.out.println(\"Square\"); } }\n\nclass ShapeFactory {\n    public Shape getShape(String type) {\n        return switch (type) {\n            case \"circle\" -&gt; new Circle();\n            case \"square\" -&gt; new Square();\n            default -&gt; throw new IllegalArgumentException(\"Unknown shape\");\n        };\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#3-builder-pattern","title":"\ud83e\uddf0 3. Builder Pattern \ud83c\udfd7\ufe0f\ud83d\udce6","text":"<ul> <li>Separates construction of a complex object from its representation.</li> <li>Allows step-by-step object creation.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#use-case_2","title":"\u2705 Use Case:","text":"<ul> <li>Creating objects with many optional parameters (e.g., <code>StringBuilder</code>, HTTP requests).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#key-concepts_2","title":"\ud83e\udde0 Key Concepts:","text":"<ul> <li>Immutable objects</li> <li>Avoiding constructor telescoping</li> <li>Fluent interface design</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#example_1","title":"\ud83d\udca1 Example:","text":"<pre><code>class User {\n    private final String name;\n    private final int age;\n    private final String address;\n\n    private User(Builder builder) {\n        this.name = builder.name;\n        this.age = builder.age;\n        this.address = builder.address;\n    }\n\n    static class Builder {\n        private String name;\n        private int age;\n        private String address;\n\n        Builder setName(String name) { this.name = name; return this; }\n        Builder setAge(int age) { this.age = age; return this; }\n        Builder setAddress(String address) { this.address = address; return this; }\n        User build() { return new User(this); }\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#4-prototype-pattern","title":"\ud83e\uddec 4. Prototype Pattern \ud83e\uddea","text":"<ul> <li>Creates new objects by copying existing ones (cloning).</li> <li>Avoids costly operations like <code>new</code> for complex objects.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#use-case_3","title":"\u2705 Use Case:","text":"<ul> <li>When object creation is resource-intensive (e.g., parsing config, DB load).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#key-concepts_3","title":"\ud83e\udde0 Key Concepts:","text":"<ul> <li>Implements <code>Cloneable</code> and overrides <code>clone()</code></li> <li>Deep vs shallow copy</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#example_2","title":"\ud83d\udca1 Example:","text":"<pre><code>class Document implements Cloneable {\n    String content;\n\n    public Document(String content) {\n        this.content = content;\n    }\n\n    public Document clone() {\n        return new Document(this.content);\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#comparison-table","title":"\ud83d\udcda Comparison Table","text":"Pattern Intent Key Feature Thread-Safety/Complexity Singleton One instance only Global point of access Needs synchronization Factory Create object based on input Decouples creation logic Moderate Builder Construct complex object step-by-step Immutable object creation Low Prototype Clone an object Avoids costly instantiation Depends on clone logic"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-creational-patterns/#pro-tips-for-senior-devs","title":"\ud83c\udfaf Pro Tips (For Senior Devs)","text":"<ul> <li>\ud83e\uddf5 Prefer enum Singleton in Java for serialization and thread safety.</li> <li>\ud83e\udde9 Factory is good for polymorphic behavior, not just object creation.</li> <li>\ud83e\uddf1 Combine Builder + Factory for highly configurable products.</li> <li>\ud83e\uddea Avoid using Prototype when deep copy becomes too error-prone.</li> </ul> <p>\u2705 These patterns are fundamental to writing flexible, maintainable, and testable software. Use them wisely based on the context and constraints of your project.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-structural-patterns/","title":"8 structural patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-structural-patterns/#structural-design-patterns","title":"\ud83e\uddf1 Structural Design Patterns","text":"<p>\ud83d\udccc Structural patterns focus on how classes and objects are composed to form larger structures. They ensure flexibility and efficiency in object relationships.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-structural-patterns/#adapter-pattern","title":"\ud83d\udd0c Adapter Pattern","text":"<ul> <li>\ud83d\udd04 Intent: Converts the interface of a class into another interface clients expect.</li> <li>\ud83d\udce6 Use when:<ul> <li>Existing class doesn't match the required interface.</li> <li>Need to reuse existing code without modifying it.</li> </ul> </li> <li>\ud83e\udde0 Real-world analogy: Power plug adapter for different socket types.</li> <li>\ud83d\udc68\u200d\ud83d\udcbb Implementation:</li> </ul> <pre><code>// Target Interface\ninterface MediaPlayer {\n    void play(String audioType, String fileName);\n}\n\n// Adaptee\nclass AdvancedMediaPlayer {\n    void playVlc(String fileName) {...}\n    void playMp4(String fileName) {...}\n}\n\n// Adapter\nclass MediaAdapter implements MediaPlayer {\n    AdvancedMediaPlayer advancedPlayer = new AdvancedMediaPlayer();\n    public void play(String audioType, String fileName) {\n        if(audioType.equalsIgnoreCase(\"vlc\")) advancedPlayer.playVlc(fileName);\n        else if(audioType.equalsIgnoreCase(\"mp4\")) advancedPlayer.playMp4(fileName);\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-structural-patterns/#decorator-pattern","title":"\ud83c\udfa8 Decorator Pattern","text":"<ul> <li>\ud83e\udde9 Intent: Attach additional responsibilities to an object dynamically.</li> <li>\u2705 Promotes flexible alternative to subclassing for extending functionality.</li> <li>\ud83e\udde0 Real-world analogy: Adding layers (milk, sugar) to coffee.</li> <li>\ud83d\udc68\u200d\ud83d\udcbb Implementation:</li> </ul> <pre><code>// Component\ninterface Coffee {\n    String getDescription();\n    double cost();\n}\n\n// Concrete Component\nclass SimpleCoffee implements Coffee {\n    public String getDescription() { return \"Simple Coffee\"; }\n    public double cost() { return 5.0; }\n}\n\n// Decorator\nclass MilkDecorator implements Coffee {\n    private Coffee coffee;\n    MilkDecorator(Coffee coffee) { this.coffee = coffee; }\n    public String getDescription() { return coffee.getDescription() + \", Milk\"; }\n    public double cost() { return coffee.cost() + 1.5; }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-structural-patterns/#composite-pattern","title":"\ud83c\udf33 Composite Pattern","text":"<ul> <li>\ud83e\uddf1 Intent: Compose objects into tree structures to represent part-whole hierarchies.</li> <li>\u2705 Treat individual objects and composites uniformly.</li> <li>\ud83e\udde0 Real-world analogy: File system hierarchy (files &amp; folders).</li> <li>\ud83d\udc68\u200d\ud83d\udcbb Implementation:</li> </ul> <pre><code>interface Graphic {\n    void draw();\n}\n\nclass Circle implements Graphic {\n    public void draw() { System.out.println(\"Drawing Circle\"); }\n}\n\nclass CompositeGraphic implements Graphic {\n    private List&lt;Graphic&gt; children = new ArrayList&lt;&gt;();\n    public void draw() {\n        for (Graphic g : children) g.draw();\n    }\n    public void add(Graphic g) { children.add(g); }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-structural-patterns/#proxy-pattern","title":"\ud83d\udee1\ufe0f Proxy Pattern","text":"<ul> <li>\ud83d\udd01 Intent: Provide a surrogate or placeholder for another object to control access.</li> <li>\u2705 Useful for lazy loading, access control, logging, etc.</li> <li>\ud83e\udde0 Real-world analogy: Credit card as a proxy for your bank.</li> <li>\ud83d\udc68\u200d\ud83d\udcbb Types of Proxies:<ul> <li>Virtual Proxy: Delay object creation (lazy loading).</li> <li>Protection Proxy: Control access.</li> <li>Remote Proxy: Communicate with remote objects (e.g., RMI).</li> </ul> </li> </ul> <pre><code>interface Image {\n    void display();\n}\n\nclass RealImage implements Image {\n    private String fileName;\n    public RealImage(String fileName) {\n        this.fileName = fileName;\n        loadFromDisk();\n    }\n    private void loadFromDisk() { System.out.println(\"Loading \" + fileName); }\n    public void display() { System.out.println(\"Displaying \" + fileName); }\n}\n\nclass ProxyImage implements Image {\n    private RealImage realImage;\n    private String fileName;\n    public ProxyImage(String fileName) { this.fileName = fileName; }\n    public void display() {\n        if (realImage == null) realImage = new RealImage(fileName);\n        realImage.display();\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-structural-patterns/#summary-table","title":"\ud83d\udcda Summary Table","text":"\ud83e\udde9 Pattern \ud83d\udd0d Intent \ud83d\udca1 Use-case Example Adapter Convert interface to match client expectations Media players with multiple formats Decorator Add responsibilities dynamically Adding features to UI components Composite Tree structure with uniform access File system, UI hierarchy Proxy Placeholder for access control/lazy loading Lazy-loading images, security access"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/8/8-structural-patterns/#pro-tips-for-experienced-engineers","title":"\ud83e\udde0 Pro Tips (For Experienced Engineers)","text":"<ul> <li>Prefer composition over inheritance \u2192 All four patterns reinforce this principle.</li> <li>Use Decorator with Open-Closed Principle: open for extension, closed for modification.</li> <li>Proxy can be enhanced using Dynamic Proxies / InvocationHandlers in Java for runtime flexibility.</li> <li>Combine Composite + Visitor for processing complex hierarchies (e.g., AST parsing).</li> <li>Adapter is useful in integration layers for legacy system migration.</li> </ul> <p>\u2705 Perfect for quick revision during interviews and architectural discussions!</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java11/","title":"9 java11","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java11/#java-11-key-features-for-professionals","title":"\ud83d\ude80 Java 11: Key Features for Professionals","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java11/#overview","title":"\ud83d\udd11 Overview","text":"<p>Java 11 is a Long-Term Support (LTS) release packed with performance improvements, security enhancements, and new APIs that streamline modern development practices.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java11/#var-keyword-from-java-10-widely-adopted-in-java-11","title":"\ud83c\udd95 <code>var</code> Keyword (from Java 10, widely adopted in Java 11)","text":"<ul> <li>\ud83d\udd24 Type Inference for Local Variables:<ul> <li>Allows developers to omit the type declaration when the compiler can infer it.</li> <li>Improves readability and reduces boilerplate.</li> </ul> </li> </ul> <pre><code>var list = new ArrayList&lt;String&gt;(); // inferred as ArrayList&lt;String&gt;\n</code></pre> <ul> <li> <p>\u26a0\ufe0f Constraints:</p> <ul> <li>Only usable for local variables (not fields, parameters, or return types).</li> <li>Type must be inferrable at compile-time.</li> </ul> </li> <li> <p>\ud83d\udc68\u200d\ud83d\udcbb Pro Tip (Expert Level):</p> <ul> <li>Use <code>var</code> to increase code expressiveness, but avoid it when type inference hurts readability (e.g., complex generics).</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java11/#isblank-method-on-string","title":"\ud83e\uddfc <code>isBlank()</code> Method (on <code>String</code>)","text":"<ul> <li>\u2705 Returns <code>true</code> if the string is empty or contains only whitespace.</li> </ul> <pre><code>\"  \".isBlank(); // true\n\"text\".isBlank(); // false\n</code></pre> <ul> <li>\ud83e\udde0 Replaces verbose checks like:</li> </ul> <pre><code>str == null || str.trim().isEmpty()\n</code></pre> <ul> <li>\ud83d\udee1\ufe0f Thread-safe and null-safe when used properly (note: don't call on <code>null</code>).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java11/#lines-method-on-string","title":"\ud83d\udcc4 <code>lines()</code> Method (on <code>String</code>)","text":"<ul> <li>\ud83d\udd04 Splits the string into a Stream of lines (split by <code>\\n</code>, <code>\\r\\n</code>, or <code>\\r</code>).</li> </ul> <pre><code>\"a\\nb\\nc\".lines().forEach(System.out::println);\n</code></pre> <ul> <li> <p>\ud83d\udd25 Useful for:</p> <ul> <li>Reading multi-line content from files or strings</li> <li>Functional-style processing of text data</li> </ul> </li> <li> <p>\ud83d\udccc Returns: <code>Stream&lt;String&gt;</code></p> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java11/#strip-stripleading-striptrailing","title":"\ud83e\uddf9 <code>strip()</code>, <code>stripLeading()</code>, <code>stripTrailing()</code>","text":"<ul> <li>\ud83d\ude80 Unicode-aware string trimming (unlike <code>trim()</code> which only removes ASCII spaces <code>\\u0020</code>).</li> </ul> <pre><code>\"\\u2000Hello\\u2000\".strip(); // \"Hello\"\n</code></pre> <ul> <li> <p>\ud83e\udded Variants:</p> <ul> <li><code>strip()</code> \u2192 removes leading and trailing whitespace</li> <li><code>stripLeading()</code> \u2192 removes only leading whitespace</li> <li><code>stripTrailing()</code> \u2192 removes only trailing whitespace</li> </ul> </li> <li> <p>\ud83d\udd0d Use when dealing with internationalization or multi-lingual content</p> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java11/#summary-table","title":"\ud83c\udfc1 Summary Table","text":"Feature Purpose Java Version Expert Tip \ud83c\udf1f <code>var</code> Type inference for local variables Java 10+ Improve readability, avoid overuse <code>isBlank()</code> Checks for blank (not just empty) Java 11 Cleaner than <code>trim().isEmpty()</code> <code>lines()</code> Split string into Stream of lines Java 11 Enables functional text processing <code>strip()</code> Unicode-aware trimming Java 11 Essential for i18n and modern web data <p>\u2728 Java 11 empowers developers with modern, expressive, and cleaner APIs. Embrace these changes to write concise, readable, and high-performing code in real-world enterprise environments.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java17/","title":"9 java17","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java17/#java-17-key-enhancements-for-experienced-developers","title":"\ud83d\ude80 Java 17 - Key Enhancements for Experienced Developers","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java17/#sealed-classes-jep-409","title":"\ud83d\udd12 Sealed Classes (JEP 409)","text":"<ul> <li>\u2728 Purpose: Control which classes can extend or implement a class or interface.</li> <li>\ud83d\udd10 Enhances encapsulation by restricting class hierarchies explicitly.</li> <li>\u2705 Useful in domain-driven design, compiler optimizations, and pattern matching.</li> <li>\ud83d\udccc Syntax:   <code>java   public sealed class Vehicle permits Car, Truck {}   final class Car extends Vehicle {}   non-sealed class Truck extends Vehicle {}</code></li> <li>\ud83e\udde0 Why it matters: Replaces brittle <code>instanceof</code> chains and enables safer exhaustive checks.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java17/#pattern-matching-for-instanceof-jep-394","title":"\ud83e\udde0 Pattern Matching for <code>instanceof</code> (JEP 394)","text":"<ul> <li>\ud83d\ude80 Purpose: Simplifies type casting by merging type checking and casting.</li> <li>\ud83d\udca1 Cleaner, safer, and less error-prone than traditional <code>instanceof</code> patterns.</li> <li>\ud83d\udccc Syntax:   <code>java   if (obj instanceof String s) {       System.out.println(s.toLowerCase());   }</code></li> <li>\ud83d\udee0\ufe0f Reduces boilerplate and improves readability in deeply nested code.</li> <li>\ud83d\udd0d Paired well with sealed classes for exhaustive pattern matching in switch expressions (Java 21+).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java17/#record-classes-jep-395","title":"\ud83d\udce6 Record Classes (JEP 395)","text":"<ul> <li>\ud83d\udd27 Purpose: Immutable data carriers with built-in <code>equals()</code>, <code>hashCode()</code>, <code>toString()</code>.</li> <li>\ud83e\uddf1 Useful for DTOs, config models, event objects, etc.</li> <li>\ud83d\udccc Syntax:   <code>java   public record User(String name, int age) {}</code></li> <li>\ud83d\udeab Cannot extend other classes; implicitly <code>final</code>.</li> <li>\ud83d\udd10 Fields are implicitly <code>private</code> and <code>final</code>.</li> <li>\ud83e\udde0 Deep Implication: Encourages a functional programming style and immutability by default.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java17/#summary-table","title":"\u2705 Summary Table","text":"Feature Purpose Benefits Use Cases Sealed Classes Restrict class inheritance Better encapsulation &amp; pattern safety Domain models, security Pattern Matching Simplified instanceof checks Cleaner code, fewer casts DSLs, control flow, filtering Record Classes Concise immutable data carriers Less boilerplate, thread-safe by design DTOs, config objects, events <p>\ud83e\udde0 Pro Tip for Senior Engineers:</p> <p>Combine sealed classes, record classes, and pattern matching for a modern, expressive, and safer Java architecture.</p> <pre><code>sealed interface Shape permits Circle, Rectangle {}\nrecord Circle(double radius) implements Shape {}\nrecord Rectangle(double length, double width) implements Shape {}\n\nstatic double area(Shape shape) {\n    return switch (shape) {\n        case Circle c -&gt; Math.PI * c.radius() * c.radius();\n        case Rectangle r -&gt; r.length() * r.width();\n    };\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/","title":"9 java8","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#java-8-key-features-pro-level-revision-notes","title":"\ud83d\udd25 Java 8 Key Features - Pro Level Revision Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#overview","title":"\ud83e\udde0 Overview","text":"<p>Java 8 introduced powerful functional programming capabilities, modern API enhancements, and performance improvements. It transformed Java from an OOP-only language to a hybrid of OOP + Functional.</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#1-lambdas","title":"\ud83e\udde9 1. Lambdas (\u2192)","text":"<ul> <li>\ud83d\udd39 Lambda Expressions simplify the implementation of functional interfaces.</li> <li>\ud83d\udd39 Syntax: <code>(args) -&gt; expression</code> or <code>(args) -&gt; { statements }</code></li> <li>\ud83d\udd39 Replaces anonymous classes, especially for one-method interfaces.</li> <li>\ud83d\udca1 Behind the scenes: Compiled to <code>invokedynamic</code> bytecode via <code>LambdaMetafactory</code>.</li> </ul> <pre><code>// Traditional\nRunnable r = new Runnable() {\n    public void run() {\n        System.out.println(\"Running\");\n    }\n};\n\n// Java 8 Lambda\nRunnable r = () -&gt; System.out.println(\"Running\");\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#best-practices","title":"\ud83d\udd0d Best Practices:","text":"<ul> <li>Prefer for event handling, collection iteration, and functional pipelines.</li> <li>Combine with Streams and functional interfaces like <code>Function</code>, <code>Predicate</code>, <code>Supplier</code>, <code>Consumer</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#2-streams-api","title":"\ud83c\udf0a 2. Streams API","text":"<ul> <li>\ud83d\udd39 Provides a declarative, lazy, and parallelizable way to process collections.</li> <li>\ud83d\udd39 Supports operations like <code>filter</code>, <code>map</code>, <code>reduce</code>, <code>collect</code>, etc.</li> <li>\ud83d\udd39 Encourages stateless, immutable operations.</li> </ul> <pre><code>List&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\nnames.stream()\n     .filter(name -&gt; name.startsWith(\"A\"))\n     .map(String::toUpperCase)\n     .forEach(System.out::println); // Outputs: ALICE\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#stream-types","title":"\ud83d\ude80 Stream Types:","text":"<ul> <li>Sequential Stream: <code>collection.stream()</code></li> <li>Parallel Stream: <code>collection.parallelStream()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#stream-best-practices","title":"\ud83d\udd0d Stream Best Practices:","text":"<ul> <li>Avoid stateful lambda expressions.</li> <li>Use parallel streams cautiously \u2014 assess thread-safety and data size.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#3-default-methods","title":"\ud83e\udde9 3. Default Methods","text":"<ul> <li>\ud83d\udd39 Enables method implementation in interfaces.</li> <li>\ud83d\udd39 Solves the diamond problem via compiler rules.</li> <li>\ud83d\udd39 Promotes interface evolution without breaking existing implementations.</li> </ul> <pre><code>interface Vehicle {\n    default void start() {\n        System.out.println(\"Starting vehicle\");\n    }\n}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#key-points","title":"\ud83d\udd0d Key Points:","text":"<ul> <li>Can override in implementing classes.</li> <li>Can use <code>super</code> to invoke interface default.</li> <li>Static methods in interfaces are also allowed (<code>static void utilMethod()</code>).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#4-optional","title":"\u2753 4. Optional","text":"<ul> <li>\ud83d\udd39 Container object that may or may not contain a value.</li> <li>\ud83d\udd39 Eliminates null checks and reduces NullPointerExceptions.</li> </ul> <pre><code>Optional&lt;String&gt; name = Optional.of(\"Java\");\nname.ifPresent(System.out::println);\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#common-methods","title":"\ud83d\ude80 Common Methods:","text":"<ul> <li><code>of()</code>, <code>ofNullable()</code>, <code>isPresent()</code>, <code>get()</code>, <code>orElse()</code>, <code>orElseGet()</code>, <code>map()</code>, <code>flatMap()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#best-practices_1","title":"\ud83d\udd0d Best Practices:","text":"<ul> <li>Use to return values from APIs that may be absent.</li> <li>Avoid using <code>Optional.get()</code> directly.</li> <li>Use chaining (<code>map</code>/<code>flatMap</code>) for elegant transformations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#expert-tips","title":"\ud83d\udee0\ufe0f Expert Tips","text":"<ul> <li>\ud83e\uddea Combine Lambdas + Streams for pipelined processing.</li> <li>\ud83e\udde0 Use method references (<code>ClassName::method</code>) for clean syntax.</li> <li>\ud83d\udd12 Consider thread-safety with parallel streams.</li> <li>\ud83d\udce6 <code>java.util.function</code> package is core to functional programming in Java 8.</li> <li>\ud83d\udd0d <code>Collectors.groupingBy</code>, <code>partitioningBy</code>, and custom collectors = powerful aggregation tools.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Quick-Revision/Notes/9/9-java8/#summary-table","title":"\ud83d\udccc Summary Table","text":"Feature Purpose Key Benefit Lambda Functional interface impl. Less boilerplate, cleaner syntax Stream API Declarative collection processing Lazy, efficient, chainable ops Default Methods Interface evolution Backward compatibility Optional Nullable value container Avoids null checks &amp; NPE <p>\u2705 With Java 8, you're writing more concise, testable, and parallel-ready code.</p> <p>\"Java 8 isn't just an update\u2014it's a paradigm shift in how we write and think about Java code.\" \ud83d\udca1</p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/","title":"Spring Boot","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/#table-of-contents","title":"Table of Contents","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/#shreyansh-jain-notes","title":"Shreyansh Jain Notes","text":"<ul> <li>1. Introduction</li> <li>2. Setup</li> <li>3. Maven</li> <li>4. Annotations</li> <li>5. Bean</li> <li>6. Dependency Injection</li> <li>7. Bean Scope</li> <li>8. Dynamic Bean</li> <li>9. @Profile</li> <li>8. AOP</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/#recommended-resources","title":"Recommended Resources","text":"<ul> <li>Spring Boot Notes</li> <li>Youtube </li> <li>Udemy</li> <li>Spring Boot GitHub-in28minutes</li> <li>Spring Boot in28minutes Notes</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/1.%20Introduction/","title":"1. Introduction","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/10.%20AOP/","title":"10. AOP","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/2.%20Setup/","title":"2. Setup","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/3.%20Maven/","title":"3. Maven","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/4.%20Annotations/","title":"@SpringBootApplication Annotation","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/4.%20Annotations/#definition","title":"Definition","text":"<p>A meta-annotation in Spring Boot combining three annotations: - <code>@Configuration</code> - <code>@EnableAutoConfiguration</code> - <code>@ComponentScan</code></p>"},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/4.%20Annotations/#key-functions","title":"Key Functions","text":"<ul> <li>Configures Spring Beans.</li> <li>Enables auto-configuration of the application context.</li> <li>Scans for components in the specified package and its sub-packages.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/4.%20Annotations/#features","title":"Features","text":"<ul> <li>Simplifies application setup by removing the need for multiple configuration files.</li> <li>Provides aliases for customizing attributes of:<ul> <li><code>@EnableAutoConfiguration</code></li> <li><code>@ComponentScan</code></li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/4.%20Annotations/#benefits","title":"Benefits","text":"<ul> <li>Accelerates development workflows.</li> <li>Encourages best practices through annotation-driven configuration.</li> <li>Developers can focus on coding application logic instead of boilerplate setup.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/5.%20Bean/","title":"5. Bean","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/6.%20Dependency%20Injection/","title":"6. Dependency Injection","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/7.%20Bean%20Scope/","title":"7. Bean Scope","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/8.%20Dynamic%20Bean%20Initialization/","title":"8. Dynamic Bean Initialization","text":""},{"location":"Notes/Dev-Tech-Stacks/Java/Spring-Boot/9.%20%40ConditionalOnProperty%20%26%20%40Profile/","title":"9. @ConditionalOnProperty & @Profile","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/","title":"Overview","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Core Python</li> <li>Python for Interview</li> <li>Concurrency Control</li> <li>Flask</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/","title":"Core Python","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/#quick-access-links","title":"Quick Access Links","text":"<ul> <li>Contents</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Beginners</li> <li>Intermediate 1</li> <li>Intermediate 2</li> <li>Advance</li> <li>Concurrency Control</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/#resource","title":"Resource","text":"<ul> <li>Master Python Udemy Link</li> <li>Course Code Snippet Link</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/","title":"Python Beginner Notes - Quick Revision","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#1-variables-in-python","title":"1. Variables in Python","text":"<ul> <li>Store data with a name. Example: <code>x = 5</code>, <code>name = \"Alice\"</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#2-string-manipulation","title":"2. String Manipulation","text":"<ul> <li>Use methods like <code>.upper()</code>, <code>.lower()</code>, <code>.strip()</code>, <code>.replace()</code>. Example: <code>message.upper()</code> \u2192 <code>HELLO</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#3-input-and-print-functions","title":"3. Input and Print Functions","text":"<ul> <li><code>input()</code> for user input, <code>print()</code> for output. Example: <code>name = input(\"Enter your name: \"); print(f\"Hello, {name}\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#4-variable-naming-rules","title":"4. Variable Naming Rules","text":"<ul> <li>Must start with a letter or <code>_</code>; no spaces or special characters; case-sensitive. Example: <code>_valid_name = 42</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#5-mathematical-operations-in-python","title":"5. Mathematical Operations in Python","text":"<ul> <li>Basic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code>. Example: <code>5 ** 2</code> \u2192 <code>25</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#6-data-types","title":"6. Data Types","text":"<ul> <li>Common types: <code>int</code>, <code>float</code>, <code>str</code>, <code>list</code>, <code>dict</code>, <code>bool</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#7-converting-types","title":"7. Converting Types","text":"<ul> <li>Use <code>int()</code>, <code>str()</code>, <code>float()</code>. Example: <code>age = int(\"25\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#8-conditionals-ifelifelse","title":"8. Conditionals: IF/ELIF/ELSE","text":"<ul> <li>Use for decision-making. Example:  </li> <li><code>if x &gt; 0: print(\"Positive\")</code> </li> <li><code>elif x == 0: print(\"Zero\")</code> </li> <li><code>else: print(\"Negative\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#9-logical-operators","title":"9. Logical Operators","text":"<ul> <li>Use <code>and</code>, <code>or</code>, <code>not</code>. Example: <code>if x &gt; 0 and y &gt; 0: print(\"Both are positive\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#10-randomisation","title":"10. Randomisation","text":"<ul> <li>Use the <code>random</code> module. Example: <code>import random; print(random.randint(1, 10))</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#11-error-handling","title":"11. Error Handling","text":"<ul> <li>Use <code>try</code> and <code>except</code> for managing errors. Example:  </li> <li><code>try: print(10 / 0)</code> </li> <li><code>except ZeroDivisionError: print(\"Cannot divide by zero\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#12-functions","title":"12. Functions","text":"<ul> <li>Define reusable blocks of code. Example: <code>def greet(name): return f\"Hello, {name}\"</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#13-for-loops","title":"13. For Loops","text":"<ul> <li>Iterate over sequences. Example: <code>for i in range(5): print(i)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#14-code-blocks-and-indentation","title":"14. Code Blocks and Indentation","text":"<ul> <li>Python relies on indentation to define blocks. Example: <code>if True: print(\"Indented block\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#15-while-loops","title":"15. While Loops","text":"<ul> <li>Run as long as condition is <code>True</code>. Example: <code>while x &lt; 5: x += 1</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#16-flowchart-programming","title":"16. Flowchart Programming","text":"<ul> <li>Visual representation of logic; helps in planning loops and conditions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#17-positional-and-keyword-arguments","title":"17. Positional and Keyword Arguments","text":"<ul> <li>Positional: Order matters. Keyword: Name-value pairs. Example: <code>greet(age=25, name=\"Alice\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#18-python-dictionaries-and-lists","title":"18. Python Dictionaries and Lists","text":"<ul> <li>List: Ordered, mutable. Example: <code>fruits = [\"apple\", \"banana\"]</code> </li> <li>Dict: Key-value pairs. Example: <code>data = {\"name\": \"Alice\", \"age\": 25}</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#19-nested-collections","title":"19. Nested Collections","text":"<ul> <li>Collections inside collections. Example: <code>data = {\"users\": [{\"name\": \"Alice\"}, {\"name\": \"Bob\"}]}</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#20-returning-functions","title":"20. Returning Functions","text":"<ul> <li>Functions can return values. Example: <code>def add(a, b): return a + b</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#21-return-vs-print","title":"21. Return vs. Print","text":"<ul> <li>Return: Gives a value back.  </li> <li>Print: Displays output.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#22-doc-strings-vs-comments","title":"22. Doc Strings vs. Comments","text":"<ul> <li>Doc Strings: Describe function behavior; enclosed in <code>\"\"\"</code>.  </li> <li>Comments: Inline explanations using <code>#</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#23-scope-and-localglobal-variables","title":"23. Scope and Local/Global Variables","text":"<ul> <li>Local: Inside a function. Global: Declared outside functions. Example:  </li> <li><code>x = 10</code> </li> <li><code>def func(): global x; x = 20</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/1.%20Basic-Python/#24-debugging-techniques","title":"24. Debugging Techniques","text":"<ul> <li>Use <code>print()</code> or tools like <code>pdb</code>. Example with <code>pdb</code>: <code>import pdb; pdb.set_trace()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/","title":"Intermediate Python Notes - Quick Revision","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#1-local-development-environment-setup","title":"1. Local Development Environment Setup","text":"<ul> <li>Install Python, IDEs (PyCharm/VSCode), and manage dependencies with <code>pip</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#2-pycharm-tips-and-tricks","title":"2. PyCharm Tips and Tricks","text":"<ul> <li>Use debugging tools, code inspections, and shortcuts like <code>Ctrl+D</code> (duplicate line).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#3-python-object-oriented-programming-oop","title":"3. Python Object-Oriented Programming (OOP)","text":"<ul> <li>Core principles: Encapsulation, Inheritance, Polymorphism, Abstraction.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#4-creating-classes-in-python","title":"4. Creating Classes in Python","text":"<ul> <li>Use <code>class</code> keyword. Example:  </li> </ul> <pre><code>class Person: \n   def __init__(self, name):\n     self.name = name\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#5-using-external-python-modulesimport","title":"5. Using External Python Modules/Import","text":"<ul> <li>Use <code>import</code> or <code>from ... import</code>. Example: <code>import math; print(math.sqrt(16))</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#6-gettingsetting-attributes","title":"6. Getting/Setting Attributes","text":"<ul> <li>Access or modify object properties using <code>self.attribute</code>. Example: <code>obj.name = \"Alice\"</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#7-python-methods","title":"7. Python Methods","text":"<ul> <li>Functions defined inside a class. Example: <code>class Dog: def bark(self): return \"Woof\"</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#8-class-initializers","title":"8. Class Initializers","text":"<ul> <li>Use <code>__init__</code> for initializing object attributes. Example: <code>class Car: def __init__(self, brand): self.brand = brand</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#9-module-aliasing","title":"9. Module Aliasing","text":"<ul> <li>Shorten module names using <code>as</code>. Example: <code>import numpy as np</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#10-optional-required-and-default-parameters","title":"10. Optional, Required, and Default Parameters","text":"<ul> <li>Example: <code>def greet(name, age=25): return f\"{name} is {age} years old\"</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#11-event-listeners","title":"11. Event Listeners","text":"<ul> <li>Use libraries like <code>pygame</code> to listen to events. Example: <code>if event.type == pygame.KEYDOWN: print(\"Key pressed\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#12-python-instances-and-state","title":"12. Python Instances and State","text":"<ul> <li>Instances store unique data in object attributes. Example: <code>p1 = Person(\"Alice\"); p2 = Person(\"Bob\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#13-python-turtle","title":"13. Python Turtle","text":"<ul> <li>Graphics with <code>turtle</code> module. Example: <code>import turtle; t = turtle.Turtle(); t.forward(100)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#14-game-development-with-python-and-oop","title":"14. Game Development with Python and OOP","text":"<ul> <li>Use <code>pygame</code> for games. Example: <code>import pygame; pygame.init(); screen = pygame.display.set_mode((400, 300))</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#15-python-inheritance","title":"15. Python Inheritance","text":"<ul> <li>Extend a base class. Example: <code>class Dog(Animal): pass</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#16-python-slice-function","title":"16. Python Slice Function","text":"<ul> <li>Extract sequences with slicing. Example: <code>list = [1, 2, 3, 4]; print(list[1:3])</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#17-file-io-readingwriting-local-files","title":"17. File I/O (Reading/Writing Local Files)","text":"<ul> <li>Example: <code>with open('file.txt', 'w') as f: f.write('Hello')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#18-file-directories","title":"18. File Directories","text":"<ul> <li>Use <code>os</code> module to manage directories. Example: <code>import os; os.mkdir('new_folder')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#19-readingwriting-to-csv","title":"19. Reading/Writing to CSV","text":"<ul> <li>Example: <code>import csv; with open('file.csv') as f: reader = csv.reader(f); for row in reader: print(row)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#20-introduction-to-the-pandas-framework","title":"20. Introduction to the Pandas Framework","text":"<ul> <li>Data manipulation library. Example: <code>import pandas as pd; df = pd.read_csv('file.csv'); print(df.head())</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#21-list-comprehensions","title":"21. List Comprehensions","text":"<ul> <li>Compact list creation. Example: <code>[x**2 for x in range(5)]</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#22-dictionary-comprehensions","title":"22. Dictionary Comprehensions","text":"<ul> <li>Example: <code>{x: x**2 for x in range(5)}</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#23-packingunpacking-functions-in-python","title":"23. Packing/Unpacking Functions in Python","text":"<ul> <li>Use <code>*</code> and <code>**</code>. Example: <code>def add(*args): return sum(args); print(add(1, 2, 3))</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#24-creating-desktop-gui-apps-with-tkinter","title":"24. Creating Desktop GUI Apps with Tkinter","text":"<ul> <li>Example: <code>import tkinter as tk; root = tk.Tk(); root.mainloop()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#25-strongly-dynamic-typing","title":"25. Strongly Dynamic Typing","text":"<ul> <li>Python determines type at runtime but enforces type constraints.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#26-error-handling-and-exceptions","title":"26. Error Handling and Exceptions","text":"<ul> <li>Handle errors with <code>try</code> and <code>except</code>. Example: <code>try: x = 1 / 0 except ZeroDivisionError: print(\"Error!\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#27-tryexceptraise","title":"27. Try/Except/Raise","text":"<ul> <li>Use <code>raise</code> to trigger exceptions. Example: <code>if x &lt; 0: raise ValueError(\"Negative value!\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#28-working-with-jsons","title":"28. Working with JSONs","text":"<ul> <li>Example: <code>import json; data = json.loads('{\"key\": \"value\"}'); print(data)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#29-local-persistence","title":"29. Local Persistence","text":"<ul> <li>Save data locally with <code>pickle</code> or databases.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#30-sending-email-with-python-and-smtp","title":"30. Sending Email with Python and SMTP","text":"<ul> <li>Example: <code>import smtplib; server = smtplib.SMTP('smtp.example.com', 587); server.sendmail(from_addr, to_addr, message)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#31-working-with-date-and-time","title":"31. Working with Date and Time","text":"<ul> <li>Use <code>datetime</code> module. Example: <code>from datetime import datetime; print(datetime.now())</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/2.Intermediate-1/#32-hosting-python-code-online-with-pythonanywhere","title":"32. Hosting Python Code Online with PythonAnywhere","text":"<ul> <li>Deploy code on platforms like PythonAnywhere for web hosting.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/","title":"APIs and Automation Notes - Quick Revision","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#1-making-http-requests-with-the-requests-module","title":"1. Making HTTP Requests with the Requests Module","text":"<ul> <li>Use <code>requests.get()</code> or <code>requests.post()</code>. Example: <code>import requests; response = requests.get('https://api.example.com'); print(response.json())</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#2-sending-parameters-with-the-request","title":"2. Sending Parameters with the Request","text":"<ul> <li>Add parameters using <code>params</code> argument. Example: <code>requests.get('https://api.example.com', params={'key': 'value'})</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#3-apis-with-authentication","title":"3. APIs with Authentication","text":"<ul> <li>Use headers for API tokens. Example: <code>requests.get('https://api.example.com', headers={'Authorization': 'Bearer token'})</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#4-sending-sms-with-python","title":"4. Sending SMS with Python","text":"<ul> <li>Use services like Twilio. Example: <code>from twilio.rest import Client; client = Client(account_sid, auth_token); client.messages.create(body='Hello', from_='+1234567890', to='+0987654321')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#5-web-scraping-with-beautiful-soup","title":"5. Web Scraping with Beautiful Soup","text":"<ul> <li>Parse HTML with <code>BeautifulSoup</code>. Example: <code>from bs4 import BeautifulSoup; soup = BeautifulSoup(html, 'html.parser'); print(soup.title.text)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#6-browser-automation-with-selenium-web-driver","title":"6. Browser Automation with Selenium Web Driver","text":"<ul> <li>Example: <code>from selenium import webdriver; driver = webdriver.Chrome(); driver.get('https://example.com')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#7-automating-tinder","title":"7. Automating Tinder","text":"<ul> <li>Use Selenium for interactions. Example: <code>driver.find_element_by_xpath('//button[text()=\"Like\"]').click()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#8-automating-twitter","title":"8. Automating Twitter","text":"<ul> <li>Automate login and tweets. Example: <code>driver.find_element_by_name('session[username_or_email]').send_keys('username')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#9-automating-linkedin","title":"9. Automating LinkedIn","text":"<ul> <li>Automate connections. Example: <code>driver.find_element_by_xpath('//button[text()=\"Connect\"]').click()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#10-automating-instagram","title":"10. Automating Instagram","text":"<ul> <li>Automate likes or comments. Example: <code>driver.find_element_by_css_selector('.like_button').click()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#11-web-development-with-flask","title":"11. Web Development with Flask","text":"<ul> <li>Example: <code>from flask import Flask; app = Flask(__name__); @app.route('/'); def home(): return \"Hello, Flask!\"</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#12-command-line","title":"12. Command Line","text":"<ul> <li>Use <code>argparse</code> for arguments. Example: <code>import argparse; parser = argparse.ArgumentParser(); parser.add_argument('--name'); args = parser.parse_args(); print(args.name)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#13-python-decorators","title":"13. Python Decorators","text":"<ul> <li>Example: <code>def decorator(func): def wrapper(): print(\"Before\"); func(); print(\"After\"); return wrapper; @decorator; def greet(): print(\"Hello!\")</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#14-templating-with-jinja-2","title":"14. Templating with Jinja 2","text":"<ul> <li>Example: <code>from jinja2 import Template; template = Template('Hello, {{ name }}!'); print(template.render(name='World'))</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/3.Intermediate-2/#15-wtforms","title":"15. WTForms","text":"<ul> <li>Example: <code>from flask_wtf import FlaskForm; from wtforms import StringField; class MyForm(FlaskForm): name = StringField('Name')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/","title":"Advanced Python Notes - Quick Revision","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#1-build-your-own-rest-api-with-python","title":"1. Build Your Own REST API with Python","text":"<ul> <li>Example: <code>from flask import Flask, jsonify; app = Flask(__name__); @app.route('/api', methods=['GET']); def api(): return jsonify({'message': 'Hello, World!'})</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#2-build-your-own-blog","title":"2. Build Your Own Blog","text":"<ul> <li>Use Flask or Django. Example: <code>from flask import Flask; app = Flask(__name__); @app.route('/'); def home(): return \"Welcome to My Blog!\"</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#3-databases-with-sqlite","title":"3. Databases with SQLite","text":"<ul> <li>Example: <code>import sqlite3; conn = sqlite3.connect('example.db'); cursor = conn.cursor(); cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#4-dataframe-inspection","title":"4. Dataframe Inspection","text":"<ul> <li>Example: <code>import pandas as pd; df = pd.DataFrame(data); print(df.head())</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#5-data-cleaning","title":"5. Data Cleaning","text":"<ul> <li>Example: <code>df['column'] = df['column'].fillna(0)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#6-sorting-values-in-dataframes","title":"6. Sorting Values in Dataframes","text":"<ul> <li>Example: <code>df = df.sort_values(by='column')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#7-arithmetic-operations-with-pandas","title":"7. Arithmetic Operations with Pandas","text":"<ul> <li>Example: <code>df['sum'] = df['col1'] + df['col2']</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#8-creating-pivot-tables","title":"8. Creating Pivot Tables","text":"<ul> <li>Example: <code>pivot = df.pivot_table(values='sales', index='region', columns='month', aggfunc='sum')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#9-chaining-functions","title":"9. Chaining Functions","text":"<ul> <li>Example: <code>df = df.dropna().sort_values(by='column').reset_index(drop=True)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#10-smoothing-time-series-data","title":"10. Smoothing Time Series Data","text":"<ul> <li>Example: <code>df['smoothed'] = df['column'].rolling(window=3).mean()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#11-creating-line-charts-with-matplotlib","title":"11. Creating Line Charts with Matplotlib","text":"<ul> <li>Example: <code>import matplotlib.pyplot as plt; plt.plot(x, y); plt.show()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#12-using-jupyter-notebook","title":"12. Using Jupyter Notebook","text":"<ul> <li>Use <code>%matplotlib inline</code> for inline plotting.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#13-html-markdown","title":"13. HTML Markdown","text":"<ul> <li>Example: <code>**Bold** for bold text; *Italic* for italics.</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#14-creating-scatterplots-with-matplotlib","title":"14. Creating Scatterplots with Matplotlib","text":"<ul> <li>Example: <code>plt.scatter(x, y); plt.show()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#15-relational-database-schemas","title":"15. Relational Database Schemas","text":"<ul> <li>Define tables and relationships with primary/foreign keys.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#16-descriptive-statistics","title":"16. Descriptive Statistics","text":"<ul> <li>Example: <code>df.describe()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#17-creating-charts-with-plotly","title":"17. Creating Charts with Plotly","text":"<ul> <li>Example: <code>import plotly.express as px; fig = px.bar(df, x='x', y='y'); fig.show()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#18-creating-numpy-ndarrays","title":"18. Creating NumPy NDArrays","text":"<ul> <li>Example: <code>import numpy as np; arr = np.array([1, 2, 3])</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#19-array-slicing-and-subsetting","title":"19. Array Slicing and Subsetting","text":"<ul> <li>Example: <code>arr[1:3]</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#20-matrix-multiplication","title":"20. Matrix Multiplication","text":"<ul> <li>Example: <code>np.dot(matrix1, matrix2)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#21-bitwise-and-operators-in-pandas","title":"21. Bitwise and Operators in Pandas","text":"<ul> <li>Example: <code>df[(df['col1'] &gt; 0) &amp; (df['col2'] &lt; 5)]</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#22-creating-bubble-charts-with-seaborn","title":"22. Creating Bubble Charts with Seaborn","text":"<ul> <li>Example: <code>import seaborn as sns; sns.scatterplot(data=df, x='x', y='y', size='size')</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#23-running-regressions-with-scikit-learn","title":"23. Running Regressions with Scikit-Learn","text":"<ul> <li>Example: <code>from sklearn.linear_model import LinearRegression; model = LinearRegression(); model.fit(X, y)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#24-non-parametric-regression","title":"24. Non-Parametric Regression","text":"<ul> <li>Use libraries like <code>statsmodels</code> or <code>sklearn</code>.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#25-students-t-tests-and-histograms-with-scikit-learn","title":"25. Students T-Tests and Histograms with Scikit-Learn","text":"<ul> <li>Example: <code>from scipy.stats import ttest_ind; ttest_ind(group1, group2)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#26-multi-variable-regression","title":"26. Multi-Variable Regression","text":"<ul> <li>Example: <code>from sklearn.linear_model import LinearRegression; model = LinearRegression(); model.fit(X, y)</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#27-log-transformations","title":"27. Log Transformations","text":"<ul> <li>Example: <code>import numpy as np; df['log_column'] = np.log(df['column'])</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Core-Python/4.Advance/#28-residuals-analysis","title":"28. Residuals Analysis","text":"<ul> <li>Example: <code>residuals = y - model.predict(X); plt.hist(residuals); plt.show()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Flask/","title":"Flask Framework","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Flask/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Flask</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/","title":"\ud83d\udccc Python Mastery \u2013 From Backend Engineer to Software Architect \ud83d\ude80","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#table-of-contents","title":"\ud83d\udcd6 Table of Contents","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#1-core-python-from-beginner-to-expert","title":"1\ufe0f\u20e3 Core Python \u2013 From Beginner to Expert \ud83d\udc0d","text":"<ul> <li>Python Fundamentals</li> <li>Object-Oriented Programming (OOP)</li> <li>Functional Programming</li> <li>Advanced Data Structures &amp; Algorithms</li> <li>Python Best Practices &amp; Design Patterns</li> <li>Performance Optimization &amp; Memory Management</li> <li>Testing &amp; Debugging</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#2-ai-machine-learning-must-know-concepts-libraries","title":"2\ufe0f\u20e3 AI &amp; Machine Learning \u2013 Must-Know Concepts &amp; Libraries \ud83e\udde0","text":"<ul> <li>Introduction to AI &amp; ML</li> <li>Key Libraries: TensorFlow, PyTorch, Scikit-Learn</li> <li>Deep Learning &amp; Neural Networks</li> <li>NLP &amp; Computer Vision</li> <li>Model Deployment &amp; Optimization</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#3-data-science-big-data-key-frameworks-tools-and-use-cases","title":"3\ufe0f\u20e3 Data Science &amp; Big Data \u2013 Key Frameworks, Tools, and Use Cases \ud83d\udcca","text":"<ul> <li>Data Processing with Pandas &amp; NumPy</li> <li>Data Visualization (Matplotlib, Seaborn, Plotly)</li> <li>Big Data Processing (Spark, Dask, Hadoop)</li> <li>Databases &amp; ORM (SQLAlchemy, PostgreSQL, MongoDB)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#4-cloud-devops-python-for-cloud-automation-cicd-and-orchestration","title":"4\ufe0f\u20e3 Cloud &amp; DevOps \u2013 Python for Cloud Automation, CI/CD, and Orchestration \u2601\ufe0f","text":"<ul> <li>Cloud SDKs (AWS Boto3, Google Cloud, Azure SDK)</li> <li>Infrastructure as Code (Terraform, Ansible)</li> <li>CI/CD Pipelines (Jenkins, GitHub Actions, GitLab CI/CD)</li> <li>Docker &amp; Kubernetes with Python</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#5-cybersecurity-ethical-hacking-python-in-security-scripting-and-pentesting","title":"5\ufe0f\u20e3 Cybersecurity &amp; Ethical Hacking \u2013 Python in Security, Scripting, and Pentesting \ud83d\udd10","text":"<ul> <li>Network Security &amp; Packet Sniffing</li> <li>Web Security (SQL Injection, XSS, CSRF Protection)</li> <li>Cryptography (PyCrypto, hashlib, JWT)</li> <li>Ethical Hacking &amp; Forensics</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#6-backend-microservices-development-frameworks-apis-and-scaling-strategies","title":"6\ufe0f\u20e3 Backend &amp; Microservices Development \u2013 Frameworks, APIs, and Scaling Strategies \ud83d\udd17","text":"<ul> <li>Web Frameworks (Flask, Django, FastAPI)</li> <li>RESTful &amp; GraphQL APIs</li> <li>Authentication &amp; Authorization (JWT, OAuth, SSO)</li> <li>Caching &amp; Performance Optimization (Redis, Celery, Async Programming)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#7-blockchain-web3-python-in-blockchain-development-smart-contracts","title":"7\ufe0f\u20e3 Blockchain &amp; Web3 \u2013 Python in Blockchain Development &amp; Smart Contracts \u26d3\ufe0f","text":"<ul> <li>Blockchain Fundamentals</li> <li>Smart Contracts with Python</li> <li>Web3.py &amp; Interacting with Ethereum</li> <li>Building DApps with Python</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#8-embedded-systems-iot-python-for-iot-devices-raspberry-pi-and-automation","title":"8\ufe0f\u20e3 Embedded Systems &amp; IoT \u2013 Python for IoT Devices, Raspberry Pi, and Automation \ud83d\udce1","text":"<ul> <li>MicroPython &amp; CircuitPython</li> <li>IoT Protocols (MQTT, CoAP)</li> <li>Raspberry Pi &amp; Arduino Automation</li> <li>Real-Time Data Processing &amp; Edge Computing</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-All/#9-quantum-computing-pythons-role-in-quantum-programming-and-simulations","title":"9\ufe0f\u20e3 Quantum Computing \u2013 Python\u2019s Role in Quantum Programming and Simulations \u269b\ufe0f","text":"<ul> <li>Introduction to Quantum Computing</li> <li>Quantum Libraries (Qiskit, Cirq, Pennylane)</li> <li>Quantum Algorithms &amp; Simulations</li> <li>Real-World Quantum Applications</li> </ul> <p>\ud83d\udca1 Next Steps: Choose a topic to begin your Python mastery journey! \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/","title":"Python Interview Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Sorting</li> <li>Pythonic Code - Python's unique features</li> <li>Lists</li> <li>Stacks &amp; Queues</li> <li>2D Lists</li> <li>Hashmaps &amp; Hashsets</li> <li>Heaps / Priority Queues</li> <li>Sorted Dicts &amp; Sorted Sets</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/","title":"\ud83d\udccc Python Sorting: A Complete Guide","text":"<p>(Comprehensive guide for Python sorting methods. \ud83c\udfaf Focus: Implementation details and practical usage)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Sorting</li> <li>Method Parameters</li> <li>Custom Sorting</li> <li>Sorted Function</li> <li>Implementation Notes</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#basic-sorting","title":"\ud83d\udd04 Basic Sorting","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#sort-method","title":"\ud83d\udcdd .sort() Method","text":"<ul> <li>\u2728 Basic Usage:     <code>python     elements = [5, 3, 6, 2, 1]     elements.sort()  # [1, 2, 3, 5, 6]</code></li> <li>\ud83d\udd11 Key Features:<ul> <li>Modifies list in-place</li> <li>Returns <code>None</code></li> <li>Default ascending order</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#string-sorting","title":"\ud83d\udd24 String Sorting","text":"<pre><code>words = [\"grape\", \"apple\", \"banana\", \"orange\"]\nwords.sort()  # ['apple', 'banana', 'grape', 'orange']\n</code></pre> <ul> <li>\u26a1 Uses lexicographical order</li> <li>Case-sensitive by default</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#method-parameters","title":"\u2699\ufe0f Method Parameters","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#function-signature","title":"\ud83d\udd27 Function Signature","text":"<pre><code>def sort(key=None, reverse=False) -&gt; None\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#reverse-sorting","title":"\ud83d\udd04 Reverse Sorting","text":"<ul> <li>\ud83d\udcdd Using reverse parameter:     <code>python     elements = [5, 3, 6, 2, 1]     elements.sort(reverse=True)  # [6, 5, 3, 2, 1]</code></li> <li>\ud83d\udd04 Alternative approach:     <code>python     elements.sort()     elements.reverse()</code></li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#custom-sorting","title":"\ud83c\udfaf Custom Sorting","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#using-functions","title":"\ud83d\udd11 Using Functions","text":"<pre><code>def get_word_length(word: str) -&gt; int:\n    return len(word)\n\nwords = [\"apple\", \"banana\", \"kiwi\"]\nwords.sort(key=get_word_length)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#lambda-functions","title":"\u03bb Lambda Functions","text":"<pre><code># Sort by length\nwords.sort(key=lambda word: len(word))\n\n# Sort by last character\nwords.sort(key=lambda x: x[-1])\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#sorted-function","title":"\ud83c\udd95 Sorted Function","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#basic-usage","title":"\ud83d\udcdd Basic Usage","text":"<pre><code># Creates new sorted list\noriginal = [3, 1, 4]\nnew_list = sorted(original)  # original unchanged\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#advanced-usage","title":"\ud83d\udd27 Advanced Usage","text":"<pre><code># With reverse\nsorted(numbers, reverse=True)\n\n# With key function\nsorted(numbers, key=abs)  # Sort by absolute value\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#implementation-notes","title":"\ud83d\udca1 Implementation Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#key-differences","title":"\ud83d\udd0d Key Differences","text":"<ul> <li><code>.sort()</code>:<ul> <li>In-place modification</li> <li>List method only</li> <li>Returns None</li> </ul> </li> <li><code>sorted()</code>:<ul> <li>Creates new list</li> <li>Works with any iterable</li> <li>Returns sorted list</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"<pre><code># WRONG \u274c\nsorted_list = list.sort()  # Returns None!\n\n# CORRECT \u2705\nlist.sort()\n# OR\nsorted_list = sorted(list)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.%20Sorting/#quick-reference","title":"\ud83d\ude80 Quick Reference","text":"<pre><code># Basic sorting\nlist.sort()                    # In-place, ascending\nsorted(list)                   # New list, ascending\n\n# Reverse sorting\nlist.sort(reverse=True)        # In-place, descending\nsorted(list, reverse=True)     # New list, descending\n\n# Custom sorting\nlist.sort(key=len)            # By length\nlist.sort(key=lambda x: x[1])  # By second element\n</code></pre> <p>\ud83c\udfaf Key Takeaway: Choose <code>.sort()</code> for in-place modification and <code>sorted()</code> when you need to preserve the original list or work with other iterables.</p> <ul> <li>Advance Sorting 1</li> <li>Advance Sorting 2</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/","title":"\ud83d\udccc Python Sorting: LeetCode Hard Problem Patterns","text":"<p>(Advanced sorting techniques for solving complex problems. \ud83c\udfaf Focus: Interview patterns)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Custom Sort Transformations</li> <li>Multi-Key Sorting</li> <li>Object Sorting</li> <li>Bucket Sort Pattern</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#custom-sort-transformations","title":"\ud83c\udfaf Custom Sort Transformations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#1-sort-by-calculated-value","title":"1\ufe0f\u20e3 Sort by Calculated Value","text":"<pre><code># Example: Sort numbers by their square value difference\n# LeetCode similar: \"Minimum Distance Between Sorted Numbers\"\nnums = [5, -2, 3, -4, 1]\nsorted_nums = sorted(nums, key=lambda x: x*x)  # Sort by square value\n# [-2, 1, 3, -4, 5]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#2-sort-with-custom-comparison","title":"2\ufe0f\u20e3 Sort with Custom Comparison","text":"<pre><code># Example: Sort strings by custom order\n# LeetCode similar: \"Custom Sort String\"\norder = \"cba\"\nwords = [\"apple\", \"banana\", \"cherry\"]\nsorted_words = sorted(words, key=lambda x: [order.index(c) if c in order else len(order) for c in x])\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#multi-key-sorting","title":"\ud83d\udd04 Multi-Key Sorting","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#1-tuple-based-sorting","title":"1\ufe0f\u20e3 Tuple-based Sorting","text":"<pre><code># Example: Sort intervals by start, then end\n# LeetCode similar: \"Merge Intervals\"\nintervals = [[1,3], [2,6], [8,10], [15,18]]\nintervals.sort(key=lambda x: (x[0], x[1]))\n\n# Sort logs with multiple conditions\n# LeetCode similar: \"Reorder Data in Log Files\"\nlogs = [\"dig1 8 1 5 1\", \"let1 art can\", \"dig2 3 6\", \"let2 own kit dig\", \"let3 art zero\"]\nlogs.sort(key=lambda x: (0 if x.split()[1].isalpha() else 1,  # letters before digits\n                        ' '.join(x.split()[1:]) if x.split()[1].isalpha() else None,  # content\n                        x.split()[0] if x.split()[1].isalpha() else None))  # identifier\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#object-sorting","title":"\ud83c\udfb2 Object Sorting","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#1-custom-class-sorting","title":"1\ufe0f\u20e3 Custom Class Sorting","text":"<pre><code># Example: Sort meetings by complexity\n# LeetCode similar: \"Meeting Rooms III\"\nclass Meeting:\n    def __init__(self, start, end, complexity):\n        self.start = start\n        self.end = end\n        self.complexity = complexity\n\nmeetings = [Meeting(1, 3, 2), Meeting(2, 4, 1), Meeting(3, 5, 3)]\nmeetings.sort(key=lambda x: (x.complexity, x.start, x.end))\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#bucket-sort-pattern","title":"\ud83d\udcca Bucket Sort Pattern","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#1-frequency-sort","title":"1\ufe0f\u20e3 Frequency Sort","text":"<pre><code># Example: Sort characters by frequency\n# LeetCode similar: \"Sort Characters By Frequency\"\nfrom collections import Counter\n\ndef frequencySort(s: str) -&gt; str:\n    # Count frequencies\n    freq = Counter(s)\n    # Sort characters by frequency, then by character value\n    return ''.join(sorted(s, key=lambda x: (-freq[x], x)))\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#2-custom-bucket-sort","title":"2\ufe0f\u20e3 Custom Bucket Sort","text":"<pre><code># Example: Group numbers by their range\n# LeetCode similar: \"Maximum Gap\"\ndef bucketSort(nums):\n    if not nums:\n        return []\n\n    # Create buckets\n    min_val, max_val = min(nums), max(nums)\n    bucket_size = max(1, (max_val - min_val) // (len(nums) - 1))\n    buckets = [[] for _ in range((max_val - min_val) // bucket_size + 1)]\n\n    # Distribute numbers\n    for num in nums:\n        if num == max_val:\n            bucket_idx = len(buckets) - 1\n        else:\n            bucket_idx = (num - min_val) // bucket_size\n        buckets[bucket_idx].append(num)\n\n    # Sort individual buckets\n    result = []\n    for bucket in buckets:\n        if bucket:\n            bucket.sort()\n            result.extend(bucket)\n\n    return result\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#advanced-techniques","title":"\ud83d\ude80 Advanced Techniques","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#1-priority-queue-pattern","title":"1\ufe0f\u20e3 Priority Queue Pattern","text":"<pre><code># Example: K-way merge with heap\n# LeetCode similar: \"Merge k Sorted Lists\"\nimport heapq\n\ndef mergeKLists(lists):\n    heap = []\n    # Initialize heap with first elements\n    for i, lst in enumerate(lists):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))  # (value, list_index, element_index)\n\n    result = []\n    while heap:\n        val, list_idx, elem_idx = heapq.heappop(heap)\n        result.append(val)\n        # Push next element from same list\n        if elem_idx + 1 &lt; len(lists[list_idx]):\n            heapq.heappush(heap, (lists[list_idx][elem_idx + 1], list_idx, elem_idx + 1))\n\n    return result\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.1%20Sorting%20Advance/#interview-tips","title":"\ud83c\udfaf Interview Tips","text":"<ol> <li>Always consider time/space complexity</li> <li>Look for opportunities to use custom sort keys</li> <li>Consider using tuples for multi-criteria sorting</li> <li>Remember built-in functions like <code>sorted()</code> and <code>heapq</code></li> </ol> <p>\ud83d\ude80 Key Pattern Applications: - Multi-dimensional sorting \u2192 Use tuple as key - Frequency-based sorting \u2192 Use Counter + custom key - Complex object sorting \u2192 Create custom comparison - Large range numbers \u2192 Consider bucket sort - K-way merging \u2192 Use heap (priority queue)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/","title":"\ud83d\udccc Python Sorting: A Complete Guide","text":"<p>(Essential guide for coding interviews. \ud83c\udfaf Focus: Implementation patterns for algorithmic problems)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Sorting</li> <li>Interview Patterns</li> <li>Custom Sorting</li> <li>Sorted Function</li> <li>Interview Tips</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#basic-sorting","title":"\ud83d\udd04 Basic Sorting","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#sort-method","title":"\ud83d\udcdd .sort() Method","text":"<ul> <li>\u2728 Key Features:     <code>python     nums = [5, 3, 6, 2, 1]     nums.sort()  # [1, 2, 3, 5, 6]</code><ul> <li>Time Complexity: O(n log n)</li> <li>Space Complexity: O(1)</li> <li>Modifies original list</li> <li>Returns None</li> </ul> </li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#string-sorting","title":"\ud83d\udd24 String Sorting","text":"<pre><code># Interview Tip: Often used in anagram problems\nwords = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\nwords.sort()  # ['ate', 'bat', 'eat', 'nat', 'tan', 'tea']\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#interview-patterns","title":"\ud83c\udfaf Interview Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#frequency-sort-pattern","title":"\ud83d\udcca Frequency Sort Pattern","text":"<pre><code># Common in Top K Frequent Elements\nfrom collections import Counter\n\ndef frequencySort(nums):\n    # Count frequencies\n    count = Counter(nums)\n    # Sort by frequency, then by value\n    return sorted(nums, key=lambda x: (-count[x], x))\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#custom-interval-sort","title":"\ud83d\udd0d Custom Interval Sort","text":"<pre><code># Common in Merge Intervals problems\nintervals = [[1,3], [2,6], [8,10]]\nintervals.sort(key=lambda x: x[0])  # Sort by start time\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#priority-based-sort","title":"\ud83d\udcc8 Priority-based Sort","text":"<pre><code># Common in Task Scheduler problems\ntasks = ['A', 'A', 'B', 'B', 'C']\ntask_counts = Counter(tasks)\nsorted_tasks = sorted(task_counts.items(), key=lambda x: (-x[1], x[0]))\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#custom-sorting","title":"\ud83c\udfaf Custom Sorting","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#common-interview-patterns","title":"\ud83d\udd11 Common Interview Patterns","text":"<pre><code># Sort matrix by row sum\nmatrix = [[1,2], [3,1], [2,5]]\nmatrix.sort(key=sum)\n\n# Sort strings by custom order\norder = \"cba\"\nwords = [\"apple\", \"banana\"]\nwords.sort(key=lambda x: [order.index(c) for c in x])\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#advanced-lambda-patterns","title":"\u03bb Advanced Lambda Patterns","text":"<pre><code># Multiple criteria sort\npeople = [(\"John\", 25), (\"Jane\", 25), (\"Bob\", 20)]\npeople.sort(key=lambda x: (x[1], x[0]))  # Sort by age, then name\n\n# Custom comparison\nnums = [-4, -1, 0, 3, 10]\nnums.sort(key=lambda x: (abs(x), x))  # Sort by absolute value\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#interview-tips","title":"\ud83c\udd95 Interview Tips","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#time-space-trade-offs","title":"\ud83d\udcdd Time-Space Trade-offs","text":"<pre><code># Space-efficient approach\nnums.sort()  # O(1) space\n\n# Time-efficient approach (when need original)\nsorted_nums = sorted(nums)  # O(n) space\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#quick-interview-solutions","title":"\ud83d\udd27 Quick Interview Solutions","text":"<pre><code># K closest points to origin\npoints.sort(key=lambda p: p[0]**2 + p[1]**2)\nreturn points[:k]\n\n# Merge K sorted arrays\nfrom heapq import merge\nresult = list(merge(*sorted_arrays))\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#implementation-notes","title":"\ud83d\udca1 Implementation Notes","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#common-interview-tricks","title":"\ud83d\ude80 Common Interview Tricks","text":"<pre><code># Sort in reverse for efficiency\nnums.sort(reverse=True)  # Better than sorting and reversing\n\n# Custom comparison for strings\nwords.sort(key=str.lower)  # Case-insensitive sort\n\n# Sort with multiple conditions\nstudents.sort(key=lambda x: (-x[0], x[1]))  # Grade DESC, name ASC\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#interview-gotchas","title":"\u26a0\ufe0f Interview Gotchas","text":"<ul> <li>Always check if input is None/empty</li> <li>Consider stability requirements</li> <li>Watch for duplicate elements</li> <li>Remember sort() modifies in-place</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/1.2%20Sorting%20Advance/#quick-reference-for-interviews","title":"\ud83c\udfaf Quick Reference for Interviews","text":"<pre><code># Common Patterns\nlist.sort(key=len)                 # Sort by length\nlist.sort(key=lambda x: -x)        # Reverse numeric sort\nlist.sort(key=lambda x: (x[0], x[1])) # Multi-key sort\n\n# Interview Favorites\nintervals.sort(key=lambda x: x[0])  # Interval problems\npairs.sort(key=lambda x: x[1])      # Greedy algorithms\nstrings.sort(key=str.lower)         # Case-insensitive\n</code></pre> <p>\ud83c\udfaf Key Interview Notes: - Choose <code>.sort()</code> for in-place modification (O(1) space) - Use <code>sorted()</code> when you need to preserve the original list (O(n) space) - Always mention time complexity: O(n log n) - Consider using Counter for frequency-based sorting - Remember: sometimes linear solutions exist!</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/","title":"\ud83d\udccc Pythonic Code : A Complete Guide","text":"<p>(Essential Python syntax features for coding interviews. \ud83c\udfaf Focus: Clean and efficient code patterns)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Unpacking</li> <li>Loop Operations</li> <li>Common Patterns</li> <li>Interview Tips</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#unpacking","title":"\ud83d\udd04 Unpacking","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#basic-unpacking","title":"\ud83d\udcdd Basic Unpacking","text":"<pre><code># List unpacking\npoint = [10, 20]\nx, y = point  # x=10, y=20\n\n# Tuple unpacking\ncoordinates = (5, 10, 15)\nx, y, z = coordinates  # x=5, y=10, z=15\n\n# String unpacking\nfirst, *rest = \"Python\"  # first='P', rest=['y','t','h','o','n']\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#common-pitfalls","title":"\ud83d\udeab Common Pitfalls","text":"<pre><code># Too many values\nx, y = [1, 2, 3]      # ValueError\n# Too few values\nx, y, z = [1, 2]      # ValueError\n\n# Solution: Use * for variable length\nfirst, *middle, last = [1, 2, 3, 4, 5]  # first=1, middle=[2,3,4], last=5\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#loop-operations","title":"\ud83c\udfaf Loop Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#loop-unpacking","title":"\ud83d\udcca Loop Unpacking","text":"<pre><code># Interview Pattern: Matrix Traversal\nmatrix = [[1, 2], [3, 4], [5, 6]]\nfor row, col in matrix:\n    print(f\"Row: {row}, Col: {col}\")\n\n# Interview Pattern: Pair Processing\npairs = [(1, 'one'), (2, 'two'), (3, 'three')]\nfor number, word in pairs:\n    print(f\"{number} is written as {word}\")\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#enumerate-usage","title":"\ud83d\udd22 Enumerate Usage","text":"<pre><code># Basic usage\nfruits = ['apple', 'banana', 'cherry']\nfor i, fruit in enumerate(fruits):\n    print(f\"Index {i}: {fruit}\")\n\n# Start from different index\nfor i, fruit in enumerate(fruits, start=1):\n    print(f\"Fruit #{i}: {fruit}\")\n\n# Interview Pattern: Finding all indices\ndef find_all_indices(arr, target):\n    return [i for i, num in enumerate(arr) if num == target]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#zip-applications","title":"\ud83d\udd04 Zip Applications","text":"<pre><code># Basic zip\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\ndictionary = dict(zip(keys, values))  # {'a': 1, 'b': 2, 'c': 3}\n\n# Multiple lists\nnames = ['Alice', 'Bob', 'Charlie']\nages = [25, 30, 35]\ncities = ['NY', 'SF', 'LA']\nfor name, age, city in zip(names, ages, cities):\n    print(f\"{name} is {age} and lives in {city}\")\n\n# Interview Pattern: Parallel Processing\ndef compare_arrays(arr1, arr2):\n    return [a == b for a, b in zip(arr1, arr2)]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#common-patterns","title":"\ud83d\udca1 Common Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#value-constraints","title":"\ud83d\udcca Value Constraints","text":"<pre><code># Boundary checking\ndef is_valid_age(age):\n    return 0 &lt;= age &lt;= 120\n\n# Value clamping\ndef clamp_value(value, min_val=0, max_val=100):\n    return max(min_val, min(value, max_val))\n\n# Interview Pattern: Matrix Bounds\ndef is_valid_cell(grid, row, col):\n    return 0 &lt;= row &lt; len(grid) and 0 &lt;= col &lt; len(grid[0])\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#interview-tips-tricks","title":"\ud83d\udd27 Interview Tips &amp; Tricks","text":"<pre><code># Efficient min/max with multiple values\ndef get_bounds(numbers):\n    return min(numbers), max(numbers)\n\n# Multiple conditions\ndef is_valid_point(x, y):\n    return 0 &lt;= x &lt; 100 and 0 &lt;= y &lt; 100\n\n# Smart defaults with unpacking\ndef process_config(config=None):\n    defaults = {'timeout': 30, 'retries': 3}\n    return {**defaults, **(config or {})}\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#quick-reference-for-interviews","title":"\ud83d\ude80 Quick Reference for Interviews","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#common-operations","title":"\u2728 Common Operations","text":"<pre><code># Sequence unpacking\nfirst, *rest = [1, 2, 3, 4]  # first=1, rest=[2,3,4]\n\n# Enumerate with offset\nfor i, val in enumerate(items, start=1):  # 1-based indexing\n\n# Zip with default\nfor x, y in zip_longest(a, b, fillvalue=0):  # Handle uneven lists\n\n# Multiple assignments\nx, y = y, x  # Swap values\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/2.%20Pythonic%20Code/#interview-gotchas","title":"\u26a0\ufe0f Interview Gotchas","text":"<ul> <li>Always check for ValueError in unpacking</li> <li>Remember zip stops at shortest list</li> <li>Consider using enumerate when index is needed</li> <li>Use * unpacking carefully with large sequences</li> </ul> <p>\ud83c\udfaf Key Interview Notes: - Unpacking makes code cleaner and more readable - Enumerate saves extra counter variables - Zip is perfect for parallel iteration - Use boundary checks for clean error handling - Remember Python's truthiness rules in conditions</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/","title":"\ud83d\udccc Python Lists: A Complete Guide","text":"<p>(Essential list operations and patterns for coding interviews. \ud83c\udfaf Focus: Implementation and efficiency)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Operations</li> <li>Advanced Operations</li> <li>List Patterns</li> <li>List Comprehension</li> <li>Interview Tips</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#basic-operations","title":"\ud83d\udd04 Basic Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#common-operations","title":"\ud83d\udcdd Common Operations","text":"<pre><code># Time Complexity Guide\nnums = [1, 2, 3]\n\n# O(1) operations\nnums.append(4)      # [1, 2, 3, 4]\nlast = nums.pop()   # [1, 2, 3], returns 4\nfirst = nums[0]     # Access by index\n\n# O(n) operations\nnums.insert(1, 5)   # [1, 5, 2, 3]\nnums.remove(2)      # [1, 5, 3]\nnums.index(3)       # Returns 2 (index of 3)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#element-access","title":"\ud83d\udd0d Element Access","text":"<pre><code># Check existence - O(n)\nif 3 in nums:\n    print(\"Found 3!\")\n\n# Get index with default\ntry:\n    index = nums.index(5)\nexcept ValueError:\n    index = -1\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#advanced-operations","title":"\ud83c\udfaf Advanced Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#list-modification","title":"\ud83d\udcca List Modification","text":"<pre><code># Extend list\nlist1 = [1, 2]\nlist2 = [3, 4]\nlist1.extend(list2)     # [1, 2, 3, 4]\n\n# Alternative concatenation\nresult = list1 + list2  # Creates new list\n\n# Clear list\nnums.clear()           # []\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#list-initialization","title":"\ud83d\udd04 List Initialization","text":"<pre><code># Initialize with values\nzeros = [0] * 5              # [0, 0, 0, 0, 0]\nmatrix = [[0] * 3 for _ in range(3)]  # 3x3 matrix\n\n# Warning: Be careful with multiplication\nwrong_matrix = [[0] * 3] * 3  # Creates references!\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#list-patterns","title":"\ud83d\udca1 List Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#copying-lists","title":"\ud83d\udcdd Copying Lists","text":"<pre><code># Shallow copy methods\ncopy1 = original.copy()    # Method 1\ncopy2 = original[:]        # Method 2\ncopy3 = list(original)     # Method 3\n\n# Deep copy for nested structures\nimport copy\ndeep_copy = copy.deepcopy(original)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#common-interview-patterns","title":"\ud83d\udd27 Common Interview Patterns","text":"<pre><code># Two-pointer technique\ndef two_sum(nums, target):\n    left, right = 0, len(nums) - 1\n    while left &lt; right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return [left, right]\n        elif curr_sum &lt; target:\n            left += 1\n        else:\n            right -= 1\n\n# Sliding window\ndef max_subarray(nums, k):\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    for i in range(k, len(nums)):\n        window_sum += nums[i] - nums[i-k]\n        max_sum = max(max_sum, window_sum)\n    return max_sum\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#list-comprehension","title":"\ud83d\ude80 List Comprehension","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#basic-patterns","title":"\ud83d\udcca Basic Patterns","text":"<pre><code># Simple mapping\nsquares = [x**2 for x in range(5)]      # [0, 1, 4, 9, 16]\n\n# Filtering\nevens = [x for x in range(10) if x % 2 == 0]  # [0, 2, 4, 6, 8]\n\n# Nested loops\nmatrix = [[i+j for j in range(3)] for i in range(3)]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#advanced-comprehension","title":"\ud83d\udd0d Advanced Comprehension","text":"<pre><code># Multiple conditions\nnums = [x for x in range(10) if x % 2 == 0 if x % 3 == 0]\n\n# With zip\nsums = [a + b for a, b in zip(list1, list2)]\n\n# Nested data processing\nflattened = [item for sublist in matrix for item in sublist]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#interview-tips","title":"\ud83d\udca1 Interview Tips","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#time-complexity-guide","title":"\u26a1 Time Complexity Guide","text":"<pre><code># O(1) operations\nappend(), pop(), len()\nindexing (nums[0])\n\n# O(n) operations\ninsert(), remove(), index()\nin operator, count()\n\n# O(n log n) operations\nsort(), sorted()\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#key-patterns-to-remember","title":"\ud83d\udd11 Key Patterns to Remember","text":"<pre><code># Remove duplicates\nunique_list = list(set(nums))\n\n# Count occurrences\nfrom collections import Counter\ncounts = Counter(nums)\n\n# Find max/min indices\nmax_idx = nums.index(max(nums))\n</code></pre> <p>\ud83c\udfaf Interview Success Tips: - Know when to use list vs deque (for O(1) operations at both ends) - Remember list comprehension for cleaner code - Be careful with shallow vs deep copy - Watch for nested list initialization traps - Consider time complexity for each operation</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/3.%20Lists/#common-gotchas","title":"\u26a0\ufe0f Common Gotchas","text":"<ul> <li>Modifying list while iterating</li> <li>Shallow copy of nested structures</li> <li>List multiplication with references</li> <li>Index out of range errors</li> <li>Linear search time for membership testing</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/","title":"\ud83d\udccc Python Stacks &amp; Queues: A Complete Guide","text":"<p>(Essential stack and queue operations for coding interviews. \ud83c\udfaf Focus: Implementation patterns and efficiency)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Stack Operations</li> <li>Queue Operations</li> <li>Deque Operations</li> <li>Interview Patterns</li> <li>Implementation Tips</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#stack-operations","title":"\ud83d\udd04 Stack Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#basic-stack-implementation","title":"\ud83d\udcdd Basic Stack Implementation","text":"<pre><code>class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):    # O(1)\n        self.stack.append(item)\n\n    def pop(self):           # O(1)\n        if not self.is_empty():\n            return self.stack.pop()\n        raise IndexError(\"pop from empty stack\")\n\n    def peek(self):          # O(1)\n        if not self.is_empty():\n            return self.stack[-1]\n        raise IndexError(\"peek at empty stack\")\n\n    def is_empty(self):      # O(1)\n        return len(self.stack) == 0\n\n    def size(self):          # O(1)\n        return len(self.stack)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#stack-usage-patterns","title":"\ud83d\udd0d Stack Usage Patterns","text":"<pre><code># Direct list usage as stack\nstack = []\nstack.append(1)      # Push\nstack.append(2)      # Push\ntop = stack.pop()    # Pop\npeek = stack[-1]     # Peek at top\n\n# Common interview pattern: Parentheses matching\ndef is_valid_parentheses(s: str) -&gt; bool:\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n\n    for char in s:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    return len(stack) == 0\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#queue-operations","title":"\ud83d\udcca Queue Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#basic-queue-implementation","title":"\ud83d\udcdd Basic Queue Implementation","text":"<pre><code>from collections import deque\n\nclass Queue:\n    def __init__(self):\n        self.queue = deque()\n\n    def enqueue(self, item):    # O(1)\n        self.queue.append(item)\n\n    def dequeue(self):          # O(1)\n        if not self.is_empty():\n            return self.queue.popleft()\n        raise IndexError(\"dequeue from empty queue\")\n\n    def front(self):            # O(1)\n        if not self.is_empty():\n            return self.queue[0]\n        raise IndexError(\"front from empty queue\")\n\n    def is_empty(self):         # O(1)\n        return len(self.queue) == 0\n\n    def size(self):             # O(1)\n        return len(self.queue)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#queue-usage-patterns","title":"\ud83d\udd0d Queue Usage Patterns","text":"<pre><code># Using collections.deque\nfrom collections import deque\nqueue = deque()\n\n# Basic operations\nqueue.append(1)       # Enqueue right\nqueue.append(2)       # Enqueue right\nfront = queue[0]      # Peek front\nback = queue[-1]      # Peek back\nfirst = queue.popleft()  # Dequeue left\n\n# BFS implementation pattern\ndef bfs(graph, start):\n    visited = set()\n    queue = deque([start])\n    visited.add(start)\n\n    while queue:\n        vertex = queue.popleft()\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#deque-double-ended-queue-operations","title":"\ud83d\udd04 Deque (Double-Ended Queue) Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#deque-implementation","title":"\ud83d\udcdd Deque Implementation","text":"<pre><code>from collections import deque\n\nclass Deque:\n    def __init__(self):\n        self.deque = deque()\n\n    # Add operations - O(1)\n    def add_front(self, item):\n        self.deque.appendleft(item)\n\n    def add_rear(self, item):\n        self.deque.append(item)\n\n    # Remove operations - O(1)\n    def remove_front(self):\n        return self.deque.popleft()\n\n    def remove_rear(self):\n        return self.deque.pop()\n\n    # Peek operations - O(1)\n    def front(self):\n        return self.deque[0]\n\n    def rear(self):\n        return self.deque[-1]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#deque-usage-patterns","title":"\ud83d\udd0d Deque Usage Patterns","text":"<pre><code># Sliding window maximum pattern\ndef max_sliding_window(nums, k):\n    result = []\n    window = deque()\n\n    for i in range(len(nums)):\n        # Remove elements outside window\n        while window and window[0] &lt; i - k + 1:\n            window.popleft()\n\n        # Remove smaller elements\n        while window and nums[window[-1]] &lt; nums[i]:\n            window.pop()\n\n        window.append(i)\n\n        if i &gt;= k - 1:\n            result.append(nums[window[0]])\n\n    return result\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#implementation-tips","title":"\ud83d\udca1 Implementation Tips","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#time-complexity-guide","title":"\u26a1 Time Complexity Guide","text":"<pre><code># Stack operations (using list)\npush/append: O(1)\npop: O(1)\npeek: O(1)\n\n# Queue operations (using deque)\nenqueue/append: O(1)\ndequeue/popleft: O(1)\nfront/back access: O(1)\n\n# Deque operations\nappendleft/append: O(1)\npopleft/pop: O(1)\naccess: O(1)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#key-interview-patterns","title":"\ud83d\udd11 Key Interview Patterns","text":"<pre><code># Stack: Monotonic stack pattern\ndef next_greater_element(nums):\n    stack = []\n    result = [-1] * len(nums)\n\n    for i in range(len(nums)):\n        while stack and nums[stack[-1]] &lt; nums[i]:\n            result[stack.pop()] = nums[i]\n        stack.append(i)\n    return result\n\n# Queue: Level order traversal\ndef level_order(root):\n    if not root:\n        return []\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.popleft()\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        result.append(level)\n    return result\n</code></pre> <p>\ud83c\udfaf Interview Success Tips: - Use <code>collections.deque</code> for queue operations - Remember stack for DFS, queue for BFS - Consider monotonic stack for next/previous greater/smaller - Use deque for sliding window problems - Watch for empty structure handling</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/4.%20Stacks%20%26%20Queues/#common-gotchas","title":"\u26a0\ufe0f Common Gotchas","text":"<ul> <li>Using list as queue (O(n) pop(0))</li> <li>Not handling empty structures</li> <li>Forgetting to check boundaries</li> <li>Missing edge cases in implementations</li> <li>Not considering time complexity</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/","title":"\ud83d\udccc Python Nested Lists: A Complete Guide","text":"<p>(Essential guide for handling 2D arrays and nested lists in coding interviews. \ud83c\udfaf Focus: Implementation patterns and common pitfalls)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Concepts</li> <li>2D Grid Operations</li> <li>List Comprehension</li> <li>Common Patterns</li> <li>Interview Tips</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#basic-concepts","title":"\ud83d\udd04 Basic Concepts","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#nested-list-fundamentals","title":"\ud83d\udcdd Nested List Fundamentals","text":"<pre><code># Basic nested list creation\nnested_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\n# Accessing elements\nfirst_row = nested_list[0]       # [1, 2, 3]\nelement = nested_list[0][0]      # 1\nlast_element = nested_list[-1][-1]  # 9\n\n# Irregular nested lists\nirregular = [\n    [1],\n    [2, 3],\n    [4, 5, 6]\n]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#basic-operations","title":"\ud83d\udd0d Basic Operations","text":"<pre><code># Getting dimensions\nrows = len(nested_list)        # Number of rows\ncols = len(nested_list[0])     # Number of columns\n\n# Iterating over nested list\nfor row in nested_list:\n    for elem in row:\n        print(elem, end=' ')\n\n# Using indices for iteration\nfor i in range(rows):\n    for j in range(cols):\n        print(nested_list[i][j], end=' ')\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#2d-grid-operations","title":"\ud83d\udcca 2D Grid Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#grid-creation","title":"\ud83d\udcdd Grid Creation","text":"<pre><code># Creating a 2D grid\ndef create_grid(rows, cols, default_value=0):\n    return [[default_value for _ in range(cols)] \n            for _ in range(rows)]\n\n# Example usage\ngrid = create_grid(3, 4)  # 3x4 grid of zeros\n\n# Initialize with values\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#grid-manipulation","title":"\ud83d\udd27 Grid Manipulation","text":"<pre><code># Copy a grid\ndef deep_copy_grid(grid):\n    return [row[:] for row in grid]\n\n# Rotate a grid 90 degrees clockwise\ndef rotate_grid(grid):\n    return list(zip(*grid[::-1]))\n\n# Transpose a grid\ndef transpose_grid(grid):\n    return list(map(list, zip(*grid)))\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#list-comprehension-patterns","title":"\ud83c\udfaf List Comprehension Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"<pre><code># WRONG: Creates shared references\ngrid = [[0] * 3] * 3  # Don't do this!\n\n# RIGHT: Creates independent lists\ngrid = [[0 for _ in range(3)] for _ in range(3)]\n# OR\ngrid = [[0] * 3 for _ in range(3)]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#advanced-comprehensions","title":"\ud83d\udd11 Advanced Comprehensions","text":"<pre><code># Filter elements in nested list\nfiltered = [[x for x in row if x &gt; 0] for row in matrix]\n\n# Transform elements\nsquared = [[x**2 for x in row] for row in matrix]\n\n# Conditional creation\ngrid = [[1 if i==j else 0 for j in range(n)] for i in range(n)]  # Identity matrix\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#common-interview-patterns","title":"\ud83d\udca1 Common Interview Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#matrix-traversal-patterns","title":"\ud83d\udd04 Matrix Traversal Patterns","text":"<pre><code># DFS for grid\ndef dfs_grid(grid, i, j, visited=None):\n    if visited is None:\n        visited = set()\n\n    if (i &lt; 0 or i &gt;= len(grid) or \n        j &lt; 0 or j &gt;= len(grid[0]) or \n        (i, j) in visited):\n        return\n\n    visited.add((i, j))\n\n    # Visit all 4 directions\n    directions = [(0,1), (1,0), (0,-1), (-1,0)]\n    for di, dj in directions:\n        dfs_grid(grid, i+di, j+dj, visited)\n\n# BFS for grid\nfrom collections import deque\n\ndef bfs_grid(grid, start_i, start_j):\n    rows, cols = len(grid), len(grid[0])\n    queue = deque([(start_i, start_j)])\n    visited = {(start_i, start_j)}\n\n    while queue:\n        i, j = queue.popleft()\n\n        for di, dj in [(0,1), (1,0), (0,-1), (-1,0)]:\n            ni, nj = i + di, j + dj\n            if (0 &lt;= ni &lt; rows and 0 &lt;= nj &lt; cols and \n                (ni, nj) not in visited):\n                queue.append((ni, nj))\n                visited.add((ni, nj))\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#matrix-operations","title":"\ud83d\udcca Matrix Operations","text":"<pre><code># Get diagonal elements\ndef get_diagonals(matrix):\n    n = len(matrix)\n    main_diag = [matrix[i][i] for i in range(n)]\n    anti_diag = [matrix[i][n-1-i] for i in range(n)]\n    return main_diag, anti_diag\n\n# Check boundaries\ndef is_valid_cell(grid, i, j):\n    return 0 &lt;= i &lt; len(grid) and 0 &lt;= j &lt; len(grid[0])\n\n# Find neighbors\ndef get_neighbors(grid, i, j):\n    directions = [(0,1), (1,0), (0,-1), (-1,0)]\n    neighbors = []\n    for di, dj in directions:\n        ni, nj = i + di, j + dj\n        if is_valid_cell(grid, ni, nj):\n            neighbors.append((ni, nj))\n    return neighbors\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#implementation-tips","title":"\u26a1 Implementation Tips","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#time-complexity-guide","title":"\ud83d\ude80 Time Complexity Guide","text":"<pre><code># Common operations\nAccess: O(1)\nRow iteration: O(n)\nFull grid iteration: O(m*n)\nDeep copy: O(m*n)\nRotation: O(m*n)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#common-gotchas","title":"\u26a0\ufe0f Common Gotchas","text":"<ul> <li>Creating grids with shared references</li> <li>Not checking boundaries</li> <li>Confusing row/column ordering</li> <li>Forgetting to mark visited cells in traversal</li> <li>Not handling edge cases (empty grid, single cell)</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/5.%202D%20Lists/#interview-success-tips","title":"\ud83c\udfaf Interview Success Tips","text":"<pre><code># Quick initialization tricks\nn = 3\nidentity = [[1 if i==j else 0 for j in range(n)] for i in range(n)]\ntranspose = list(zip(*matrix))\nrotated = list(zip(*matrix[::-1]))\n\n# Common patterns\nrows, cols = len(grid), len(grid[0])\ndirections = [(0,1), (1,0), (0,-1), (-1,0)]  # Right, Down, Left, Up\ndiagonal = [(i, i) for i in range(n)]  # Main diagonal\n</code></pre> <p>\ud83d\udd11 Key Takeaways: - Always use list comprehension for grid creation - Check boundaries before accessing cells - Consider using helper functions for common operations - Watch out for shared references - Keep track of visited cells in traversal problems</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/","title":"\ud83d\udccc Python Hash Maps &amp; Sets: A Complete Guide","text":"<p>(Essential guide for hash-based data structures. \ud83c\udfaf Focus: Implementation patterns and interview solutions)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Operations</li> <li>Advanced Features</li> <li>Common Patterns</li> <li>Interview Solutions</li> <li>Implementation Notes</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#basic-operations","title":"\ud83d\udd04 Basic Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#dictionary-operations","title":"\ud83d\udcdd Dictionary Operations","text":"<pre><code># Creation\nhash_map = {}  # Empty dictionary\nhash_map = dict()  # Alternative creation\nhash_map = {\"key\": \"value\", \"name\": \"John\"}\n\n# Basic Operations\nhash_map[\"key\"] = \"value\"     # Insert/Update\nvalue = hash_map[\"key\"]       # Access\ndel hash_map[\"key\"]          # Delete\nkey_exists = \"key\" in hash_map  # Check existence\n\n# Safe Operations\nvalue = hash_map.get(\"key\", \"default\")  # Safe access\nvalue = hash_map.pop(\"key\", \"default\")  # Safe delete\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#set-operations","title":"\ud83d\udd0d Set Operations","text":"<pre><code># Creation\nhash_set = set()  # Empty set\nhash_set = {1, 2, 3}  # Initialized set\n\n# Basic Operations\nhash_set.add(4)        # Insert\nhash_set.remove(4)     # Delete (raises KeyError if missing)\nhash_set.discard(4)    # Safe delete\nexists = 4 in hash_set  # Check existence\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#advanced-features","title":"\u2699\ufe0f Advanced Features","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#defaultdict-usage","title":"\ud83d\udd27 DefaultDict Usage","text":"<pre><code>from collections import defaultdict\n\n# Count frequencies\nfreq = defaultdict(int)\nfor num in [1, 1, 2, 3, 3, 3]:\n    freq[num] += 1  # No KeyError for new keys\n\n# Group items\ngroups = defaultdict(list)\nfor key, val in pairs:\n    groups[key].append(val)  # Automatically creates list\n\n# Track indices\nindices = defaultdict(set)\nfor i, num in enumerate(nums):\n    indices[num].add(i)  # Track all positions of each number\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#counter-class","title":"\ud83d\udcca Counter Class","text":"<pre><code>from collections import Counter\n\n# Basic counting\nnums = [1, 1, 2, 3, 3, 3]\ncount = Counter(nums)  # Counter({3: 3, 1: 2, 2: 1})\n\n# Most common elements\ntop_k = count.most_common(2)  # [(3, 3), (1, 2)]\n\n# Mathematical operations\nc1 = Counter([1, 1, 2])\nc2 = Counter([1, 2, 2])\nprint(c1 + c2)  # Add frequencies\nprint(c1 - c2)  # Subtract frequencies\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#common-interview-patterns","title":"\ud83d\udca1 Common Interview Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#two-sum-pattern","title":"\ud83d\udd04 Two Sum Pattern","text":"<pre><code>def two_sum(nums, target):\n    seen = {}  # val -&gt; index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#group-anagrams","title":"\ud83d\udcca Group Anagrams","text":"<pre><code>def group_anagrams(words):\n    groups = defaultdict(list)\n    for word in words:\n        # Sort characters to get anagram key\n        key = ''.join(sorted(word))\n        groups[key].append(word)\n    return list(groups.values())\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#first-unique-character","title":"\ud83c\udfaf First Unique Character","text":"<pre><code>def first_unique_char(s):\n    # Count frequencies\n    count = Counter(s)\n\n    # Find first char with count 1\n    for i, char in enumerate(s):\n        if count[char] == 1:\n            return i\n    return -1\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#implementation-tips","title":"\u26a1 Implementation Tips","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#time-complexity","title":"\ud83d\ude80 Time Complexity","text":"<pre><code># Dictionary/Set Operations\nInsert: O(1) average\nDelete: O(1) average\nLookup: O(1) average\nIteration: O(n)\n\n# Counter Operations\nCreation: O(n)\nmost_common(): O(n log k) for top k elements\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"<pre><code># Mutable keys (will raise TypeError)\nbad_dict = {[1, 2]: \"value\"}  # TypeError\nbad_set = {[1, 2]}           # TypeError\n\n# Safe key handling\ngood_dict = {tuple([1, 2]): \"value\"}  # Use tuple instead\n\n# Missing key handling\n# Bad:\nvalue = dict_map[\"missing_key\"]  # KeyError\n\n# Good:\nvalue = dict_map.get(\"missing_key\", default)\nif \"missing_key\" in dict_map:\n    value = dict_map[\"missing_key\"]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/6.%20Hashmaps%20%26%20Hashsets/#interview-success-tips","title":"\ud83c\udfaf Interview Success Tips","text":"<ol> <li>Common applications:    ```python    # Frequency counting    counts = Counter(items)</li> </ol> <p># Two-way mapping    forward = {x: i for i, x in enumerate(items)}    backward = {i: x for i, x in enumerate(items)}</p> <p># Grouping    groups = defaultdict(list)    for item in items:        groups[key(item)].append(item)    ```</p> <ol> <li> <p>Edge cases to consider:</p> <ul> <li>Empty input</li> <li>Single element</li> <li>Duplicate keys</li> <li>Missing keys</li> <li>Large datasets</li> </ul> </li> <li> <p>Space optimization:    ```python    # Instead of storing all values    seen = set()  # Just track existence</p> </li> </ol> <p># Instead of Counter    count = {}    for x in nums:        count[x] = count.get(x, 0) + 1    ```</p> <ol> <li>Common problem types:<ul> <li>Two Sum variants</li> <li>Anagram grouping</li> <li>Frequency counting</li> <li>Substring problems</li> <li>Path/Graph problems using visited sets</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/","title":"\ud83d\udccc Python Heaps: A Complete Guide","text":"<p>(Essential guide for heap operations. \ud83c\udfaf Focus: Implementation patterns and interview solutions)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Operations</li> <li>Advanced Features</li> <li>Common Patterns</li> <li>Interview Solutions</li> <li>Implementation Notes</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#basic-operations","title":"\ud83d\udd04 Basic Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#min-heap-basics","title":"\ud83d\udcdd Min Heap Basics","text":"<pre><code>import heapq\n\n# Creation\nmin_heap = []\nheapq.heappush(min_heap, 3)\nheapq.heappush(min_heap, 1)\nheapq.heappush(min_heap, 4)\n\n# Access minimum\nmin_val = min_heap[0]  # Peek without removing\nmin_val = heapq.heappop(min_heap)  # Remove and return\n\n# Convert list to heap\nnums = [3, 1, 4, 1, 5]\nheapq.heapify(nums)  # In-place conversion\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#max-heap-simulation","title":"\ud83d\udd25 Max Heap Simulation","text":"<pre><code># Creation (negate values)\nmax_heap = []\nheapq.heappush(max_heap, -3)\nheapq.heappush(max_heap, -1)\nheapq.heappush(max_heap, -4)\n\n# Access maximum (negate back)\nmax_val = -max_heap[0]  # Peek without removing\nmax_val = -heapq.heappop(max_heap)  # Remove and return\n\n# Convert list to max heap\nnums = [3, 1, 4, 1, 5]\nmax_heap = [-num for num in nums]\nheapq.heapify(max_heap)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#advanced-features","title":"\u2699\ufe0f Advanced Features","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#custom-priority-queue","title":"\ud83d\udd27 Custom Priority Queue","text":"<pre><code># Using tuples (priority, value)\npq = []\nheapq.heappush(pq, (2, \"Task 2\"))\nheapq.heappush(pq, (1, \"Task 1\"))\nheapq.heappush(pq, (3, \"Task 3\"))\n\npriority, task = heapq.heappop(pq)  # Returns (1, \"Task 1\")\n\n# Multiple criteria\ntasks = []\nheapq.heappush(tasks, (deadline, priority, name))\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#k-largestsmallest-elements","title":"\ud83d\udcca K Largest/Smallest Elements","text":"<pre><code>nums = [5, 2, 8, 1, 9, 3, 7]\n\n# K smallest elements\nk_smallest = heapq.nsmallest(3, nums)  # [1, 2, 3]\n\n# K largest elements\nk_largest = heapq.nlargest(3, nums)    # [9, 8, 7]\n\n# With key function\npoints = [(1, 5), (2, 3), (3, 4)]\nclosest = heapq.nsmallest(2, points, key=lambda x: x[0]**2 + x[1]**2)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#common-interview-patterns","title":"\ud83d\udca1 Common Interview Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#k-th-largest-element","title":"\ud83d\udd04 K-th Largest Element","text":"<pre><code>def find_kth_largest(nums, k):\n    # Using min heap of size k\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) &gt; k:\n            heapq.heappop(heap)\n    return heap[0]\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#merge-k-sorted-lists","title":"\ud83d\udcca Merge K Sorted Lists","text":"<pre><code>def merge_k_sorted(lists):\n    heap = []\n    result = []\n\n    # Initialize heap with first elements\n    for i, lst in enumerate(lists):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))  # (value, list_index, element_index)\n\n    while heap:\n        val, list_idx, elem_idx = heapq.heappop(heap)\n        result.append(val)\n\n        # Push next element from same list\n        if elem_idx + 1 &lt; len(lists[list_idx]):\n            next_elem = lists[list_idx][elem_idx + 1]\n            heapq.heappush(heap, (next_elem, list_idx, elem_idx + 1))\n\n    return result\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#meeting-rooms-problem","title":"\ud83c\udfaf Meeting Rooms Problem","text":"<pre><code>def min_meeting_rooms(intervals):\n    # Separate start and end times\n    start = sorted([i[0] for i in intervals])\n    end = sorted([i[1] for i in intervals])\n\n    rooms = 0\n    max_rooms = 0\n    s = e = 0\n\n    while s &lt; len(intervals):\n        if start[s] &lt; end[e]:\n            rooms += 1\n            s += 1\n        else:\n            rooms -= 1\n            e += 1\n        max_rooms = max(max_rooms, rooms)\n\n    return max_rooms\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#implementation-tips","title":"\u26a1 Implementation Tips","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#time-complexity","title":"\ud83d\ude80 Time Complexity","text":"<pre><code># Heap Operations\nPush: O(log n)\nPop: O(log n)\nPeek: O(1)\nHeapify: O(n)\nK largest/smallest: O(n log k)\n\n# Space Complexity\nBasic heap: O(n)\nK-sized heap: O(k)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"<pre><code># Modifying heap elements directly (Don't do this)\nheap[0] = new_value  # Breaks heap property\n\n# Correct way to update\nnew_heap = []\nwhile old_heap:\n    val = heapq.heappop(old_heap)\n    heapq.heappush(new_heap, transform(val))\n\n# Comparing non-comparable elements\nheapq.heappush(heap, (1, [2, 3]))  # Works\nheapq.heappush(heap, [2, 3])       # May fail if elements aren't comparable\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/7.%20Heaps%20%26%20Priority%20Queues/#interview-success-tips","title":"\ud83c\udfaf Interview Success Tips","text":"<ol> <li>Common applications:    ```python    # Priority queue    tasks = []    heapq.heappush(tasks, (priority, task_id))</li> </ol> <p># Running median    small = []  # max heap (-ve numbers)    large = []  # min heap</p> <p># Sliding window maximum    def sliding_max(nums, k):        heap = []  # (-num, index)        result = []    ```</p> <ol> <li> <p>Edge cases to consider:</p> <ul> <li>Empty heap</li> <li>Single element</li> <li>Duplicate elements</li> <li>Equal priorities</li> <li>Invalid input types</li> </ul> </li> <li> <p>Space optimization:    <code>python    # Instead of storing all elements    def kth_largest(nums, k):        heap = nums[:k]        heapq.heapify(heap)        for num in nums[k:]:            if num &gt; heap[0]:                heapq.heapreplace(heap, num)</code></p> </li> <li> <p>Common problem types:</p> <ul> <li>K-th largest/smallest</li> <li>Merge K sorted arrays</li> <li>Task scheduling</li> <li>Meeting rooms</li> <li>Median finding</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/","title":"\ud83d\udccc Python SortedContainers: A Complete Guide","text":"<p>(Essential guide for sorted containers. \ud83c\udfaf Focus: Implementation patterns and practical usage)</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#table-of-contents","title":"Table of Contents","text":"<ol> <li>SortedDict Operations</li> <li>SortedSet Operations</li> <li>Common Patterns</li> <li>Interview Solutions</li> <li>Implementation Notes</li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#sorteddict-operations","title":"\ud83d\udd04 SortedDict Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#basic-operations","title":"\ud83d\udcdd Basic Operations","text":"<pre><code>from sortedcontainers import SortedDict\n\n# Creation\nsd = SortedDict()\nsd = SortedDict({'c': 3, 'a': 1, 'b': 2})  # Auto-sorts keys\n\n# Insertion\nsd['d'] = 4\nsd.update({'e': 5, 'f': 6})\n\n# Access\nvalue = sd['a']  # Direct access\nvalue = sd.get('x', default=0)  # Safe access\n\n# Deletion\ndel sd['a']  # Remove by key\nfirst = sd.popitem(0)  # Remove first item\nlast = sd.popitem()    # Remove last item\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#advanced-operations","title":"\ud83d\udd0d Advanced Operations","text":"<pre><code># Get index of key\nindex = sd.index('c')\n\n# Get key at index\nkey = sd.peekitem(index)\n\n# Slicing\nsubset = sd.items()[1:4]  # Get slice of items\n\n# Binary search operations\nindex = sd.bisect_left(key)\nindex = sd.bisect_right(key)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#sortedset-operations","title":"\u2699\ufe0f SortedSet Operations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#basic-operations_1","title":"\ud83d\udcdd Basic Operations","text":"<pre><code>from sortedcontainers import SortedSet\n\n# Creation\nss = SortedSet()\nss = SortedSet([3, 1, 4, 1, 5])  # Duplicates removed\n\n# Insertion\nss.add(2)\nss.update([6, 7, 8])\n\n# Removal\nss.remove(2)          # Raises KeyError if missing\nss.discard(2)         # No error if missing\nfirst = ss.pop(0)     # Remove first element\nlast = ss.pop()       # Remove last element\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#advanced-operations_1","title":"\ud83d\udd0d Advanced Operations","text":"<pre><code># Binary search operations\nindex = ss.bisect_left(value)\nindex = ss.bisect_right(value)\n\n# Range operations\nsubset = ss.irange(start, end)\nsubset = ss.irange(start, end, reverse=True)\n\n# Count elements in range\ncount = ss.count(start, end)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#common-interview-patterns","title":"\ud83d\udca1 Common Interview Patterns","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#range-based-operations","title":"\ud83d\udd04 Range-Based Operations","text":"<pre><code>def find_range(sorted_set, start, end):\n    # Get all elements in range [start, end]\n    return sorted_set.irange(start, end)\n\ndef count_in_range(sorted_set, start, end):\n    # Count elements in range [start, end]\n    return sorted_set.count(start, end)\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#maintaining-sorted-order","title":"\ud83d\udcca Maintaining Sorted Order","text":"<pre><code>def track_scores(scores):\n    # Keep scores sorted with O(log n) updates\n    sorted_scores = SortedDict()\n\n    def add_score(player, score):\n        sorted_scores[player] = score\n\n    def get_rank(player):\n        return sorted_scores.index(player) + 1\n\n    def get_top_k(k):\n        return dict(list(sorted_scores.items())[-k:])\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#finding-closest-elements","title":"\ud83c\udfaf Finding Closest Elements","text":"<pre><code>def find_closest(sorted_set, target):\n    # Find element closest to target\n    index = sorted_set.bisect_left(target)\n\n    if index == 0:\n        return sorted_set[0]\n    if index == len(sorted_set):\n        return sorted_set[-1]\n\n    before = sorted_set[index - 1]\n    after = sorted_set[index]\n\n    return before if target - before &lt; after - target else after\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#implementation-tips","title":"\u26a1 Implementation Tips","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#time-complexity","title":"\ud83d\ude80 Time Complexity","text":"<pre><code># SortedDict/SortedSet Operations\nInsert/Delete: O(log n)\nLookup: O(log n)\nIndex access: O(log n)\nIteration: O(n)\nSlice: O(k) where k is slice size\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"<pre><code># Modifying during iteration\n# Wrong:\nfor key in sorted_dict:\n    if condition:\n        del sorted_dict[key]  # May raise error\n\n# Right:\nto_delete = [k for k in sorted_dict if condition]\nfor key in to_delete:\n    del sorted_dict[key]\n\n# Comparing with regular dict/set\n# SortedDict/SortedSet maintain order but are slower\n# Use when order matters more than raw performance\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/Python-For-Interview-Notes/8.%20Sorted%20Dicts%20%26%20Sorted%20Sets/#interview-success-tips","title":"\ud83c\udfaf Interview Success Tips","text":"<ol> <li>Common applications:    ```python    # Range queries    def get_range_sum(sorted_dict, start, end):        return sum(v for k, v in sorted_dict.items()[            sorted_dict.bisect_left(start):            sorted_dict.bisect_right(end)        ])</li> </ol> <p># Maintaining sorted order    def track_top_k(k):        scores = SortedDict()        def update(player, score):            scores[player] = score            return list(scores.items())[-k:]    ```</p> <ol> <li> <p>Edge cases to consider:</p> <ul> <li>Empty container</li> <li>Single element</li> <li>Duplicate values</li> <li>Range boundaries</li> <li>Invalid keys/values</li> </ul> </li> <li> <p>Space optimization:    <code>python    # Instead of storing all elements    def find_median_stream():        left = SortedList()   # Store first half        right = SortedList()  # Store second half</code></p> </li> <li> <p>Common problem types:</p> <ul> <li>Range queries</li> <li>Order statistics</li> <li>Moving medians</li> <li>Top K elements</li> <li>Closest elements</li> </ul> </li> </ol>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/","title":"\u26a1 Concurrency Control in Distributed Systems","text":"<p>Understanding Concurrency Control is essential for designing scalable, reliable, and efficient systems, especially for a Google Software Development Engineer (SDE) role. Before diving into concurrency, let's briefly explore threads, processes, and the differences between parallelism and concurrency. \ud83d\ude80</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#multithreading","title":"\ud83e\uddf5 Multithreading","text":"<ul> <li>Definition: Running multiple threads concurrently within a single process.</li> <li>\ud83d\udd0d System Design Perspective:</li> <li>Useful for parallelizing tasks, such as handling multiple client requests in a web server.</li> <li>\ud83c\udf0d Real-life Example:</li> <li>Web Browsers use multiple threads to load different tabs and UI components simultaneously.</li> <li>\u2696\ufe0f Trade-offs:</li> <li>\u2705 Efficient CPU utilization, improved responsiveness.</li> <li>\u274c Complexity in managing thread synchronization, potential race conditions.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#multiprocessing","title":"\u2699\ufe0f Multiprocessing","text":"<ul> <li>Definition: Running multiple processes simultaneously, each with its own memory space.</li> <li>\ud83d\udd0d System Design Perspective:</li> <li>Suitable for CPU-bound operations where processes run in isolation.</li> <li>\ud83c\udf0d Real-life Example:</li> <li>Database Servers use multiprocessing to handle queries separately, ensuring isolation and fault tolerance.</li> <li>\u2696\ufe0f Trade-offs:</li> <li>\u2705 Better fault isolation, utilizes multiple CPU cores.</li> <li>\u274c Higher memory consumption, complex inter-process communication (IPC).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#thread","title":"\ud83d\udd04 Thread","text":"<ul> <li>Definition: The smallest unit of execution within a process.</li> <li>\ud83d\udd0d System Design Perspective:</li> <li>Threads allow a program to perform multiple operations simultaneously.</li> <li>\ud83c\udf0d Real-life Example:</li> <li>Chat Applications use threads to handle messages, notifications, and background tasks.</li> <li>\u2696\ufe0f Trade-offs:</li> <li>\u2705 Lightweight, lower context switching overhead.</li> <li>\u274c Risk of shared data corruption, requires complex synchronization.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#concurrency-control-in-distributed-systems_1","title":"\ud83d\udd10 Concurrency Control in Distributed Systems","text":"<ul> <li>Definition: Mechanisms to manage simultaneous operations without conflicts in a distributed environment.</li> <li>\ud83d\udd0d System Design Perspective:</li> <li>Ensures data consistency and integrity across distributed components.</li> <li>\ud83c\udf0d Real-life Example:</li> <li>Google Spanner uses concurrency control for transactions across multiple data centers.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#key-techniques-and-trade-offs","title":"\u2699\ufe0f Key Techniques and Trade-offs","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#locks","title":"\ud83d\udd12 Locks","text":"<ul> <li>Definition: Prevents multiple transactions from accessing the same data simultaneously.</li> <li>\u2705 Ensures data consistency.</li> <li>\u274c Can lead to deadlocks and reduce throughput.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#optimistic-vs-pessimistic-locking","title":"\u23f3 Optimistic vs. Pessimistic Locking","text":"<ul> <li>\ud83d\udd39 Optimistic Locking: Assumes minimal conflict, checks consistency at the end.</li> <li>\u2705 High throughput in low-contention scenarios.</li> <li>\u274c Frequent rollbacks in high-contention environments.</li> <li>\ud83d\udd39 Pessimistic Locking: Locks resources early to avoid conflicts.</li> <li>\u2705 Prevents data conflicts.</li> <li>\u274c Can cause resource contention, reducing concurrency.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#semaphores","title":"\ud83d\udea6 Semaphores","text":"<ul> <li>Definition: Controls access to a finite number of resources.</li> <li>\u2705 Simple to implement.</li> <li>\u274c Potential deadlocks if not managed properly.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#transactions-acid-properties","title":"\ud83d\udcdc Transactions (ACID Properties)","text":"<ul> <li>Definition: Ensures a series of operations are Atomic, Consistent, Isolated, and Durable.</li> <li>\u2705 Guarantees data consistency.</li> <li>\u274c Can be resource-intensive in distributed systems.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#distributed-consensus-algorithms","title":"\ud83c\udfdb Distributed Consensus Algorithms","text":"<ul> <li>Examples: Paxos, Raft.</li> <li>\u2705 Ensures agreement on shared state.</li> <li>\u274c Can be slow and complex in large systems.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#leader-election","title":"\ud83c\udfc6 Leader Election","text":"<ul> <li>Definition: Mechanism for electing a leader in distributed systems.</li> <li>\u2705 Simplifies decision-making.</li> <li>\u274c Can introduce a single point of failure.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#parallelism-vs-concurrency","title":"\ud83d\udd04 Parallelism vs. Concurrency","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#concurrency","title":"\u26a1 Concurrency","text":"<ul> <li>Multiple tasks progress simultaneously within overlapping time frames.</li> <li>Focuses on managing access to shared resources.</li> <li>Achieved through task switching on a single core.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#parallelism","title":"\ud83d\ude80 Parallelism","text":"<ul> <li>Multiple tasks execute at the same time.</li> <li>Focuses on increasing computational speed.</li> <li>Requires multiple processing units (multi-core processors).</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#key-points","title":"\ud83d\udd11 Key Points","text":"<ul> <li>Concurrency manages task structure, parallelism manages execution.</li> <li>Concurrency can lead to parallelism if multiple cores are available.</li> <li>Parallelism without concurrency is possible in data-parallel operations.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#multithreading-multiprocessing-in-python-vs-java","title":"\ud83d\udda5 Multithreading &amp; Multiprocessing in Python vs Java","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#python-with-gil","title":"\ud83d\udc0d Python (with GIL)","text":"<ul> <li>Multithreading achieves concurrency, not parallelism.</li> <li>Multiprocessing enables true parallelism using separate processes.</li> <li>I/O-bound tasks: Python multithreading is effective as GIL is released.</li> <li>CPU-bound tasks: Use multiprocessing to bypass GIL for performance gains.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#java-no-gil","title":"\u2615 Java (No GIL)","text":"<ul> <li>Java threads run in parallel on multi-core systems.</li> <li>Can achieve both concurrency and parallelism.</li> <li>Fully utilizes CPU power for high-performance computing.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>\ud83d\udcdd GIL Explanation</li> <li>\ud83d\udcbb Code Repository</li> <li>\ud83c\udfa5 Threading in Python</li> <li>\ud83d\ude80 Achieve TRUE Parallelism in Python with Multiprocessing</li> </ul> <p>\ud83d\udd25 Master concurrency control to build scalable distributed systems! \ud83d\udd25</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/","title":"\ud83d\ude80 Global Interpreter Lock (GIL) in Python","text":"<p>The Global Interpreter Lock (GIL) is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecodes simultaneously. It exists in the CPython implementation of Python, which is the reference and most widely used implementation of the language.</p>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#overview","title":"\ud83d\udd0d Overview","text":"<ul> <li>\ud83d\udd11 Definition: The GIL is a lock used in the CPython interpreter to ensure that only one thread executes Python bytecode at a time.</li> <li>\ud83c\udfaf Purpose: It protects the integrity of Python objects and ensures thread safety in the interpreter.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#key-points","title":"\u2696\ufe0f Key Points","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#thread-safety","title":"\ud83d\udd10 Thread Safety","text":"<ul> <li>\u2705 Pros:</li> <li>Simplifies memory management and prevents race conditions in CPython.</li> <li>Makes it easier to write safe code for manipulating Python objects.</li> <li>\u274c Cons:</li> <li>Limits the performance of multi-threaded Python programs, especially CPU-bound tasks, since only one thread can execute Python code at a time.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#impact-on-performance","title":"\ud83d\ude80 Impact on Performance","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#single-core-cpus","title":"\ud83d\udcbb Single-Core CPUs","text":"<ul> <li>On single-core systems, the GIL is less of an issue as the CPU executes one instruction at a time.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#multi-core-cpus","title":"\ud83d\udda5\ufe0f Multi-Core CPUs","text":"<ul> <li>On multi-core systems, the GIL can become a bottleneck, limiting the effectiveness of multi-threading for CPU-bound tasks.</li> <li>Threads may not run in parallel, affecting performance and scalability.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#io-bound-programs","title":"\ud83c\udf10 I/O-bound Programs","text":"<ul> <li>The GIL is less of a problem for I/O-bound programs (e.g., network operations, file I/O), as threads spend a lot of time waiting for external events.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#cpu-bound-programs","title":"\ud83d\udd22 CPU-bound Programs","text":"<ul> <li>For CPU-bound tasks, the GIL can be a significant limitation.</li> <li>Solution: Use multiprocessing or external libraries that release the GIL (e.g., NumPy) to achieve parallelism.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#workarounds","title":"\ud83d\udd04 Workarounds","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#multiprocessing","title":"\u26a1 Multiprocessing","text":"<ul> <li>Use the <code>multiprocessing</code> module to bypass the GIL by running multiple processes instead of threads.</li> <li>Each process has its own Python interpreter and memory space, avoiding the GIL.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#extensions-and-libraries","title":"\ud83d\udee0\ufe0f Extensions and Libraries","text":"<ul> <li>Certain C extensions and libraries (e.g., NumPy, Cython) can release the GIL while performing computations, allowing for parallelism.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#gil-in-other-implementations","title":"\ud83c\udf0d GIL in Other Implementations","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#jython","title":"\u2615 Jython","text":"<ul> <li>An implementation of Python for the Java platform does not have a GIL, as it uses Java's threading model.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#ironpython","title":"\ud83c\udfd7\ufe0f IronPython","text":"<ul> <li>An implementation for the .NET framework also does not have a GIL.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#pypy","title":"\ud83d\udc0d PyPy","text":"<ul> <li>An alternative Python interpreter that is experimenting with different approaches to concurrency and may not use a GIL in its Software Transactional Memory (STM) version.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#recent-developments","title":"\ud83c\udd95 Recent Developments","text":""},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#efforts-to-remove-the-gil","title":"\ud83d\udd2c Efforts to Remove the GIL","text":"<ul> <li>There have been ongoing discussions and experiments to remove or reduce the impact of the GIL in CPython.</li> <li>However, removing the GIL is challenging due to the complexity of the existing codebase and the potential impact on performance.</li> </ul>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#example-of-gil-effect","title":"\ud83d\udee0\ufe0f Example of GIL Effect","text":"<p>Here's a simple example to demonstrate how the GIL affects multi-threaded programs:</p> <pre><code>import threading\nimport time\n\ndef cpu_bound_task():\n    total = 0\n    for _ in range(10_000_000):\n        total += 1\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n\n    # Create two threads\n    thread1 = threading.Thread(target=cpu_bound_task)\n    thread2 = threading.Thread(target=cpu_bound_task)\n\n    # Start both threads\n    thread1.start()\n    thread2.start()\n\n    # Wait for both threads to complete\n    thread1.join()\n    thread2.join()\n\n    end_time = time.time()\n    print(f\"Time taken: {end_time - start_time} seconds\")\n</code></pre>"},{"location":"Notes/Dev-Tech-Stacks/Python/concurrency-control-python/GIL-README/#observations","title":"\ud83d\udccc Observations","text":"<ul> <li>Despite having two threads, the GIL prevents true parallel execution of <code>cpu_bound_task</code>.</li> <li>The performance gains are limited compared to a process-based approach.</li> <li>Understanding the GIL is crucial for Python developers, especially when designing multi-threaded applications and optimizing performance.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/","title":"Interview Coding Practice","text":""},{"location":"Notes/Interview-Coding-Practice/#table-of-contents","title":"Table of Contents","text":""},{"location":"Notes/Interview-Coding-Practice/#system-design","title":"System Design","text":"<ul> <li>SOLID Principles</li> <li>HLD Concepts</li> <li>HLD Interview Questions</li> <li>LLD Concepts</li> <li>LLD Interview Questions</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/#data-structure-algorithms","title":"Data Structure &amp; Algorithms","text":"<ul> <li>Important patterns</li> <li>DSA Sheet</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/#interview-notes-google-docs","title":"Interview Notes: Google Docs","text":"<ul> <li>Job Experience</li> <li>HLD </li> <li>LLD</li> <li>DSA</li> <li>Expected Interview Question </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/#how-to-use-the-makefile","title":"How to Use the Makefile","text":"<p>To start MySQL, run:</p> <pre><code>make start\n</code></pre> <p>To stop MySQL, run:</p> <pre><code>make stop\n</code></pre> <p>To connect to MySQL as the root user, run:</p> <pre><code>make connect\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/google-docs/","title":"Interview Notes (Google Docs)","text":"<p>Below are curated interview notes and resources hosted on Google Docs. Click on any link to open the document in a new browser tab for detailed study.</p> <ul> <li>Job Experience</li> <li>High-Level Design (HLD) Notes</li> <li>Low-Level Design (LLD) Notes</li> <li>Data Structures &amp; Algorithms (DSA) Notes</li> <li>Expected Interview Questions</li> </ul> <p>Note: These links open in a new tab for your convenience so you can easily switch back to your study notes.</p>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Amazon%20-%20Online%20Shopping%20System/","title":"Design Amazon - Online Shopping System","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Amazon%20-%20Online%20Shopping%20System/#code","title":"Code","text":"<ul> <li>Here is the high-level definition for the classes described above. </li> <li>Enums, data types, and constants: Here are the required enums, data types, and constants:</li> <li>Account, Customer, Admin, and Guest: These classes represent different people that interact with our system:</li> <li>ProductCategory, Product, and ProductReview: Here are the classes related to a product:</li> <li>ShoppingCart, Item, Order, and OrderLog: Users will add items to the shopping cart and place an order to buy all the items in the cart.</li> <li>Shipment, ShipmentLog, and Notification: After successfully placing an order, a shipment record will be created:</li> <li>Search interface and Catalog: Catalog will implement Search to facilitate searching of products.</li> </ul> <pre><code>public class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic enum OrderStatus {\n  UNSHIPPED, PENDING, SHIPPED, COMPLETED, CANCELED, REFUND_APPLIED\n}\n\npublic enum AccountStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic enum ShipmentStatus {\n  PENDING, SHIPPED, DELIVERED, ON_HOLD,\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic class Account {\n    private String userName;\n    private String password;\n    private AccountStatus status;\n    private String name;\n    private Address shippingAddress;\n    private String email;\n    private String phone;\n\n    private List&lt;CreditCard&gt; creditCards;\n    private List&lt;ElectronicBankTransfer&gt; bankAccounts;\n\n    public boolean addProduct(Product product);\n    public boolean addProductReview(ProductReview review);\n    public boolean resetPassword();\n}\n\npublic abstract class Customer {\n    private ShoppingCart cart;\n    private Order order;\n\n    public ShoppingCart getShoppingCart();\n    public bool addItemToCart(Item item);\n    public bool removeItemFromCart(Item item);\n}\n\npublic class Guest extends Customer {\n    public bool registerAccount();\n}\n\npublic class Member extends Customer {\n    private Account account;\n    public OrderStatus placeOrder(Order order);\n}\n\npublic class ProductCategory {\n    private String name;\n    private String description;\n}\n\npublic class ProductReview {\n    private int rating;\n    private String review;\n\n    private Member reviewer;\n}\n\npublic class Product {\n    private String productID;\n    private String name;\n    private String description;\n    private double price;\n    private ProductCategory category;\n    private int availableItemCount;\n\n    private Account seller;\n\n    public int getAvailableCount();\n    public boolean updatePrice(double newPrice);\n}\n\npublic class Item {\n    private String productID;\n    private int quantity;\n    private double price;\n\n    public boolean updateQuantity(int quantity);\n}\n\npublic class ShoppingCart {\n    private List&lt;Items&gt; items;\n\n    public boolean addItem(Item item);\n    public boolean removeItem(Item item);\n    public boolean updateItemQuantity(Item item, int quantity);\n    public List&lt;Item&gt; getItems();\n    public boolean checkout();\n}\n\npublic class OrderLog {\n    private String orderNumber;\n    private Date creationDate;\n    private OrderStatus status;\n}\n\npublic class Order {\n    private String orderNumber;\n    private OrderStatus status;\n    private Date orderDate;\n    private List&lt;OrderLog&gt; orderLog;\n\n    public boolean sendForShipment();\n    public boolean makePayment(Payment payment);\n    public boolean addOrderLog(OrderLog orderLog);\n}\n\npublic class ShipmentLog {\n    private String shipmentNumber;\n    private ShipmentStatus status;\n    private Date creationDate;\n}\n\npublic class Shipment {\n    private String shipmentNumber;\n    private Date shipmentDate;\n    private Date estimatedArrival;\n    private String shipmentMethod;\n    private List&lt;ShipmentLog&gt; shipmentLogs;\n\n    public boolean addShipmentLog(ShipmentLog shipmentLog);\n}\n\npublic abstract class Notification {\n    private int notificationId;\n    private Date createdOn;\n    private String content;\n\n    public boolean sendNotification(Account account);\n}\n\npublic interface Search {\n    public List&lt;Product&gt; searchProductsByName(String name);\n    public List&lt;Product&gt; searchProductsByCategory(String category);\n}\n\npublic class Catalog implements Search {\n    HashMap&lt;String, List&lt;Product&gt;&gt; productNames;\n    HashMap&lt;String, List&lt;Product&gt;&gt; productCategories;\n\n    public List&lt;Product&gt; searchProductsByName(String name) {\n        return productNames.get(name);\n    }\n\n    public List&lt;Product&gt; searchProductsByCategory(String category) {\n        return productCategories.get(category);\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Blackjack%20and%20a%20Deck%20of%20Cards/","title":"Design Blackjack and a Deck of Cards","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Blackjack%20and%20a%20Deck%20of%20Cards/#code","title":"Code","text":"<ul> <li>Enums: Here are the required enums:</li> <li>Card: The following class encapsulates a playing card:</li> <li>BlackjackCard: BlackjackCard extends from Card class to represent a blackjack card:</li> <li>Deck and Shoe: Shoe contains cards from multiple decks:</li> <li>Hand: Hand class encapsulates a blackjack hand which can contain multiple cards:</li> <li>Player: Player class extends from BasePlayer:</li> <li>Game: This class encapsulates a blackjack game:</li> </ul> <pre><code>public enum SUIT {\n  HEART, SPADE, CLUB, DIAMOND\n}\n\npublic class Card {\n    private SUIT suit;\n    private int faceValue;\n\n    public SUIT getSuit() {\n        return suit;\n    }\n\n    public int getFaceValue() {\n        return faceValue;\n    }\n\n    Card(SUIT suit, int faceValue) {\n        this.suit = suit;\n        this.faceVale = faceValue;\n    }\n}\n\npublic class BlackjackCard extends Card {\n    private int gameValue;\n\n    public int getGameValue() {\n        return gameValue;\n    }\n\n    public BlackjackCard(SUIT suit, int faceValue) {\n        super(suit, faceValue);\n        this.gameValue = faceValue;\n        if(this.gameValue &gt; 10) {\n            this.gameValue = 10;\n        }\n    }\n}\n\npublic class Deck {\n    private List&lt;BlackjackCard&gt; cards;\n    private Date creationDate;\n\n    public Deck() {\n        this.creationDate = new Date();\n        this.cards = new ArrayList&lt;BlackjackCard&gt;();\n        for (int value = 1; value &lt;= 13; value++) {\n            for (SUIT suit : SUIT.values()) {\n                this.cards.add(new BlackjackCard(suit, value));\n            }\n        }\n    }\n\n    public List&lt;BlackjackCard&gt; getCards() {\n        return cards;\n    }\n\n    public class Shoe {\n        private List&lt;BlackjackCard&gt; cards;\n        private int numberOfDecks;\n\n        private void createShoe() {\n            this.cards = new ArrayList&lt;BlackjackCard&gt;();\n            for (int decks = 0; decks &lt; numberOfDecks; decks++) {\n                cards.add(new Deck().getCards());\n            }\n        }\n\n        public Shoe(int numberOfDecks) {\n            this.numberOfDecks = numberOfDecks;\n            createShoe();\n            shuffle();\n        }\n\n        public void shuffle() {\n            int cardCount = cards.size();\n            Random r = new Random();\n            for (int i = 0; i &lt; cardCount; i++) {\n                int index = r.nextInt(cardCount - i - 1);\n                swap(i, index);\n            }\n        }\n\n        public void swap(int i, int j) {\n            BlackjackCard temp = cards[i];\n            cards[i] = cards[j];\n            cards[j] = temp;\n        }\n\n        //Get the next card from the shoe\n        public BlackjackCard dealCard() {\n            if (cards.size() == 0) {\n                createShoe();\n            }\n            return cards.remove(0);\n        }\n    }\n}\n\npublic class Hand {\n    private ArrayList&lt;BlackjackCard&gt; cards;\n\n    private List&lt;Integer&gt; getScores() {\n        List&lt;Integer&gt; totals = new ArrayList();\n        total.add(0);\n\n        for (BlackjackCard card : cards) {\n            List&lt;Integer&gt; newTotals = new ArrayList();\n            for (int score : totals) {\n                newTotals.add(card.faceValue() + score);\n                if (card.faceValue() == 1) {\n                    newTotals.add(11 + score);\n                }\n            }\n            totals = newTotals;\n        }\n        return totals;\n    }\n\n    public Hand(BlackjackCard c1, BlackjackCard c2) {\n        this.cards = new ArrayList&lt;BlackjackCard&gt;();\n        this.cards.add(c1);\n        this.cards.add(c2);\n    }\n\n    public void addCard(BlackjackCard card) {\n        cards.add(card);\n    }\n\n    // get highest score which is less than or equal to 21\n    public int resolveScore() {\n        List&lt;Integer&gt; scores = getScores();\n        int bestScore = 0;\n        for (int score : scores) {\n            if (score &lt;= 21 &amp;&amp; score &gt; bestScore) {\n                bestScore = score;\n            }\n        }\n        return bestScore;\n    }\n}\n\npublic abstract class BasePlayer {\n    private String id;\n    private String password;\n    private double balance;\n    private AccountStatus status;\n    private Person person;\n    private List&lt;Hand&gt; hands;\n\n    public boolean resetPassword();\n\n    public List&lt;Hand&gt; getHands() {\n        return hands;\n    }\n\n    public void addHand(Hand hand) {\n        return hands.add(hand);\n    }\n\n    public void removeHand(Hand hand) {\n        hands.remove(hand);\n    }\n}\n\npublic class Player extends BasePlayer {\n    private int bet;\n    private int totalCash;\n\n    public Player(Hand hand) {\n        this.hands = new ArrayList&lt;Hand&gt;();\n        this.hands.add(hand);\n    }\n}\n\npublic class Game {\n    private Player player;\n    private Dealer dealer;\n    private Shoe shoe;\n    private final int MAX_NUM_OF_DECKS = 3;\n\n    private void playAction(string action, Hand hand) {\n        switch(action) {\n            case \"hit\": hit(hand); break;\n            case \"split\": split(hand); break;\n            case \"stand pat\": break; //do nothing\n            case \"stand\": stand(); break;\n            default: print(\"Wrong input\");\n        }\n    }\n\n    private void hit(Hand hand) {\n        hand.addCard(shoe.dealCard());\n    }\n\n    private void stand() {\n        int dealerScore = dealer.getTotalScore();\n        int playerScore = player.getTotalScore();\n        List&lt;Hand&gt; hands = player.getHands();\n        for(Hand hand : hands) {\n            int bestScore = hand.resolveScore();\n            if(playerScore == 21){\n                //blackjack, pay 3:2 of the bet\n            } else if (playerScore &gt; dealerScore) {\n                // pay player equal to the bet\n            } else if (playerScore &lt; dealerScore) {\n                // collect the bet from the player\n            } else { //tie\n                // bet goes back to player\n            }\n        }\n    }\n\n    private void split(Hand hand) {\n        Cards cards = hand.getCards();\n        player.addHand(new Hand(cards[0], shoe.dealCard()));\n        player.addHand(new Hand(cards[1], shoe.dealCard()));\n        player.removeHand(hand);\n    }\n\n\n    public Game(Player player, Dealer dealer) {\n        this.player = player;\n        this.dealer = dealeer;\n        Shoe shoe= new Shoe(MAX_NUM_OF_DECKS);\n    }\n\n    public void start() {\n        player.placeBet(getBetFromUI());\n\n        Hand playerHand = new Hand(shoe.dealCard(), shoe.dealCard());\n        player.addToHand(playerHand);\n\n        Hand dealerHand = new Hand(shoe.dealCard(), shoe.dealCard());\n        dealer.addToHand(dealerHand);\n\n        while(true){\n            List&lt;Hand&gt; hands = player.getHands();\n            for(Hand hand : hands) {\n                string action = getUserAction(hand);\n                playAction(action, hand);\n                if(action.equals(\"stand\")) {\n                    break;\n                }\n            }\n        }\n    }\n\n    public static void main(String args[]) {\n        Player player = new Player();\n        Dealer dealer = new Dealer();\n        Game game = new Game(player, dealer);\n        game.start();\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Chess/","title":"Design Chess","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Chess/#code","title":"Code","text":"<ul> <li>Here is the code for the top use cases. </li> <li>Enums, DataTypes, Constants: Here are the required enums, data types, and constants:</li> <li>Box: To encapsulate a cell on the chess board:</li> <li>Piece: An abstract class to encapsulate common functionality of all chess pieces:</li> <li>King: To encapsulate King as a chess piece:</li> <li>Knight: To encapsulate Knight as a chess piece:</li> <li>Board: To encapsulate a chess board:</li> <li>Player: To encapsulate a chess player:</li> <li>Move: To encapsulate a chess move:</li> <li>Game: To encapsulate a chess game:</li> </ul> <pre><code>public enum GameStatus {\n  ACTIVE, BLACK_WIN, WHITE_WIN, FORFEIT, STALEMATE, RESIGNATION\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, NONE\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}\n\npublic class Box {\n    private Piece piece;\n    private int x;\n    private int y;\n\n    public Box(int x, int y, Piece piece) {\n        this.setPiece(piece);\n        this.setX(x);\n        this.setY(y);\n    }\n\n    public Piece getPiece() {\n        return this.piece;\n    }\n\n    public void setPiece(Piece p) {\n        this.piece = p;\n    }\n\n    public int getX() {\n        return this.x;\n    }\n\n    public void setX(int x) {\n        this.x = x;\n    }\n\n    public int getY() {\n        return this.y;\n    }\n\n    public void setY(int y) {\n        this.y = y;\n    }\n}\n\npublic abstract class Piece {\n\n    private boolean killed = false;\n    private boolean white = false;\n\n    public Piece(boolean white) {\n        this.setWhite(white);\n    }\n\n    public boolean isWhite() {\n        return this.white == true;\n    }\n\n    public void setWhite(boolean white) {\n        this.white = white;\n    }\n\n    public boolean isKilled() {\n        return this.killed == true;\n    }\n\n    public void setKilled(boolean killed) {\n        this.killed = killed;\n    }\n\n    public abstract boolean canMove(Board board, Box start, Box end);\n}\n\npublic class King extends Piece {\n    private boolean castlingDone = false;\n\n    public King(boolean white) {\n        super(white);\n    }\n\n    public boolean isCastlingDone() {\n        return this.castlingDone == true;\n    }\n\n    public void setCastlingDone(boolean castlingDone) {\n        this.castlingDone = castlingDone;\n    }\n\n    @Override\n    public boolean canMove(Board board, Box start, Box end) {\n        // we can't move the piece to a box that has a piece of the same color\n        if(end.getPiece().isWhite() == this.isWhite()) {\n            return false;\n        }\n\n        int x = Math.abs(start.getX() - end.getX());\n        int y = Math.abs(start.getY() - end.getY());\n        if(x + y == 1) {\n            // check if this move will not result in king being attacked, if so return true\n            return true;\n        }\n\n        return this.isValidCastling(board, start, end);\n    }\n\n    private boolean isValidCastling(Board board, Box start, Box end) {\n\n        if(this.isCastlingDone()) {\n            return false;\n        }\n\n        // check for the white king castling\n        if(this.isWhite()\n                &amp;&amp; start.getX() == 0 &amp;&amp; start.getY() == 4 &amp;&amp; end.getY() == 0) {\n            // confirm if white king moved to the correct ending box\n            if (Math.abs(end.getY() - start.getY()) == 2) {\n                // check if there the Rook is in the correct position\n                // check if there is no piece between Rook and the King\n                // check if the King or the Rook has not moved before\n                // check if this move will not result in king being attacked\n                //...\n                this.setCastlingDone(true);\n                return true;\n            }\n        } else {\n            // check for the black king castling\n            this.setCastlingDone(true);\n            return true;\n        }\n\n        return false;\n    }\n\n    public boolean isCastlingMove(Box start, Box end) {\n        // check if the starting and ending position are correct\n    }\n}\n\npublic class Knight extends Piece {\n    public Knight(boolean white) {\n        super(white);\n    }\n\n    @Override\n    public boolean canMove(Board board, Box start, Box end) {\n\n        // we can't move the piece to a box that has a piece of the same color\n        if(end.getPiece().isWhite() == this.isWhite()) {\n            return false;\n        }\n\n        int x = Math.abs(start.getX() - end.getX());\n        int y = Math.abs(start.getY() - end.getY());\n        return x * y == 2;\n    }\n}\n\npublic class Board {\n    Box[][] boxes;\n\n    public Board() {\n        this.resetBoard();\n    }\n\n    public Box getBox(int x, int y) {\n\n        if (x &lt; 0 || x &gt; 7 || y &lt; 0 || y &gt; 7) {\n            throw new Exception(\"Index out of bound\");\n        }\n\n        return boxes[x][y];\n    }\n\n    public void resetBoard() {\n        // initialize white pieces\n        boxes[0][0] = new Box(new Rook(true), 0, 0);\n        boxes[0][1] = new Box(new Knight(true), 0, 1);\n        boxes[0][2] = new Box(new Bishop(true), 0, 2);\n        //...\n        boxes[1][0] = new Box(new Pawn(true), 1, 0);\n        boxes[1][1] = new Box(new Pawn(true), 1, 1);\n        //...\n\n        // initialize black pieces\n        boxes[7][0] = new Box(new Rook(false), 7, 0);\n        boxes[7][1] = new Box(new Knight(false), 7, 1);\n        boxes[7][2] = new Box(new Bishop(false), 7, 2);\n        //...\n        boxes[6][0] = new Box(new Pawn(false), 6, 0);\n        boxes[6][1] = new Box(new Pawn(false), 6, 1);\n        //...\n\n        // initialize remaining boxes without any piece\n        for (int i = 2; i &lt; 6; i++) {\n            for (int j = 0; j &lt; 8; j++) {\n                boxes[i][j] = new Box(null, i, j);\n            }\n        }\n    }\n}\n\npublic class Player extends Account{\n    private Person person;\n    private boolean whiteSide = false;\n\n    public Player(Person person, boolean whiteSide){\n        this.person = person;\n        this.whiteSide = whiteSide;\n    }\n\n    public boolean isWhiteSide() {\n        return this.whiteSide == true;\n    }\n}\n\npublic class Move {\n    private Player player;\n    private Box start;\n    private Box end;\n    private Piece pieceMoved;\n    private Piece pieceKilled;\n    private boolean castlingMove = false;\n\n    public Move(Player player, Box start, Box end){\n        this.player = player;\n        this.start = start;\n        this.end = end;\n        this.pieceMoved = start.getPiece();\n    }\n\n    public boolean isCastlingMove() {\n        return this.castlingMove == true;\n    }\n\n    public void setCastlingMove(boolean castlingMove) {\n        this.castlingMove = castlingMove;\n    }\n}\n\npublic class Game {\n    private Player[] players;\n    private Board board;\n    private Player currentTurn;\n    private GameStatus status;\n    private List&lt;Move&gt; movesPlayed;\n\n    private void initialize(Player p1, Player p2) {\n        players[0] = p1;\n        players[1] = p2;\n\n        board.resetBoard();\n\n        if(p1.isWhiteSide()) {\n            this.currentTurn = p1;\n        } else {\n            this.currentTurn = p2;\n        }\n\n        movesPlayed.clear();\n    }\n\n    public boolean isEnd() {\n        return this.getStatus() != GameStatus.ACTIVE;\n    }\n\n    public boolean getStatus() {\n        return this.status;\n    }\n\n    public void setStatus(GameStatus status) {\n        this.status = status;\n    }\n\n    public boolean playerMove(Player player, int startX, int startY, int endX, int endY) {\n        Box startBox = board.getBox(startX, startY);\n        Box endBox = board.getBox(startY, endY);\n        Move move = new Move(player, startBox, endBox);\n        return this.makeMove(move, player);\n    }\n\n    private boolean makeMove(Move move, Player player) {\n        Piece sourcePiece = move.getStart().getPiece();\n        if (sourcePiece == null) {\n            return false;\n        }\n\n        // valid player\n        if (player != currentTurn) {\n            return false;\n        }\n\n        if (sourcePiece.isWhite() != player.isWhiteSide()) {\n            return false;\n        }\n\n        // valid move?\n        if (!sourcePiece.canMove(board, move.getStart(), move.getEnd())){\n            return false;\n        }\n\n        // kill?\n        Piece destPiece = move.getStart().getPiece();\n        if (destPiece != null) {\n            destPiece.setKilled(true);\n            move.setPieceKilled(destPiece);\n        }\n\n        // castling?\n        if (sourcePiece != null &amp;&amp; sourcePiece instanceof King\n                &amp;&amp; sourcePiece.isCastlingMove()) {\n            move.setCastlingMove(true);\n        }\n\n        // store the move\n        movesPlayed.add(move);\n\n        // move piece from the stat box to end box\n        move.getEnd().setPiece(move.getStart().getPiece());\n        move.getStart.setPiece(null);\n\n        if (destPiece != null &amp;&amp; destPiece instanceof King) {\n            if(player.isWhiteSide()) {\n                this.setStatus(GameStatus.WHITE_WIN);\n            } else {\n                this.setStatus(GameStatus.BLACK_WIN);\n            }\n        }\n\n        // set the current turn to the other player\n        if(this.currentTurn == players[0]) {\n            this.currentTurn = players[1];\n        } else {\n            this.currentTurn = players[0];\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Cricinfo/","title":"Design Cricinfo","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Cricinfo/#code","title":"Code","text":"<ul> <li>Here is the high-level definition for the classes described above. </li> <li>Enums, data types, and constants: Here are the required enums, data types, and constants:</li> <li>Admin, Player, Umpire, Referee, and Commentator: These classes represent the different people that interact with our system:</li> <li>Team, TournamentSquad, and Playing11: Team will announce a squad for a tournament, out of which, the playing 11 will be chosen:</li> <li>Over, Ball, Wicket, Commentary, Inning, and Match: Match will be an abstract class, extended by ODI, Test, and T20:</li> </ul> <pre><code>public class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}\n\npublic enum MatchFormat {\n  ODI,\n  T20,\n  TEST\n}\n\npublic enum MatchResult {\n  LIVE,\n  FINISHED,\n  DRAWN,\n  CANCELED\n}\n\npublic enum UmpireType {\n  FIELD,\n  RESERVED,\n  TV\n}\n\npublic enum WicketType {\n  BOLD,\n  CAUGHT,\n  STUMPED,\n  RUN_OUT,\n  LBW,\n  RETIRED_HURT,\n  HIT_WICKET,\n  OBSTRUCTING\n}\n\npublic enum BallType {\n  NORMAL,\n  WIDE,\n  WICKET,\n  NO_BALL\n}\n\npublic enum RunType {\n  NORMAL,\n  FOUR,\n  SIX,\n  LEG_BYE,\n  BYE,\n  NO_BALL,\n  OVERTHROW\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Player {\n    private Person person;\n    private ArrayList&lt;PlayerContract&gt; contracts;\n\n    public boolean addContract();\n}\n\npublic class Admin {\n    private Person person;\n\n    public boolean addMatch(Match match);\n\n    public boolean addTeam(Team team);\n\n    public boolean addTournament(Tournament tournament);\n}\n\npublic class Umpire {\n    private Person person;\n\n    public boolean assignMatch(Match match);\n}\n\npublic class Referee {\n    private Person person;\n\n    public boolean assignMatch(Match match);\n}\n\npublic class Commentator {\n    private Person person;\n\n    public boolean assignMatch(Match match);\n}\n\npublic class Team {\n    private String name;\n    private List&lt;Player&gt; players;\n    private List&lt;News&gt; news;\n    private Coach coach;\n\n    public boolean addTournamentSquad(TournamentSquad tournamentSquad);\n    public boolean addPlayer(Player player);\n    public boolean addNews(News news);\n}\n\npublic class TournamentSquad {\n    private List&lt;Player&gt; players;\n    private List&lt;TournamentStat&gt; tournamentStats;\n\n    public boolean addPlayer(Player player);\n}\n\npublic class Playing11 {\n    private List&lt;Player&gt; players;\n    private Player twelfthMan;\n\n    public boolean addPlayer(Player player);\n}\n\npublic class Over {\n    private int number;\n    private List&lt;Ball&gt; balls;\n\n    public boolean addBall(Ball ball);\n}\n\npublic class Ball {\n    private Player balledBy;\n    private Player playedBy;\n    private BallType type;\n\n    private Wicket wicket;\n    private List&lt;Run&gt; runs;\n    private Commentary commentary;\n\n}\n\npublic class Wicket {\n    private WicketType wicketType;\n    private Player playerOut;\n    private Player caughtBy;\n    private Player runoutBy;\n    private Player stumpedBy;\n}\n\npublic class Commentary {\n    private String text;\n    private Date createdAt;\n    private Commentator createdBy;\n}\n\npublic class Inning {\n    private int number;\n    private Date startTime;\n    private List&lt;Over&gt; overs;\n\n    public boolean addOver(Over over);\n}\n\npublic abstract class Match {\n    private int number;\n    private Date startTime;\n    private MatchResult result;\n\n    private Playing11[] teams;\n    private List&lt;Inning&gt; innings;\n    private List&lt;Umpire&gt; umpires;\n    private Referee referee;\n    private List&lt;Commentator&gt; commentators;\n    private List&lt;MatchStat&gt; matchStats;\n\n    public boolean assignStadium(Stadium stadium);\n\n    public boolean assignReferee(Referee referee);\n}\n\npublic class ODI extends Match {\n    //...\n}\n\npublic class Test extends Match {\n    //...\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Facebook%20-%20a%20social%20network/","title":"Design Facebook - a social network","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Facebook%20-%20a%20social%20network/#code","title":"Code","text":"<ul> <li>Here is the high-level definition for the classes described above. </li> <li>Enums, data types, and constants: Here are the required enums, data types, and constants:</li> <li>Account, Person, Member, and Admin: These classes represent the different people that interact with our system:</li> <li>Profile and Work: A member\u2019s profile will have their work experiences, educations, places, etc:</li> <li>Page and Recommendation: Each page can have multiple recommendations, and members will follow/like pages:</li> <li>Group, Post, Message, and Comment: Members can create posts, comment on posts, send messages and join groups:</li> <li>Search interface and SearchIndex: SearchIndex will implement Search to facilitate searching of members, groups, pages, and posts:</li> </ul> <pre><code>public enum ConnectionInvitationStatus{\n  PENDING,\n  ACCEPTED,\n  REJECTED,\n  CANCELED\n}\n\npublic enum AccountStatus{\n  ACTIVE,\n  CLOSED,\n  CANCELED,\n  BLACKLISTED,\n  DISABLED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n\n    public boolean resetPassword();\n}\n\npublic abstract class Person {\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n\n    private Account account;\n}\n\npublic class Member extends Person {\n    private Integer memberId;\n    private Date dateOfMembership;\n    private String name;\n\n    private Profile profile;\n    private HashSet&lt;Integer&gt; memberFollows;\n    private HashSet&lt;Integer&gt; memberConnections;\n    private HashSet&lt;Integer&gt; pageFollows;\n    private HashSet&lt;Integer&gt; memberSuggestions;\n    private HashSet&lt;ConnectionInvitation&gt; connectionInvitations;\n    private HashSet&lt;Integer&gt; groupFollows;\n\n    public boolean sendMessage(Message message);\n    public boolean createPost(Post post);\n    public boolean sendConnectionInvitation(ConnectionInvitation invitation);\n    private Map&lt;Integer, Integer&gt; searchMemberSuggestions();\n}\n\npublic class Admin extends Person {\n    public boolean blockUser(Member member);\n    public boolean unblockUser(Member member);\n    public boolean enablePage(Page page);\n    public boolean disablePage(Page page);\n}\n\npublic class ConnectionInvitation {\n    private Member memberInvited;\n    private ConnectionInvitationStatus status;\n    private Date dateCreated;\n    private Date dateUpdated;\n\n    public bool acceptConnection();\n    public bool rejectConnection();\n}\n\npublic class Profile {\n    private byte[] profilePicture;\n    private byte[] coverPhoto;\n    private String gender;\n\n    private List&lt;Work&gt; workExperiences;\n    private List&lt;Education&gt; educations;\n    private List&lt;Place&gt; places;\n    private List&lt;Stat&gt; stats;\n\n    public boolean addWorkExperience(Work work);\n    public boolean addEducation(Education education);\n    public boolean addPlace(Place place);\n}\n\npublic class Work {\n    private String title;\n    private String company;\n    private String location;\n    private Date from;\n    private Date to;\n    private String description;\n}\n\npublic class Page {\n    private Integer pageId;\n    private String name;\n    private String description;\n    private String type;\n    private int totalMembers;\n    private List&lt;Recommendation&gt; recommendation;\n\n    private List&lt;Recommendation&gt; getRecommendation();\n}\n\npublic class Recommendation {\n    private Integer recommendationId;\n    private int rating;\n    private String description;\n    private Date createdAt;\n}\n\npublic class Group {\n    private Integer groupId;\n    private String name;\n    private String description;\n    private int totalMembers;\n    private List&lt;Member&gt; members;\n\n    public boolean addMember(Member member);\n    public boolean updateDescription(String description);\n}\n\npublic class Post {\n    private Integer postId;\n    private String text;\n    private int totalLikes;\n    private int totalShares;\n    private Member owner;\n}\n\npublic class Message {\n    private Integer messageId;\n    private Member[] sentTo;\n    private String messageBody;\n    private byte[] media;\n\n    public boolean addMember(Member member);\n}\n\npublic class Comment {\n    private Integer commentId;\n    private String text;\n    private int totalLikes;\n    private Member owner;\n}\n\npublic interface Search {\n    public List&lt;Member&gt; searchMember(String name);\n    public List&lt;Group&gt; searchGroup(String name);\n    public List&lt;Page&gt; searchPage(String name);\n    public List&lt;Post&gt; searchPost(String word);\n}\n\npublic class SearchIndex implements Search {\n    HashMap&lt;String, List&lt;Member&gt;&gt; memberNames;\n    HashMap&lt;String, List&lt;Group&gt;&gt; groupNames;\n    HashMap&lt;String, List&lt;Page&gt;&gt; pageTitles;\n    HashMap&lt;String, List&lt;Post&gt;&gt; posts;\n\n    public boolean addMember(Member member) {\n        if(memberNames.containsKey(member.getName())) {\n            memberNames.get(member.getName()).add(member);\n        } else {\n            memberNames.put(member.getName(), member);\n        }\n    }\n\n    public boolean addGroup(Group group);\n    public boolean addPage(Page page);\n    public boolean addPost(Post post);\n\n    public List&lt;Member&gt; searchMember(String name) {\n        return memberNames.get(name);\n    }\n\n    public List&lt;Group&gt; searchGroup(String name) {\n        return groupNames.get(name);\n    }\n\n    public List&lt;Page&gt; searchPage(String name) {\n        return pageTitles.get(name);\n    }\n\n    public List&lt;Post&gt; searchPost(String word) {\n        return posts.get(word);\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Facebook%20-%20a%20social%20network/#extended-requirement","title":"Extended requirement","text":"<ul> <li>Here is the code for finding connection suggestions for a member.</li> <li>There can be many strategies to search for connection suggestions; we will do a two-level deep breadth-first search to find people who have the most connections with each other. </li> <li>These people could be good candidates for a connection suggestion, here is the sample Java code:</li> </ul> <pre><code>import java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport static java.util.Collections.reverseOrder;\n\npublic class Member extends Person {\n  private Integer memberId;\n  private Date dateOfMembership;\n  private String name;\n\n  private Profile profile;\n  private HashSet&lt;Integer&gt; memberFollows;\n  private HashSet&lt;Integer&gt; memberConnections;\n  private HashSet&lt;Integer&gt; pageFollows;\n  private HashSet&lt;Integer&gt; memberSuggestions;\n  private HashSet&lt;ConnectionInvitation&gt; connectionInvitations;\n  private HashSet&lt;Integer&gt; groupFollows;\n\n  public boolean sendMessage(Message message);\n  public boolean createPost(Post post);\n  public boolean sendConnectionInvitation(ConnectionInvitation invitation);\n\n  private Map&lt;Integer, Integer&gt; searchMemberSuggestions() {\n    Map&lt;Integer, Integer&gt; suggestions = new HashMap&lt;&gt;();\n    for(Integer memberId : this.memberConnections) {\n      HashSet&lt;Integer&gt; firstLevelConnections = new Member(memberId).getMemberConnections());\n      for(Integer firstLevelConnectionId : firstLevelConnections) {\n        this.findMemberSuggestion(suggestions, firstLevelConnectionId);\n        HashSet&lt;Integer&gt; secondLevelConnections = new Member(firstLevelConnectionId).getMemberConnections());\n        for(Integer secondLevelConnectionId : secondLevelConnections) {\n          this.findMemberSuggestion(suggestions, secondLevelConnectionId);\n        }\n      }\n      }\n\n    // sort by value (increasing count), i.e., by highest number of mutual connection count\n    Map&lt;Integer, Integer&gt; result = new LinkedHashMap&lt;&gt;();\n    suggestions.entrySet().stream()\n        .sorted(reverseOrder(Map.Entry.comparingByValue()))\n        .forEachOrdered(x -&gt; result.put(x.getKey(), x.getValue()));\n\n    return result;\n  }\n\n  private void findMemberSuggestion(Map&lt;Integer, Integer&gt; suggestions, Integer connectionId) {\n    // return if the proposed suggestion is already a connection or if there is a\n    // pending connection invitation\n    if(this.memberConnections.contains(connectionId) ||\n        this.connectionInvitations.contains(connectionId)) {\n      return;\n    }\n\n    int count = suggestions.containsKey(connectionId) ? suggestions.get(connectionId) : 0;\n    suggestions.put(connectionId, count + 1);\n  }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20LinkedIn/","title":"Design LinkedIn","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20LinkedIn/#code","title":"Code","text":"<ul> <li>Here is the high-level definition for the classes described above:</li> <li>Enums, data types, and constants: Here are the required enums, data types, and constants:</li> <li>Account, Person, Member, and Admin: These classes represent the different people that interact with our system:</li> <li>Profile, Experience, etc: A member\u2019s profile will have their job experiences, educations, skills, etc:</li> <li>Company and JobPosting: Companies can have multiple job postings:</li> <li>Group, Post, and Message: Members can create posts, send messages, and join groups:</li> <li>Search interface and SearchIndex: SearchIndex will implement the Search interface to facilitate searching for members, companies and job postings:</li> </ul> <pre><code>public enum ConnectionInvitationStatus {\n  PENDING, ACCEPTED, CONFIRMED, REJECTED, CANCELED\n}\n\npublic enum AccountStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n\n    public boolean resetPassword();\n}\n\npublic abstract class Person {\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n\n    private Account account;\n}\n\npublic class Member extends Person {\n    private Date dateOfMembership;\n    private String headline;\n    private byte[] photo;\n    private List&lt;Member&gt; memberSuggestions;\n    private List&lt;Member&gt; memberFollows;\n    private List&lt;Member&gt; memberConnections;\n    private List&lt;Company&gt; companyFollows;\n    private List&lt;Group&gt; groupFollows;\n    private Profile profile;\n\n    public boolean sendMessage(Message message);\n    public boolean createPost(Post post);\n    public boolean sendConnectionInvitation(ConnectionInvitation invitation);\n}\n\npublic class Admin extends Person {\n    public boolean blockUser(Customer customer);\n    public boolean unblockUser(Customer customer);\n}\n\npublic class Profile {\n    private String summary;\n    private List&lt;Experience&gt; experiences;\n    private List&lt;Education&gt; educations;\n    private List&lt;Skill&gt; skills;\n    private List&lt;Accomplishment&gt; accomplishments;\n    private List&lt;Recommendation&gt; recommendations;\n    private List&lt;Stat&gt; stats;\n\n    public boolean addExperience(Experience experience);\n    public boolean addEducation(Education education);\n    public boolean addSkill(Skill skill);\n    public boolean addAccomplishment(Accomplishment accomplishment);\n    public boolean addRecommendation(Recommendation recommendation);\n}\n\npublic class Experience {\n    private String title;\n    private String company;\n    private String location;\n    private Date from;\n    private Date to;\n    private String description;\n}\n\npublic class Company {\n    private String name;\n    private String description;\n    private String type;\n    private int companySize;\n\n    private List&lt;JobPosting&gt; activeJobPostings;\n}\n\npublic class JobPosting {\n    private Date dateOfPosting;\n    private String description;\n    private String employmentType;\n    private String location;\n    private boolean isFulfilled;\n}\n\npublic class Group {\n    private String name;\n    private String description;\n    private int totalMembers;\n    private List&lt;Member&gt; members;\n\n    public boolean addMember(Member member);\n\n    public boolean updateDescription(String description);\n}\n\npublic class Post {\n    private String text;\n    private int totalLikes;\n    private int totalShares;\n    private Member owner;\n}\n\npublic class Message {\n    private Member[] sentTo;\n    private String messageBody;\n    private byte[] media;\n}\n\npublic interface Search {\n    public List&lt;Member&gt; searchMember(String name);\n\n    public List&lt;Company&gt; searchCompany(String name);\n\n    public List&lt;JobPosting&gt; searchJob(String title);\n}\n\npublic class SearchIndex implements Search {\n    HashMap&lt;String, List&lt;Member&gt;&gt; memberNames;\n    HashMap&lt;String, List&lt;Company&gt;&gt; companyNames;\n    HashMap&lt;String, List&lt;JobPosting&gt;&gt; jobTitles;\n\n    public boolean addMember(Member member) {\n        if (memberNames.containsKey(member.getName())) {\n            memberNames.get(member.getName()).add(member);\n        } else {\n            memberNames.put(member.getName(), member);\n        }\n    }\n\n    public boolean addCompany(Company company);\n\n    public boolean addJobPosting(JobPosting jobPosting);\n\n    public List&lt;Member&gt; searchMember(String name) {\n        return memberNames.get(name);\n    }\n\n    public List&lt;Company&gt; searchCompany(String name) {\n        return companyNames.get(name);\n    }\n\n    public List&lt;JobPosting&gt; searchJob(String title) {\n        return jobTitles.get(title);\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Parking%20Lot/","title":"Design a Parking Lot","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Parking%20Lot/#code","title":"Code","text":"<ul> <li>Following is the skeleton code for our parking lot system:</li> <li>Enums and Constants: Here are the required enums, data types, and constants:</li> <li>Account, Admin, and ParkingAttendant: These classes represent various people that interact with our system: </li> <li>ParkingSpot: Here is the definition of ParkingSpot and all of its children classes:</li> <li>Vehicle: Here is the definition for Vehicle and all of its child classes:</li> <li>ParkingFloor: This class encapsulates a parking floor:</li> <li>ParkingDisplayBoard: This class encapsulates a parking display board:</li> <li>ParkingLot: Our system will have only one object of this class. This can be enforced by using the Singleton pattern. In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to only one object. </li> </ul> <pre><code>public enum VehicleType {\n    CAR, TRUCK, ELECTRIC, VAN, MOTORBIKE\n}\n\npublic enum ParkingSpotType {\n    HANDICAPPED, COMPACT, LARGE, MOTORBIKE, ELECTRIC\n}\n\npublic enum AccountStatus {\n    ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic enum ParkingTicketStatus {\n    ACTIVE, PAID, LOST\n}\n\npublic class Address {\n    private String streetAddress;\n    private String city;\n    private String state;\n    private String zipCode;\n    private String country;\n}\n\npublic class Person {\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic abstract class Account {\n    private String userName;\n    private String password;\n    private AccountStatus status;\n    private Person person;\n\n    public boolean resetPassword();\n}\n\npublic class Admin extends Account {\n    public bool addParkingFloor(ParkingFloor floor);\n    public bool addParkingSpot(String floorName, ParkingSpot spot);\n    public bool addParkingDisplayBoard(String floorName, ParkingDisplayBoard displayBoard);\n    public bool addCustomerInfoPanel(String floorName, CustomerInfoPanel infoPanel);\n\n    public bool addEntrancePanel(EntrancePanel entrancePanel);\n    public bool addExitPanel(ExitPanel exitPanel);\n}\n\npublic class ParkingAttendant extends Account {\n    public bool processTicket(string TicketNumber);\n}\n\npublic abstract class ParkingSpot {\n    private String number;\n    private boolean free;\n    private Vehicle vehicle;\n    private final ParkingSpotType type;\n\n    public boolean IsFree();\n\n    public ParkingSpot(ParkingSpotType type) {\n        this.type = type;\n    }\n\n    public boolean assignVehicle(Vehicle vehicle) {\n        this.vehicle = vehicle;\n        free = false;\n    }\n\n    public boolean removeVehicle() {\n        this.vehicle = null;\n        free = true;\n    }\n}\n\npublic class HandicappedSpot extends ParkingSpot {\n    public HandicappedSpot() {\n        super(ParkingSpotType.HANDICAPPED);\n    }\n}\n\npublic class CompactSpot extends ParkingSpot {\n    public CompactSpot() {\n        super(ParkingSpotType.COMPACT);\n    }\n}\n\npublic class LargeSpot extends ParkingSpot {\n    public LargeSpot() {\n        super(ParkingSpotType.LARGE);\n    }\n}\n\npublic class MotorbikeSpot extends ParkingSpot {\n    public MotorbikeSpot() {\n        super(ParkingSpotType.MOTORBIKE);\n    }\n}\n\npublic class ElectricSpot extends ParkingSpot {\n    public ElectricSpot() {\n        super(ParkingSpotType.ELECTRIC);\n    }\n}\n\npublic abstract class Vehicle {\n    private String licenseNumber;\n    private final VehicleType type;\n    private ParkingTicket ticket;\n\n    public Vehicle(VehicleType type) {\n        this.type = type;\n    }\n\n    public void assignTicket(ParkingTicket ticket) {\n        this.ticket = ticket;\n    }\n}\n\npublic class Car extends Vehicle {\n    public Car() {\n        super(VehicleType.CAR);\n    }\n}\n\npublic class Van extends Vehicle {\n    public Van() {\n        super(VehicleType.VAN);\n    }\n}\n\npublic class Truck extends Vehicle {\n    public Truck() {\n        super(VehicleType.TRUCK);\n    }\n}\n\n// Similarly we can define classes for Motorcycle and Electric vehicles\n\npublic class ParkingFloor {\n    private String name;\n    private HashMap&lt;String, HandicappedSpot&gt; handicappedSpots;\n    private HashMap&lt;String, CompactSpot&gt; compactSpots;\n    private HashMap&lt;String, LargeSpot&gt; largeSpots;\n    private HashMap&lt;String, MotorbikeSpot&gt; motorbikeSpots;\n    private HashMap&lt;String, ElectricSpot&gt; electricSpots;\n    private HashMap&lt;String, CustomerInfoPortal&gt; infoPortals;\n    private ParkingDisplayBoard displayBoard;\n\n    public ParkingFloor(String name) {\n        this.name = name;\n    }\n\n    public void addParkingSpot(ParkingSpot spot) {\n        switch (spot.getType()) {\n            case ParkingSpotType.HANDICAPPED:\n                handicappedSpots.put(spot.getNumber(), spot);\n                break;\n            case ParkingSpotType.COMPACT:\n                compactSpots.put(spot.getNumber(), spot);\n                break;\n            case ParkingSpotType.LARGE:\n                largeSpots.put(spot.getNumber(), spot);\n                break;\n            case ParkingSpotType.MOTORBIKE:\n                motorbikeSpots.put(spot.getNumber(), spot);\n                break;\n            case ParkingSpotType.ELECTRIC:\n                electricSpots.put(spot.getNumber(), spot);\n                break;\n            default:\n                print(\"Wrong parking spot type!\");\n        }\n    }\n\n    public void assignVehicleToSpot(Vehicle vehicle, ParkingSpot spot) {\n        spot.assignVehicle(vehicle);\n        switch (spot.getType()) {\n            case ParkingSpotType.HANDICAPPED:\n                updateDisplayBoardForHandicapped(spot);\n                break;\n            case ParkingSpotType.COMPACT:\n                updateDisplayBoardForCompact(spot);\n                break;\n            case ParkingSpotType.LARGE:\n                updateDisplayBoardForLarge(spot);\n                break;\n            case ParkingSpotType.MOTORBIKE:\n                updateDisplayBoardForMotorbike(spot);\n                break;\n            case ParkingSpotType.ELECTRIC:\n                updateDisplayBoardForElectric(spot);\n                break;\n            default:\n                print(\"Wrong parking spot type!\");\n        }\n    }\n\n    private void updateDisplayBoardForHandicapped(ParkingSpot spot) {\n        if (this.displayBoard.getHandicappedFreeSpot().getNumber() == spot.getNumber()) {\n            // find another free handicapped parking and assign to displayBoard\n            for (String key : handicappedSpots.keySet()) {\n                if (handicappedSpots.get(key).isFree()) {\n                    this.displayBoard.setHandicappedFreeSpot(handicappedSpots.get(key));\n                }\n            }\n            this.displayBoard.showEmptySpotNumber();\n        }\n    }\n\n    private void updateDisplayBoardForCompact(ParkingSpot spot) {\n        if (this.displayBoard.getCompactFreeSpot().getNumber() == spot.getNumber()) {\n            // find another free compact parking and assign to displayBoard\n            for (String key : compactSpots.keySet()) {\n                if (compactSpots.get(key).isFree()) {\n                    this.displayBoard.setCompactFreeSpot(compactSpots.get(key));\n                }\n            }\n            this.displayBoard.showEmptySpotNumber();\n        }\n    }\n\n    public void freeSpot(ParkingSpot spot) {\n        spot.removeVehicle();\n        switch (spot.getType()) {\n            case ParkingSpotType.HANDICAPPED:\n                freeHandicappedSpotCount++;\n                break;\n            case ParkingSpotType.COMPACT:\n                freeCompactSpotCount++;\n                break;\n            case ParkingSpotType.LARGE:\n                freeLargeSpotCount++;\n                break;\n            case ParkingSpotType.MOTORBIKE:\n                freeMotorbikeSpotCount++;\n                break;\n            case ParkingSpotType.ELECTRIC:\n                freeElectricSpotCount++;\n                break;\n            default:\n                print(\"Wrong parking spot type!\");\n        }\n    }\n}\n\npublic class ParkingDisplayBoard {\n    private String id;\n    private HandicappedSpot handicappedFreeSpot;\n    private CompactSpot compactFreeSpot;\n    private LargeSpot largeFreeSpot;\n    private MotorbikeSpot motorbikeFreeSpot;\n    private ElectricSpot electricFreeSpot;\n\n    public void showEmptySpotNumber() {\n        String message = \"\";\n        if(handicappedFreeSpot.IsFree()){\n            message += \"Free Handicapped: \" + handicappedFreeSpot.getNumber();\n        } else {\n            message += \"Handicapped is full\";\n        }\n        message += System.lineSeparator();\n\n        if(compactFreeSpot.IsFree()){\n            message += \"Free Compact: \" + compactFreeSpot.getNumber();\n        } else {\n            message += \"Compact is full\";\n        }\n        message += System.lineSeparator();\n\n        if(largeFreeSpot.IsFree()){\n            message += \"Free Large: \" + largeFreeSpot.getNumber();\n        } else {\n            message += \"Large is full\";\n        }\n        message += System.lineSeparator();\n\n        if(motorbikeFreeSpot.IsFree()){\n            message += \"Free Motorbike: \" + motorbikeFreeSpot.getNumber();\n        } else {\n            message += \"Motorbike is full\";\n        }\n        message += System.lineSeparator();\n\n        if(electricFreeSpot.IsFree()){\n            message += \"Free Electric: \" + electricFreeSpot.getNumber();\n        } else {\n            message += \"Electric is full\";\n        }\n\n        Show(message);\n    }\n}\n\npublic class ParkingLot {\n    private String name;\n    private Location address;\n    private ParkingRate parkingRate;\n\n    private int compactSpotCount;\n    private int largeSpotCount;\n    private int motorbikeSpotCount;\n    private int electricSpotCount;\n    private final int maxCompactCount;\n    private final int maxLargeCount;\n    private final int maxMotorbikeCount;\n    private final int maxElectricCount;\n\n    private HashMap&lt;String, EntrancePanel&gt; entrancePanels;\n    private HashMap&lt;String, ExitPanel&gt; exitPanels;\n    private HashMap&lt;String, ParkingFloor&gt; parkingFloors;\n\n    // all active parking tickets, identified by their ticketNumber\n    private HashMap&lt;String, ParkingTicket&gt; activeTickets;\n\n    // singleton ParkingLot to ensure only one object of ParkingLot in the system,\n    // all entrance panels will use this object to create new parking ticket: getNewParkingTicket(),\n    // similarly exit panels will also use this object to close parking tickets\n    private static ParkingLot parkingLot = null;\n\n    // private constructor to restrict for singleton\n    private ParkingLot() {\n        // 1. initialize variables: read name, address and parkingRate from database\n        // 2. initialize parking floors: read the parking floor map from database,\n        //  this map should tell how many parking spots are there on each floor. This\n        //  should also initialize max spot counts too.\n        // 3. initialize parking spot counts by reading all active tickets from database\n        // 4. initialize entrance and exit panels: read from database\n    }\n\n    // static method to get the singleton instance of ParkingLot\n    public static ParkingLot getInstance() {\n        if (parkingLot == null) {\n            parkingLot = new ParkingLot();\n        }\n        return parkingLot;\n    }\n\n    // note that the following method is 'synchronized' to allow multiple entrances\n    // panels to issue a new parking ticket without interfering with each other\n    public synchronized ParkingTicket getNewParkingTicket(Vehicle vehicle) throws ParkingFullException {\n        if (this.isFull(vehicle.getType())) {\n            throw new ParkingFullException();\n        }\n        ParkingTicket ticket = new ParkingTicket();\n        vehicle.assignTicket(ticket);\n        ticket.saveInDB();\n        // if the ticket is successfully saved in the database, we can increment the parking spot count\n        this.incrementSpotCount(vehicle.getType());\n        this.activeTickets.put(ticket.getTicketNumber(), ticket);\n        return ticket;\n    }\n\n    public boolean isFull(VehicleType type) {\n        // trucks and vans can only be parked in LargeSpot\n        if (type == VehicleType.Truck || type == VehicleType.Van) {\n            return largeSpotCount &gt;= maxLargeCount;\n        }\n\n        // motorbikes can only be parked at motorbike spots\n        if (type == VehicleType.Motorbike) {\n            return motorbikeSpotCount &gt;= maxMotorbikeCount;\n        }\n\n        // cars can be parked at compact or large spots\n        if (type == VehicleType.Car) {\n            return (compactSpotCount + largeSpotCount) &gt;= (maxCompactCount + maxLargeCount);\n        }\n\n        // electric car can be parked at compact, large or electric spots\n        return (compactSpotCount + largeSpotCount + electricSpotCount) &gt;= (maxCompactCount + maxLargeCount\n                + maxElectricCount);\n    }\n\n    // increment the parking spot count based on the vehicle type\n    private boolean incrementSpotCount(VehicleType type) {\n        if (type == VehicleType.Truck || type == VehicleType.Van) {\n            largeSpotCount++;\n        } else if (type == VehicleType.Motorbike) {\n            motorbikeSpotCount++;\n        } else if (type == VehicleType.Car) {\n            if (compactSpotCount &lt; maxCompactCount) {\n                compactSpotCount++;\n            } else {\n                largeSpotCount++;\n            }\n        } else { // electric car\n            if (electricSpotCount &lt; maxElectricCount) {\n                electricSpotCount++;\n            } else if (compactSpotCount &lt; maxCompactCount) {\n                compactSpotCount++;\n            } else {\n                largeSpotCount++;\n            }\n        }\n    }\n\n    public boolean isFull() {\n        for (String key : parkingFloors.keySet()) {\n            if (!parkingFloors.get(key).isFull()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public void addParkingFloor(ParkingFloor floor) {\n        /* store in database */ }\n\n    public void addEntrancePanel(EntrancePanel entrancePanel) {\n        /* store in database */ }\n\n    public void addExitPanel(ExitPanel exitPanel) {\n        /* store in database */ }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Stack%20Overflow/","title":"Design Stack Overflow","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20Stack%20Overflow/#code","title":"Code","text":"<ul> <li>Here is the high-level definition for the classes described above. </li> <li>Enums, data types, and constants: Here are the required enums, data types, and constants:</li> <li>Account, Member, Admin, and Moderator: These classes represent the different people that interact with our system:</li> <li>Badge, Tag, and Notification: Members have badges, questions have tags and notifications:</li> <li>Photo and Bounty: Members can put bounties on questions. Answers and Questions can have multiple photos:</li> <li>Question, Comment and Answer: Members can ask questions, as well as add an answer to any question. All members can add comments to all open questions or answers:</li> </ul> <pre><code>public enum QuestionStatus{\n  OPEN,\n  CLOSED,\n  ON_HOLD,\n  DELETED\n}\n\npublic enum QuestionClosingRemark{\n  DUPLICATE,\n  OFF_TOPIC,\n  TOO_BROAD,\n  NOT_CONSTRUCTIVE,\n  NOT_A_REAL_QUESTION,\n  PRIMARILY_OPINION_BASED\n}\n\npublic enum AccountStatus{\n  ACTIVE,\n  CLOSED,\n  CANCELED,\n  BLACKLISTED,\n  BLOCKED\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n    private int reputation;\n\n    public boolean resetPassword();\n}\n\npublic class Member {\n    private Account account;\n    private List&lt;Badge&gt; badges;\n\n    public int getReputation();\n    public String getEmail();\n    public boolean createQuestion(Question question);\n    public boolean createTag(Tag tag);\n}\n\npublic class Admin extends Member {\n    public boolean blockMember(Member member);\n    public boolean unblockMember(Member member);\n}\n\npublic class Moderator extends Member {\n    public boolean closeQuestion(Question question);\n    public boolean undeleteQuestion(Question question);\n}\n\npublic class Badge {\n    private String name;\n    private String description;\n}\n\npublic class Tag {\n    private String name;\n    private String description;\n    private long dailyAskedFrequency;\n    private long weeklyAskedFrequency;\n}\n\npublic class Notification {\n    private int notificationId;\n    private Date createdOn;\n    private String content;\n\n    public boolean sendNotification();\n}\n\npublic class Photo {\n    private int photoId;\n    private String photoPath;\n    private Date creationDate;\n\n    private Member creatingMember;\n\n    public boolean delete();\n}\n\npublic class Bounty {\n    private int reputation;\n    private Date expiry;\n\n    public boolean modifyReputation(int reputation);\n}\n\npublic interface Search {\n    public static List&lt;Question&gt; search(String query);\n}\n\npublic class Question implements Search {\n    private String title;\n    private String description;\n    private int viewCount;\n    private int voteCount;\n    private Date creationTime;\n    private Date updateTime;\n    private QuestionStatus status;\n    private QuestionClosingRemark closingRemark;\n\n    private Member askingMember;\n    private Bounty bounty;\n    private List&lt;Photo&gt; photos;\n    private List&lt;Comment&gt; comments;\n    private List&lt;Answer&gt; answers;\n\n    public boolean close();\n    public boolean undelete();\n    public boolean addComment(Comment comment);\n    public boolean addBounty(Bounty bounty);\n\n    public static List&lt;Question&gt; search(String query) {\n        // return all questions containing the string query in their title or description.\n    }\n}\n\npublic class Comment {\n    private String text;\n    private Date creationTime;\n    private int flagCount;\n    private int voteCount;\n\n    private Member askingMember;\n\n    public boolean incrementVoteCount();\n}\n\npublic class Answer {\n    private String answerText;\n    private boolean accepted;\n    private int voteCount;\n    private int flagCount;\n    private Date creationTime;\n\n    private Member creatingMember;\n    private List&lt;Photo&gt; photos;\n\n    public boolean incrementVoteCount();\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Car%20Rental%20System/","title":"Design a Car Rental System","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Car%20Rental%20System/#code","title":"Code","text":"<ul> <li>Here is the high-level definition for the classes described above. </li> <li>Enums, data types and constants: Here are the required enums, data types, and constants:</li> <li>Account, Member, Receptionist, and Additional Driver: These classes represent different people that interact with our system:</li> <li>CarRentalSystem and CarRentalLocation: These classes represent the top level classes:</li> <li>Vehicle, VehicleLog, and VehicleReservation: To encapsulate a vehicle, log, and reservation. The VehicleReservation class will be responsible for processing the reservation and return of a vehicle:</li> <li>VehicleInventory and Search: VehicleInventory will implement an interface \u2018Search\u2019 to facilitate the searching of vehicles:</li> </ul> <pre><code>public enum BillItemType {\n  BASE_CHARGE, ADDITIONAL_SERVICE, FINE, OTHER\n}\n\npublic enum VehicleLogType {\n  ACCIDENT, FUELING, CLEANING_SERVICE, OIL_CHANGE, REPAIR, OTHER\n}\n\npublic enum VanType {\n  PASSENGER, CARGO\n}\n\npublic enum CarType {\n  ECONOMY, COMPACT, INTERMEDIATE, STANDARD, FULL_SIZE, PREMIUM, LUXURY\n}\n\npublic enum VehicleStatus {\n  AVAILABLE, RESERVED, LOANED, LOST, BEING_SERVICED, OTHER\n}\n\npublic enum ReservationStatus {\n  ACTIVE, PENDING, CONFIRMED, COMPLETED, CANCELLED, NONE\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic abstract class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n    private Person person;\n\n    public boolean resetPassword();\n}\n\npublic class Member extends Account {\n    private int totalVehiclesReserved;\n\n    public List&lt;VehicleReservation&gt; getReservations();\n}\n\npublic class Receptionist extends Account {\n    private Date dateJoined;\n\n    public List&lt;Member&gt; searchMember(String name);\n}\n\npublic class AdditionalDriver {\n    private String driverID;\n    private Person person;\n}\n\npublic class CarRentalLocation {\n    private String name;\n    private Address location;\n\n    public Address getLocation();\n}\n\npublic class CarRentalSystem {\n    private String name;\n    private List&lt;CarRentalLocation&gt; locations;\n\n    public boolean addNewLocation(CarRentalLocation location);\n}\n\npublic abstract class Vehicle {\n    private String licenseNumber;\n    private String stockNumber;\n    private int passengerCapacity;\n    private String barcode;\n    private boolean hasSunroof;\n    private VehicleStatus status;\n    private String model;\n    private String make;\n    private int manufacturingYear;\n    private int mileage;\n\n    private List&lt;VehicleLog&gt; log;\n\n    public boolean reserveVehicle();\n\n    public boolean returnVehicle();\n}\n\npublic class Car extends Vehicle {\n    private CarType type;\n}\n\npublic class Van extends Vehicle {\n    private VanType type;\n}\n\npublic class Truck extends Vehicle {\n    private String type;\n}\n\n// We can have similar definition for other vehicle types\n\n//...\n\npublic class VehicleLog {\n    private String id;\n    private VehicleLogType type;\n    private String description;\n    private Date creationDate;\n\n    public bool update();\n\n    public List&lt;VehicleLogType&gt; searchByLogType(VehicleLogType type);\n}\n\npublic class VehicleReservation {\n    private String reservationNumber;\n    private Date creationDate;\n    private ReservationStatus status;\n    private Date dueDate;\n    private Date returnDate;\n    private String pickupLocationName;\n    private String returnLocationName;\n\n    private int customerID;\n    private Vehicle vehicle;\n    private Bill bill;\n    private List&lt;AdditionalDriver&gt; additionalDrivers;\n    private List&lt;Notification&gt; notifications;\n    private List&lt;RentalInsurance&gt; insurances;\n    private List&lt;Equipment&gt; equipments;\n    private List&lt;Service&gt; services;\n\n    public static VehicleReservation fetchReservationDetails(String reservationNumber);\n\n    public List&lt;Passenger&gt; getAdditionalDrivers();\n}\n\npublic interface Search {\n    public List&lt;Vehicle&gt; searchByType(String type);\n    public List&lt;Vehicle&gt; searchByModel(String model);\n}\n\npublic class VehicleInventory implements Search {\n    private HashMap&lt;String, List&lt;Vehicle&gt;&gt; vehicleTypes;\n    private HashMap&lt;String, List&lt;Vehicle&gt;&gt; vehicleModels;\n\n    public List&lt;Vehicle&gt; searchByType(String query) {\n        // return all vehicles of the given type.\n        return vehicleTypes.get(query);\n    }\n\n    public List&lt;Vehicle&gt; searchByModel(String query) {\n        // return all vehicles of the given model.\n        return vehicleModels.get(query);\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Hotel%20Management%20System/","title":"Design a Hotel Management System","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Hotel%20Management%20System/#code","title":"Code","text":"<ul> <li>Here is the high-level definition for the classes described above. </li> <li>Enums, data types, and constants: Here are the required enums, data types, and constants:</li> <li>Account, Person, Guest, Receptionist, and Server: These classes represent the different people that interact with our system:</li> <li>Hotel and HotelLocation: These classes represent the top-level classes of the system:</li> <li>Room, RoomKey, and RoomHouseKeeping: To encapsulate a room, room key, and housekeeping:</li> <li>RoomBooking and RoomCharge: To encapsulate a booking and different charges against a booking:</li> </ul> <pre><code>public enum RoomStyle {\n  STANDARD, DELUXE, FAMILY_SUITE, BUSINESS_SUITE\n}\n\npublic enum RoomStatus {\n  AVAILABLE, RESERVED, OCCUPIED, NOT_AVAILABLE, BEING_SERVICED, OTHER\n}\n\npublic enum BookingStatus {\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELLED, ABANDONED\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED\n}\n\npublic enum AccountType {\n  MEMBER, GUEST, MANAGER, RECEPTIONIST\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n\n    public boolean resetPassword();\n}\n\npublic abstract class Person {\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n\n    private Account account;\n}\n\n\npublic class Guest extends Person {\n    private int totalRoomsCheckedIn;\n\n    public List&lt;RoomBooking&gt; getBookings();\n}\n\npublic class Receptionist extends Person {\n    public List&lt;Member&gt; searchMember(String name);\n    public boolean createBooking();\n}\n\npublic class Server extends Person {\n    public boolean addRoomCharge(Room room, RoomCharge roomCharge);\n}\n\npublic class HotelLocation {\n    private String name;\n    private Address location;\n\n    public Address getRooms();\n}\n\npublic class Hotel {\n    private String name;\n    private List&lt;HotelLocation&gt; locations;\n\n    public boolean addLocation(HotelLocation location);\n}\n\npublic interface Search {\n    public static List&lt;Room&gt; search(RoomStyle style, Date startDate, int duration);\n}\n\npublic class Room implements Search {\n    private String roomNumber;\n    private RoomStyle style;\n    private RoomStatus status;\n    private double bookingPrice;\n    private boolean isSmoking;\n\n    private List&lt;RoomKey&gt; keys;\n    private List&lt;RoomHouseKeeping&gt; houseKeepingLog;\n\n    public boolean isRoomAvailable();\n    public boolean checkIn();\n    public boolean checkOut();\n\n    public static List&lt;Room&gt; search(RoomStyle style, Date startDate, int duration) {\n        // return all rooms with the given style and availability\n    }\n}\n\npublic class RoomKey {\n    private String keyId;\n    private String barcode;\n    private Date issuedAt;\n    private boolean active;\n    private boolean isMaster;\n\n    public boolean assignRoom(Room room);\n    public boolean isActive();\n}\n\npublic class RoomHouseKeeping\n{\n    private String description;\n    private Date startDatetime;\n    private int duration;\n    private HouseKeeper houseKeeper;\n\n    public boolean addHouseKeeping(Room room);\n}\n\npublic class RoomBooking {\n    private String reservationNumber;\n    private Date startDate;\n    private int durationInDays;\n    private BookingStatus status;\n    private Date checkin;\n    private Date checkout;\n\n    private int guestID;\n    private Room room;\n    private Invoice invoice;\n    private List&lt;Notification&gt; notifications;\n\n    public static RoomBooking fectchDetails(String reservationNumber);\n}\n\npublic abstract class RoomCharge {\n    public Date issueAt;\n    public boolean addInvoiceItem(Invoice invoice);\n}\n\npublic class Amenity extends RoomCharge {\n    public String name;\n    public String description;\n}\n\npublic class RoomService extends RoomCharge {\n    public boolean isChargeable;\n    public Date requestTime;\n}\n\npublic class KitchenService extends RoomCharge {\n    public String description;\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Library%20Management%20System/","title":"Design a Library Management System","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Library%20Management%20System/#code","title":"Code","text":"<ul> <li> <p>Here is the code for the use cases mentioned above:</p> </li> <li> <p>Check-out a book,</p> </li> <li>Return a book, and</li> <li>Renew a book. </li> <li> <p>Note: This code only focuses on the design part of the use cases. Since you are not required to write a fully executable code in an interview, you can assume parts of the code to interact with the database, payment system, etc. </p> </li> <li> <p>Enums and Constants: Here are the required enums, data types, and constants:</p> </li> <li>Account, Member, and Librarian: These classes represent various people that interact with our system:</li> <li>BookReservation, BookLending, and Fine: These classes represent a book reservation, lending, and fine collection, respectively.</li> <li>BookItem: Encapsulating a book item, this class will be responsible for processing the reservation, return, and renewal of a book item.</li> <li>Search interface and Catalog: The Catalog class will implement the Search interface to facilitate searching of books.</li> </ul> <pre><code>public enum BookFormat {\n  HARDCOVER,\n  PAPERBACK,\n  AUDIO_BOOK,\n  EBOOK,\n  NEWSPAPER,\n  MAGAZINE,\n  JOURNAL\n}\n\npublic enum BookStatus {\n  AVAILABLE,\n  RESERVED,\n  LOANED,\n  LOST\n}\n\npublic enum ReservationStatus{\n  WAITING,\n  PENDING,\n  CANCELED,\n  NONE\n}\n\npublic enum AccountStatus{\n  ACTIVE,\n  CLOSED,\n  CANCELED,\n  BLACKLISTED,\n  NONE\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}\n\npublic class Constants {\n  public static final int MAX_BOOKS_ISSUED_TO_A_USER = 5;\n  public static final int MAX_LENDING_DAYS = 10;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic abstract class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n    private Person person;\n\n    public boolean resetPassword();\n}\n\npublic class Librarian extends Account {\n    public boolean addBookItem(BookItem bookItem);\n\n    public boolean blockMember(Member member);\n\n    public boolean unBlockMember(Member member);\n}\n\npublic class Member extends Account {\n    private Date dateOfMembership;\n    private int totalBooksCheckedout;\n\n    public int getTotalBooksCheckedout();\n\n    public boolean reserveBookItem(BookItem bookItem);\n\n    private void incrementTotalBooksCheckedout();\n\n    public boolean checkoutBookItem(BookItem bookItem) {\n        if (this.getTotalBooksCheckedOut() &gt;= Constants.MAX_BOOKS_ISSUED_TO_A_USER) {\n            ShowError(\"The user has already checked-out maximum number of books\");\n            return false;\n        }\n        BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());\n        if (bookReservation != null &amp;&amp; bookReservation.getMemberId() != this.getId()) {\n            // book item has a pending reservation from another user\n            ShowError(\"This book is reserved by another member\");\n            return false;\n        } else if (bookReservation != null) {\n            // book item has a pending reservation from the give member, update it\n            bookReservation.updateStatus(ReservationStatus.COMPLETED);\n        }\n\n        if (!bookItem.checkout(this.getId())) {\n            return false;\n        }\n\n        this.incrementTotalBooksCheckedout();\n        return true;\n    }\n\n    private void checkForFine(String bookItemBarcode) {\n        BookLending bookLending = BookLending.fetchLendingDetails(bookItemBarcode);\n        Date dueDate = bookLending.getDueDate();\n        Date today = new Date();\n        // check if the book has been returned within the due date\n        if (today.compareTo(dueDate) &gt; 0) {\n            long diff = todayDate.getTime() - dueDate.getTime();\n            long diffDays = diff / (24 * 60 * 60 * 1000);\n            Fine.collectFine(memberId, diffDays);\n        }\n    }\n\n    public void returnBookItem(BookItem bookItem) {\n        this.checkForFine(bookItem.getBarcode());\n        BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());\n        if (bookReservation != null) {\n            // book item has a pending reservation\n            bookItem.updateBookItemStatus(BookStatus.RESERVED);\n            bookReservation.sendBookAvailableNotification();\n        }\n        bookItem.updateBookItemStatus(BookStatus.AVAILABLE);\n    }\n\n    public bool renewBookItem(BookItem bookItem) {\n        this.checkForFine(bookItem.getBarcode());\n        BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());\n        // check if this book item has a pending reservation from another member\n        if (bookReservation != null &amp;&amp; bookReservation.getMemberId() != this.getMemberId()) {\n            ShowError(\"This book is reserved by another member\");\n            member.decrementTotalBooksCheckedout();\n            bookItem.updateBookItemState(BookStatus.RESERVED);\n            bookReservation.sendBookAvailableNotification();\n            return false;\n        } else if (bookReservation != null) {\n            // book item has a pending reservation from this member\n            bookReservation.updateStatus(ReservationStatus.COMPLETED);\n        }\n        BookLending.lendBook(bookItem.getBarCode(), this.getMemberId());\n        bookItem.updateDueDate(LocalDate.now().plusDays(Constants.MAX_LENDING_DAYS));\n        return true;\n    }\n}\n\npublic class BookReservation {\n    private Date creationDate;\n    private ReservationStatus status;\n    private String bookItemBarcode;\n    private String memberId;\n\n    public static BookReservation fetchReservationDetails(String barcode);\n}\n\npublic class BookLending {\n    private Date creationDate;\n    private Date dueDate;\n    private Date returnDate;\n    private String bookItemBarcode;\n    private String memberId;\n\n    public static boolean lendBook(String barcode, String memberId);\n    public static BookLending fetchLendingDetails(String barcode);\n}\n\npublic class Fine {\n    private Date creationDate;\n    private double bookItemBarcode;\n    private String memberId;\n\n    public static void collectFine(String memberId, long days) {}\n}\n\npublic abstract class Book {\n    private String ISBN;\n    private String title;\n    private String subject;\n    private String publisher;\n    private String language;\n    private int numberOfPages;\n    private List&lt;Author&gt; authors;\n}\n\npublic class BookItem extends Book {\n    private String barcode;\n    private boolean isReferenceOnly;\n    private Date borrowed;\n    private Date dueDate;\n    private double price;\n    private BookFormat format;\n    private BookStatus status;\n    private Date dateOfPurchase;\n    private Date publicationDate;\n    private Rack placedAt;\n\n    public boolean checkout(String memberId) {\n        if(bookItem.getIsReferenceOnly()) {\n            ShowError(\"This book is Reference only and can't be issued\");\n            return false;\n        }\n        if(!BookLending.lendBook(this.getBarCode(), memberId)){\n            return false;\n        }\n        this.updateBookItemStatus(BookStatus.LOANED);\n        return true;\n    }\n}\n\npublic class Rack {\n    private int number;\n    private String locationIdentifier;\n}\n\npublic interface Search {\n    public List&lt;Book&gt; searchByTitle(String title);\n    public List&lt;Book&gt; searchByAuthor(String author);\n    public List&lt;Book&gt; searchBySubject(String subject);\n    public List&lt;Book&gt; searchByPubDate(Date publishDate);\n}\n\npublic class Catalog implements Search {\n    private HashMap&lt;String, List&lt;Book&gt;&gt; bookTitles;\n    private HashMap&lt;String, List&lt;Book&gt;&gt; bookAuthors;\n    private HashMap&lt;String, List&lt;Book&gt;&gt; bookSubjects;\n    private HashMap&lt;String, List&lt;Book&gt;&gt; bookPublicationDates;\n\n    public List&lt;Book&gt; searchByTitle(String query) {\n        // return all books containing the string query in their title.\n        return bookTitles.get(query);\n    }\n\n    public List&lt;Book&gt; searchByAuthor(String query) {\n        // return all books containing the string query in their author's name.\n        return bookAuthors.get(query);\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Movie%20Ticket%20Booking%20System/","title":"Design a Movie Ticket Booking System","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Movie%20Ticket%20Booking%20System/#code","title":"Code","text":"<ul> <li>Here are the high-level definitions for the classes described above. </li> <li>Enums, data types, and constants: Here are the required enums, data types, and constants:</li> <li>Account, Customer, Admin, FrontDeskOfficer, and Guest: These classes represent the different people that interact with our system:</li> <li>Show and Movie: A movie will have many shows:</li> <li>Booking, ShowSeat, and Payment: Customers will reserve seats with a booking and make a payment:</li> <li>City, Cinema, and CinemaHall: Each city can have many cinemas and each cinema can have many cinema halls:</li> <li>Search interface and Catalog: Catalog will implement Search to facilitate searching of products.</li> <li>Concurrency - How to handle concurrency; such that no two users are able to book the same seat? </li> </ul> <pre><code>public enum BookingStatus {\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED\n}\n\npublic enum SeatType {\n  REGULAR, PREMIUM, ACCESSIBLE, SHIPPED, EMERGENCY_EXIT, OTHER\n}\n\npublic enum AccountStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n\n    public boolean resetPassword();\n}\n\npublic abstract class Person {\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n\n    private Account account;\n}\n\npublic class Customer extends Person {\n    public boolean makeBooking(Booking booking);\n    public List&lt;Booking&gt; getBookings();\n}\n\npublic class Admin extends Person {\n    public boolean addMovie(Movie movie);\n    public boolean addShow(Show show);\n    public boolean blockUser(Customer customer);\n}\n\npublic class FrontDeskOfficer extends Person {\n    public boolean createBooking(Booking booking);\n}\n\npublic class Guest {\n    public bool registerAccount();\n}\n\npublic class Show {\n    private int showId;\n    private Date createdOn;\n    private Date startTime;\n    private Date endTime;\n    private CinemaHall playedAt;\n    private Movie movie;\n}\n\npublic class Movie {\n    private String title;\n    private String description;\n    private int durationInMins;\n    private String language;\n    private Date releaseDate;\n    private String country;\n    private String genre;\n    private Admin movieAddedBy;\n\n    private List&lt;Show&gt; shows;\n    public List&lt;Show&gt; getShows();\n}\n\npublic class Booking {\n    private String bookingNumber;\n    private int numberOfSeats;\n    private Date createdOn;\n    private BookingStatus status;\n\n    private Show show;\n    private List&lt;ShowSeat&gt; seats;\n    private Payment payment;\n\n    public boolean makePayment(Payment payment);\n    public boolean cancel();\n    public boolean assignSeats(List&lt;ShowSeat&gt; seats);\n}\n\npublic class ShowSeat extends CinemaHallSeat{\n    private int showSeatId;\n    private boolean isReserved;\n    private double price;\n}\n\npublic class Payment {\n    private double amount;\n    private Date createdOn;\n    private int transactionId;\n    private PaymentStatus status;\n}\n\npublic class City {\n    private String name;\n    private String state;\n    private String zipCode;\n}\n\npublic class Cinema {\n    private String name;\n    private int totalCinemaHalls;\n    private Address location;\n\n    private List&lt;CinemaHall&gt; halls;\n}\n\npublic class CinemaHall {\n    private String name;\n    private int totalSeats;\n\n    private List&lt;CinemaHallSeat&gt; seats;\n    private List&lt;Show&gt; shows;\n}\n\npublic interface Search {\n    public List&lt;Movie&gt; searchByTitle(String title);\n    public List&lt;Movie&gt; searchByLanguage(String language);\n    public List&lt;Movie&gt; searchByGenre(String genre);\n    public List&lt;Movie&gt; searchByReleaseDate(Date relDate);\n    public List&lt;Movie&gt; searchByCity(String cityName);\n}\n\npublic class Catalog implements Search {\n    HashMap&lt;String, List&lt;Movie&gt;&gt; movieTitles;\n    HashMap&lt;String, List&lt;Movie&gt;&gt; movieLanguages;\n    HashMap&lt;String, List&lt;Movie&gt;&gt; movieGenres;\n    HashMap&lt;Date, List&lt;Movie&gt;&gt; movieReleaseDates;\n    HashMap&lt;String, List&lt;Movie&gt;&gt; movieCities;\n\n    public List&lt;Movie&gt; searchByTitle(String title) {\n        return movieTitles.get(title);\n    }\n\n    public List&lt;Movie&gt; searchByLanguage(String language) {\n        return movieLanguages.get(language);\n    }\n\n    //...\n\n    public List&lt;Movie&gt; searchByCity(String cityName) {\n        return movieCities.get(cityName);\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Movie%20Ticket%20Booking%20System/#concurrency","title":"Concurrency","text":"<ul> <li>How to handle concurrency; such that no two users are able to book the same seat? We can use transactions in SQL databases to avoid any clashes. For example, if we are using SQL server we can utilize Transaction Isolation Levels to lock the rows before we update them. Note: within a transaction, if we read rows we get a write-lock on them so that they can\u2019t be updated by anyone else. Here is the sample code:</li> </ul> <pre><code>SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n\nBEGIN TRANSACTION;\n\n    -- Suppose we intend to reserve three seats (IDs: 54, 55, 56) for ShowID=99 \n    Select * From ShowSeat where ShowID=99 &amp;&amp; ShowSeatID in (54, 55, 56) &amp;&amp; isReserved=0 \n\n    -- if the number of rows returned by the above statement is NOT three, we can return failure to the user.\n    update ShowSeat table...\n    update Booking table ...\n\nCOMMIT TRANSACTION;\n</code></pre> <ul> <li>\u2018Serializable\u2019 is the highest isolation level and guarantees safety from Dirty, Nonrepeatable, and Phantoms reads. </li> <li>Once the above database transaction is successful, we can safely assume that the reservation has been marked successfully and no two customers will be able to reserve the same seat.</li> </ul> <p>Here is the sample Java code:</p> <pre><code>import java.sql.DriverManager;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.ResultSet;\n\npublic class Customer extends Person {\n\n  public boolean makeBooking(Booking booking) {\n    List&lt;ShowSeat&gt; seats = booking.getSeats();\n    Integer seatIds[] = new Integer[seats.size()];\n    int index = 0;\n    for(ShowSeat seat : seats) {\n      seatIds[index++] = seat.getShowSeatId();\n    }\n\n    Connection dbConnection = null;\n    try {\n      dbConnection = getDBConnection();\n      dbConnection.setAutoCommit(false);\n      // \u2018Serializable\u2019 is the highest isolation level and guarantees safety from\n      // Dirty, Nonrepeatable, and Phantoms reads\n      dbConnection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n\n      Statement st = dbConnection.createStatement();\n      String selectSQL = \"Select * From ShowSeat where ShowID=? &amp;&amp; ShowSeatID in (?) &amp;&amp; isReserved=0\";\n      PreparedStatement preparedStatement = dbConnection.prepareStatement(selectSQL);\n      preparedStatement.setInt(1, booking.getShow().getShowId());\n      Array array = dbConnection.createArrayOf(\"INTEGER\", seatIds);\n      preparedStatement.setArray(2, array);\n\n      ResultSet rs = preparedStatement.executeQuery();\n      // With TRANSACTION_SERIALIZABLE all the read rows will have the write lock, so we can\n      // safely assume that no one else is modifying them.\n      if (rs.next()) {\n        rs.last(); // move to the last row, to calculate the row count\n        int rowCount = rs.getRow();\n        // check if we have expected number of rows, if not, this means another process is\n        // trying to process at least one of the same row, if that is the case we\n        // should not process this booking.\n        if(rowCount == seats.size()) {\n          // update ShowSeat table...\n          // update Booking table ...\n          dbConnection.commit();\n          return true;\n        }\n      }\n    } catch (SQLException e) {\n      dbConnection.rollback();\n      System.out.println(e.getMessage());\n    }\n    return false;\n  }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Restaurant%20Management%20system/","title":"Design a Restaurant Management system","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20a%20Restaurant%20Management%20system/#code","title":"Code","text":"<ul> <li>Here is the high-level definition for the classes described above. </li> <li>Enums, data types, and constants: Here are the required enums, data types, and constants:</li> <li>Account, Person, Employee, Receptionist, Manager, and Chef: These classes represent the different people that interact with our system:</li> <li>Restaurant, Branch, Kitchen, TableChart: These classes represent the top-level classes of the system:</li> <li>Table, TableSeat, and Reservation: Each table can have multiple seats and customers can make reservations for tables:</li> <li>Menu, MenuSection, and MenuItem: Each restaurant branch will have its own menu, each menu will have multiple menu sections, which will contain menu items:</li> <li>Order, Meal, and MealItem: Each order will have meals for table seats:</li> </ul> <pre><code>public enum ReservationStatus {\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED\n}\n\npublic enum SeatType {\n  REGULAR, KID, ACCESSIBLE, OTHER\n}\n\npublic enum OrderStatus {\n  RECEIVED, PREPARING, COMPLETED, CANCELED, NONE\n}\n\npublic enum TableStatus {\n  FREE, RESERVED, OCCUPIED, OTHER\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public setter function.\n\npublic class Account {\n    private String id;\n    private String password;\n    private Address address;\n    private AccountStatus status;\n\n    public boolean resetPassword();\n}\n\npublic abstract class Person {\n    private String name;\n    private String email;\n    private String phone;\n}\n\n\npublic abstract class Employee extends Person {\n    private int employeeID;\n    private Date dateJoined;\n\n    private Account account;\n}\n\npublic class Receptionist extends Employee {\n    public boolean createReservation();\n    public List&lt;Customer&gt; searchCustomer(String name);\n}\n\npublic class Manager extends Employee {\n    public boolean addEmployee();\n}\n\npublic class Chef extends Employee {\n    public boolean takeOrder();\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public setter function.\n\npublic class Account {\n    private String id;\n    private String password;\n    private Address address;\n    private AccountStatus status;\n\n    public boolean resetPassword();\n}\n\npublic abstract class Person {\n    private String name;\n    private String email;\n    private String phone;\n}\n\n\npublic abstract class Employee extends Person {\n    private int employeeID;\n    private Date dateJoined;\n\n    private Account account;\n}\n\npublic class Receptionist extends Employee {\n    public boolean createReservation();\n    public List&lt;Customer&gt; searchCustomer(String name);\n}\n\npublic class Manager extends Employee {\n    public boolean addEmployee();\n}\n\npublic class Chef extends Employee {\n    public boolean takeOrder();\n}\n\npublic class Kitchen {\n    private String name;\n    private Chef[] chefs;\n\n    private boolean assignChef();\n}\n\npublic class Branch {\n    private String name;\n    private Address location;\n    private Kitchen kitchen;\n\n    public Address addTableChart();\n}\n\npublic class Restaurant {\n    private String name;\n    private List&lt;Branch&gt; branches;\n\n    public boolean addBranch(Branch branch);\n}\n\npublic class TableChart {\n    private int tableChartID;\n    private byte[] tableChartImage;\n\n    public bool print();\n}\n\npublic class Table {\n    private int tableID;\n    private TableStatus status;\n    private int maxCapacity;\n    private int locationIdentifier;\n\n    private List&lt;TableSeat&gt; seats;\n\n    public boolean isTableFree();\n    public boolean addReservation();\n\n    public static List&lt;Table&gt; search(int capacity, Date startTime) {\n        // return all tables with the given capacity and availability\n    }\n}\n\npublic class TableSeat {\n    private int tableSeatNumber;\n    private SeatType type;\n\n    public boolean updateSeatType(SeatType type);\n}\n\npublic class Reservation {\n    private int reservationID;\n    private Date timeOfReservation;\n    private int peopleCount;\n    private ReservationStatus status;\n    private String notes;\n    private Date checkinTime;\n    private Customer customer;\n\n    private Table[] tables;\n    private List&lt;Notification&gt; notifications;\n    public boolean updatePeopleCount(int count);\n}\n\npublic class MenuItem {\n    private int menuItemID;\n    private String title;\n    private String description;\n    private double price;\n\n    public boolean updatePrice(double price);\n}\n\npublic class MenuSection {\n    private int menuSectionID;\n    private String title;\n    private String description;\n    private List&lt;MenuItem&gt; menuItems;\n\n    public boolean addMenuItem(MenuItem menuItem);\n}\n\npublic class Menu {\n    private int menuID;\n    private String title;\n    private String description;\n    private List&lt;MenuSection&gt; menuSections;\n\n    public boolean addMenuSection(MenuSection menuSection);\n    public boolean print();\n}\n\npublic class MealItem {\n    private int mealItemID;\n    private int quantity;\n    private MenuItem menuItem;\n\n    public boolean updateQuantity(int quantity);\n}\n\npublic class Meal {\n    private int mealID;\n    private TableSeat seat;\n    private List&lt;MenuItem&gt; menuItems;\n\n    public boolean addMealItem(MealItem mealItem);\n}\n\npublic class Order {\n    private int OrderID;\n    private OrderStatus status;\n    private Date creationTime;\n\n    private Meal[] meals;\n    private Table table;\n    private Check check;\n    private Waiter waiter;\n    private Chef chef;\n\n    public boolean addMeal(Meal meal);\n    public boolean removeMeal(Meal meal);\n    public OrderStatus getStatus();\n    public boolean setStatus(OrderStatus status);\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20an%20ATM/","title":"Design an ATM","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20an%20ATM/#code","title":"Code","text":"<ul> <li>Here is the skeleton code for the classes defined above:</li> <li>Enums and Constants: Here are the required enums, data types, and constants:</li> <li>Customer, Card, and Account: \u201cCustomer\u201d encapsulates the ATM user, \u201cCard\u201d the ATM card, and \u201cAccount\u201d can be of two types: checking and savings:</li> <li>Bank, ATM, CashDispenser, Keypad, Screen, Printer and DepositSlot: The ATM will have different components like keypad, screen, etc.</li> <li>Transaction and its subclasses: Customers can perform different transactions on the ATM, these classes encapsulate them:</li> </ul> <pre><code>public enum TransactionType {\n  BALANCE_INQUIRY, DEPOSIT_CASH, DEPOSIT_CHECK, WITHDRAW, TRANSFER\n}\n\npublic enum TransactionStatus {\n  SUCCESS, FAILURE, BLOCKED, FULL, PARTIAL, NONE\n}\n\npublic enum CustomerStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, CLOSED, UNKNOWN\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter function.\n\npublic class Customer {\n    private String name;\n    private String email;\n    private String phone;\n    private Address address;\n    private CustomerStatus status;\n\n    private Card card;\n    private Account account;\n\n    public boolean makeTransaction(Transaction transaction);\n    public Address getBillingAddress();\n}\n\npublic class Card {\n    private String cardNumber;\n    private String customerName;\n    private Date cardExpiry;\n    private int pin;\n\n    public Address getBillingAddress();\n}\n\npublic class Account {\n    private int accountNumber;\n    private double totalBalance;\n    private double availableBalance;\n\n    public double getAvailableBalance();\n}\n\npublic class SavingAccount extends Account {\n    private double withdrawLimit;\n}\n\npublic class CheckingAccount extends Account {\n    private String debitCardNumber;\n}\n\npublic class Bank {\n    private String name;\n    private String bankCode;\n\n    public String getBankCode();\n    public boolean addATM();\n}\n\npublic class ATM {\n    private int atmID;\n    private Address location;\n\n    private CashDispenser cashDispenser;\n    private Keypad keypad;\n    private Screen screen;\n    private Printer printer;\n    private CheckDeposit checkDeposit;\n    private CashDeposit cashDeposit;\n\n    public boolean authenticateUser();\n    public boolean makeTransaction(Customer customer, Transaction transaction);\n}\n\npublic class CashDispenser {\n    private int totalFiveDollarBills;\n    private int totalTwentyDollarBills;\n\n    public boolean dispenseCash(double amount);\n    public boolean canDispenseCash();\n}\n\npublic class Keypad {\n    public String getInput();\n}\n\npublic class Screen {\n    public boolean showMessage(String message);\n    public TransactionType getInput();\n}\n\npublic class Printer {\n    public boolean printReceipt(Transaction transaction);\n}\n\npublic abstract class DepositSlot {\n    private double totalAmount;\n    public double getTotalAmount();\n}\n\npublic class CheckDepositSlot extends DepositSlot {\n    public double getCheckAmount();\n}\n\npublic class CashDepositSlot extends DepositSlot {\n    public double receiveDollarBill();\n}\n\npublic abstract class Transaction {\n    private int transactionId;\n    private Date creationTime;\n    private TransactionStatus status;\n    public boolean makeTransation();\n}\n\npublic class BalanceInquiry extends Transaction {\n    private int accountId;\n    public double getAccountId();\n}\n\npublic abstract class Deposit extends Transaction {\n    private double amount;\n    public double getAmount();\n}\n\npublic class CheckDeposit extends Deposit {\n    private String checkNumber;\n    private String bankCode;\n\n    public String getCheckNumber();\n}\n\npublic class CashDeposit extends Deposit {\n    private double cashDepositLimit;\n}\n\npublic class Withdraw extends Transaction {\n    private double amount;\n    public double getAmount();\n}\n\npublic class Transfer extends Transaction {\n    private int destinationAccountNumber;\n    public int getDestinationAccount();\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20an%20Airline%20Management%20System/","title":"Design an Airline Management System","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20an%20Airline%20Management%20System/#code","title":"Code","text":"<ul> <li>Here is the code for major classes. </li> <li>Enums and Constants: Here are the required enums, data types, and constants:</li> <li>Account, Person, Customer and Passenger: These classes represent the different people that interact with our system:</li> <li>Airport, Aircraft, Seat and FlightSeat: These classes represent the top-level classes of the system:</li> <li>Flight Schedule classes, Flight, FlightInstance, FlightReservation, Itinerary: Here are the classes related to flights and reservations:</li> </ul> <pre><code>public enum FlightStatus{\n  ACTIVE,\n  SCHEDULED,\n  DELAYED,\n  DEPARTED,\n  LANDED,\n  IN_AIR,\n  ARRIVED,\n  CANCELLED,\n  DIVERTED,\n  UNKNOWN\n}\n\npublic enum PaymentStatus{\n  UNPAID,\n  PENDING,\n  COMPLETED,\n  FILLED,\n  DECLINED,\n  CANCELLED,\n  ABANDONED,\n  SETTLING,\n  SETTLED,\n  REFUNDED\n}\n\npublic enum ReservationStatus{\n  REQUESTED,\n  PENDING,\n  CONFIRMED,\n  CHECKED_IN,\n  CANCELLED,\n  ABANDONED\n}\n\npublic enum SeatClass {\n  ECONOMY,\n  ECONOMY_PLUS,\n  PREFERRED_ECONOMY,\n  BUSINESS,\n  FIRST_CLASS\n}\n\npublic enum SeatType {\n  REGULAR,\n  ACCESSIBLE,\n  EMERGENCY_EXIT,\n  EXTRA_LEG_ROOM\n}\n\npublic enum AccountStatus{\n  ACTIVE,\n  CLOSED,\n  CANCELED,\n  BLACKLISTED,\n  BLOCKED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n\n    public boolean resetPassword();\n}\n\npublic abstract class Person {\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n\n    private Account account;\n}\n\npublic class Customer extends Person {\n    private String frequentFlyerNumber;\n\n    public List&lt;Itinerary&gt; getItineraries();\n}\n\npublic class Passenger {\n    private String name;\n    private String passportNumber;\n    private Date dateOfBirth;\n\n    public String getPassportNumber() {\n        return this.passportNumber;\n    }\n}\n\npublic class Airport {\n    private String name;\n    private Address address;\n    private String code;\n\n    public List&lt;Flight&gt; getFlights();\n}\n\npublic class Aircraft {\n    private String name;\n    private String model;\n    private int manufacturingYear;\n    private List&lt;Seat&gt; seats;\n\n    public List&lt;FlightInstance&gt; getFlights();\n}\n\npublic class Seat {\n    private String seatNumber;\n    private SeatType type;\n    private SeatClass _class;\n}\n\npublic class FlightSeat extends Seat {\n    private double fare;\n    public double getFare();\n}\n\npublic class WeeklySchedule {\n    private int dayOfWeek;\n    private Time departureTime;\n}\n\npublic class CustomSchedule {\n    private Date customDate;\n    private Time departureTime;\n}\n\npublic class Flight {\n    private String flightNumber;\n    private Airport departure;\n    private Airport arrival;\n    private int durationInMinutes;\n\n    private List&lt;WeeklySchedules&gt; weeklySchedules;\n    private List&lt;CustomSchedules&gt; customSchedules;\n    private List&lt;FlightInstance&gt; flightInstances;\n}\n\npublic class FlightInstance {\n    private Date departureTime;\n    private String gate;\n    private FlightStatus status;\n    private Aircraft aircraft;\n\n    public bool cancel();\n    public void updateStatus(FlightStatus status);\n}\n\npublic class FlightReservation {\n    private String reservationNumber;\n    private FlightInstance flight;\n    private Map&lt;Passenger, FlightSeat&gt; seatMap;\n    private Date creationDate;\n    private ReservationStatus status;\n\n    public static FlightReservation fetchReservationDetails(String reservationNumber);\n    public List&lt;Passenger&gt; getPassengers();\n}\n\npublic class Itinerary {\n    private String customerId;\n    private Airport startingAirport;\n    private Airport finalAirport;\n    private Date creationDate;\n    private List&lt;FlightReservation&gt; reservations;\n\n    public List&lt;FlightReservation&gt; getReservations();\n    public boolean makeReservation();\n    public boolean makePayment();\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20an%20Online%20Stock%20Brokerage%20System/","title":"Design an Online Stock Brokerage System","text":""},{"location":"Notes/Interview-Coding-Practice/EducativeIO/OOP%27s%20Interview%20Question/Code/Design%20an%20Online%20Stock%20Brokerage%20System/#code","title":"Code","text":"<ul> <li>Here is the code for the top use cases. </li> <li>Enums and Constants: Here are the required enums and constants:</li> <li>StockExchange: To encapsulate all the interactions with the stock exchange:</li> <li>Order: To encapsulate all buy or sell orders:</li> <li>Member: Members will be buying and selling stocks:</li> </ul> <pre><code>public enum ReturnStatus {\n  SUCCESS, FAIL, INSUFFICIENT_FUNDS, INSUFFICIENT_QUANTITY, NO_STOCK_POSITION\n}\n\npublic enum OrderStatus {\n  OPEN, FILLED, PARTIALLY_FILLED, CANCELLED\n}\n\npublic enum TimeEnforcementType {\n  GOOD_TILL_CANCELLED, FILL_OR_KILL, IMMEDIATE_OR_CANCEL, ON_THE_OPEN, ON_THE_CLOSE\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, None\n}\n\npublic class Location {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic static class Constants {\n  public static final int MONEY_TRANSFER_LIMIT = 100_000;\n}\n\npublic class StockExchange {\n\n    private static StockExchange stockExchangeInstance = null;\n\n    // private constructor to restrict for singleton\n    private StockExchange() { }\n\n    // static method to get the singleton instance of StockExchange\n    public static StockExchange getInstance()\n    {\n        if(stockExchangeInstance == null) {\n            stockExchangeInstance = new StockExchange();\n        }\n        return stockExchangeInstance;\n    }\n\n    public static boolean placeOrder(Order order) {\n        boolean returnStatus = getInstance().submitOrder(Order);\n        return returnStatus;\n    }\n}\n\npublic abstract class Order {\n    private String orderNumber;\n    public boolean isBuyOrder;\n    private OrderStatus status;\n    private TimeEnforcementType timeEnforcement;\n    private Date creationTime;\n\n    private HashMap&lt;Integer, OrderPart&gt; parts;\n\n    public void setStatus(OrderStatus status){\n        this.status = status;\n    }\n\n    public bool saveInDB() {\n        // save in the database\n    }\n\n    public void addOrderParts(OrderParts parts) {\n        for (OrderPart part : parts) {\n            this.parts.put(part.id, part);\n        }\n    }\n}\n\npublic class LimitOrder extends Order {\n    private double priceLimit;\n}\n\n// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic abstract class Account {\n    private String id;\n    private String password;\n    private String name;\n    private AccountStatus status;\n    private Location address;\n    private String email;\n    private String phone;\n\n    public boolean resetPassword();\n}\n\npublic class Member extends Account {\n    private double availableFundsForTrading;\n    private Date dateOfMembership;\n\n    private HashMap&lt;string, StockPosition&gt; stockPositions;\n\n    private HashMap&lt;Integer, Order&gt; activeOrders;\n\n    public ErrorCode placeSellLimitOrder(\n            string stockId,\n            float quantity,\n            int limitPrice,\n            TimeEnforcementType enforcementType )\n    {\n        // check if member has this stock position\n        if(!stockPositions.containsKey(stockId)){\n            return NO_STOCK_POSITION;\n        }\n\n        StockPosition stockPosition = stockPositions.get(stockId);\n        // check if the member has enough quantity available to sell\n        if(stockPosition.getQuantity() &lt; quantity){\n            return INSUFFICIENT_QUANTITY;\n        }\n\n        LimitOrder order =\n                new LimitOrder(stockId, quantity, limitPrice, enforcementType);\n        order.isBuyOrder = false;\n        order.saveInDB();\n        boolean success = StockExchange::placeOrder(order);\n        if(!success){\n            order.setStatus(OrderStatus::FAILED);\n            order.saveInDB();\n        } else {\n            activeOrders.add(orderId, order);\n        }\n        return success;\n    }\n\n    public ErrorCode placeBuyLimitOrder(\n            string stockId,\n            float quantity,\n            int limitPrice,\n            TimeEnforcementType enforcementType)\n    {\n        // check if the member has enough funds to buy this stock\n        if(availableFundsForTrading &lt; quantity * limitPrice ){\n            return INSUFFICIENT_FUNDS;\n        }\n\n        LimitOrder order =\n                new LimitOrder(stockId, quantity, limitPrice, enforcementType);\n        order.isBuyOrder = true;\n        order.saveInDB();\n        boolean success = StockExchange::placeOrder(order);\n        if(!success){\n            order.setStatus(OrderStatus::FAILED);\n            order.saveInDB();\n        } else {\n            activeOrders.add(orderId, order);\n        }\n        return success;\n    }\n\n    // this function will be invoked whenever there is an update from\n    // stock exchange against an order\n    public void callbackStockExchange(int orderId, List&lt;OrderPart&gt; orderParts, OrderStatus status) {\n        Order order = activeOrders.get(orderId);\n        order.addOrderParts(orderParts);\n        order.setStatus(status);\n        order.updateInDB();\n\n        if (status == OrderStatus::FILLED || status == OrderStatus::CANCELLEd) {\n            activeOrders.remove(orderId);\n        }\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/","title":"Index","text":""},{"location":"Notes/Interview-Coding-Practice/src/DSA/#table-of-contents","title":"Table of Contents","text":"<ol> <li>DSA-PATTERNS</li> <li> DSA-SHEET</li> <li>79 Last Moment DSA Sheet</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/","title":"\ud83d\udd25 DSA Patterns for Interview Preparation","text":""},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#dsa-pattern-recognition-cheatsheet-for-interviews","title":"\ud83e\udde0 DSA Pattern Recognition Cheatsheet for Interviews","text":"<p>I invested 4+ hours to create this pattern recognition cheatsheet for DSA and coding interviews. This will help you solve 90% of all DSA problems in interviews (based on my mentoring experience over the last 8+ years)</p> <p>\u2757 Most people struggle with DSA not because of weak logic, but due to the wrong approach.</p> <p>\u2705 Think in patterns \u2014 it's the key to cracking unseen problems.</p>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#arrays-strings","title":"\ud83d\udccc Arrays / Strings","text":"# Problem Type Patterns to Use 1\ufe0f\u20e3 Sorted array? Binary Search, Two Pointers, Prefix Sums 2\ufe0f\u20e3 Optimization (Max/Min/Subarray)? Sliding Window, DP, Greedy 3\ufe0f\u20e3 Duplicates / Frequencies? HashMap, HashSet, Count Array 4\ufe0f\u20e3 Substrings / Subarrays? Sliding Window + Two Pointers 5\ufe0f\u20e3 Frequent min/max in window? Monotonic Queue, Deque, Heap 6\ufe0f\u20e3 Generate subsets/permutations? Backtracking 7\ufe0f\u20e3 Matching / Parsing? Stack (e.g., Balanced Parentheses)"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#linked-list-inputs","title":"\ud83d\udd17 Linked List Inputs","text":"# Problem Type Patterns to Use 1\ufe0f\u20e3 Detect cycles Slow/Fast Pointers (Floyd\u2019s) 2\ufe0f\u20e3 Reverse list Pointers \u2192 prev, curr, next 3\ufe0f\u20e3 Find middle/intersection Two Pointers"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#tree-inputs-binary-trees","title":"\ud83c\udf32 Tree Inputs (Binary Trees)","text":"# Problem Type Patterns to Use 1\ufe0f\u20e3 Traversals Inorder, Preorder, Postorder, Level-order 2\ufe0f\u20e3 Balance / Diameter Postorder + Height Calculation 3\ufe0f\u20e3 LCA (Lowest Common Ancestor) DFS or Parent Map + Ancestor Set"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#graph-inputs","title":"\ud83d\udd78\ufe0f Graph Inputs","text":"# Problem Type Patterns to Use 1\ufe0f\u20e3 Unweighted Shortest Path BFS 2\ufe0f\u20e3 Weighted Shortest Path Dijkstra, Bellman-Ford, A* 3\ufe0f\u20e3 Connected Components / Cycle Detection DFS, Union-Find 4\ufe0f\u20e3 Topological Sort Kahn\u2019s Algo, DFS + visited 5\ufe0f\u20e3 Minimum Spanning Tree Kruskal, Prim"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#dynamic-programming","title":"\ud83e\uddee Dynamic Programming","text":"# Problem Type Patterns to Use 1\ufe0f\u20e3 Optimal Choices / Subproblems Memoization, Tabulation 2\ufe0f\u20e3 Subset, Knapsack 1D/2D DP 3\ufe0f\u20e3 String Match / Edit Distance DP Matrix (Edit Distance, LCS)"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#range-queries-updates","title":"\ud83d\udccf Range Queries / Updates","text":"# Problem Type Patterns to Use 1\ufe0f\u20e3 No updates, many queries Prefix Sums 2\ufe0f\u20e3 Many updates + queries Segment Tree, Fenwick Tree (BIT)"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#bit-manipulation","title":"\ud83d\udd22 Bit Manipulation","text":"# Problem Type Patterns to Use 1\ufe0f\u20e3 XOR, Subsets Bit Masks 2\ufe0f\u20e3 Even/Odd, Set/Unset Bits &amp;,"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#recursion-limits","title":"\ud83d\udd01 Recursion Limits","text":"Problem Pattern to Use Stack overflow risk Convert to Iterative + Stack"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#top-k-least-k-elements","title":"\ud83d\udd1f Top K / Least K Elements","text":"Problem Pattern to Use Top/Least K Elements Heap Exact K-th Element Quick Select"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#special-techniques","title":"\ud83c\udfaf Special Techniques","text":"Technique Use Case Sliding Window Subarrays with fixed/dynamic size Monotonic Stack Next Greater/Smaller Element Greedy When local optimum = global optimum Trie Prefix-based string search <p>Let me know if you'd like practice questions, visuals or PDF export \u2728</p> \ud83c\udfc6 SL \ud83d\ude80 Priority \ud83d\udccc Topic \ud83d\udcca DSA Pattern \ud83d\udca1 Importance \ud83d\udee0\ufe0f Techniques 1\ufe0f\u20e3 \ud83d\udd34 URGENT Binary Search Patterns \ud83d\udd0d Binary Search \ud83d\udfe2 High \u2797 Divide search space to find the target element. 2\ufe0f\u20e3 \ud83d\udd34 URGENT Two Pointers Patterns \ud83d\udc63 Two Pointers \ud83d\udfe2 High \ud83d\udeb6\u200d\u2642\ufe0f Traverse the array with two pointers to find pairs or subarrays. 3\ufe0f\u20e3 \ud83d\udd34 URGENT Sliding Window Patterns \ud83e\ude9f Sliding Window \ud83d\udfe2 High \ud83d\udd04 Maintain a window to solve subarray problems. 4\ufe0f\u20e3 \ud83d\udd34 URGENT Depth-First Search (DFS) \ud83c\udf33 DFS \ud83d\udfe2 High \ud83c\udf32 Explore all nodes of a graph/tree, backtrack when necessary. 5\ufe0f\u20e3 \ud83d\udd34 URGENT Breadth-First Search (BFS) \ud83c\udf0a BFS \ud83d\udfe2 High \ud83d\udcf6 Level-order traversal of graph/tree. 6\ufe0f\u20e3 \ud83d\udd34 URGENT Dynamic Programming Patterns \ud83d\udce6 Top-Down DP, Memoization \ud83d\udfe2 High \ud83d\udd04 Break problems into overlapping subproblems. 7\ufe0f\u20e3 \ud83d\udd34 URGENT Graph Patterns \ud83d\udd17 BFS, Dijkstra, DFS \ud83d\udfe2 High \ud83d\udccd Solve graph traversal and shortest path problems. 8\ufe0f\u20e3 \ud83d\udd34 URGENT Top \u2018K\u2019 Elements \ud83d\udcca Heaps, Quickselect \ud83d\udfe2 High \ud83c\udfc6 Use heaps or partitioning to find the k largest/smallest. 9\ufe0f\u20e3 \ud83d\udd34 URGENT Segment Tree Patterns \ud83c\udf32 Segment Tree \ud83d\udfe2 High \ud83d\udccf Efficiently solve range queries and updates. \ud83d\udd1f \ud83d\udd34 URGENT Union-Find (Disjoint Set Union) \ud83d\udd17 Disjoint Set Union \ud83d\udfe2 High \ud83d\udd17 Find and union disjoint sets efficiently. 1\ufe0f\u20e31\ufe0f\u20e3 \ud83d\udd34 URGENT Tree Patterns \ud83c\udf33 DFS, BFS \ud83d\udfe2 High \ud83c\udf31 Solve tree traversal and manipulation problems. 1\ufe0f\u20e32\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Monotonic Stack Patterns \ud83d\udcda Stack \ud83d\udfe1 Medium \ud83d\udcc8 Use stack for tracking increasing or decreasing order. 1\ufe0f\u20e33\ufe0f\u20e3 \ud83d\udfe0 IMPORTANT Bit Manipulation Patterns \ud83d\udd22 Bitwise Operations \ud83d\udfe1 Medium \ud83d\udca1 Solve problems using bitwise AND, OR, XOR, shifts. 1\ufe0f\u20e34\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Modified Binary Search \ud83d\udd0d Binary Search \ud83d\udfe1 Medium \ud83d\udee0\ufe0f Apply binary search with custom conditions. 1\ufe0f\u20e35\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Overlapping Intervals \u23f3 Greedy \ud83d\udfe1 Medium \ud83d\udcc6 Solve problems by processing intervals optimally. 1\ufe0f\u20e36\ufe0f\u20e3 \ud83d\udfe0 IMPORTANT Backtracking \ud83d\udd04 Backtracking \ud83d\udfe1 Medium \ud83d\udd04 Explore all possible solutions and backtrack when invalid. 1\ufe0f\u20e37\ufe0f\u20e3 \ud83d\udd34 URGENT Substring Patterns \ud83e\ude9f Sliding Window, Two Pointers \ud83d\udfe2 High \ud83d\udd24 Solve substring problems by adjusting window size. 1\ufe0f\u20e38\ufe0f\u20e3 \ud83d\udd34 URGENT Trie Patterns \ud83c\udf32 Trie \ud83d\udfe1 Medium \ud83d\udd21 Efficiently store and search for strings with common prefixes. 1\ufe0f\u20e39\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Heap Patterns \ud83d\udcca Heap \ud83d\udfe1 Medium \ud83d\udd3a Use heap operations to manage priority-based tasks. 2\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Matrix Traversal \ud83d\udd04 Various Traversal Techniques \ud83d\udfe1 Medium \ud83d\udccb Solve problems using matrix traversal techniques. <p>\ud83d\udd39 Legend: - \ud83d\udd34 Urgent \u2013 High priority topics for interviews. - \ud83d\udfe0 Important \u2013 Medium priority but useful for FAANG. - \ud83d\udfe1 Pick Later \u2013 Lower priority but still valuable for problem-solving.  </p>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-PATTERNS/#resources","title":"Resources:","text":"<ol> <li>Comprehensive Data Structure and Algorithm Study Guide</li> <li>Backtracking solution for 10 popular problems: Permutations</li> <li>Dynamic Programming patterns for beginners: DP for Beginners</li> <li>All Graph algorithms in one place: Graph Algorithms One Place | Dijkstra | Bellman Ford | Floyd Warshall | Prims | Kruskals | DSU - LeetCode Discuss</li> <li>Sliding Window algorithm made easy: Find All Anagrams in a String - LeetCode</li> <li>Ultimate Binary Search guide: [Python] Powerful Ultimate Binary Search Template. Solved many problems - LeetCode Discuss</li> <li>How to solve Linked List problems?</li> <li>LeetCode was HARD until I Learned these 15 Patterns </li> <li>20 Patterns to Master Dynamic Programming</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/","title":"\ud83d\udd25 DSA Patterns for Interview Preparation","text":"\ud83c\udfc6 SL \ud83d\ude80 Priority \ud83d\udccc Topic \ud83d\udcca DSA Pattern \ud83d\udca1 Importance \ud83d\udee0\ufe0f Techniques 1\ufe0f\u20e3 \ud83d\udd34 URGENT Binary Search Patterns \ud83d\udd0d Binary Search \ud83d\udfe2 High \u2797 Divide search space to find the target element. 2\ufe0f\u20e3 \ud83d\udd34 URGENT Two Pointers Patterns \ud83d\udc63 Two Pointers \ud83d\udfe2 High \ud83d\udeb6\u200d\u2642\ufe0f Traverse the array with two pointers to find pairs or subarrays. 3\ufe0f\u20e3 \ud83d\udd34 URGENT Sliding Window Patterns \ud83e\ude9f Sliding Window \ud83d\udfe2 High \ud83d\udd04 Maintain a window to solve subarray problems. 4\ufe0f\u20e3 \ud83d\udd34 URGENT Depth-First Search (DFS) \ud83c\udf33 DFS \ud83d\udfe2 High \ud83c\udf32 Explore all nodes of a graph/tree, backtrack when necessary. 5\ufe0f\u20e3 \ud83d\udd34 URGENT Breadth-First Search (BFS) \ud83c\udf0a BFS \ud83d\udfe2 High \ud83d\udcf6 Level-order traversal of graph/tree. 6\ufe0f\u20e3 \ud83d\udd34 URGENT Dynamic Programming Patterns \ud83d\udce6 Top-Down DP, Memoization \ud83d\udfe2 High \ud83d\udd04 Break problems into overlapping subproblems. 7\ufe0f\u20e3 \ud83d\udd34 URGENT Graph Patterns \ud83d\udd17 BFS, Dijkstra, DFS \ud83d\udfe2 High \ud83d\udccd Solve graph traversal and shortest path problems. 8\ufe0f\u20e3 \ud83d\udd34 URGENT Top \u2018K\u2019 Elements \ud83d\udcca Heaps, Quickselect \ud83d\udfe2 High \ud83c\udfc6 Use heaps or partitioning to find the k largest/smallest. 9\ufe0f\u20e3 \ud83d\udd34 URGENT Segment Tree Patterns \ud83c\udf32 Segment Tree \ud83d\udfe2 High \ud83d\udccf Efficiently solve range queries and updates. \ud83d\udd1f \ud83d\udd34 URGENT Union-Find (Disjoint Set Union) \ud83d\udd17 Disjoint Set Union \ud83d\udfe2 High \ud83d\udd17 Find and union disjoint sets efficiently. 1\ufe0f\u20e31\ufe0f\u20e3 \ud83d\udd34 URGENT Tree Patterns \ud83c\udf33 DFS, BFS \ud83d\udfe2 High \ud83c\udf31 Solve tree traversal and manipulation problems. 1\ufe0f\u20e32\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Monotonic Stack Patterns \ud83d\udcda Stack \ud83d\udfe1 Medium \ud83d\udcc8 Use stack for tracking increasing or decreasing order. 1\ufe0f\u20e33\ufe0f\u20e3 \ud83d\udfe0 IMPORTANT Bit Manipulation Patterns \ud83d\udd22 Bitwise Operations \ud83d\udfe1 Medium \ud83d\udca1 Solve problems using bitwise AND, OR, XOR, shifts. 1\ufe0f\u20e34\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Modified Binary Search \ud83d\udd0d Binary Search \ud83d\udfe1 Medium \ud83d\udee0\ufe0f Apply binary search with custom conditions. 1\ufe0f\u20e35\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Overlapping Intervals \u23f3 Greedy \ud83d\udfe1 Medium \ud83d\udcc6 Solve problems by processing intervals optimally. 1\ufe0f\u20e36\ufe0f\u20e3 \ud83d\udfe0 IMPORTANT Backtracking \ud83d\udd04 Backtracking \ud83d\udfe1 Medium \ud83d\udd04 Explore all possible solutions and backtrack when invalid. 1\ufe0f\u20e37\ufe0f\u20e3 \ud83d\udd34 URGENT Substring Patterns \ud83e\ude9f Sliding Window, Two Pointers \ud83d\udfe2 High \ud83d\udd24 Solve substring problems by adjusting window size. 1\ufe0f\u20e38\ufe0f\u20e3 \ud83d\udd34 URGENT Trie Patterns \ud83c\udf32 Trie \ud83d\udfe1 Medium \ud83d\udd21 Efficiently store and search for strings with common prefixes. 1\ufe0f\u20e39\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Heap Patterns \ud83d\udcca Heap \ud83d\udfe1 Medium \ud83d\udd3a Use heap operations to manage priority-based tasks. 2\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udfe1 PICK LATER Matrix Traversal \ud83d\udd04 Various Traversal Techniques \ud83d\udfe1 Medium \ud83d\udccb Solve problems using matrix traversal techniques. <p>\ud83d\udd39 Legend: - \ud83d\udd34 Urgent \u2013 High priority topics for interviews. - \ud83d\udfe0 Important \u2013 Medium priority but useful for FAANG. - \ud83d\udfe1 Pick Later \u2013 Lower priority but still valuable for problem-solving.  </p>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/#resources","title":"Resources:","text":"<ol> <li>Comprehensive Data Structure and Algorithm Study Guide</li> <li>Backtracking solution for 10 popular problems: Permutations</li> <li>Dynamic Programming patterns for beginners: DP for Beginners</li> <li>All Graph algorithms in one place: Graph Algorithms One Place | Dijkstra | Bellman Ford | Floyd Warshall | Prims | Kruskals | DSU - LeetCode Discuss</li> <li>Sliding Window algorithm made easy: Find All Anagrams in a String - LeetCode</li> <li>Ultimate Binary Search guide: [Python] Powerful Ultimate Binary Search Template. Solved many problems - LeetCode Discuss</li> <li>How to solve Linked List problems?</li> <li>LeetCode was HARD until I Learned these 15 Patterns </li> <li>20 Patterns to Master Dynamic Programming</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/Sheet/","title":"Sheet","text":""},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/Sheet/#google-sse-dsa-preparation-dashboard","title":"\ud83e\udde0 Google SSE DSA Preparation Dashboard","text":"<p>\ud83c\udfaf Focus: FAANG-level DSA &amp; Coding Interview (Google-style) \ud83c\udfaf Track: Weekly + Topic-wise + Dynamic Progress Summary</p>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/Sheet/#summary-auto-updated","title":"\ud83d\udcc8 Summary (Auto-updated)","text":"<ul> <li>\u2705 Topics Completed: <code>X / Total</code></li> <li>\ud83d\udd52 Total Time Estimated: <code>YY hrs</code></li> <li>\ud83e\udde0 Key Questions Practiced: <code>ZZ</code></li> <li>\ud83d\udcc5 Weeks Logged: <code>N</code></li> </ul> <p>\u2705 = Done \u2022 \u2b1c = Not Started \u2022 \ud83d\udfe8 = In Progress</p>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/Sheet/#stage-1-foundational-concepts","title":"\u2705 Stage 1: Foundational Concepts","text":"Topic Key Concepts Progress Time (hrs) \ud83d\udd11 Key Qs Done \u2705 Arrays Sorting, Prefix Sums, Two Pointers \u2b1c 5 5 [ ] Strings Palindromes, Substrings, Anagrams \u2b1c 4 5 [ ] Hashmaps/Sets Frequency Count, Lookups \u2b1c 3 5 [ ] Stacks/Queues Balanced Parens, Monotonic Stack \u2b1c 4 5 [ ] Linked Lists Reverse, Detect Cycles, Merge, Reorder \u2b1c 4 5 [ ]"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/Sheet/#stage-2-intermediate-ds-patterns","title":"\ud83d\ude80 Stage 2: Intermediate DS &amp; Patterns","text":"Topic Key Concepts Progress Time (hrs) \ud83d\udd11 Key Qs Done \u2705 Sliding Window Max subarray sum, Longest substring \u2b1c 3 5 [ ] Two Pointers Remove Duplicates, Merge intervals \u2b1c 3 5 [ ] Binary Search Rotated Array, First/Last Occurrence \u2b1c 4 5 [ ] Recursion Tree DFS, Subsets, Base case logic \u2b1c 5 5 [ ] Backtracking N-Queens, Permutations, Word Search \u2b1c 4 5 [ ] Trees (Binary) Traversals, Diameter, LCA \u2b1c 5 5 [ ] Heap / PQ Top-K, Merge K Lists, Median Finder \u2b1c 4 5 [ ]"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/Sheet/#stage-3-advanced-logic-graph-thinking","title":"\ud83e\udded Stage 3: Advanced Logic &amp; Graph Thinking","text":"Topic Key Concepts Progress Time (hrs) \ud83d\udd11 Key Qs Done \u2705 Graphs (DFS/BFS) Grid traversal, Connected components \u2b1c 5 5 [ ] Union Find (DSU) Cycle Detection, Union by Rank/Path Comp. \u2b1c 3 5 [ ] MST (Kruskal/Prim) Minimum Spanning Tree \u2b1c 3 5 [ ] Dijkstra / SSSP Shortest Path in Weighted Graph \u2b1c 4 5 [ ] Topological Sort Build Order, Course Schedule (DAG) \u2b1c 3 5 [ ] Dynamic Programming 0/1 Knapsack, DP on Grids/Strings \u2b1c 7 5 [ ] DP on Trees/Graphs Tree DP, DFS + Memoization \u2b1c 6 5 [ ]"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/Sheet/#stage-4-special-topics-for-edge-cases","title":"\ud83c\udf1f Stage 4: Special Topics for Edge Cases","text":"Topic Key Concepts Progress Time (hrs) \ud83d\udd11 Key Qs Done \u2705 Trie (Prefix Tree) Word Search, Autocomplete \u2b1c 3 5 [ ] Bit Manipulation XOR, Subsets, Bitmask DP \u2b1c 4 5 [ ] Greedy Algorithms Activity Selection, Intervals \u2b1c 4 5 [ ] Math &amp; Combinatorics GCD, Modulo, Perm/Comb \u2b1c 3 5 [ ]"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/Sheet/#dependency-flow","title":"\ud83d\udd17 Dependency Flow","text":"<pre><code>Stage 1 \u2192 Stage 2 \u2192 Stage 3 \u2192 Stage 4\n\nCore Chain:\nArrays \u2192 Strings \u2192 Hashing \u2192 Stacks \u2192 Recursion \u2192 Trees/Backtracking \u2192 Graphs \u2192 DP \u2192 Tries/Greedy/Bit\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/DSA/DSA-SHEET/Sheet/#weekly-tracking-table","title":"\ud83d\uddd3\ufe0f Weekly Tracking Table","text":"Week Topics Covered Time Spent (hrs) Notes Completed \u2705 1 Arrays, Strings [ ] 2 Hashmaps, Sliding Window, Two Pointers [ ] 3 Binary Search, Recursion, Linked Lists [ ] 4 Trees, Heaps [ ] 5 Graphs + DSU + MST [ ] 6 Dijkstra, Topo Sort, Basic DP [ ] 7 DP on Trees/Graphs, Bit/Greedy [ ] 8 Trie, Math, Mock Interviews [ ]"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/","title":"HLD Interview Questions","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/#table-of-contents","title":"Table of Contents","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/#basics","title":"Basics","text":"<ul> <li>Network Protocols<ul> <li>Client Server, Peer 2 Peer, TCP, UDP, etc.</li> </ul> </li> <li>CAP Theorem<ul> <li>CAP Theorem Explanation</li> </ul> </li> <li>Microservices Design Patterns<ul> <li>Introduction and Decomposition Pattern, SAGA Pattern, Strangler Pattern, CQRS</li> <li>\ud83d\udccc Read here</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/#scale-from-zero-to-million-users-in-detail","title":"Scale from ZERO to MILLION Users in Detail","text":"<ul> <li>Overview - Preview</li> <li> <p>Consistent Hashing</p> <ul> <li>Consistent Hashing Explanation</li> </ul> </li> <li> <p>System Design Cost Estimation</p> <ul> <li>Back-Of-The-Envelope Estimation</li> </ul> </li> <li> <p>SQL vs NoSQL</p> <ul> <li>Comparative Analysis</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/#high-availability-and-caching-strategies","title":"High Availability and Caching Strategies","text":"<ul> <li>Distributed Messaging Queue - Kafka, RabbitMQ Design</li> <li>Proxy Overview - Proxy Reverse Proxy</li> <li>Load Balancer Algorithms - Various Load Balancing Techniques</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/#caching-strategies","title":"Caching Strategies","text":"<ul> <li>Distributed Cache - Distributed Cache</li> <li>Redis - Redis - Must-Know Concepts for System Design &amp; Interviews</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/#distributed-transactions-and-concurrency-control","title":"Distributed Transactions and Concurrency Control","text":"<ul> <li>Distributed Transactions<ul> <li>Two Phase Commit (2PC), (3PC) and SAGA</li> </ul> </li> <li>Database Indexing<ul> <li>Part 2: Clustered and Non-Clustered Indexing</li> </ul> </li> <li>Distributed Concurrency Control<ul> <li>Optimistic &amp; Pessimistic Concurrency</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/#security-concepts","title":"Security Concepts","text":"<ul> <li>OAuth 2.0 - OAuth Explanation</li> <li>Encryption Methods<ul> <li>Symmetric &amp; Asymmetric (AES, Diffie-Hellman)</li> </ul> </li> <li>JWT - JWS Token</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/#performance-optimization-topics","title":"Performance Optimization Topics","text":"<ul> <li>Miscellaneous - Thundering Herd</li> <li>API Gateway -  API Gateway</li> <li>Service Mesh - Service Mesh</li> <li>DNS - DNS</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/","title":"Network Protocols","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#1-introduction","title":"1. Introduction","text":"<p>This section focuses on network protocols in system design.</p> <p>Topics Covered: - Network communication models (client-server, peer-to-peer) - Choosing the right protocol for applications (e.g., WhatsApp, Google Meet)</p> <p></p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#2-network-protocols","title":"2. Network Protocols","text":"<p>Definition: Network protocols define rules for communication between systems over a network.</p> <p>OSI Model (not covered in detail): A layered architecture for network communication.</p> <p>Key Layers: - Application Layer: Handles user-facing communication (e.g., web browsing, email) - Transport Layer: Manages reliable data transfer between applications (e.g., TCP, UDP)</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#3-application-layer-protocols","title":"3. Application Layer Protocols","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#client-server-model","title":"Client-Server Model","text":"<ul> <li>Client: Initiates requests (e.g., web browser)</li> <li>Server: Responds to requests (e.g., web server)</li> <li>Examples: HTTP, FTP, SMTP, IMAP, WebSockets (Bidirectional communication but not Peer-to-Peer, e.g., WhatsApp)</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#peer-to-peer-model","title":"Peer-to-Peer Model","text":"<ul> <li>Peers: All machines can send and receive requests from each other</li> <li>Examples: File sharing, instant messaging, WebRTC</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#4-protocols-overview","title":"4. Protocols Overview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#http-hypertext-transfer-protocol","title":"HTTP (Hypertext Transfer Protocol)","text":"<ul> <li>Key Points:<ul> <li>Most widely used protocol for web communication</li> <li>Connection-oriented</li> <li>Used for accessing web pages and web applications</li> </ul> </li> <li>Example: WhatsApp uses WebSockets over HTTP for messaging</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#http3","title":"HTTP/3","text":"<ul> <li>Key Points:<ul> <li>Next major revision of HTTP</li> <li>Runs on QUIC (new transport protocol) and relies on UDP instead of TCP</li> <li>Enables faster web page responsiveness and better suited for mobile-heavy internet usage</li> </ul> </li> <li>Use Case: VR applications that demand more bandwidth and faster data transfers</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#https-hypertext-transfer-protocol-secure","title":"HTTPS (Hypertext Transfer Protocol Secure)","text":"<ul> <li>Key Points:<ul> <li>Extends HTTP by adding encryption for secure communications</li> <li>Used in applications that require data confidentiality and integrity</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#websocket","title":"WebSocket","text":"<ul> <li>Key Points:<ul> <li>Provides full-duplex communication over TCP</li> <li>Clients can receive real-time updates from back-end services</li> <li>Unlike REST, which \"pulls\" data, WebSocket allows data to be \"pushed\"</li> </ul> </li> <li>Use Case: Online gaming, stock trading, messaging apps (real-time communication)</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#ftp-file-transfer-protocol","title":"FTP (File Transfer Protocol)","text":"<ul> <li>Key Points:<ul> <li>Used for transferring files between computers</li> <li>Has two connections: Control connection and Data connection</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#smtp-simple-mail-transfer-protocol","title":"SMTP (Simple Mail Transfer Protocol)","text":"<ul> <li>Key Points:<ul> <li>Standard protocol to transfer emails between systems</li> <li>Works with IMAP for receiving and reading emails</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#imap-internet-message-access-protocol","title":"IMAP (Internet Message Access Protocol)","text":"<ul> <li>Key Points:<ul> <li>Used for receiving and reading emails</li> <li>Allows access to emails from multiple devices</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#5-transport-layer-protocols","title":"5. Transport Layer Protocols","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#tcp-transmission-control-protocol","title":"TCP (Transmission Control Protocol)","text":"<ul> <li>Key Points:<ul> <li>Connection-oriented: Establishes a virtual connection</li> <li>Divides data into packets and sequences them for reliable transmission</li> <li>Provides error checking and retransmission</li> </ul> </li> <li>Use Case: WhatsApp, applications requiring reliable data transfer</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#udp-user-datagram-protocol","title":"UDP (User Datagram Protocol)","text":"<ul> <li>Key Points:<ul> <li>Connectionless</li> <li>Sends data in packets without establishing a connection</li> <li>No guarantee of delivery or order, but faster and more efficient than TCP</li> </ul> </li> <li>Use Case: Live streaming, video calling, applications where occasional data loss is acceptable</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#6-key-takeaways","title":"6. Key Takeaways","text":"<ul> <li>Understanding network protocols is crucial for designing distributed systems</li> <li>Client-server and peer-to-peer models are fundamental for communication</li> <li>TCP provides reliable data transfer, while UDP prioritizes speed</li> <li>The choice of protocol depends on the specific requirements of the application</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/1.%20Network-Protocols/#resources","title":"Resources","text":"<ul> <li>Network Protocols</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/","title":"Load Balancers &amp; Algorithms Overview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#1-what-is-a-load-balancer","title":"1. What is a Load Balancer?","text":"<p>A Load Balancer is a crucial system component that ensures high availability and performance by distributing incoming traffic across multiple servers. Its primary role is to prevent server overload, ensuring application stability and reliability, especially during peak times.</p> <ul> <li>\ud83d\udee0\ufe0f Definition: A load balancer is either a physical device or software that distributes network/application traffic evenly across multiple servers.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#key-functions-of-load-balancer","title":"Key Functions of Load Balancer:","text":"<ol> <li>Distributes Traffic: Ensures no single server bears an excessive load.</li> <li>Ensures Availability &amp; Reliability: If one server fails, the load balancer redirects traffic to other available servers, ensuring uptime.</li> <li>Improves Performance: By distributing the workload, it optimizes the response time and enhances user experience.</li> <li>Scales Applications: Allows applications to scale horizontally by adding more servers to share the load.</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#2-types-of-load-balancers","title":"2. Types of Load Balancers","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#21-hardware-load-balancers","title":"2.1 Hardware Load Balancers","text":"<ul> <li>Definition: Physical devices designed to balance traffic between servers. These are often used in large-scale, data-intensive applications.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#22-software-load-balancers","title":"2.2 Software Load Balancers","text":"<ul> <li>Definition: Applications that can be deployed on standard hardware or virtual machines to balance traffic.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#23-cloud-based-load-balancers","title":"2.3 Cloud-based Load Balancers","text":"<ul> <li>Definition: Load balancing services provided by cloud platforms such as AWS, Google Cloud, and Azure.</li> <li>Examples:<ul> <li>AWS Elastic Load Balancer: Automatically distributes incoming application traffic across multiple targets.</li> <li>Google Cloud Load Balancing: Provides flexible and scalable cloud-based load balancing.</li> <li>Azure Load Balancer: Balances network traffic across resources hosted in Azure.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#3-layer-based-load-balancers","title":"3. Layer-based Load Balancers","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#31-layer-4-load-balancers-transport-layer","title":"3.1 Layer 4 Load Balancers (Transport Layer)","text":"<ul> <li>Definition: Operates at the transport layer (OSI Layer 4), making decisions based on the source and destination IP addresses and TCP/UDP ports.</li> <li>Use Case: Fast and efficient, but lacks the ability to make decisions based on application data.</li> <li>Example: Distributes traffic based purely on network protocols without inspecting the data packet contents.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#32-layer-7-load-balancers-application-layer","title":"3.2 Layer 7 Load Balancers (Application Layer)","text":"<ul> <li>Definition: Operates at the application layer (OSI Layer 7) and makes decisions based on application data, such as HTTP headers, URLs, and cookies.</li> <li>Use Case: Offers more detailed control over traffic distribution by analyzing the content of the requests.</li> <li>Example: A Layer 7 balancer can route traffic to different servers based on the requested URL path (e.g., <code>/images</code> goes to a media server, while <code>/api</code> goes to an API server).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#33-global-server-load-balancing-gslb","title":"3.3 Global Server Load Balancing (GSLB)","text":"<ul> <li>Definition: Distributes traffic across multiple geographical locations to enhance redundancy, performance, and disaster recovery.</li> <li>Use Case: Ensures users from different regions are routed to the nearest data center, reducing latency and improving response times globally.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#4-load-balancing-algorithms","title":"4. Load Balancing Algorithms","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#41-static-algorithms","title":"4.1 Static Algorithms","text":"<ul> <li> <p>Round Robin:</p> <ul> <li>Distributes incoming requests sequentially across all servers in a circular fashion.</li> <li>Advantages: Simple and evenly distributes traffic.</li> <li>Disadvantages: Does not consider server load, so can lead to uneven distribution if servers have different capacities.</li> </ul> </li> <li> <p>Weighted Round Robin:</p> <ul> <li>Extends the Round Robin method by assigning weights to each server based on their processing capacity.</li> <li>Advantages: Servers with higher capacity receive more traffic.</li> <li>Disadvantages: Still a static method; does not account for real-time server load or performance.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#42-dynamic-algorithms","title":"4.2 Dynamic Algorithms","text":"<ul> <li> <p>Least Connections:</p> <ul> <li>Sends traffic to the server with the fewest active connections.</li> <li>Advantages: Dynamically adjusts to distribute traffic based on real-time server load.</li> <li>Use Case: Suitable for applications where connection time varies.</li> </ul> </li> <li> <p>Least Response Time:</p> <ul> <li>Routes traffic to the server with the quickest response time.</li> <li>Advantages: Ensures better performance by taking response times into account.</li> <li>Use Case: Ideal for systems where response time is a key performance indicator.</li> </ul> </li> <li> <p>IP Hash:</p> <ul> <li>Maps clients\u2019 IP addresses to specific servers. The same client will always connect to the same server.</li> <li>Advantages: Useful for maintaining session persistence.</li> <li>Disadvantages: May result in uneven traffic distribution if certain IPs generate higher traffic volumes.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#_1","title":"Load Balancers &amp; Algorithms Overview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#5-key-insights-on-load-balancing","title":"5. Key Insights on Load Balancing:","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#51-l4-vs-l7-load-balancers","title":"5.1 L4 vs. L7 Load Balancers:","text":"<ul> <li>L4 Load Balancers: Operate at the transport layer and are faster because they handle only TCP/UDP traffic without inspecting application-level data.</li> <li>L7 Load Balancers: Provide more control by making decisions based on content, such as URLs or HTTP headers, making them suitable for complex traffic management scenarios.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#52-static-vs-dynamic-algorithms","title":"5.2 Static vs. Dynamic Algorithms:","text":"<ul> <li>Static Algorithms: Simple but may lead to uneven distribution if server capacity is not considered.</li> <li>Dynamic Algorithms: Adjust in real-time based on server load and performance metrics, improving resource utilization.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#53-server-capacity-awareness","title":"5.3 Server Capacity Awareness:","text":"<ul> <li>Weighted Algorithms: Adjust load distribution based on server capacity, ensuring efficient utilization of resources.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#54-time-to-first-byte-ttfb","title":"5.4 Time to First Byte (TTFB):","text":"<ul> <li>Definition: A critical metric that measures server performance from the user's perspective.</li> <li>Impact: Load balancers can optimize the routing of requests based on TTFB to improve the overall user experience.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#55-client-connection-consistency","title":"5.5 Client Connection Consistency:","text":"<ul> <li>IP Hashing: Ensures that a client consistently connects to the same server, which is essential for maintaining session continuity in certain applications.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#6-real-world-examples-of-load-balancing","title":"6. Real-World Examples of Load Balancing:","text":"<ol> <li>AWS Elastic Load Balancer: Automatically scales applications by distributing incoming requests across multiple EC2 instances.</li> <li>Netflix: Uses load balancing and content distribution networks to handle billions of video requests daily, ensuring a seamless user experience globally.</li> <li>Global Server Load Balancing (GSLB): Deployed by multinational companies to ensure users in different regions connect to the nearest server, improving performance and redundancy.</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/10.%20Load-Balancers/#resources","title":"Resources","text":"<ul> <li>Load Balancer &amp; Different Algorithms</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/11.%20Distributed-Cache/","title":"Distributed Cache","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/11.%20Distributed-Cache/#summary","title":"Summary","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/11.%20Distributed-Cache/#where-is-caching-used","title":"Where is caching used","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/11.%20Distributed-Cache/#_1","title":"Distributed Cache","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/11.%20Distributed-Cache/#resources","title":"Resources","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/11.%20Distributed-Cache/#-distributed-cache-and-caching-strategies","title":"- Distributed Cache and Caching Strategies","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/12.%20Distributed-Transactions/","title":"HLD: Distributed Transaction Handling (2PC, 3PC and SAGA)","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/12.%20Distributed-Transactions/#resources","title":"Resources","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/12.%20Distributed-Transactions/#-handle-distributed-transactions-2pc-3pc-saga-pattern","title":"- Handle Distributed Transactions | 2PC, 3PC, SAGA Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/13.%20DBMS-Indexing/","title":"Database Indexing","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/13.%20DBMS-Indexing/#summary","title":"Summary","text":"<p>Database indexing improves search performance in relational databases by organizing data efficiently using structures like B+ trees.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/13.%20DBMS-Indexing/#highlights","title":"Highlights","text":"<ul> <li>\ud83d\udcca Data Organization: Understanding how data is stored in tables and data pages is crucial for indexing.</li> <li>\ud83d\udd0d Index Types: There are two main types of indexing: clustered and non-clustered.</li> <li>\ud83c\udf33 B+ Trees Use: B+ trees are commonly used for indexing, providing efficient search operations.</li> <li>\ud83d\udcc8 Performance Boost: Indexing significantly reduces query time from O(n) to O(log n).</li> <li>\ud83d\udd04 Data Mapping: DBMS manages the mapping of data pages to physical disk blocks for efficient access.</li> <li>\u2696\ufe0f Overhead Considerations: Creating too many indexes can lead to performance overhead in memory and processing.</li> <li>\ud83d\udd11 Primary Key Priority: Clustered indexes are typically based on primary keys, impacting data storage order.</li> </ul> <pre><code>                            DBMS Indexing\n                                 |\n         -------------------------------------------------\n         |                                               |\n**Clustered Index**                           **Non-Clustered Index**\n(Physical data order)                         (Separate index structure)\n|                                               |\nPrimary Key                               Multiple indexes possible\n(1 per table)                             (faster lookups)\n|\nFaster searches but                       |\nslower inserts due                        |\nto maintenance                            |\n|\nB+ Trees for efficiency\n(range queries, O(log n))\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/13.%20DBMS-Indexing/#key-insights","title":"Key Insights","text":"<ul> <li>\ud83d\udcda Data Structure Underpinning: The way data is physically stored in data pages (like 8KB pages) affects indexing. Understanding this helps optimize search performance by identifying how rows are organized and accessed.</li> <li>\ud83d\udd27 Efficient Searching with Indexes: Indexes, particularly B+ trees, enable quick access to data, improving query performance. Without indexes, searches become linear, significantly slowing down retrieval times.</li> <li>\ud83d\udcc5 Clustered vs. Non-Clustered Indexes: Clustered indexes dictate the physical order of data in the table, while non-clustered indexes create a separate structure for faster lookups, allowing multiple indexes per table.</li> <li>\u26a0\ufe0f Impact of Index Maintenance: Adding or modifying data requires maintaining indexes, which can introduce overhead, especially with large datasets. Careful index management is crucial for database performance.</li> <li>\ud83d\udcca Memory Management: The creation of multiple indexes requires additional memory to store index pages, impacting overall database performance. Balancing the number of indexes is essential.</li> <li>\ud83d\udd04 Primary Key as Clustered Index: When a primary key is defined, it typically becomes the clustered index, influencing how data is stored and accessed. This highlights the importance of designing database schemas wisely.</li> <li>\ud83d\udd17 Page Splitting Mechanism: When data pages fill up, the DBMS performs page splitting to create new pages, ensuring efficient data distribution and access. Understanding this mechanism is vital for optimizing performance.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/13.%20DBMS-Indexing/#resources","title":"Resources","text":"<ul> <li>Database Indexing</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/14.%20Concurrency-Control/","title":"14. Concurrency Control","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/14.%20Concurrency-Control/#_1","title":"14. Concurrency Control","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/14.%20Concurrency-Control/#resources","title":"Resources","text":"<ul> <li>Optimistic &amp; Pessimistic Concurrency Lock</li> <li>Two Phase Locking (2PL) </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/15.%20OAuth_2.0/","title":"OAuth 2.0","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/15.%20OAuth_2.0/#resources","title":"Resources","text":"<ul> <li>OAuth 2.0</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/16.%20Cryptography/","title":"Cryptography","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/16.%20Cryptography/#resources","title":"Resources","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/16.%20Cryptography/#-cryptography","title":"- Cryptography","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/17.%20JWT_Token/","title":"JWT Token","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/17.%20JWT_Token/#resources","title":"Resources","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/17.%20JWT_Token/#-json-web-token","title":"- JSON Web Token","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/18.%20API_Gateway/","title":"API Gateway","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/18.%20API_Gateway/#_1","title":"API Gateway","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/18.%20API_Gateway/#resources","title":"Resources","text":"<ul> <li>API GATEWAY</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/19.%20Service_Mesh/","title":"Service Mesh","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/19.%20Service_Mesh/#resources","title":"Resources","text":"<ul> <li>Service Mesh</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/","title":"CAP Theorem","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#1-introduction","title":"1. Introduction:","text":"<ul> <li>Discusses the concept of CAP Theorem (Consistency, Availability, Partition Tolerance) and its relevance in distributed systems.</li> <li>Emphasizes the importance of considering CAP constraints early in system design to avoid costly changes later.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#2-cap-theorem","title":"2. CAP Theorem:","text":"<ul> <li>CAP: Stands for Consistency, Availability, Partition Tolerance.</li> <li>Desired Properties of Distributed Systems: These three properties are desirable in a distributed system.</li> <li>CAP Trade-off: You cannot have all three properties simultaneously. You must choose two out of the three.</li> <li>Example:<ul> <li>Consider a distributed database with nodes in India and the US.</li> <li>A user's data is replicated across both locations.</li> <li>A distributed system should ideally be consistent (same data everywhere), available (responding to requests), and tolerant to partitions (network disruptions).</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#3-understanding-each-property","title":"3. Understanding Each Property:","text":"<ul> <li>Consistency: Ensures that all nodes have the same, up-to-date data at any given time.</li> <li>Availability: Guarantees that every request is successfully processed by at least one node.</li> <li>Partition Tolerance: Allows the system to continue functioning even if communication between nodes is disrupted.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#4-why-cap-properties-cannot-co-exist","title":"4. Why CAP Properties Cannot Co-exist:","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#case-1-ca-consistency-and-availability-not-possible-with-partition-tolerance","title":"Case 1: CA (Consistency and Availability) - Not possible with Partition Tolerance","text":"<ul> <li>Scenario: A partition occurs, separating nodes A and B.</li> <li>Conflict: Node A writes updated data, but node B cannot access it due to the partition.</li> <li>Result: <ul> <li>Banking applications prioritize account balance consistency; suspend operations during partitions to prevent data inconsistencies.</li> <li>Inconsistency between nodes.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#case-2-cp-consistency-and-partition-tolerance-not-possible-with-availability","title":"Case 2: CP (Consistency and Partition Tolerance) - Not possible with Availability","text":"<ul> <li>Scenario: A partition occurs, separating nodes A and B.</li> <li>Strategy: To maintain consistency, only one node (A) is allowed to process writes.</li> <li>Result: <ul> <li>Stock trading platforms may limit access in some regions during disruptions to ensure consistent pricing across all nodes.</li> <li>Node B becomes unavailable for writes during the partition.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#case-3-ap-availability-and-partition-tolerance-not-possible-with-consistency","title":"Case 3: AP (Availability and Partition Tolerance) - Not possible with Consistency","text":"<ul> <li>Scenario: A partition occurs, separating nodes A and B.</li> <li>Strategy: To maintain availability, both nodes can process writes.</li> <li>Result: <ul> <li>Social media platforms allow users to post updates during partitions; data synchronization may lag (e.g., likes/comments show up at different times).</li> <li>Potential for inconsistent data between nodes.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#5-cap-trade-off-in-real-world-systems","title":"5. CAP Trade-off in Real-world Systems:","text":"<ul> <li>Importance of Partition Tolerance: In today's distributed systems, network disruptions are common.</li> <li>Choosing between CP and AP:<ul> <li>CP: Choose this option for systems where consistency is critical, even if it means some temporary downtime.</li> <li>AP: Choose this option for systems where availability is paramount, even if it means some data inconsistency.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#6-updated-insights-on-cap","title":"6. Updated Insights on CAP:","text":"<ul> <li> <p>CAP theorem states that any distributed data store can only provide two of the following three guarantees:</p> <ol> <li>Consistency - Every read receives the most recent write or an error.</li> <li>Availability - Every request receives a response.</li> <li>Partition Tolerance - The system continues to operate in network faults.</li> </ol> </li> <li> <p>However, this theorem has been criticized for being too narrow for distributed systems. Network faults are inevitable in such systems, and we must deal with this in any distributed design.</p> </li> <li> <p>You can read more on this in \u201cPlease stop calling databases CP or AP\u201d by Martin Kleppmann.</p> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#7-key-takeaways","title":"7. Key Takeaways:","text":"<ul> <li>Understanding CAP is crucial for effective distributed system design.</li> <li>Early consideration of CAP constraints can prevent costly changes later.</li> <li>The choice between CP and AP depends on the specific needs of your system.</li> <li>Partition tolerance is a key factor in modern distributed systems.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/2.%20CAP-Theorem/#resources","title":"Resources","text":"<ul> <li>CAP Theorem</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/20.miscellaneous_concepts/","title":"Miscellaneous Topics","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/20.miscellaneous_concepts/#resources","title":"Resources","text":"<ul> <li>Thundering Herd: BookMyShow issue!</li> <li>How DNS works? </li> <li>How to divide Monolithic System to Microservices</li> <li>Common Attack</li> <li>Dual Write Problem</li> </ul> <ul> <li>Complete Playlist</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/","title":"Microservices Design Patterns","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#1-introduction","title":"1. Introduction","text":"<ul> <li>This part focuses on:<ul> <li>Monolithic vs Microservices.</li> <li>Important Microservices Patterns:<ul> <li>Strangler Pattern: For refactoring a monolithic service into microservices.</li> <li>Saga Pattern: For solving distributed transaction issues.</li> <li>CQRS (Command Query Responsibility Segregation): For separating read and write operations.</li> </ul> </li> <li>This topic can lead to around 15 questions in interviews. <p>\ud83d\ude80 Level up your Google SSE interview prep with this essential guide on microservices architecture! \ud83d\udccc Dive in here.</p> </li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#2-disadvantages-of-monolithic-architecture","title":"2. Disadvantages of Monolithic Architecture","text":"<ul> <li>Tight Coupling:<ul> <li>Changing one line can impact other components.</li> <li>Entire application needs to be tested/deployed for one change.</li> </ul> </li> <li>Difficult to Scale:<ul> <li>If one component needs scaling, the entire application must be scaled.</li> </ul> </li> <li>Expensive Deployments and Rollbacks:<ul> <li>Redeploying the whole application for small changes.</li> </ul> </li> <li>Large Codebase:<ul> <li>Everything is in a single application.</li> <li>Codebase grows large over time, making changes and impact analysis harder.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#_1","title":"Microservices Design Patterns","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#3-why-microservices","title":"3. Why Microservices?","text":"<ul> <li>Microservices overcome monolithic architecture disadvantages.</li> <li>The idea is to split a large application into smaller, independent services.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#4-advantages-of-microservices","title":"4. Advantages of Microservices","text":"<ul> <li>Better Separation of Concerns: Each service handles a distinct business function.</li> <li>Loose Coupling: Services interact minimally, reducing interdependencies.</li> <li>Independent Deployment: Services can be deployed and updated separately.</li> <li>Scalability: Only the specific services needing resources can be scaled.</li> <li>Faster Release Cycles: Smaller services allow for quicker updates and releases.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#5-disadvantages-of-microservices","title":"5. Disadvantages of Microservices","text":"<ul> <li>Service Boundaries/Decomposition:<ul> <li>Identifying proper service boundaries is challenging.</li> </ul> </li> <li>Inter-Service Communication:<ul> <li>Managing communication between services is complex.</li> <li>Requires monitoring and handling service calls and failures.</li> </ul> </li> <li>Distributed Transaction Management:<ul> <li>Handling transactions across multiple databases is difficult.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#_2","title":"Microservices Design Patterns","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#6-microservices-design-phases","title":"6. Microservices Design Phases","text":"<ul> <li>Decomposition Patterns: How services are split.</li> <li>Database Patterns: How databases are handled.</li> <li>Communication Patterns: How services communicate with each other.</li> <li>Integration Patterns: How services are integrated with external systems.</li> <li>Deployment Patterns: Best practices for deploying services.</li> <li>Cross-Cutting Concerns: Includes monitoring, logging, and handling failures.</li> </ul> <p>\ud83d\ude80 Want to master Microservices Patterns for your Google SSE interview prep? \ud83d\udccc Learn more here</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#7-decomposition-patterns","title":"7. Decomposition Patterns \u2b50","text":"<ul> <li>By Business Capability:<ul> <li>Split services based on distinct business functions.</li> <li>Example: Order management, inventory, and payment services.</li> </ul> </li> <li>By Subdomain - Domain Driven Design (DDD):<ul> <li>Split large domains into smaller services.</li> <li>Example: Splitting the payment domain into multiple specialized services.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#8-strangler-pattern","title":"8. Strangler Pattern \u2b50\u2b50","text":"<ul> <li>Purpose: Gradually refactor a monolithic application into microservices.</li> <li>How it Works:<ul> <li>A \"controller\" handles requests.</li> <li>Initially, all traffic is forwarded to the monolithic app.</li> <li>Gradually, specific functionalities are extracted into microservices, and traffic is routed to them.</li> <li>Eventually, the monolithic app is \"strangled.\"</li> </ul> </li> <li>Advantages:<ul> <li>Minimizes disruption.</li> <li>Gradual transition to microservices.</li> </ul> </li> <li>Example:<ul> <li>Refactoring an e-commerce website by migrating functionalities like order placement, inventory management, and payment processing to microservices.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#9-data-management-in-microservices","title":"9. Data Management in Microservices","text":"<ul> <li>Two Approaches:<ul> <li>Database for Each Individual Service: Each microservice has its own dedicated database, promoting autonomy and isolation.</li> <li>Shared Database: All microservices share a single database, simplifying data access but potentially leading to complexities.</li> </ul> </li> <li>Why Database per Service is Preferred:<ul> <li>Scalability: Independent scaling of services.</li> <li>Isolation: Changes in one service's database don't affect others.</li> <li>Technology Flexibility: Services can choose different databases based on needs.</li> </ul> </li> <li>Advantages of Shared Database:<ul> <li>Join Query and Transactional Property (ACID).</li> </ul> </li> <li>Drawbacks of Shared Database:<ul> <li>Performance Bottlenecks: Increased contention as more services access the same database.</li> <li>Complexity: Managing consistency across services is difficult.</li> <li>Limited Scalability: Scaling the entire database is required.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#10-saga-pattern","title":"10. Saga Pattern \u2b50\u2b50\u2b50","text":"<ul> <li>Purpose: Manage distributed transactions (ACID) across multiple databases, ensuring data consistency even if some operations fail.</li> <li>How it Works:<ul> <li>Local transactions are executed within each participating service.</li> <li>Each transaction updates the database and publishes an event.</li> <li>Subsequent transactions listen to these events and proceed.</li> <li>In case of failure, compensation events are published to undo operations.</li> </ul> </li> <li>Types of Sagas:<ul> <li>Choreography: Each service manages its transactions and listens to events from others.</li> <li>Orchestration: A centralized orchestrator manages the transaction flow and compensation logic.</li> </ul> </li> <li>Example:<ul> <li>An order processing saga involving order creation, inventory management, and payment processing.</li> <li>If payment fails, compensation events cancel the order and update inventory.</li> </ul> </li> <li>Advantages:<ul> <li>Guarantees data consistency.</li> <li>Handles failures and rollbacks effectively.</li> <li>Flexible service interactions.</li> </ul> </li> <li>Disadvantages:<ul> <li>More complex than local transactions.</li> <li>Requires careful design to ensure correctness.</li> </ul> </li> <li>Interview Question Example:<ul> <li>How would you handle a transaction involving transferring money between two users in a microservice architecture?</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#11-cqrs-command-query-responsibility-segregation-pattern","title":"11. CQRS (Command Query Responsibility Segregation) Pattern \u2b50\u2b50","text":"<ul> <li>Purpose: Separate read (query) operations from write (command) operations for better performance and scalability.</li> <li>How it Works:<ul> <li>The system maintains separate models for read and write operations.</li> <li>Write operations update the write model through commands.</li> <li>Read operations access the optimized read model.</li> </ul> </li> <li>Advantages:<ul> <li>Performance Improvement: Optimized read models handle queries efficiently.</li> <li>Scalability: Independent scaling of read and write models.</li> <li>Flexibility: Different data structures and query languages for read and write operations.</li> </ul> </li> <li>Example:<ul> <li>A blog app where writes are performed on a relational database, while reads access a denormalized view optimized for fast search.</li> </ul> </li> <li>Challenges:<ul> <li>Maintaining consistency between the read and write models.</li> <li>Ensuring the read model is up-to-date with write model changes.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/3.%20Microservices-Design-Patterns/#resources","title":"Resources","text":"<ul> <li>Microservices Design Patterns | Part1 | Introduction and Decomposition Pattern</li> <li>Microservices Design Patterns | Part2 | SAGA Pattern | Strangler Pattern | CQRS</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/","title":"Scale from ZERO to MILLION Users","text":"<ul> <li>This video is part of a series on system design concepts, focusing on scaling from 0 users to 1 million users.</li> <li>Covers various concepts like sharding, horizontal and vertical scaling, load balancing, caching, and messaging queues.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#system-scaling-overview","title":"\ud83d\udcc8 System Scaling Overview","text":"<pre><code>[System Scaling]\n|\n+--- Single Server\n|       |\n|       +--- App, DB, Client on one server\n|\n+--- App &amp; DB Separation\n|       |\n|       +--- Independent scaling of App and DB\n|\n+--- Load Balancing &amp; Multiple App Servers\n|       |\n|       +--- Load balancer distributes requests\n|       +--- Ensures security and traffic distribution\n|\n+--- Database Replication\n|       |\n|       +--- Master-Slave configuration\n|       +--- Master handles writes, Slaves handle reads\n|\n+--- Caching\n|       |\n|       +--- Cache frequently accessed data\n|       +--- Reduce DB load, improve response time\n|\n+--- Content Delivery Network (CDN)\n|       |\n|       +--- Distribute static content closer to users\n|       +--- Reduce latency, global coverage\n|\n+--- Multiple Data Centers\n|       |\n|       +--- Distribute load across regions\n|       +--- Ensure reliability and low latency\n|\n+--- Messaging Queues\n|       |\n|       +--- Handle asynchronous tasks\n|       +--- Decouple tasks from app flow\n|\n+--- Database Scaling\n        |\n        +--- Vertical Scaling (Add more CPU/RAM)\n        +--- Horizontal Scaling (Data Sharding)\n                |\n                +--- Split data across multiple DBs\n                +--- Vertical: Columns / Horizontal: Rows\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#steps-for-scaling","title":"Steps for Scaling:","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#1-single-server","title":"1. Single Server","text":"<ul> <li>Basic setup with a single server for the application, database, and client.</li> <li>Suitable for the initial stage with zero users.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#2-application-and-database-separation","title":"2. Application and Database Separation","text":"<ul> <li>Introduces a separate layer for the application server, handling business logic.</li> <li>Database server handles data storage and retrieval.</li> <li>Enables independent scaling of both application and database.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#3-load-balancing-and-multiple-application-servers","title":"3. Load Balancing and Multiple Application Servers","text":"<ul> <li>Introduces a load balancer to distribute incoming requests across multiple application servers.</li> <li>Load balancer provides security and privacy.</li> <li>Ensures efficient handling of increased traffic by distributing workload.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#4-database-replication","title":"4. Database Replication","text":"<ul> <li>Implements a master-slave (1-n) configuration for the database.</li> <li>Master database handles write operations, while slave databases handle read operations.</li> <li>Improves performance and provides redundancy in case of database failure.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#5-caching","title":"5. Caching","text":"<ul> <li>Utilizes a caching layer to store frequently accessed data in memory.</li> <li>Application server checks the cache first before accessing the database.</li> <li>Reduces database load and improves response time.</li> <li>Uses time-to-live (TTL) to manage cached data expiry.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#6-content-delivery-network-cdn","title":"6. Content Delivery Network (CDN)","text":"<ul> <li>Uses a distributed network of servers to cache static content closer to users.</li> <li>Reduces latency and improves website performance for users worldwide.</li> <li>Handles requests for static content like images, videos, and JavaScript files.</li> <li>In case of a cache miss, the CDN first asks the neighboring CDN for the data, then fetches from the origin database if needed.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#7-multiple-data-centers","title":"7. Multiple Data Centers","text":"<ul> <li>Distributes the application and database across multiple data centers.</li> <li>Reduces load on individual data centers and improves reliability.</li> <li>Enables geographically distributed user access with minimal latency.</li> <li>Load balancer distributes requests to different data centers based on user location.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#8-messaging-queues","title":"8. Messaging Queues","text":"<ul> <li>Uses messaging queues to handle asynchronous tasks like sending notifications or emails.</li> <li>Decouples tasks from the main application flow.</li> <li>Improves performance and reliability by handling high-volume tasks efficiently.</li> <li>Utilizes messaging platforms like RabbitMQ or Kafka.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#9-database-scaling","title":"9. Database Scaling","text":"<ul> <li>Vertical Scaling: Increase the capacity of existing database servers (CPU, RAM). This has limitations and eventually reaches a ceiling.</li> <li> <p>Horizontal Scaling / Data Sharding: Split the database into multiple servers or shards, distributing data across them.</p> </li> <li> <p>Splits data across multiple databases or tables based on a specific key.</p> </li> <li>Can be implemented through vertical sharding (splitting columns) or horizontal sharding (splitting rows).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/4.%20System-Scaling-Zero-to-million/#resources","title":"Resources","text":"<ul> <li>Scale from ZERO to MILLION Users | System design</li> <li>bytebytego: Scale From Zero To Millions Of Users</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/5.%20Consistent-Hashing/","title":"Consistent Hashing","text":"<p>Consistent hashing in system design, explaining its functionality, use cases, and benefits for load balancing in distributed systems.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/5.%20Consistent-Hashing/#highlights","title":"Highlights","text":"<ul> <li>\ud83d\udcca Definition: Consistent hashing maps keys to nodes, ensuring efficient data distribution.</li> <li>\ud83d\udd04 Use Cases: It\u2019s crucial in load balancing and dynamic resource allocation.</li> <li>\u2696\ufe0f Load Balancing: Helps evenly distribute traffic among servers, preventing overload.</li> <li>\ud83d\udd0d Problem Solving: Addresses challenges of node addition or removal without significant data rebalancing.</li> <li>\u2699\ufe0f Dynamic Systems: Adapts to changing server availability and traffic patterns.</li> <li>\ud83d\udee0\ufe0f Implementation: Utilizes virtual nodes to enhance flexibility and scalability.</li> <li>\ud83d\udcc8 Benefits: Reduces the need for extensive rebalancing, improving system efficiency.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/5.%20Consistent-Hashing/#key-insights","title":"Key Insights","text":"<ul> <li> <p>\ud83c\udf10 Efficient Key Distribution: Consistent hashing allows for a more uniform distribution of keys across nodes, minimizing the risk of hotspots and maximizing resource utilization. This ensures that no single node becomes a bottleneck, enhancing overall system performance.</p> </li> <li> <p>\ud83d\ude80 Scalability: The method\u2019s ability to handle dynamic changes, such as adding or removing nodes, makes it ideal for scalable applications. This adaptability is crucial in cloud environments where resources frequently change.</p> </li> <li> <p>\u26a0\ufe0f Reduced Data Movement: When a new node is added, only a fraction of keys need to be redistributed, significantly lowering the amount of data that must be moved compared to traditional hashing methods.</p> </li> <li> <p>\ud83d\udd04 Virtual Nodes: By implementing virtual nodes, consistent hashing increases flexibility and load balancing efficiency. This approach allows for a more even spread of data across servers, especially when server capacities vary.</p> </li> <li> <p>\ud83d\udca1 Use in Real-World Applications: It is widely used in distributed systems like databases, CDN, and cloud computing platforms, where efficient data handling is critical to performance.</p> </li> <li> <p>\ud83c\udfd7\ufe0f Complexity Management: The consistent hashing algorithm simplifies the complexity associated with mapping data to nodes, making it easier to manage large-scale systems without sacrificing performance.</p> </li> <li> <p>\ud83d\udcc8 Performance Optimization: By minimizing rebalancing needs, consistent hashing optimizes system performance, leading to faster data retrieval and improved user experience in high-traffic scenarios.</p> </li> </ul> <p></p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/5.%20Consistent-Hashing/#resources","title":"Resources","text":"<ul> <li>Consistent Hashing | Concept &amp;&amp; Coding</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/","title":"Back o Back-Of-The-Envelope Estimation","text":"<p>Perform back-of-the-envelope estimations for designing large-scale systems like Facebook. It explains the process of estimating traffic, storage, and RAM requirements, while incorporating simplified assumptions to guide efficient system planning. The CAP theorem is also discussed, with a focus on trade-offs between consistency, availability, and partition tolerance.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#important-before-planning","title":"Important Before Planning","text":"<ul> <li>No. of Zero:<ol> <li>Thousand (3 zeros) \u2192 KB</li> <li>Million (6 zeros) \u2192 MB</li> <li>Billion (9 zeros) \u2192 GB</li> <li>Trillion (12 zeros) \u2192 TB</li> <li>Quadrillion (15 zeros) \u2192 PB</li> </ol> </li> </ul> <p>Value changes every 3 zeros:     - Example: 5 million users (6 zeros) * 2 KB = 10 GB of data.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#assumptions-for-estimation","title":"Assumptions for Estimation:","text":"<ul> <li>Character (ASCII): 1 Byte</li> <li>Character (Unicode): 2 Bytes</li> <li>Long/Double: 8 Bytes</li> <li>Image: Average size of 300 KB</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#general-calculation-strategy","title":"General Calculation Strategy:","text":"<ol> <li>Number of Servers: Estimate based on expected traffic and required throughput.</li> <li>RAM: Based on caching strategies for fast access to frequently accessed data.</li> <li>Storage: Estimate the storage requirement by calculating total data produced and stored over time.</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#facebook-example","title":"Facebook Example:","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#1-traffic-estimation","title":"1. Traffic Estimation:","text":"<ul> <li>Total Users: 1 Billion</li> <li>Daily Active Users (DAU): 25% of total users \u2192 250 million users</li> <li>Queries per Day: 5 read queries + 2 write queries per user = 7 queries</li> <li>Traffic per Second:   250 million users \u00d7 7 queries \u00f7 60 \u00d7 60 \u00d7 24 \u2248 18,000 queries per second</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#2-storage-estimation","title":"2. Storage Estimation:","text":"<ul> <li> <p>Posts: Every active user posts twice daily, with 250 characters per post.</p> <ul> <li>1 post: 2 \u00d7 250 characters = 500 bytes \u2192 Approx 1 KB</li> <li>Total storage for posts:   250 million users \u00d7 1 KB = 250 GB/day</li> </ul> </li> <li> <p>Images: 10% of active users upload images, with an average image size of 300 KB.</p> <ul> <li>Total storage for images:   250 million users \u00d7 10% \u00d7 300 KB = 75,000 GB/day \u2248 8 TB/day</li> </ul> </li> <li> <p>Storage Needed for 5 Years:</p> <ul> <li>Posts:   2,000 days \u00d7 250 GB/day = 500 TB</li> <li>Images:   2,000 days \u00d7 8 TB/day = 16 PB</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#3-memory-ram-estimation","title":"3. Memory (RAM) Estimation:","text":"<ul> <li>Cache Strategy: Cache the last 5 posts of every daily active user.<ul> <li>For 5 posts: 5 \u00d7 500 bytes = 2,500 bytes \u2248 3 KB/user</li> <li>Total RAM needed:   250 million users \u00d7 3 KB = 750 GB of RAM</li> <li>Assuming one machine can handle 75 GB, we need:   750 GB \u00f7 75 GB/machine = 10 machines for caching</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#4-latency-estimation","title":"4. Latency Estimation:","text":"<ul> <li>Performance Expectation: 95% of requests should be served within 500 ms.</li> <li>1 server: Can handle 100 requests per second (50 threads, 2 requests per second).<ul> <li>Total servers needed:   18,000 requests per second \u00f7 100 requests/server = 180 servers</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#final-estimations","title":"Final Estimations:","text":"<ul> <li>Number of Servers: 180 servers to handle 18,000 queries per second.</li> <li>RAM: 750 GB of RAM, requiring 10 cache nodes.</li> <li>Storage:<ul> <li>Posts: 500 TB of storage for 5 years.</li> <li>Images: 16 PB of storage for 5 years.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#trade-offs-based-on-the-cap-theorem","title":"Trade-offs Based on the CAP Theorem:","text":"<ul> <li>AP System: For a system like Facebook, prioritizing Availability and Partition Tolerance (AP) is preferable, potentially compromising on Consistency to ensure high availability and fault tolerance across distributed nodes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#highlights","title":"Highlights","text":"<ul> <li>\ud83d\udcca Importance of Estimation: Back-of-the-envelope estimation helps guide system design decisions efficiently.</li> <li>\u2699\ufe0f Components of Design: Essential components include load balancers, servers, and caches, forming the backbone of the system.</li> <li>\ud83e\uddee Simplified Assumptions: Using simple numbers helps with easier, faster calculations in estimations.</li> <li>\ud83d\uddc2\ufe0f Storage Needs: The storage estimation includes calculating data like posts, images, and videos over time.</li> <li>\ud83d\udcbb RAM Requirements: RAM estimation is influenced by caching strategies for user interactions, providing quick access to frequently used data.</li> <li>\ud83d\udd04 CAP Theorem: Discusses trade-offs between Consistency, Availability, and Partition Tolerance to optimize system behavior.</li> <li>\u23f3 Time Management: Estimations should be done quickly, ideally under 10 minutes during interviews.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#key-insights","title":"Key Insights","text":"<ul> <li>\ud83d\udcc8 Strategic Decision-Making: Estimation aids in making informed design decisions, ensuring resource allocation is effective and well-planned.</li> <li>\u2696\ufe0f Balancing Resources: Understanding system constraints helps avoid over-engineering, thus preventing resource wastage.</li> <li>\ud83d\udcc5 Long-Term Planning: Estimating storage needs for future years prepares the system for growth and scalability.</li> <li>\ud83d\udcbe Data Management: Understanding the type and size of data helps in designing systems that efficiently manage storage.</li> <li>\ud83d\udcc9 Server Calculation: Accurate estimation of servers helps ensure the system can handle traffic loads without crashing or slowing down.</li> <li>\ud83d\udd0d Focus on Scalability: Designing for scalability is essential for most interview scenarios, as it shows awareness of system demands and growth.</li> <li>\ud83d\udd52 Time Efficiency: Practicing quick estimations helps candidates manage time constraints in real interviews, demonstrating competency in system design.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/6.%20Back-Of-The-Envelope-Estimation/#resources","title":"Resources","text":"<ul> <li>Back-Of-The-Envelope Estimation</li> <li>bytebytego</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/","title":"SQL vs NoSQL: Key Insights for Database Design","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#1-overview","title":"1. Overview","text":"<p>Understanding the differences between SQL and NoSQL databases is essential when designing scalable, high-performance applications, especially during technical interviews at major companies like Amazon, Google, or Facebook.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#2-database-structure","title":"2. Database Structure:","text":"<ul> <li> <p>SQL (Structured Query Language):</p> <ul> <li>Relational Database: Data is organized into structured tables with rows and columns, ensuring strict relationships.</li> <li>Schema: Uses a predefined schema, which enforces data integrity and consistency.</li> </ul> </li> <li> <p>NoSQL (Not Only SQL):</p> <ul> <li>Non-Relational Database: Offers flexibility with varied data structures such as:<ul> <li>Key-Value Stores: Databases that store data as key-value pairs, optimized for quick lookups using unique keys (e.g., Redis, DynamoDB).</li> <li>Document-Oriented Databases: Databases that store data in JSON-like documents, allowing flexible and nested data structures (e.g., MongoDB, CouchDB).</li> <li>Column-Oriented Databases: Databases that organize data by columns rather than rows, making them ideal for analytical queries (e.g., Apache Cassandra, HBase).</li> <li>Graph-Based Databases: Databases that represent data as nodes and edges, perfect for managing complex relationships (e.g., Neo4j, Amazon Neptune).</li> </ul> </li> <li>Schema Flexibility: Allows for dynamic schema changes, making it easier to handle unstructured or semi-structured data.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#3-data-relationships","title":"3. Data Relationships:","text":"<ul> <li> <p>SQL:</p> <ul> <li>Relational Integrity: Strong relationships between data using foreign keys, ideal for complex queries requiring joins.</li> <li>Use Case: Best for applications like financial systems or CRMs where relationships between data points are crucial.</li> </ul> </li> <li> <p>NoSQL:</p> <ul> <li>Decentralized Approach: Handles distributed, unstructured data without the need for strict relationships.</li> <li>Use Case: Suited for applications such as social media platforms, real-time analytics, or content management systems where data flexibility is essential.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#4-scalability","title":"4. Scalability:","text":"<ul> <li> <p>SQL:</p> <ul> <li>Vertical Scaling: Typically scales by increasing the capacity of a single server (e.g., adding CPU or memory).</li> <li>Limitation: Vertical scaling has physical limits and can be costly.</li> </ul> </li> <li> <p>NoSQL:</p> <ul> <li>Horizontal Scaling: Excels in distributing data across multiple servers, making it capable of handling massive amounts of data.</li> <li>Advantage: More cost-effective and ideal for scaling in distributed cloud environments.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#5-data-integrity","title":"5. Data Integrity:","text":"<ul> <li> <p>SQL:</p> <ul> <li>ACID Properties: Ensures data consistency, atomicity, isolation, and durability, which is crucial for applications requiring transaction integrity (e.g., banking).</li> </ul> </li> <li> <p>NoSQL:</p> <ul> <li>BASE Properties: Prioritizes availability over consistency, allowing for better performance at the expense of occasional inconsistencies (eventual consistency model).</li> <li>Use Case: Applications where high availability and speed are more important than strict consistency, such as online shopping carts or social feeds.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#6-performance","title":"6. Performance:","text":"<ul> <li> <p>SQL:</p> <ul> <li>Complex Querying: Optimized for complex joins, aggregations, and dynamic data retrieval through SQL queries.</li> <li>Performance Limitation: Under large datasets, performance can degrade due to rigid structure and need for indexing.</li> </ul> </li> <li> <p>NoSQL:</p> <ul> <li>High-Speed Queries: Designed for fast queries on large, distributed datasets, making it ideal for handling real-time data.</li> <li>Use Case: Big data applications, real-time analytics, and IoT devices where rapid data ingestion and querying are essential.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#7-query-flexibility","title":"7. Query Flexibility:","text":"<ul> <li> <p>SQL:</p> <ul> <li>Dynamic Queries: Supports complex querying, joining, and data aggregation, making it suitable for applications requiring detailed data retrieval.</li> </ul> </li> <li> <p>NoSQL:</p> <ul> <li>Simple Queries: Often more limited in query capabilities, but flexible in how data is modeled and accessed.</li> <li>Flexibility: Best for applications where the structure of the data changes frequently, or the focus is on speed rather than complex queries.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#8-use-cases","title":"8. Use Cases:","text":"<ul> <li> <p>SQL:</p> <ul> <li>Best For: Applications that require structured data, data integrity, and relational querying (e.g., ERP systems, payment gateways).</li> </ul> </li> <li> <p>NoSQL:</p> <ul> <li>Best For: Applications needing scalability, handling dynamic or unstructured data, and providing high availability (e.g., social networks, big data, real-time analytics).</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#9-conclusion-choosing-the-right-database","title":"9. Conclusion: Choosing the Right Database","text":"<ul> <li>SQL: Go with SQL when data integrity, relationships, and structured querying are important, especially for systems like financial apps or enterprise software.</li> <li>NoSQL: Choose NoSQL for applications that prioritize scalability, flexible schema, and high availability, such as big data, real-time analytics, or distributed applications.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#summary-of-key-differences","title":"Summary of Key Differences:","text":"Aspect SQL NoSQL Data Structure Tables with rows and columns Key-Value, Document, Column, Graph-based Schema Fixed, predefined schema Flexible schema, dynamic Scalability Vertical (scale-up) Horizontal (scale-out) Consistency ACID (strong consistency) BASE (eventual consistency) Relationships Strong relationships with foreign keys Looser relationships, more flexible Performance Suitable for complex queries Optimized for fast, large-scale queries Use Cases Financial systems, enterprise apps Social media, big data, real-time analytics"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#resources","title":"Resources","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/7.%20SQL-NoSQL/#-sql-vs-nosql","title":"- SQL vs NoSQL","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/","title":"Distributed Messaging Queues: Kafka vs RabbitMQ","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#1-overview","title":"1. Overview","text":"<p>This guide provides an overview of distributed messaging systems like Apache Kafka and RabbitMQ, comparing their architectures, use cases, and key differences from an interview perspective, particularly in high-scale systems.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#2-messaging-queue-basics","title":"2. Messaging Queue Basics:","text":"<ul> <li> <p>Producers and Consumers:</p> <ul> <li>Producers: Send messages to the queue.</li> <li>Consumers: Retrieve messages from the queue for processing.</li> <li>Queues: Store messages until they are consumed, ensuring decoupled communication between services.</li> </ul> </li> <li> <p>Asynchronous Processing:</p> <ul> <li>Messaging queues enable asynchronous, event-driven architectures, reducing latency and improving system performance by decoupling services.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#3-retry-capabilities-and-failure-handling","title":"3. Retry Capabilities and Failure Handling:","text":"<ul> <li> <p>Retry Mechanism:</p> <ul> <li>Queues often incorporate built-in retry mechanisms to handle message failures. In case of temporary failures, messages can be reprocessed, ensuring reliable delivery.</li> </ul> </li> <li> <p>Dead Letter Queues (DLQ):</p> <ul> <li>Messages that fail repeatedly can be sent to a DLQ for investigation, preventing bottlenecks in the system.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#4-pace-matching-and-load-balancing","title":"4. Pace Matching and Load Balancing:","text":"<ul> <li> <p>Production and Consumption:</p> <ul> <li>Distributed messaging queues help match production and consumption speeds, ensuring that faster-producing services don\u2019t overwhelm slower consumers.</li> </ul> </li> <li> <p>Load Balancing:</p> <ul> <li>Queues distribute the workload across multiple consumers, providing fault tolerance and preventing single points of failure.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#5-pubsub-vs-point-to-point","title":"5. Pub/Sub vs. Point-to-Point:","text":"<ul> <li> <p>Pub/Sub (Publish/Subscribe):</p> <ul> <li>In this model, multiple consumers can subscribe to a topic, allowing them to receive the same messages. Useful for broadcasting events.</li> <li>Use Case: Real-time notifications, logging, event-driven systems.</li> </ul> </li> <li> <p>Point-to-Point:</p> <ul> <li>Each message is consumed by only one consumer, ensuring single-consumption.</li> <li>Use Case: Task distribution, work queues.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#6-kafka-architecture","title":"6. Kafka Architecture:","text":"<ul> <li> <p>Brokers, Topics, and Partitions:</p> <ul> <li>Kafka is built around a distributed log, using brokers to manage topics and partitions. Messages are pulled from partitions by consumers, ensuring scalability and fault tolerance.</li> <li>Consumers: Organized in consumer groups, allowing for load distribution across consumers.</li> <li>Partitions: Kafka uses partitions for horizontal scalability, enabling multiple consumers to read from the same topic concurrently.</li> </ul> </li> <li> <p>Scalability:</p> <ul> <li>Kafka is optimized for high throughput and scalable across multiple nodes, making it suitable for handling large-scale data pipelines, event sourcing, and stream processing.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#7-rabbitmq-features","title":"7. RabbitMQ Features:","text":"<ul> <li> <p>Message Routing with Exchanges:</p> <ul> <li>RabbitMQ uses exchanges to route messages to different queues based on routing keys. There are different types of exchanges, such as:<ul> <li>Direct Exchange: Routes messages to queues that match the routing key.</li> <li>Fanout Exchange: Broadcasts messages to all bound queues.</li> <li>Topic Exchange: Routes messages to queues based on pattern matching.</li> </ul> </li> </ul> </li> <li> <p>Push-Based Model:</p> <ul> <li>Unlike Kafka\u2019s pull model, RabbitMQ uses a push-based approach, actively delivering messages to consumers, making it more suited for real-time messaging but potentially causing backpressure.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#8-key-differences-kafka-vs-rabbitmq","title":"8. Key Differences: Kafka vs. RabbitMQ","text":"<ul> <li> <p>Message Delivery Model:</p> <ul> <li>Kafka uses a pull-based approach, with consumers actively pulling messages from the queue, which is ideal for high-throughput, low-latency systems.</li> <li>RabbitMQ uses a push-based model, pushing messages to consumers, making it effective for real-time, low-latency tasks but potentially challenging for scalability.</li> </ul> </li> <li> <p>Persistence and Ordering:</p> <ul> <li>Kafka provides message persistence with ordering guarantees within partitions, making it suitable for event sourcing and logs.</li> <li>RabbitMQ focuses more on flexibility in routing messages but lacks Kafka\u2019s native persistence model.</li> </ul> </li> <li> <p>Scalability:</p> <ul> <li>Kafka excels at horizontal scalability, handling millions of messages per second, while RabbitMQ is more lightweight and easy to manage for smaller-scale, real-time communication tasks.</li> </ul> </li> </ul> <ul> <li></li> <li></li> <li></li> <li></li> <li></li> <li>Pace Matching:</li> <li></li> <li></li> <li>P2P &amp; Pub/Sub:</li> <li></li> <li></li> <li>How Message Queue Works:</li> <li>Kafka:<ul> <li></li> <li>Kafka Architecture:</li> <li></li> <li></li> <li></li> <li></li> <li></li> <li>Topic 1:</li> <li></li> <li></li> <li></li> </ul> </li> <li>Rabbit MQ:<ul> <li></li> <li></li> <li></li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#summary-of-key-differences","title":"Summary of Key Differences:","text":"Aspect Kafka RabbitMQ Message Delivery Pull-based Push-based Scalability Highly scalable, partitions for load-sharing Limited by resource contention Use Case Large-scale data pipelines, event streaming Real-time messaging, task queues Persistence Persistent message log with ordering Optional persistence, no ordering guarantees Routing Simple, topic-based routing Flexible, supports complex routing Latency Optimized for high throughput, low latency Better for low-latency, small-scale systems"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#summary","title":"Summary:","text":"<p>Choosing between Kafka and RabbitMQ depends on the system requirements: - Kafka: Best for high-throughput, horizontally scalable systems handling large volumes of event streams or data pipelines. - RabbitMQ: Ideal for low-latency, real-time messaging with flexible routing needs in small to medium-scale applications.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/8.%20Distributed-Messaging-Queue/#resources","title":"Resources","text":"<ul> <li>Distributed Messaging Queue</li> <li>ByteByteGo: How to Choose a Message Queue? Kafka vs. RabbitMQ</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/","title":"Proxy Overview for Software Architects","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#1-what-is-a-proxy","title":"1. What is a Proxy?","text":"<p>A Proxy is an intermediary server that separates end users from the websites they browse. Depending on its configuration, it can act as a Forward Proxy or a Reverse Proxy, each serving distinct functions in network architecture.</p> <ul> <li>\ud83d\udee1\ufe0f Proxy Server: Acts as an intermediary between client and server, handling requests and providing anonymity by masking the client\u2019s IP address.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#2-proxy-server-types-direction-based","title":"2. Proxy Server Types (Direction-Based)","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#21-forward-proxy-client-side-proxy","title":"2.1 Forward Proxy (Client-Side Proxy)","text":"<ul> <li>Definition: A forward proxy sits between user devices and the internet, acting on behalf of the client by masking the client's IP address and managing their requests to external servers.</li> <li>Function:<ul> <li>The client sends a request to the forward proxy.</li> <li>The proxy forwards this request to the external server on behalf of the client.</li> <li>The server responds to the proxy, which then passes the data back to the client.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#forward-proxy-common-use-cases","title":"Forward Proxy Common Use Cases:","text":"<ul> <li>Protect Clients: Helps in anonymizing the client's IP and providing security from external threats.</li> <li>Avoid Browsing Restrictions: Forward proxies allow users to bypass geographic or local restrictions to access blocked websites.</li> <li>Block Access to Certain Content: Used by organizations or institutions to restrict user access to certain websites.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#advantages-of-forward-proxy","title":"Advantages of Forward Proxy:","text":"<ul> <li>Anonymity: Clients can access resources without exposing their real IP addresses.</li> <li>Group Requests: A single proxy can serve multiple clients, streamlining traffic to external servers.</li> <li>Access Control: Can bypass geo-restrictions or firewall policies to access restricted content.</li> <li>Security: Provides an additional layer of security by checking requests against predefined rules.</li> <li>Caching: Forward proxies can cache frequently requested content, reducing load on the server.</li> <li>Logging: Monitors and logs user requests for security or compliance purposes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#disadvantages-of-forward-proxy","title":"Disadvantages of Forward Proxy:","text":"<ul> <li>Application Layer Limitation: Works only at the application layer, meaning each application needs to be configured separately to use the proxy.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#example-of-forward-proxy","title":"Example of Forward Proxy:","text":"<ul> <li>Corporate Network: Employees within a corporate network can access restricted websites via a forward proxy to anonymize their requests and bypass content restrictions.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#22-reverse-proxy-server-side-proxy","title":"2.2 Reverse Proxy (Server-Side Proxy)","text":"<ul> <li>Definition: A reverse proxy accepts client requests, forwards them to the appropriate backend web servers, and returns the responses to the client, making it appear as though the proxy itself processed the request.</li> <li>Function:<ul> <li>Clients interact with the reverse proxy rather than the backend servers directly.</li> <li>The reverse proxy forwards the client requests to the appropriate backend server based on load balancing or routing rules.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#reverse-proxy-common-use-cases","title":"Reverse Proxy Common Use Cases:","text":"<ul> <li>Protect Servers: By hiding the identity and IP addresses of backend servers, reverse proxies prevent direct client access, securing the servers.</li> <li>Load Balancing: Distributes client requests across multiple servers, ensuring no single server is overwhelmed.</li> <li>Cache Static Content: Reduces load on backend servers by caching responses to frequently requested data.</li> <li>SSL Encryption/Decryption: Reverse proxies can handle the encryption and decryption of SSL traffic, offloading these resource-intensive tasks from backend servers.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#advantages-of-reverse-proxy","title":"Advantages of Reverse Proxy:","text":"<ul> <li>Enhanced Security: Masks the identity of backend servers, preventing direct access and protecting against attacks like DDoS.</li> <li>Load Balancing: Distributes client requests across multiple servers, ensuring no single server is overwhelmed.</li> <li>Caching: Reduces load on backend servers by caching responses to frequently requested data.</li> <li>Global Content Delivery (CDN): Reverse proxies, especially in CDNs, cache content closer to users geographically, reducing latency and improving access speed worldwide.</li> <li>SSL Handling: Manages SSL communications by encrypting and decrypting traffic.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#example-of-reverse-proxy","title":"Example of Reverse Proxy:","text":"<ul> <li>Content Delivery Networks (CDNs): Companies like Cloudflare use reverse proxies to cache content closer to users, improving performance and reducing server load.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#key-difference","title":"Key Difference:","text":"<ul> <li>Forward Proxy: Protects the client and manages outbound traffic.</li> <li>Reverse Proxy: Protects the server and manages inbound traffic.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#3-proxy-vs-vpn","title":"3. Proxy vs. VPN","text":"Feature Proxy VPN Encryption No encryption Creates an encrypted tunnel for all traffic Function Hides client IP for specific applications Hides IP and encrypts all traffic on the network Performance Faster, but only works at the application layer Slower due to encryption, but more secure Use Case Accessing geo-restricted websites Secure remote work, full internet privacy <ul> <li>\ud83c\udf10 VPN: Unlike proxies, VPNs create an encrypted tunnel, providing privacy and security by encrypting all data, making them more suitable for sensitive information transmission.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#example","title":"Example:","text":"<p>A VPN is commonly used by remote employees to securely connect to a corporate network, ensuring that their connection is encrypted. A proxy, on the other hand, might be used by users to access blocked content in a specific region.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#4-reverse-proxy-vs-load-balancer","title":"4. Reverse Proxy vs. Load Balancer","text":"Feature Reverse Proxy Load Balancer Function Intercepts client requests, forwards to servers Distributes traffic across multiple servers Security Provides security features, e.g., masking server IPs Primarily for performance and load management Load Balancing Can act as a load balancer Core functionality Use Case Security and load balancing in one Focused on distributing traffic efficiently <ul> <li>\u2696\ufe0f Load Balancer: Distributes traffic across multiple servers, enhancing performance and reliability, but lacks the additional security functions of a reverse proxy.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#example_1","title":"Example:","text":"<p>In AWS, a reverse proxy (like Nginx) can be configured to act as both a reverse proxy and a load balancer, whereas a dedicated Elastic Load Balancer (ELB) handles purely load balancing tasks.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#5-proxy-vs-firewall","title":"5. Proxy vs. Firewall","text":"Feature Proxy Firewall Purpose Manages traffic to/from a client or server Protects a network by controlling incoming/outgoing traffic based on rules Security Hides IP addresses, provides anonymity Blocks or permits data based on packet-level rules Functionality Acts at the application layer (L7) Works at network layers (L3-L4), inspects packets <ul> <li>\ud83d\udd12 Firewall: Scrutinizes data packets, enforcing security rules to protect networks by controlling what data is allowed in or out.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#example_2","title":"Example:","text":"<p>In a corporate network, firewalls ensure that only trusted traffic is allowed to pass, while a forward proxy is used to anonymize the outgoing web traffic of internal users.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#6-real-world-applications-of-proxies","title":"6. Real-World Applications of Proxies","text":"<ol> <li>Forward Proxy in Education: Universities often use forward proxies to limit access to certain websites, while allowing students to access external academic resources anonymously.</li> <li>Reverse Proxy for Web Applications: Netflix uses a reverse proxy setup to distribute content across its servers globally, ensuring availability and security.</li> <li>Proxy for DDoS Protection: Cloudflare uses reverse proxies to hide real server IPs, protecting them from Distributed Denial of Service (DDoS) attacks.</li> <li>Global Content Delivery (CDN): CDNs like Akamai act as reverse proxies, caching web content closer to users to reduce latency and improve access speeds.</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/9.%20Proxy-Reverse-Proxy/#resources","title":"Resources","text":"<ul> <li>Proxy vs Reverse Proxy</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/","title":"\ud83d\udccc Redis - Must-Know Concepts for System Design &amp; Interviews","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#overview","title":"\ud83d\ude80 Overview","text":"<p>Redis (Remote Dictionary Server) is an in-memory key-value store used for high-performance applications. It supports multiple data structures and provides functionalities beyond caching, such as real-time analytics, message queues, and distributed locks.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#why-redis","title":"\ud83d\udd25 Why Redis?","text":"<ul> <li>Super Fast \u26a1 - Operates in memory, offering microsecond latency.</li> <li>Persistence \ud83d\udee0\ufe0f - Supports AOF (Append Only File) and RDB (Redis Database Backup) for durability.</li> <li>Scalability \ud83d\udcc8 - Easily scalable via clustering and sharding.</li> <li>Rich Data Structures \ud83d\udcca - Strings, Lists, Sets, Hashes, Sorted Sets, and more.</li> <li>Pub/Sub Messaging \ud83d\udcec - Supports event-driven architecture.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#key-use-cases-real-life-applications","title":"\ud83c\udfaf Key Use Cases &amp; Real-Life Applications","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#1-caching-eg-url-shortener-instagram-feeds","title":"1\ufe0f\u20e3 Caching \ud83c\udff7\ufe0f (e.g., URL Shortener, Instagram Feeds)","text":"<ul> <li>Reduces database load by storing frequently accessed data.</li> <li>Example: URL Shortener \ud83d\udcce<ul> <li>Short URL \u2192 Redis (Cache) \u2192 Redirect to actual URL.</li> <li>Avoids repeated database lookups for the same URL.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#2-session-management-eg-user-authentication-e-commerce-websites","title":"2\ufe0f\u20e3 Session Management \ud83d\udd11 (e.g., User Authentication, E-commerce Websites)","text":"<ul> <li>Stores user session data (cookies, JWT tokens) for quick access.</li> <li>Example: E-commerce Websites (Amazon, Flipkart) \ud83d\uded2<ul> <li>Stores active cart items for fast retrieval.</li> <li>Reduces load on relational databases.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#3-concurrency-management-eg-bookmyshow-ticket-booking-systems","title":"3\ufe0f\u20e3 Concurrency Management \ud83d\udd04 (e.g., BookMyShow, Ticket Booking Systems)","text":"<ul> <li>Prevents race conditions using Timer-Based Locking.</li> <li>Example: BookMyShow \ud83c\udf9f\ufe0f<ul> <li>When a user selects a seat, Redis locks it with a TTL (Time-To-Live).</li> <li>If the transaction is incomplete, the lock expires, making the seat available again.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#4-rate-limiting-eg-api-throttling-login-attempts","title":"4\ufe0f\u20e3 Rate Limiting \u23f3 (e.g., API Throttling, Login Attempts)","text":"<ul> <li>Controls the number of requests a user can make in a time frame.</li> <li>Example: Login Protection (Brute Force Prevention) \ud83d\udd10<ul> <li>Allows 5 failed login attempts per minute.</li> <li>Blocks further attempts for a certain duration.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#5-message-queue-pubsub-eg-chat-applications-real-time-notifications","title":"5\ufe0f\u20e3 Message Queue &amp; Pub/Sub \ud83d\udce2 (e.g., Chat Applications, Real-time Notifications)","text":"<ul> <li>Acts as a lightweight message broker for async communication.</li> <li>Example: WhatsApp, Slack \ud83d\udcac<ul> <li>Sends real-time notifications and chat messages via Redis Pub/Sub.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#6-leaderboards-counting-eg-gaming-apps-youtube-views","title":"6\ufe0f\u20e3 Leaderboards &amp; Counting \ud83c\udfc6 (e.g., Gaming Apps, YouTube Views)","text":"<ul> <li>Uses Sorted Sets for ranking and real-time counters.</li> <li>Example: Online Multiplayer Games (PUBG, Fortnite) \ud83c\udfae<ul> <li>Stores player scores and retrieves top-ranked players instantly.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#7-distributed-locking-eg-avoiding-double-spending-inventory-management","title":"7\ufe0f\u20e3 Distributed Locking \ud83d\udd13 (e.g., Avoiding Double Spending, Inventory Management)","text":"<ul> <li>Prevents multiple processes from modifying the same resource simultaneously.</li> <li>Example: Payment Gateways (UPI, Paytm, Stripe) \ud83d\udcb0<ul> <li>Ensures a transaction is processed only once.</li> <li>Uses RedLock Algorithm to avoid inconsistencies.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#8-full-page-caching-eg-cdn-reverse-proxy","title":"8\ufe0f\u20e3 Full-Page Caching \ud83c\udf0d (e.g., CDN, Reverse Proxy)","text":"<ul> <li>Caches entire webpages to reduce load times.</li> <li>Example: Cloudflare, Fastly, Nginx \ud83c\udfce\ufe0f<ul> <li>Serves pre-rendered content, reducing server load.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#important-redis-commands","title":"\u2699\ufe0f Important Redis Commands","text":"Command Description <code>SET key value</code> Store a value under a key <code>GET key</code> Retrieve a value by key <code>EXPIRE key seconds</code> Set TTL for a key <code>INCR key</code> Increment a key\u2019s value <code>DECR key</code> Decrement a key\u2019s value <code>HSET key field value</code> Store a value in a hash field <code>HGET key field</code> Retrieve a value from a hash field <code>ZADD key score member</code> Add a member to a sorted set <code>ZRANGE key start stop</code> Retrieve members from a sorted set"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#interview-tips-best-practices","title":"\ud83d\udd0d Interview Tips &amp; Best Practices","text":"<ul> <li>\u2705 Use Redis for Read-Heavy Workloads: Cache database queries to improve performance.</li> <li>\u2705 Use Expiration (<code>EXPIRE</code>) for Caching: Prevent stale data from persisting indefinitely.</li> <li>\u2705 Avoid Using Redis as a Primary Database: It lacks full ACID compliance.</li> <li>\u2705 Use Lua Scripting for Atomic Operations: Prevents race conditions in concurrent writes.</li> <li>\u2705 Monitor Performance with <code>redis-cli</code>: Use <code>INFO</code> command to check memory usage and stats.</li> <li>\u2705 Use Redis Clustering for High Availability: Distribute data across multiple nodes.</li> <li>\u2705 Apply Least Recently Used (LRU) Eviction: Use <code>maxmemory-policy allkeys-lru</code> to optimize caching.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Concept/Redis/#conclusion","title":"\ud83c\udfa4 Conclusion","text":"<p>Redis is a powerful tool in system design, offering solutions for caching, concurrency, real-time analytics, and more. Understanding its data structures, use cases, and best practices is crucial for interviews and building high-performance applications.</p> <p>\ud83d\udd39 Key Takeaway: If your system is performance-sensitive and requires fast reads, session storage, or real-time data, Redis is your go-to solution!</p> <p>\ud83d\ude80 Keep practicing, and happy coding! \ud83c\udfaf</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/","title":"\ud83e\udde0 HLD Interview Questions","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ol> <li>Design a URL Shortening Service (TinyURL)</li> <li>Design an API Rate Limiter</li> <li>Design WhatsApp System</li> <li>Designing Instagram</li> <li>Designing Dropbox</li> <li>Designing Twitter</li> <li>Designing IRCTC</li> <li>Designing E-Commerce</li> <li>OTT Platform Design</li> <li>Hotel Booking Design</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/#system-design-case-studies","title":"\ud83d\udcda System Design Case Studies","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/#master-system-design","title":"\ud83d\ude80 Master System Design","text":"<p>\ud83d\udd17 View Case Studies</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/#systemdesignschoolio","title":"\ud83c\udf10 systemdesignschool.io","text":"<p>\u2705 Real-World Case Studies with links to scalable architectures used by top tech companies.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/00-systemdesignschool/","title":"System Design Interview Questions \u2013 19 Common Topics","text":"<p>Source: systemdesignschool.io Learn system design the structured way. Includes interactive questions with feedback.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/00-systemdesignschool/#easy","title":"\ud83d\udfe2 Easy","text":"<ul> <li>Design LeetCode</li> <li>Design URL Shortener</li> <li>Design Webhook</li> <li>Design Yelp</li> <li>Design Rate Limiter</li> <li>Design Pastebin</li> <li>Design Realtime Monitoring System</li> <li>Design Typeahead System</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/00-systemdesignschool/#medium","title":"\ud83d\udfe1 Medium","text":"<ul> <li>Design Google Docs</li> <li>Design a Comment System</li> <li>Design Twitter</li> <li>Design Netflix</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/00-systemdesignschool/#hard","title":"\ud83d\udd34 Hard","text":"<ul> <li>Design Spotify Top K Songs</li> <li>Design WhatsApp</li> <li>Design Dropbox</li> <li>Design YouTube</li> <li>Design Uber</li> <li>Design Google Maps</li> <li>Design TicketMaster</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01-design-doc-url-shortner_1/","title":"\ud83d\ude80 URL Shortening System Design Notes","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01-design-doc-url-shortner_1/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>Video - link</li> <li>Tool Used - link</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/","title":"\ud83d\ude80 URL Shortening System Design Notes","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#1-why-do-we-need-url-shortening","title":"\ud83d\udcda 1. Why do we need URL Shortening?","text":"<ul> <li>\ud83d\udd17 Short aliases for long URLs \u279d easier to share, tweet, and print.</li> <li>\ud83d\udd25 Space-saving: Short URLs take less space in messages.</li> <li>\ud83d\udd0d Tracking &amp; Analytics: Measure clicks and performance.</li> <li>\ud83d\udee1\ufe0f Hiding affiliated URLs: Mask original URLs.</li> <li>\ud83d\udcca Optimizing links: Improve device-specific redirection.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#2-requirements-and-goals","title":"\ud83c\udfaf 2. Requirements and Goals","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#functional-requirements","title":"\u2705 Functional Requirements:","text":"<ul> <li>\ud83c\udfaf Shorten long URLs to unique short aliases.</li> <li>\ud83d\udd17 Redirect short URLs to original URLs.</li> <li>\u270d\ufe0f Allow custom short links (optional).</li> <li>\u23f0 Set expiration time for URLs.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#non-functional-requirements","title":"\u2699\ufe0f Non-Functional Requirements:","text":"<ul> <li>\ud83d\udee1\ufe0f High availability: Minimal downtime.</li> <li>\u26a1 Low latency: Real-time redirections.</li> <li>\ud83d\udd12 Security: Short links shouldn\u2019t be guessable.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#extended-requirements","title":"\ud83d\udcca Extended Requirements:","text":"<ul> <li>\ud83d\udcc8 Analytics: Track redirection stats.</li> <li>\ud83d\udd25 API accessibility: Provide REST APIs.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#3-capacity-estimation-and-constraints","title":"\u2699\ufe0f 3. Capacity Estimation and Constraints","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#traffic-estimates","title":"\ud83d\udd25 Traffic Estimates:","text":"<ul> <li>500M new URLs/month \u279d 50B redirections (100:1 read/write ratio).</li> <li>QPS:<ul> <li>New URLs: 200/s</li> <li>Redirections: 20K/s</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#storage-estimates","title":"\ud83d\udcbe Storage Estimates:","text":"<ul> <li>500M new URLs/month \u279d 30B objects in 5 years.</li> <li>Object size: 500 bytes \u279d 15TB total storage.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#bandwidth-estimates","title":"\ud83d\ude80 Bandwidth Estimates:","text":"<ul> <li>Write requests: 100KB/s \u279d (200 URLs * 500 bytes).</li> <li>Read requests: 10MB/s \u279d (20K URLs * 500 bytes).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#memory-estimates","title":"\ud83d\uded1 Memory Estimates:","text":"<ul> <li>Cache 20% hot URLs:<ul> <li>1.7B daily requests \u279d 170GB cache</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#4-system-apis","title":"\ud83c\udf10 4. System APIs","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#create-url-api","title":"\ud83d\udee0\ufe0f Create URL API:","text":"<pre><code>POST /createURL\n</code></pre> <ul> <li>Parameters:<ul> <li><code>api_dev_key</code>: API key for authentication.</li> <li><code>original_url</code>: Original long URL.</li> <li><code>custom_alias</code>: (Optional) custom short key.</li> <li><code>expire_date</code>: (Optional) expiry date.</li> </ul> </li> <li>Response: Shortened URL or error code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#delete-url-api","title":"\u274c Delete URL API:","text":"<pre><code>DELETE /deleteURL\n</code></pre> <ul> <li>Parameters:<ul> <li><code>api_dev_key</code>: API key for authentication.</li> <li><code>url_key</code>: Shortened URL.</li> </ul> </li> <li>Response: Confirmation or error message.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#5-database-design","title":"\ud83d\uddc3\ufe0f 5. Database Design","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#schema","title":"\ud83d\udcbe Schema:","text":"<ul> <li> <p>URL Table:</p> <ul> <li><code>id</code> (PK)</li> <li><code>original_url</code></li> <li><code>short_url</code></li> <li><code>created_at</code></li> <li><code>expire_date</code></li> <li><code>click_count</code></li> </ul> </li> <li> <p>User Table:</p> <ul> <li><code>user_id</code> (PK)</li> <li><code>email</code></li> <li><code>api_dev_key</code></li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#db-choice","title":"\u2699\ufe0f DB Choice:","text":"<ul> <li>\ud83d\udee2\ufe0f NoSQL DB: DynamoDB, Cassandra, Riak \u279d scalable and fast.</li> <li>\ud83d\udd25 Read-heavy optimization: Indexing for fast lookups.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#6-key-generation-methods","title":"\ud83d\udd11 6. Key Generation Methods","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#a-encoding-actual-url","title":"\ud83d\udd12 a) Encoding Actual URL:","text":"<ul> <li>\ud83d\udd39 Hash the URL \u279d Use MD5/SHA256.</li> <li>\ud83d\udd39 Base64 encode the hash \u279d Generate short key.</li> <li>\ud83d\udd25 Issues:<ul> <li>Duplicate keys for identical URLs.</li> <li>URL encoding variations.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#b-generating-keys-offline","title":"\u26a1 b) Generating Keys Offline:","text":"<ul> <li>\ud83d\udd25 Key Generation Service (KGS) \u279d Pre-generates unique keys.</li> <li>\ud83d\udcbe Key-DB:<ul> <li>Table for unused keys.</li> <li>Table for used keys.</li> </ul> </li> <li>\ud83d\udee1\ufe0f Concurrency solution:<ul> <li>Mark keys as used immediately.</li> <li>Use lock mechanism to prevent duplicates.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#7-data-partitioning-replication","title":"\ud83d\udd25 7. Data Partitioning &amp; Replication","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#partitioning-methods","title":"\ud83d\udee0\ufe0f Partitioning Methods:","text":"<ul> <li>\ud83d\udd22 Range-based:<ul> <li>Store URLs by first letter in separate partitions.</li> <li>\u26a0\ufe0f Issue: Unbalanced servers.</li> </ul> </li> <li>\u2699\ufe0f Hash-based:<ul> <li>Hash URL \u279d Determine partition.</li> <li>\u2705 Consistent hashing \u279d Prevent hotspots.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#8-cache-layer","title":"\ud83d\udd25 8. Cache Layer","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#caching-hot-urls","title":"\u26a1 Caching hot URLs:","text":"<ul> <li>\ud83d\udd25 Cache 20% of URLs \u279d Reduces DB lookups.</li> <li>\ud83d\udd17 LRU Policy: Evict least recently used URLs.</li> <li>\ud83d\udee1\ufe0f Replicated cache: Distribute load.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#cache-size","title":"\ud83d\udcbe Cache Size:","text":"<ul> <li>170GB cache for 20% of daily traffic.</li> <li>\ud83d\udee2\ufe0f Memcached or Redis for faster lookups.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#9-load-balancing","title":"\u2696\ufe0f 9. Load Balancing","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#lb-layers","title":"\u2699\ufe0f LB Layers:","text":"<ul> <li>Between Clients &amp; App Servers \u279d Distributes incoming traffic.</li> <li>Between App &amp; DB Servers \u279d DB load distribution.</li> <li>Between App &amp; Cache \u279d Balanced cache hits.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#lb-strategies","title":"\u26a1 LB Strategies:","text":"<ul> <li>\ud83d\udd01 Round Robin: Distributes traffic evenly.</li> <li>\u26a1 Intelligent LB: Queries server load \u279d Adjusts traffic.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#10-db-cleanup-purging","title":"\ud83d\udd25 10. DB Cleanup &amp; Purging","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#expiration-handling","title":"\ud83d\udee0\ufe0f Expiration handling:","text":"<ul> <li>\u231b Lazy cleanup: Remove expired links periodically.</li> <li>\ud83d\uddd1\ufe0f Cleanup Service: Low-traffic period cleanup.</li> <li>\u267b\ufe0f Reuse keys: Reinsert deleted keys into KGS.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#11-telemetry-analytics","title":"\ud83d\udcca 11. Telemetry &amp; Analytics","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#tracking","title":"\ud83d\udcc8 Tracking:","text":"<ul> <li>\ud83d\udccd Visitor\u2019s location, device, and browser.</li> <li>\ud83d\udcc5 Date &amp; time of access.</li> <li>\ud83d\udd25 Popular URLs &amp; access trends.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#12-security-permissions","title":"\ud83d\udd12 12. Security &amp; Permissions","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#access-control","title":"\ud83d\udee1\ufe0f Access Control:","text":"<ul> <li>Private URLs: Restricted access.</li> <li>User authentication: Verify before access.</li> <li>DB schema for permissions:<ul> <li><code>url_id</code> \u279d <code>user_id</code></li> <li>UserID \u2192 Access control table.</li> </ul> </li> </ul> <p>\u2705 Revision Tip: - \ud83d\udca1 Focus on key generation, caching, and load balancing strategies. - \ud83d\udd25 Remember key metrics: QPS, cache size, and storage estimates. - \ud83d\ude80 Master the API structure and DB schema for quick reference.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/01_url_shortening_service/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>\ud83d\udc64Shrayansh Jain : Udemy</li> <li>\ud83d\udc64InterviewWithBunny : Design Doc</li> </ul> <p>\u2705 This document provides an organized breakdown of the URL Shortening System structure. Happy coding! \ud83d\ude80</p> <p></p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/","title":"\ud83d\ude80 API Rate Limiter - System Design Notes","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#1-what-is-a-rate-limiter","title":"\ud83d\udcda 1. What is a Rate Limiter?","text":"<ul> <li>Limits the number of events (requests) an entity (user, device, IP) can perform in a specific time window.</li> <li>Example scenarios:<ul> <li>\u2705 1 message per second per user.</li> <li>\u2705 3 failed credit card transactions per day.</li> <li>\u2705 20 accounts creation per day per IP.</li> </ul> </li> <li>\ud83d\udd25 Purpose: Prevent abusive behavior and ensure service availability.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#2-why-do-we-need-api-rate-limiting","title":"\ud83d\udd25 2. Why do we need API Rate Limiting?","text":"<ul> <li>\u2705 Prevent DoS attacks: Block malicious request floods.</li> <li>\u2705 Ensure fair usage: Prevent monopolizing resources.</li> <li>\u2705 Reduce infrastructure costs: Avoid unnecessary scaling.</li> <li>\u2705 Stop spam &amp; online harassment: Block frequent abusive requests.</li> <li>\u2705 Prevent bad design practices: Discourage inefficient API usage.</li> <li>\u2705 Revenue model: Implement tier-based API access.</li> <li>\u2705 Smooth traffic: Prevent sudden spikes to avoid service disruption.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#3-requirements-and-goals","title":"\ud83c\udfaf 3. Requirements and Goals","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#functional-requirements","title":"\u2705 Functional Requirements:","text":"<ul> <li>Limit the number of requests per entity (e.g., 15 requests/second).</li> <li>Rate limit enforced across a cluster of servers.</li> <li>Return HTTP <code>429 - Too Many Requests</code> on exceeding limit.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#non-functional-requirements","title":"\u2699\ufe0f Non-Functional Requirements:","text":"<ul> <li>Highly available &amp; fault-tolerant.</li> <li>Minimal latency impact.</li> <li>Scalable across multiple servers.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#4-how-rate-limiting-works","title":"\u2699\ufe0f 4. How Rate Limiting Works?","text":"<ul> <li>Throttling: Controls API usage during a period.</li> <li>Server Response: HTTP status <code>429 - Too many requests</code>.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#5-types-of-throttling","title":"\ud83d\udea6 5. Types of Throttling","text":"<ul> <li>\ud83d\udd25 Hard Throttling: Strict limit, no exceeding beyond cap.</li> <li>\ud83d\udd25 Soft Throttling: Slightly flexible, e.g., 10% over limit.</li> <li>\ud83d\udd25 Elastic Throttling: Allows exceeding limits when resources are free.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#6-rate-limiting-algorithms","title":"\u2699\ufe0f 6. Rate Limiting Algorithms","text":"<ul> <li>Token Bucket</li> <li>Leaky Bucket</li> <li>Fixed Window Counter</li> <li>Sliding Window Log</li> <li>Sliding Window Counter</li> </ul> <p>Note: For detailed algorithms, check here</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#1-fixed-window-algorithm","title":"\ud83d\udcca 1. Fixed Window Algorithm:","text":"<ul> <li>Time window: Fixed period (e.g., 0-60 seconds).</li> <li>\u2705 Simple but can cause burst traffic issues at window boundaries.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#2-rolling-window-algorithm","title":"\u23f1\ufe0f 2. Rolling Window Algorithm:","text":"<ul> <li>Time window: Moves with each request (e.g., from <code>T</code> to <code>T+1</code>).</li> <li>\u2705 More accurate rate limiting.</li> <li>\u2705 Prevents boundary-related bursts.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#7-high-level-design-for-rate-limiter","title":"\ud83d\udee0\ufe0f 7. High-Level Design for Rate Limiter","text":"<ul> <li>\ud83c\udf10 Web Server \u2192 Rate Limiter \u2192 API Servers</li> <li>\u2705 Rate Limiter decides whether to allow or reject requests.</li> <li>\u2705 Ensures controlled and reliable request flow.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#8-basic-system-design-algorithm","title":"\u2699\ufe0f 8. Basic System Design &amp; Algorithm","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#hash-table-storage","title":"\ud83d\udd25 Hash Table Storage:","text":"<ul> <li><code>Key</code>: <code>UserID</code></li> <li><code>Value</code>: Struct with:<ul> <li><code>Count</code>: Number of requests.</li> <li><code>StartTime</code>: Epoch time (request window start).</li> </ul> </li> <li>Algorithm Steps:<ol> <li>If <code>UserID</code> not in hash table \u2192 Insert with count <code>1</code> and current timestamp.</li> <li>If <code>CurrentTime - StartTime &gt;= 1 min</code> \u2192 Reset <code>Count</code> and <code>StartTime</code>.</li> <li>If <code>Count &lt; limit</code>, allow request.</li> <li>If <code>Count &gt;= limit</code>, reject request.</li> </ol> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#problems","title":"\u26a0\ufe0f Problems:","text":"<ul> <li>Atomicity issue: Concurrent updates can lead to race conditions.</li> <li>Solution: Use Redis locks for atomic operations.</li> <li>Memory Calculation:<ul> <li><code>UserID</code>: 8 bytes.</li> <li><code>Count</code>: 2 bytes.</li> <li><code>Time</code>: 2 bytes.</li> <li>Total: <code>12 bytes per record</code></li> <li>For 1M users: <code>32MB</code> memory usage.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#9-sliding-window-algorithm","title":"\ud83d\udd25 9. Sliding Window Algorithm","text":"<ul> <li>\u2705 More accurate request tracking.</li> <li>\u2705 Uses Redis Sorted Set to store timestamps.</li> <li>Algorithm Steps:<ol> <li>Remove timestamps older than <code>CurrentTime - 1 minute</code>.</li> <li>Count timestamps \u2192 Reject if above limit.</li> <li>Insert current timestamp \u2192 Allow request.</li> </ol> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#memory-calculation","title":"\ud83d\udd25 Memory Calculation:","text":"<ul> <li><code>UserID</code>: 8 bytes.</li> <li><code>Epoch time</code>: 4 bytes.</li> <li><code>Overhead</code>: 20 bytes for hash-table, 20 bytes for Sorted Set.</li> <li>Memory per user: <code>12KB</code></li> <li>For 1M users: <code>12GB</code> memory usage.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#10-sliding-window-with-counters","title":"\ud83d\udd25 10. Sliding Window with Counters","text":"<ul> <li>\u2705 Combines Fixed &amp; Sliding Windows.</li> <li>\u2705 Uses multiple fixed windows (e.g., 1/60th of the main window).</li> <li>\u2705 More memory efficient.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#algorithm-steps","title":"\ud83d\udd25 Algorithm Steps:","text":"<ul> <li>Store counters in Redis Hash with expiry.</li> <li>On each request:<ul> <li>Sum counters for past hour.</li> <li>Check against the threshold.</li> </ul> </li> <li>\u2705 Low memory footprint.</li> <li>\u2705 Efficient distributed scaling.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#memory-calculation_1","title":"\ud83d\udd25 Memory Calculation:","text":"<ul> <li><code>UserID</code>: 8 bytes.</li> <li><code>Epoch time</code>: 4 bytes.</li> <li><code>Counter</code>: 2 bytes.</li> <li>Memory per user: <code>1.6KB</code></li> <li>For 1M users: <code>1.6GB</code> memory usage.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#11-data-sharding-caching","title":"\u2699\ufe0f 11. Data Sharding &amp; Caching","text":"<ul> <li>\u2705 Sharding: Distribute users by <code>UserID</code> using Consistent Hashing.</li> <li>\u2705 Caching:<ul> <li>Cache recent users for faster lookups.</li> <li>Use Write-back cache for lower latency.</li> <li>Apply LRU eviction policy.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#12-rate-limiting-by-ip-vs-user","title":"\ud83d\udd25 12. Rate Limiting by IP vs User","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#by-ip","title":"\ud83c\udf10 By IP:","text":"<ul> <li>\u2705 Simple but inaccurate.</li> <li>\u26a0\ufe0f Issues with shared IPs (e.g., cafes).</li> <li>\u26a0\ufe0f IPv6 attack vectors (large address space).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#by-user","title":"\ud83d\udc64 By User:","text":"<ul> <li>\u2705 More accurate.</li> <li>\u2705 Token-based authentication.</li> <li>\u26a0\ufe0f Vulnerable to DoS attacks against specific users.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#hybrid-approach","title":"\ud83d\udd25 Hybrid Approach:","text":"<ul> <li>\u2705 Combine both IP &amp; User-based limiting.</li> <li>\u2705 More accurate but higher memory usage.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/02_api_rate_limiter/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>\ud83d\udc64 Shrayansh Jain YouTube</li> <li>\ud83d\udc64 Shrayansh Jain : Udemy</li> </ul> <p>\u2705 These notes are structured for quick revision, covering all key aspects of API Rate Limiter system design at Google SSE level. Let me know if you need any modifications or deeper details! \ud83d\ude80</p> <p></p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/03_whatsapp_system/","title":"\ud83d\ude80 WhatsApp System Design Notes","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/03_whatsapp_system/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>\ud83d\udc64Shrayansh Jain : Udemy </li> <li>\ud83d\udc64 Arpit Bhayani : \ud83d\udd12End-to-End Encryption of WhatsApp Messages \u2013 Watch Here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/07_IRCTC_design/","title":"\ud83d\ude80 IRCTC System Design Notes","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/07_IRCTC_design/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>IRCTC High-Level Design | Indian Railway Ticket Booking HLD | System Design Interview - \ud83d\udcfa Watch Here</li> <li>Notes - \ud83d\udcc4 Link</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/08_e-commerce_design/","title":"\ud83d\ude80 E-Commerce System Design Notes","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/08_e-commerce_design/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>\ud83d\udc64 InterviewWithBunny : Video - link</li> <li>Tool Used - link</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/09-ott_platform_netflix_design/","title":"\ud83c\udfac OTT Platform System Design Notes","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/09-ott_platform_netflix_design/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>\ud83d\udc64 InterviewWithBunny : Video - link</li> <li>Tool Used - link</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/10-hotel-booking-design/","title":"\ud83c\udfe8 Design Hotel Booking App like AirBnb / Booking.com","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/10-hotel-booking-design/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>\ud83d\udc64 InterviewWithBunny : Video - link</li> <li>Tool Used - Excalidraw</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/","title":"\ud83d\ude80 Stripe: Preventing Double Payments Using Idempotent API","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/#quick-revision-notes-for-google-sse-interview","title":"\ud83d\udd25 Quick Revision Notes for Google SSE Interview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/#problem-double-payments-issue","title":"\u2705 Problem: Double Payments Issue","text":"<ul> <li>Server Error:</li> <li>Transaction fails during processing but the client doesn\u2019t know the status.</li> <li>Retrying may cause double payments.</li> <li>Network Error:</li> <li>Server processes the request successfully but fails to return a response.</li> <li>Client retries without knowing if the previous request succeeded, risking double payments.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/#solution-idempotent-api","title":"\u2699\ufe0f Solution: Idempotent API","text":"<ul> <li>Goal: Ensure a request is processed only once, even after multiple retries.</li> <li>Idempotency Definition:</li> <li>A specific request can be retried many times without side effects.</li> <li>Guarantees that a request is processed exactly once.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/#1-idempotency-keys","title":"\ud83d\udd11 1. Idempotency Keys","text":"<ul> <li>Purpose: Track processed requests to prevent double payments.</li> <li>Implementation:</li> <li>Create a unique string (UUID) as the idempotency key.</li> <li>Send the UUID with each request\u2019s HTTP header.</li> <li>Generate a new UUID whenever the payload changes.</li> <li>Database Storage:</li> <li>Store idempotency keys in an in-memory database.</li> <li>Cache the server response after successful processing.</li> <li>On retry:<ul> <li>If new request \u2192 Process and store the key.</li> <li>If duplicate \u2192 Return cached response.</li> </ul> </li> <li>Transaction Rollback:</li> <li>Use ACID properties to roll back on server errors.</li> <li>Key Expiry:</li> <li>Idempotency keys expire after 24 hours to reduce storage costs.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/#2-retrying-failed-requests","title":"\ud83d\udd01 2. Retrying Failed Requests","text":"<ul> <li>Risk: Frequent retries may overload the server.</li> <li>Solution:</li> <li>Use Exponential Backoff Algorithm:<ul> <li>Adds extra delay between retries.</li> </ul> </li> <li>Use Jitter:<ul> <li>Adds randomness to the waiting time before retry.</li> </ul> </li> <li>Benefits:</li> <li>Prevents thundering herd problem when many clients reconnect simultaneously.</li> <li>Improves reliability and reduces server load.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/#must-know-concepts-for-google-sse-interview","title":"\ud83d\ude80 Must-Know Concepts for Google SSE Interview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/#1-idempotency-concept","title":"\ud83d\udd25 1. Idempotency Concept","text":"<ul> <li>Definition:</li> <li>Ensures multiple identical requests have the same effect as a single request.</li> <li>Use Cases:</li> <li>Payment processing (preventing double payments).</li> <li>API retries.</li> <li>Distributed systems and microservices.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/#2-exponential-backoff-with-jitter","title":"\u26a1 2. Exponential Backoff with Jitter","text":"<ul> <li>Exponential Backoff:</li> <li>Delay between retries increases exponentially (e.g., 1s \u2192 2s \u2192 4s \u2192 8s).</li> <li>Jitter:</li> <li>Adds randomness to the delay.</li> <li>Benefits:</li> <li>Prevents server overload.</li> <li>Avoids simultaneous retries causing bottlenecks.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/1-double-payment/#3-acid-transactions","title":"\ud83d\udd25 3. ACID Transactions","text":"<ul> <li>Atomicity: All operations succeed or fail as a single unit.</li> <li>Consistency: The database remains in a valid state.</li> <li>Isolation: Concurrent transactions do not affect each other.</li> <li>Durability: Committed transactions are permanently stored.</li> </ul> <p>\u2705 Key Takeaway: Stripe uses idempotent APIs with exponential backoff and ACID transactions to prevent double payments, ensuring reliability and a seamless user experience.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/","title":"\u2601\ufe0f Amazon S3 Durability \u2013 Quick Revision for Google SSE Interview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#what-is-durability","title":"\ud83d\udd10 What is Durability?","text":"<p>Durability is the prevention of data loss. Amazon S3 offers: - 11 nines of durability (99.999999999%) - Statistically: 1 object out of 10,000 could be lost in 10 million years</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#1-data-redundancy","title":"\ud83e\uddf1 1. Data Redundancy","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#key-idea-mechanical-hdds-are-cheap-but-fail-often-replicate-shard-data","title":"\ud83e\udde0 Key Idea: Mechanical HDDs are cheap but fail often \u2192 replicate + shard data","text":"<ul> <li>Replication: Data is duplicated across multiple disks to ensure backup on failure.</li> <li>Erasure Coding:<ul> <li>Splits data into data shards + parity shards</li> <li>Original data is reconstructible from a subset of shards</li> <li>Enhances durability with flexible replication</li> </ul> </li> <li>Shard Distribution: Shards are stored across many disks</li> <li>Failure Recovery:<ul> <li>Background processes monitor disk health</li> <li>Failed disks are quickly replaced</li> <li>Parallelization allows faster recovery (free space on each device helps)</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#2-data-integrity","title":"\u2705 2. Data Integrity","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#key-idea-prevent-data-corruption-via-checksums-and-transformation-validation","title":"\ud83e\udde0 Key Idea: Prevent data corruption via checksums and transformation validation","text":"<ul> <li>Checksum on Upload:<ul> <li>Amazon client SDK adds checksum (CRC32C, SHA-1)</li> <li>Detects bit flips in transmission</li> </ul> </li> <li>Checksum in HTTP Trailer: Efficient validation without re-reading whole data</li> <li>Checksum on Storage:<ul> <li>Erasure-coded shards also get checksums</li> <li>Enables validation during reads</li> </ul> </li> <li>Bracketing:<ul> <li>Reverse all transformations before confirming write</li> <li>Validates that uploaded data = stored data</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#3-data-audit","title":"\ud83e\uddea 3. Data Audit","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#key-idea-failures-are-unpredictable-scan-and-re-replicate-frequently","title":"\ud83e\udde0 Key Idea: Failures are unpredictable \u2192 scan and re-replicate frequently","text":"<ul> <li>Hard Disk Monitoring:<ul> <li>Detect failure and scale repair services</li> <li>Includes bad sectors (bit flips on disk, not entire disk failure)</li> </ul> </li> <li>Periodic Audits:<ul> <li>Use stored checksums to validate erasure-coded shards</li> <li>Re-replicate on detection of corruption</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#4-data-isolation","title":"\ud83e\udde9 4. Data Isolation","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#key-idea-separate-concerns-to-minimize-blast-radius","title":"\ud83e\udde0 Key Idea: Separate concerns to minimize blast radius","text":"<ul> <li>Metadata and Content:<ul> <li>Metadata \u2192 stored in databases</li> <li>File content \u2192 stored in disk arrays</li> </ul> </li> <li>Availability Zones (AZ):<ul> <li>Physically separated, isolated power and network</li> <li>Prevents simultaneous failures</li> </ul> </li> <li>User Errors:<ul> <li>Versioning: Tracks changes with version IDs; delete = adding a delete marker</li> <li>Object Lock: Prevents deletion for a specified period</li> <li>Backups: Point-in-time recovery for safety</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#5-engineering-culture","title":"\ud83e\udde0 5. Engineering Culture","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#key-idea-durability-is-part-of-the-architecture-and-mindset","title":"\ud83e\udde0 Key Idea: Durability is part of the architecture and mindset","text":"<ul> <li>Durability Reviews:<ul> <li>Mandatory before every change</li> <li>Includes threat models and simplification plans</li> </ul> </li> <li>Written Documentation:<ul> <li>Risks are documented and assessed</li> </ul> </li> <li>Mathematical Modeling:<ul> <li>Proven models used to calculate durability impact</li> </ul> </li> <li>Philosophy: Durability is a continuous process</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#must-know-concepts","title":"\ud83d\udd25 Must-Know Concepts","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#erasure-coding","title":"\ud83e\uddec Erasure Coding","text":"<ul> <li>Breaks data into pieces with redundant parity</li> <li>Recoverable from subset of parts</li> <li>Higher efficiency and durability than basic replication</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#checksums-crc32c-sha-1","title":"\ud83e\uddee Checksums (CRC32C, SHA-1)","text":"<ul> <li>Unique data fingerprints</li> <li>Used to verify integrity during upload, storage, and reads</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#bracketing","title":"\ud83c\udf10 Bracketing","text":"<ul> <li>Reverses transformations before confirming write</li> <li>Ensures what\u2019s stored = what\u2019s uploaded</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#data-audit-process","title":"\ud83d\udd04 Data Audit Process","text":"<ul> <li>Detects silent corruption</li> <li>Scans storage regularly, re-replicates when needed</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#separation-of-metadata-and-content","title":"\ud83e\uddf1 Separation of Metadata and Content","text":"<ul> <li>Increases modularity and failure isolation</li> <li>Better scalability and reliability</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/10-how-amazon-s3-achieves-durability/#versioning-object-lock","title":"\ud83d\udee1\ufe0f Versioning &amp; Object Lock","text":"<ul> <li>Prevents accidental overwrite/delete</li> <li>Supports compliance and retention requirements</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/","title":"\ud83d\udcb3 Payment Retry System","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#why-it-matters","title":"\ud83e\udde0 Why It Matters","text":"<p>Every backend engineer should know how to deal with payment reliability and fault tolerance. Failing gracefully = no loss of money \ud83d\udcb8 or user trust.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#payment-status-tracking","title":"\ud83d\udcca Payment Status Tracking","text":"<p>\ud83d\udd11 Each transaction should have a clear status to manage retries, refunds, and escalations:</p> <ul> <li>\u2705 Initiated \u2013 Request received.</li> <li>\ud83d\udd04 Processing \u2013 Gateway is handling it.</li> <li>\ud83d\udfe2 Succeeded \u2013 Payment done!</li> <li>\u274c Failed \u2013 Attempt failed.</li> <li>\u23f3 Pending Retry \u2013 Scheduled for retry.</li> <li>\ud83d\udcb0 Refunded \u2013 Reversed after success.</li> <li>\ud83d\uded1 Cancelled \u2013 Canceled before processing.</li> </ul> <p>\ud83d\uddc3\ufe0f Store in an append-only DB table:</p> <pre><code>CREATE TABLE payment_status (\n  id SERIAL PRIMARY KEY,\n  payment_id UUID NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  metadata JSONB\n);\n</code></pre> <p>\u2728 Why append-only? - \ud83d\udd0d Full audit trail - \ud83d\udee1\ufe0f Data integrity - \ud83e\udd1d Better concurrency handling</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#key-components-of-a-retry-system","title":"\ud83d\udd01 Key Components of a Retry System","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#1-retry-queue","title":"1\ufe0f\u20e3 Retry Queue","text":"<ul> <li>Handles temporary issues (timeouts, delays)</li> <li>Waits briefly, then retries</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#2-dead-letter-queue-dlq","title":"2\ufe0f\u20e3 Dead Letter Queue (DLQ)","text":"<ul> <li>Stores persistent failures (limit exceeded, invalid input)</li> <li>Used for debugging &amp; manual intervention</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#retry-logic-when-when-not","title":"\ud83c\udfaf Retry Logic: When &amp; When Not","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#retry-if","title":"\u2705 Retry If:","text":"<ul> <li>\ud83c\udf10 Network timeout</li> <li>\ud83c\udfe6 Bank temporarily unavailable</li> <li>\ud83d\udea6 Hit rate limits</li> <li>\u26a0\ufe0f Payment gateway down</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#dont-retry-if","title":"\ud83d\udeab Don't Retry If:","text":"<ul> <li>\ud83d\udcb8 Insufficient funds</li> <li>\u231b Card expired</li> <li>\u2757 Invalid card details</li> <li>\ud83d\udd12 Fraud blocks</li> </ul> <p>\ud83d\udccc Pro Tip: Always assess failure type before retrying.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#retry-flow-summary","title":"\ud83d\udd04 Retry Flow Summary","text":"<ol> <li>\u274c Failure Occurs</li> <li>\u2705 Check: Is it retryable?<ul> <li>Yes \u2192 Add to Retry Queue</li> <li>No \u2192 Log/store for analysis</li> </ul> </li> <li>\ud83d\udd01 Retry via Payment Service</li> <li>\ud83e\udde0 Recheck on failure<ul> <li>Retryable? Retry up to max limit</li> <li>Not Retryable? \u2192 Move to DLQ</li> </ul> </li> <li>\ud83d\udd75\ufe0f DLQ Handling \u2192 Inspect, notify, or fix</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#prevent-duplicate-charges-exactly-once-delivery","title":"\ud83d\udee1\ufe0f Prevent Duplicate Charges: Exactly-Once Delivery","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#techniques","title":"\ud83d\udca1 Techniques:","text":"<ul> <li>\ud83c\udd94 Idempotency Keys \u2013 Unique token per transaction</li> <li>\ud83e\uddfe Event Sourcing \u2013 Rebuild system state from events</li> <li>\ud83d\udd10 Locks \u2013 Prevent concurrent processing</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#must-know-concepts-google-sse","title":"\ud83d\ude80 Must-Know Concepts (Google SSE \ud83d\udcbc)","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#1-append-only-database-table","title":"\ud83d\udd25 1. Append-Only Database Table","text":"<ul> <li>Ensures immutability, traceability, and safe concurrent writes.</li> <li>Ideal for compliance and auditing in payment systems.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#2-dead-letter-queue-dlq_1","title":"\ud83d\udd25 2. Dead Letter Queue (DLQ)","text":"<ul> <li>Helps segregate hard failures</li> <li>Useful for debugging, monitoring, and escalation</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#3-idempotency-keys","title":"\ud83d\udd25 3. Idempotency Keys","text":"<ul> <li>Prevent duplicate charges</li> <li>Guarantees exactly-once payment behavior across retries</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/11-how-paypal-scaled-1b-txns/#4-retry-strategy-design","title":"\ud83d\udd25 4. Retry Strategy Design","text":"<ul> <li>Differentiates transient vs permanent failures</li> <li>Limits retry attempts to avoid infinite loops</li> </ul> <p>\u2705 Final Thought:</p> <p>Sometimes, high reliability is just a chain of well-managed retries \ud83d\udd01\ud83d\udca1</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/","title":"\ud83d\udcd8 ** Google Spanner Architecture**","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#overview","title":"\ud83d\ude80 Overview","text":"<p>Google created Spanner, a globally distributed SQL database, to combine the scalability of NoSQL with the ACID guarantees of SQL, allowing it to support 4.77 billion users and drive massive revenue from Google Ads.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#1-origin-motivation","title":"\ud83e\uddf1 1. Origin &amp; Motivation","text":"<ul> <li>Started with MySQL \u279d Partitioned \u279d Faced limitations with scale and transactions</li> <li>Needed:<ul> <li>Scalability without downtime</li> <li>ACID transactions across partitions</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#2-key-architecture-components","title":"\u2699\ufe0f 2. Key Architecture Components","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#atomicity-2pc-two-phase-commit","title":"\ud83d\udd39 Atomicity - 2PC (Two-Phase Commit)","text":"<ul> <li>Ensures \"all or nothing\" transactions across partitions</li> <li>Steps:<ol> <li>Prepare: Ask if partitions are ready</li> <li>Commit: Proceed only if all agree</li> </ol> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#consistency-paxos-truetime","title":"\ud83d\udd39 Consistency - Paxos + TrueTime","text":"<ul> <li>Paxos: Elects partition leaders for coordinating writes</li> <li>TrueTime: Uses GPS + atomic clocks to sync time globally<ul> <li>Servers sync every 30s</li> <li>Enables timestamp-based global ordering</li> </ul> </li> <li>Follower Reads:<ul> <li>Follower requests latest timestamp from leader</li> <li>Ensures strongly consistent reads</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#isolation-2pl-snapshot-isolation","title":"\ud83d\udd39 Isolation - 2PL + Snapshot Isolation","text":"<ul> <li>Two-Phase Locking (2PL):<ul> <li>Growing phase: Acquire locks</li> <li>Shrinking phase: Release locks</li> </ul> </li> <li>Snapshot Isolation (MVCC):<ul> <li>Lock-free reads using historical versions</li> <li>Writes create new versions with timestamps</li> <li>Older versions auto-cleaned</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#durability-synchronous-writes-colossus","title":"\ud83d\udd39 Durability - Synchronous Writes + Colossus","text":"<ul> <li>Paxos ensures writes are durable by writing to majority replicas</li> <li>Storage Layer: Google Colossus (distributed filesystem)<ul> <li>Separation of compute (read/write) &amp; storage</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#3-deployment-replication","title":"\ud83c\udfd7\ufe0f 3. Deployment &amp; Replication","text":"<ul> <li>Geo-Replication: Data is replicated across zones</li> <li>Leader-based Writes: One leader per partition</li> <li>Follower-based Reads: Low latency reads from nearest zone</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#results","title":"\ud83d\udcca Results","text":"<ul> <li>Supports global availability (99.999%)</li> <li>Handles massive scale (billions of users)</li> <li>Powers core of Google Ads ($237B revenue in 2023)</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#must-know-concepts-for-interview","title":"\ud83c\udf1f Must-Know Concepts for Interview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#two-phase-commit-2pc","title":"\u2705 Two-Phase Commit (2PC)","text":"<ul> <li>Ensures atomicity across distributed partitions</li> <li>Critical for maintaining ACID in distributed SQL systems</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#truetime-api","title":"\u2705 TrueTime API","text":"<ul> <li>Google's clock synchronization system using atomic clocks &amp; GPS</li> <li>Enables global consistency with timestamp ordering</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#paxos-consensus-algorithm","title":"\u2705 Paxos Consensus Algorithm","text":"<ul> <li>Ensures consistent leadership &amp; agreement in distributed systems</li> <li>Essential for write coordination in partitioned DBs</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#snapshot-isolation-mvcc","title":"\u2705 Snapshot Isolation (MVCC)","text":"<ul> <li>Enables consistent, lock-free reads across versions</li> <li>Reduces contention during concurrent reads/writes</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/12-how-google-ads-scaled-sql/#colossus-file-system","title":"\u2705 Colossus File System","text":"<ul> <li>Distributed, durable, high-performance storage backend</li> <li>Separates storage from compute \u279d better scalability</li> </ul> <p>\ud83d\udd01 Revisit this before your interview for a fast, structured walkthrough of Spanner\u2019s design and how it enabled global-scale ad services!</p> <p>\ud83e\udde0 Inspired by real-world architecture and research insights \ud83d\udccc Compiled for quick review before system design interviews</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/","title":"\ud83d\ude80 WhatsApp Scaling to 50B Messages/Day with 32 Engineers","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#1-single-responsibility-principle","title":"\ud83d\udccc 1. \ud83d\udca1 Single Responsibility Principle","text":"<ul> <li>Focused purely on messaging, avoiding feature creep like ads/social network.</li> <li>Reliability &gt; Everything.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#2-tech-stack-erlang","title":"\ud83d\udccc 2. \ud83e\uddf1 Tech Stack - Erlang","text":"<ul> <li>Core server written in Erlang:<ul> <li>Lightweight threads</li> <li>Native concurrency (no OS thread overhead)</li> <li>Hot-loading: Deploy updates with zero downtime.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#3-dont-reinvent-the-wheel","title":"\ud83d\udccc 3. \ud83e\uddf0 Don't Reinvent the Wheel","text":"<ul> <li>Built on ejabberd (Erlang-based XMPP server).</li> <li>Rewrote components to meet scale needs.</li> <li>Used services like Google Push for notifications.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#4-cross-cutting-concerns","title":"\ud83d\udccc 4. \ud83d\udee0 Cross-Cutting Concerns","text":"<ul> <li>Monitoring &amp; Alerting integrated deeply.</li> <li>Adopted CI/CD practices:<ul> <li>CI: Regular code merges.</li> <li>CD: Frequent, reliable deployments.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#5-scalability-diagonal-scaling","title":"\ud83d\udccc 5. \ud83d\udcf6 Scalability: Diagonal Scaling","text":"<ul> <li>Used FreeBSD OS:<ul> <li>Tuned for &gt;2M connections/server.</li> <li>Modified kernel for files/sockets.</li> </ul> </li> <li>Diagonal Scaling = Horizontal + Vertical.</li> <li>Over-provisioned to handle traffic spikes &amp; failures.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#6-flywheel-effect-continuous-feedback","title":"\ud83d\udccc 6. \ud83d\udd01 Flywheel Effect: Continuous Feedback","text":"<ul> <li>Measured: CPU, context switches, system calls.</li> <li>Regular performance tuning to remove bottlenecks.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#7-load-testing-for-quality","title":"\ud83d\udccc 7. \ud83e\uddea Load Testing for Quality","text":"<ul> <li>Load testing via:<ul> <li>Artificial traffic</li> <li>DNS config changes</li> </ul> </li> <li>Identified &amp; fixed single points of failure.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#8-small-team-size","title":"\ud83d\udccc 8. \ud83d\udc65 Small Team Size","text":"<ul> <li>Only 32 engineers.</li> <li>Fewer communication paths = Higher productivity.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#must-know-concepts-for-interviews","title":"\ud83e\udde0 Must-Know Concepts for Interviews","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#1-erlang-for-concurrency-hot-loading","title":"\ud83d\udd25 1. Erlang for Concurrency &amp; Hot Loading","text":"<ul> <li>Built-in concurrency model \u2192 High performance.</li> <li>Hot code reloading \u2192 Zero downtime updates.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#2-diagonal-scaling","title":"\ud83d\udd25 2. Diagonal Scaling","text":"<ul> <li>Hybrid approach: Combines vertical &amp; horizontal scaling.</li> <li>Cost-effective and resilient to spikes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#3-ejabberd-as-a-base-framework","title":"\ud83d\udd25 3. ejabberd as a Base Framework","text":"<ul> <li>Modified OSS to suit extreme requirements.</li> <li>Smart use of proven tools to save dev time.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#4-cicd-and-monitoring-as-first-class-citizens","title":"\ud83d\udd25 4. CI/CD and Monitoring as First-Class Citizens","text":"<ul> <li>Constant monitoring \u2192 Rapid feedback loops.</li> <li>CI/CD \u2192 Quick, safe deployments \u2192 Engineering agility.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/13-how-whatsapp-scaled-50b-msgs/#5-small-efficient-teams","title":"\ud83d\udd25 5. Small, Efficient Teams","text":"<ul> <li>WhatsApp's success = Proof small teams can scale big.</li> <li>Prioritize clarity, focus, and ownership.</li> </ul> <p>\u2728 Keep this file in your <code>interview-prep/notes/</code> repo for lightning-fast review before interviews!</p> <p>\ud83e\udde0 Scaling is not just infra \u2014 it's engineering philosophy + execution.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/","title":"\ud83d\ude80 Why Is Redis a Distributed Swiss Army Knife","text":"<p>Redis is not just a cache \u2014 it's a multi-purpose, high-performance tool used to build scalable and responsive systems.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#1-caching","title":"\ud83d\udd39 1. Caching \u26a1","text":"<ul> <li>\ud83d\uddc2\ufe0f Redis Hash stores database responses.</li> <li>\ud83d\udd11 Query hash as key.</li> <li>\ud83d\udfe2 Cache hit \u2192 Serve from Redis.</li> <li>\ud83d\udd34 Cache miss \u2192 Query DB \u2192 Store in Redis.</li> </ul> <p>\u2705 Benefits: - 100x Faster response \u26a1 - \ud83e\uddd8 Reduced DB load</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#2-queueing","title":"\ud83d\udd39 2. Queueing \ud83d\udd01","text":"<ul> <li>\ud83e\uddf5 Used Redis Streams (append-only log).</li> <li>\u23f3 Queue long-running queries.</li> <li>\ud83d\udd04 Asynchronous processing by query workers.</li> </ul> <p>\u2705 Benefits: - Buffer requests \ud83d\uded1 - Decouple serving vs processing \ud83c\udfaf - Auto-scale workers \ud83d\ude80</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#3-locking","title":"\ud83d\udd39 3. Locking \ud83d\udd10","text":"<ul> <li>\ud83d\udeaa Distributed locks with Redis.</li> <li>\u23f1\ufe0f Expiry time to avoid deadlock.</li> <li>\ud83d\udd04 Limit concurrent DB queries.</li> </ul> <p>\u2705 Benefits: - Prevent noisy neighbors \ud83d\udeb7 - Safer DB access \ud83d\udee1\ufe0f</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#4-throttling","title":"\ud83d\udd39 4. Throttling \ud83e\uddd8\u200d\u2642\ufe0f","text":"<ul> <li>\ud83d\udce4 Failed locks \u2192 Re-queue message.</li> <li>\u23f1\ufe0f Add delay (exponential backoff).</li> </ul> <p>\u2705 Benefits: - DB congestion control \ud83d\udea6</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#5-session-store","title":"\ud83d\udd39 5. Session Store \ud83e\udeaa","text":"<ul> <li>\ud83d\udcbe Store user preferences in Redis Hash.</li> <li>\u23f3 Expiry auto-renews on requests.</li> </ul> <p>\u2705 Benefits: - Stateless web servers \ud83e\uddec - Easy horizontal scaling \u2195\ufe0f</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#6-rate-limiting","title":"\ud83d\udd39 6. Rate Limiting \ud83d\udeab","text":"<ul> <li>\ud83d\udd22 Use counters in Redis Hash.</li> <li>\u2796 Decrease on request.</li> <li>\ud83d\udd01 Reset after time window.</li> </ul> <p>\u2705 Benefits: - Prevent server overload \ud83d\udca5</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#must-know-redis-concepts","title":"\ud83d\udca1 Must-Know Redis Concepts","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#redis-streams","title":"\ud83d\udcd8 Redis Streams \ud83e\uddf5","text":"<ul> <li>Append-only log.</li> <li>Ideal for event queues and logs.</li> <li>Supports consumer groups for load balancing.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#redis-hash","title":"\ud83d\udcd8 Redis Hash \ud83d\uddc3\ufe0f","text":"<ul> <li>Key-value mapping inside a key.</li> <li>Efficient memory usage for small objects.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#redis-locks","title":"\ud83d\udcd8 Redis Locks \ud83d\udd10","text":"<ul> <li>Usually implemented with SETNX + EXPIRE.</li> <li>Provides distributed coordination.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#pubsub","title":"\ud83d\udcd8 Pub/Sub \ud83d\udce3","text":"<ul> <li>Real-time messaging.</li> <li>Publisher emits, subscribers receive.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#hyperloglog","title":"\ud83d\udcd8 HyperLogLog \ud83d\udccf","text":"<ul> <li>Probabilistic data structure.</li> <li>Estimates cardinality (unique items count).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#sorted-sets","title":"\ud83d\udcd8 Sorted Sets \ud83d\udcca","text":"<ul> <li>Great for leaderboards.</li> <li>Store items with scores.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#redisjson","title":"\ud83d\udcd8 RedisJSON \ud83d\udce6","text":"<ul> <li>Store and query nested JSON efficiently.</li> <li>Avoids serialization overhead.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#redissearch","title":"\ud83d\udcd8 RedisSearch \ud83d\udd0d","text":"<ul> <li>Full-text search engine.</li> <li>Supports filtering, ranking, and querying.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/14-redis-use-cases-explained/#final-thoughts","title":"\ud83e\uddfe Final Thoughts","text":"<p>Redis isn\u2019t just a cache. It's a powerful in-memory data structure store with rich features: - \ud83e\udde0 Atomic operations. - \ud83d\udca5 High performance (single-threaded). - \ud83d\udcbe Crash recovery via persistence. - \ud83d\udd00 Extensible modules for modern needs.</p> <p>Redis is like a Swiss Army knife \u2014 versatile, efficient, and battle-tested \ud83d\udd27</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/","title":"\ud83d\udcd8 Quick Revision Notes: How PayPal Supported 1B Transactions/Day With Just 8 VMs","text":"<p>\ud83d\ude80 A must-read for your Google SSE interview prep! Here's a quick, clean breakdown of the architecture and principles behind PayPal's billion-scale system.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#initial-scaling-strategy","title":"\ud83c\udfc1 Initial Scaling Strategy","text":"<ul> <li>\ud83e\uddd1\u200d\ud83d\udcbb Started as security software \u2192 Pivoted to online payments \u2192 Became PayPal.</li> <li>\ud83d\udcc8 Grew to 1M transactions/day in 2 years.</li> <li>\ud83d\udda5\ufe0f Horizontal Scaling with 1000+ VMs initially.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#challenges-faced","title":"\ud83d\ude13 Challenges Faced:","text":"<ul> <li>\ud83d\udd78\ufe0f Network Latency: More hops = Slower response time.</li> <li>\ud83d\udcb8 Infra Costs: Deployment, autoscaling, monitoring became expensive.</li> <li>\ud83e\uddc3 Low Resource Utilization: CPU usage per server was suboptimal.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#the-actor-model-to-the-rescue","title":"\ud83e\udde0 The Actor Model to the Rescue","text":"<p>Based on Akka framework (Java) \u2014 concurrency through message-passing and isolation.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#1-concurrency-threads","title":"\ud83d\udd01 1. Concurrency &amp; Threads","text":"<ul> <li>\ud83d\udd39 Actors are super lightweight.</li> <li>\ud83d\udd39 A thread is assigned only when a message is being processed.</li> <li>\ud83d\udd39 Small thread pool \u2192 Manages millions of actors \u2192 Saves resources.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#2-isolation-state-handling","title":"\ud83d\udd10 2. Isolation &amp; State Handling","text":"<ul> <li>\ud83d\udd39 Actors do not share memory.</li> <li>\ud83d\udd39 Communicate via immutable messages.</li> <li>\ud83d\udce6 Each actor has a mailbox (FIFO) for message queueing.</li> <li>\ud83e\udde0 Local state caching inside app server \u2192 Fewer DB/cache hits.</li> <li>\ud83c\udfaf Uses consistent hashing to route customers to same server.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#3-asynchronous-execution","title":"\ud83d\udd79\ufe0f 3. Asynchronous Execution","text":"<ul> <li>\ud83e\uddf5 Each actor processes only one message at a time.</li> <li>\ud83d\udcec Messages are processed asynchronously.</li> <li>\ud83e\udde9 Supports functional programming: Side-effect free, testable, scalable.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#4-fault-tolerance","title":"\ud83d\udee0\ufe0f 4. Fault Tolerance","text":"<ul> <li>\ud83d\udc68\u200d\ud83d\udc66 Actors can create &amp; supervise other actors.</li> <li>\ud83d\udd04 On failure, supervisor restarts the child actor.</li> <li>\ud83d\udea8 Errors bubble up to the supervisor \u2192 Clean error handling.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#must-know-concepts-for-interviews","title":"\ud83d\udccc Must-Know Concepts for Interviews","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#1-actor-model","title":"\ud83d\udd25 1. Actor Model","text":"<ul> <li>\ud83e\uddf5 Concurrency: Efficient message-passing model avoids locking.</li> <li>\ud83e\udde0 Isolation: Private state; avoids race conditions.</li> <li>\ud83d\udd04 Fault Tolerance: Supervision model helps with graceful recovery.</li> <li>\ud83d\udcec Asynchronous: Fire-and-forget style leads to scalable systems.</li> <li>\ud83d\udee1\ufe0f Functional Programming: Stateless transformations = testable, scalable code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#2-efficient-resource-utilization","title":"\ud83d\udd25 2. Efficient Resource Utilization","text":"<ul> <li>\ud83d\udca1 Threads are expensive \u2192 Actors are lightweight \u2192 Huge concurrency at low cost.</li> <li>\ud83d\udcbd Application servers as stateful caches reduce latency &amp; DB load.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#3-consistent-hashing","title":"\ud83d\udd25 3. Consistent Hashing","text":"<ul> <li>\ud83c\udfaf Ensures requests from a customer go to the same server.</li> <li>\u2696\ufe0f Balances load and preserves cache locality.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/15-how-to-handle-payments-backend/#key-takeaway","title":"\ud83c\udfc6 Key Takeaway","text":"<p>The Actor Model + Functional Programming = \ud83d\ude80 High concurrency, \u26a1 low latency, \ud83d\udd27 easy scalability, and \ud83d\udcaa fault-tolerant system.</p> <p>Let me know if you want a diagram-based version too! \u2705</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/","title":"\ud83c\udf10 How WebSockets Work","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#1-communication-patterns-before-websockets","title":"\ud83d\udd04 1. Communication Patterns Before WebSockets","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#http-request-response","title":"\ud83d\udce8 HTTP Request-Response","text":"<ul> <li>\ud83d\udd39 Client sends request \u2192 Server responds.</li> <li>\ud83d\udd38 Not real-time \u2013 client must repeatedly ask for updates.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#short-polling","title":"\u23f1\ufe0f Short Polling","text":"<ul> <li>\ud83d\udd39 Client sends periodic requests \u2192 Server responds (empty if no change).</li> <li>\ud83d\udd38 Pros: Tracks changes in near real-time.</li> <li>\ud83d\udd38 Cons:<ul> <li>High overhead due to frequent requests.</li> <li>Responsiveness depends on polling interval.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#long-polling","title":"\ud83e\uddfe Long Polling","text":"<ul> <li>\ud83d\udd39 Client requests \u2192 Server holds the request until update is available.</li> <li>\ud83d\udd38 Pros: Real-time feel without empty responses.</li> <li>\ud83d\udd38 Cons:<ul> <li>Server maintains many open connections \u2192 resource heavy.</li> <li>Separate request needed to send data from client to server.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#server-sent-events-sse","title":"\ud83d\udce1 Server-Sent Events (SSE)","text":"<ul> <li>\ud83d\udd39 One-way stream: Server \u2192 Client.</li> <li>\ud83d\udd38 Pros: Server pushes updates in real-time.</li> <li>\ud83d\udd38 Cons:<ul> <li>Unidirectional.</li> <li>Client must use separate request to send data.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#2-websockets-full-duplex-communication","title":"\ud83d\udd0c 2. WebSockets: Full-Duplex Communication","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#imagine-a-phone-call-both-sides-talk-simultaneously-in-real-time","title":"\ud83d\udcde Imagine a Phone Call: Both sides talk simultaneously in real-time.","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#how-websockets-work_1","title":"\u2699\ufe0f How WebSockets Work","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#1-opening-a-websocket-connection-handshake","title":"1\ufe0f\u20e3 Opening a WebSocket Connection (Handshake)","text":"<ul> <li>\ud83d\udd39 Client sends HTTP GET request with special headers.</li> <li>\ud83d\udd39 Server replies with <code>HTTP 101 Switching Protocols</code>.</li> <li>\ud83d\udd39 TCP connection is established \u2192 full-duplex communication begins.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#2-transferring-data","title":"2\ufe0f\u20e3 Transferring Data","text":"<ul> <li>\ud83d\udd39 WebSocket messages split into frames for efficient data handling.</li> <li>\ud83d\udd39 Frames allow small buffered transfers \u2192 Receiver reassembles them.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#3-closing-a-connection-closing-handshake","title":"3\ufe0f\u20e3 Closing a Connection (Closing Handshake)","text":"<ul> <li>\ud83d\udd39 Either client or server initiates closing handshake.</li> <li>\ud83d\udd39 Special frame with code \u2192 Acknowledged \u2192 Resources deallocated.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#must-know-concepts","title":"\ud83d\ude80 Must-Know Concepts","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#websocket-handshake","title":"\ud83e\udde9 WebSocket Handshake","text":"<ul> <li>\ud83d\udd38 Uses HTTP to initiate, then upgrades to WebSocket.</li> <li>\ud83d\udd38 Keeps one persistent connection alive (TCP).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#frame-based-messaging","title":"\ud83e\uddf1 Frame-Based Messaging","text":"<ul> <li>\ud83d\udd38 Breaks messages into small frames.</li> <li>\ud83d\udd38 Efficient memory usage, supports binary/text data.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#closing-handshake","title":"\ud83d\udd1a Closing Handshake","text":"<ul> <li>\ud83d\udd38 Uses specific frame codes for termination.</li> <li>\ud83d\udd38 Cleanly closes connection and frees server/client resources.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/16-how-websockets-work/#websocket-use-case-summary","title":"\ud83d\udca1 WebSocket Use Case Summary","text":"<p>\u2705 Pros: - Real-time, low-latency updates. - Bidirectional communication. - Persistent single connection.</p> <p>\u26a0\ufe0f Cons: - Stateful and memory-intensive. - Not scalable for unlimited connections. - Best used where real-time two-way updates are critical.</p> <p>\u2728 \u201cWebSockets aren\u2019t a silver bullet, but they\u2019re the perfect weapon when used in the right battle.\u201d</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/","title":"\ud83d\ude80 YouTube Architecture: Supporting 2.49 Billion Users With MySQL","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/#quick-revision-notes-for-google-sse-interview","title":"\ud83c\udf1f Quick Revision Notes for Google SSE Interview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/#1-background","title":"\ud83d\udd25 1. Background","text":"<ul> <li>\ud83d\udca1 Origin: YouTube started as a dating site by 3 ex-PayPal employees, which failed and pivoted into a video-sharing platform.</li> <li>\ud83d\udcca Initial DB: Used MySQL to store video titles, descriptions, and user data.</li> <li>\ud83d\udcc8 Scaling Phase:</li> <li>Applied leader-follower replication topology to scale.</li> <li>Issue: Single-threaded replication caused followers to lag during extreme write operations.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/#2-challenges-faced","title":"\ud83d\udd25 2. Challenges Faced","text":"<p>\u2705 1. Sharding: - \ud83d\udee0\ufe0f Need: MySQL was partitioned to handle growing storage needs. - \u26a0\ufe0f Problem:   - Transactions and joins became complex after sharding.   - Application logic had to handle shard routing, increasing the risk of downtime.</p> <p>\u2705 2. Performance: - \ud83d\udd25 Issue:   - Stale data on followers due to replication delays.   - Needed extra logic to route read queries to the leader for fresh data.</p> <p>\u2705 3. Protection: - \ud83d\udd25 Risk:   - Long-running queries and too many MySQL connections could crash the database.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/#3-solution-vitess-mysql","title":"\ud83d\udd25 3. Solution: Vitess MySQL","text":"<p>To simplify and scale, YouTube created Vitess, an abstraction layer on top of MySQL.</p> <p>\u2705 1. VTTablet (Sidecar Server) - \ud83d\udee0\ufe0f Installed sidecar servers in front of each MySQL instance. - \ud83d\udd25 Benefits:   - Control MySQL servers and manage database backups.   - Rewrite expensive queries with a limit clause.   - Cache frequently accessed data to prevent thundering herd problems.</p> <p>\u2705 2. VTGate (Query Router) - \ud83d\udccc Proxy server for routing SQL queries. - \ud83d\udd25 Features:   - Routes queries to the correct VTTablet based on the schema and sharding scheme.   - Uses connection pooling to reduce MySQL connections.   - Speaks MySQL protocol with the application layer.   - Limits concurrent transactions for better performance. - \u2699\ufe0f Scaling:   - Many VTGate servers are deployed for horizontal scaling.</p> <p>\u2705 3. Key-Value Database for State Info - \ud83d\udd25 Purpose:   - Stores schema, sharding schemes, and database roles.   - Manages relationships (leader/follower). - \ud83d\udccc Tech Used:   - Zookeeper for distributed key-value storage.   - VTGate caches this data for improved performance.</p> <p>\u2705 4. VTctld (Configuration Server) - \ud83d\udd25 Function:   - Runs an HTTP server to keep the key-value database updated.   - Maintains the server list and relationships.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/#key-concepts-you-should-know","title":"\u2705 Key Concepts You Should Know","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/#1-leader-follower-replication-in-mysql","title":"\ud83d\udd25 1. Leader-Follower Replication in MySQL","text":"<ul> <li>\ud83d\udccc Replication: Writes go to the leader, and reads are distributed across followers.</li> <li>\ud83d\udd25 Issue: Single-threaded replication causes stale data.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/#2-sharding-challenges-in-mysql","title":"\ud83d\udd25 2. Sharding Challenges in MySQL","text":"<ul> <li>\ud83d\udca1 Definition: Splitting large databases into smaller, manageable pieces.</li> <li>\u26a0\ufe0f Challenges:</li> <li>Complex joins and transactions.</li> <li>Application needs custom logic to route queries.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/#3-thundering-herd-problem","title":"\ud83d\udd25 3. Thundering Herd Problem","text":"<ul> <li>\ud83d\udca1 Definition:</li> <li>Occurs when multiple clients retry failed queries simultaneously.</li> <li>Overloads the database with concurrent requests.</li> <li>\u2699\ufe0f Vitess Solution:</li> <li>Caching frequently accessed data on VTTablet to prevent this.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/2-how-youtube-scaled-mysql-2.49B-users/#4-connection-pooling","title":"\ud83d\udd25 4. Connection Pooling","text":"<ul> <li>\ud83d\udca1 Definition:</li> <li>Reuses existing database connections to improve performance.</li> <li>Reduces the overhead of establishing new connections repeatedly.</li> </ul> <p>\u2705 This covers the Vitess MySQL architecture used by YouTube to handle 2.49 billion users efficiently. Let me know if you need further modifications or more case studies! \ud83d\ude80</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/3-how-uber-finds-drivers-1M-rps/","title":"\ud83d\ude96 How Uber Finds Nearby Drivers at 1M Requests per Second","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/3-how-uber-finds-drivers-1M-rps/#quick-revision-notes-for-google-sse-interview","title":"\ud83d\ude80 Quick Revision Notes for Google SSE Interview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/3-how-uber-finds-drivers-1M-rps/#1-location-indexing","title":"\ud83d\udccc 1. Location Indexing","text":"<p>\u2705 Challenge: Finding nearby drivers using latitude and longitude alone is inefficient.</p> <p>\u2705 Solution: - H3 Library: Hexagonal-shaped hierarchical geospatial indexing system.   - Divides Earth\u2019s surface into hexagonal cells with unique 64-bit integer IDs.   - Uses H3 index to reference specific cells covering the rider's area.</p> <p>\u2705 How H3 Works: - Hierarchical Index:   - Smaller cells \u2192 Higher data resolution \u2192 More storage cost.   - Larger cells \u2192 Lower data resolution \u2192 Less storage cost.   - Hierarchical grid: Combines both by subdividing larger hexagons into smaller ones.   - Global grid: 122 base cells (12 are pentagons, treated as hexagons missing a part).</p> <ul> <li>Hexagonal Grid:</li> <li>Simplifies distance calculation (each neighboring cell equidistant).</li> <li> <p>Avoids extra coefficients needed for triangular or square grids.</p> </li> <li> <p>Hierarchical Algorithms:</p> </li> <li><code>indexing()</code> \u2192 Finds cell using lat, long &amp; resolution.</li> <li><code>kRing()</code> \u2192 Finds neighboring cells around a specific cell.</li> <li>Bitwise operations: Switches between data resolutions efficiently.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/3-how-uber-finds-drivers-1M-rps/#2-location-storage","title":"\ud83d\udccc 2. Location Storage","text":"<p>\u2705 Challenge: Noisy &amp; sparse GPS signals due to poor network.</p> <p>\u2705 Solution: - Map Matching:   - Transforms raw GPS signals \u2192 Actual road segments.</p> <ul> <li>Storage Architecture:</li> <li>Apache Cassandra:<ul> <li>Distributed database optimized for write operations.</li> <li>Stores raw locations for long-term durability.</li> </ul> </li> <li>Redis Cache Layer:<ul> <li>Reduces read operations load on Cassandra.</li> <li>Buffers recent driver locations for map matching.</li> </ul> </li> </ul> <p>\u2705 Workflow: - Driver app sends location \u2192 Server \u2192 Redis caches it \u2192 Map matching \u2192 Stored in Cassandra.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/3-how-uber-finds-drivers-1M-rps/#3-scalability","title":"\ud83d\udccc 3. Scalability","text":"<p>\u2705 Challenge: Scaling read and write operations for 1M requests/sec.</p> <p>\u2705 Solution: - Ringpop:   - Uber\u2019s consistent hash ring module using gossip protocol.   - Embedded in application services.   - Tracks server membership and health status.</p> <ul> <li>Consistent Hash Ring:</li> <li>Forwards requests to responsible servers.</li> <li>Scaling:<ul> <li>Writes \u2192 Add more servers.</li> <li>Reads \u2192 Add replicas.</li> </ul> </li> </ul> <p>\u2705 Communication Protocol: - Thrift over RPC: Efficient inter-service communication. - Idempotency:   - Ensures high availability with retries.   - Backup data center handles failover traffic.</p> <p>\u2705 Result: - Achieves 1M requests/sec with accurate nearby driver retrieval.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/3-how-uber-finds-drivers-1M-rps/#must-know-concepts-for-interviews","title":"\ud83d\ude80 Must-Know Concepts for Interviews","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/3-how-uber-finds-drivers-1M-rps/#1-h3-library-ubers-geospatial-indexing","title":"\ud83d\udd25 1. H3 Library (Uber\u2019s Geospatial Indexing)","text":"<p>\u2705 Key Features: - Hexagonal Grid:   - Uniform distance between neighbors \u2192 Easier distance calculation.   - More efficient than triangular/square grids. - Hierarchical Index:   - Combines high and low data resolution efficiently. - Bitwise Operations:   - Quick switching between resolutions.</p> <p>\u2705 Usage: - Efficiently indexes and retrieves nearby drivers based on location.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/3-how-uber-finds-drivers-1M-rps/#2-ringpop-ubers-consistent-hash-ring","title":"\ud83d\udd25 2. Ringpop (Uber\u2019s Consistent Hash Ring)","text":"<p>\u2705 Key Features: - Consistent Hashing:   - Partitions services for scalability.   - Reduces overhead of rebalancing on server joins/leaves. - Gossip Protocol:   - Tracks server membership and health status. - Fault Tolerance:   - Routes traffic to backup data center during failures.</p> <p>\u2705 Usage: - Handles massive scalability of read/write operations with high availability.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/","title":"\ud83d\ude80 Scaling an App to 10 Million Users on AWS","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#1-prelaunch","title":"\ud83d\udccc 1. Prelaunch","text":"<p>\u2705 Challenge: Launching MVP with minimal cost.</p> <p>\u2705 Solution: - AWS Amplify:   - Static hosting for launch page \u2192 No operational cost. - AWS Lambda:   - Serverless backend \u2192 Runs code without server management.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#2-launch","title":"\ud83d\udccc 2. Launch","text":"<p>\u2705 Challenge: Running the app with a handful of users.</p> <p>\u2705 Solution: - Single EC2 Instance:   - Runs entire web stack (database + backend). - Elastic IP + Route 53:   - Static IP + DNS pointing. - Vertical Scaling:   - Upgraded to larger EC2 instance type \u2192 Risk of single point of failure.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#3-ten-users","title":"\ud83d\udccc 3. Ten Users","text":"<p>\u2705 Challenge: Memory limit reached with a single EC2 instance.</p> <p>\u2705 Solution: - Separate EC2 Instances:   - Backend \u2192 Runs on one EC2 instance.   - Database \u2192 Runs on a larger EC2 instance. - SQL Database:   - Sufficient for handling initial data load with strong community support.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#4-thousand-users","title":"\ud83d\udccc 4. Thousand Users","text":"<p>\u2705 Challenge: Power outage in the availability zone.</p> <p>\u2705 Solution: - Multi-AZ Setup:   - Added server in another AZ. - Database Leader-Follower Replication:   - Leader: Handles write operations.   - Follower: Handles read operations.   - Automatic Failover: Ensures high availability. - Elastic Load Balancer (ELB):   - Balances traffic across AZs.   - Health checks prevent traffic to failed instances.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#5-ten-thousand-users","title":"\ud83d\udccc 5. Ten Thousand Users","text":"<p>\u2705 Challenge: Memory limit reached again.</p> <p>\u2705 Solution: - Stateless Backend:   - Moved session state to ElasticCache (Redis/Memcached). - Horizontal Scaling:   - Added more backend servers behind ELB. - Caching Popular Reads:   - ElasticCache \u2192 Reduced database load. - Static Content to Amazon S3 + CloudFront:   - Offloaded CSS, images, JS.   - CDN (Edge Locations): Reduced latency. - Autoscaling with CloudWatch:   - Adjusts server capacity based on load.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#6-half-a-million-users","title":"\ud83d\udccc 6. Half a Million Users","text":"<p>\u2705 Challenge: Ensuring 99.99% high availability (SLA).</p> <p>\u2705 Solution: - Replication Across AZs:   - Servers replicated across multiple AZs. - DynamoDB for Session Data:   - Managed NoSQL \u2192 Offloaded session data. - Microservices Architecture:   - Services scaled independently. - Layered Load Balancing:   - Added load balancers between each layer. - AWS CloudFormation:   - Infrastructure as code \u2192 Simplified deployment.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#7-ten-million-users","title":"\ud83d\udccc 7. Ten Million Users","text":"<p>\u2705 Challenge: Database writes slowed due to data contention.</p> <p>\u2705 Solution: - Database Federation:   - Split by business domain (e.g., product &amp; user info). - Database Sharding:   - Divided single dataset across multiple servers. - NoSQL for Simple Data:   - Moved non-relational data to DynamoDB. - Multi-Region Scaling:   - Ensured high availability and fault tolerance.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#must-know-concepts-for-interviews","title":"\ud83d\ude80 Must-Know Concepts for Interviews","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#1-vertical-vs-horizontal-scaling","title":"\ud83d\udd25 1. Vertical vs Horizontal Scaling","text":"<p>\u2705 Vertical Scaling: - Upgrading server resources (CPU, RAM). - Limitations:   - Single point of failure.   - Limited scalability.</p> <p>\u2705 Horizontal Scaling: - Adding more servers. - Advantages:   - No single point of failure.   - Infinite scalability (in theory).</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#2-federation-vs-sharding","title":"\ud83d\udd25 2. Federation vs Sharding","text":"<p>\u2705 Federation: - Split data into multiple databases by domain. - Advantages:   - Easy scaling. - Disadvantages:   - Complex cross-domain queries.</p> <p>\u2705 Sharding: - Split single dataset across multiple servers. - Advantages:   - Improved write performance. - Disadvantages:   - Complex application-level joins.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#3-multi-az-multi-region-deployment","title":"\ud83d\udd25 3. Multi-AZ &amp; Multi-Region Deployment","text":"<p>\u2705 Multi-AZ: - Ensures fault tolerance within a region. - Automatic failover.</p> <p>\u2705 Multi-Region: - Ensures global availability. - Load balancing and data replication across regions.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#4-caching-with-elasticcache","title":"\ud83d\udd25 4. Caching with ElasticCache","text":"<p>\u2705 ElasticCache: - In-memory data store (Redis/Memcached). - Reduces database read load. - Improves performance for frequently accessed data.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/4-How-to-Scale-to-10M-Users-AWS/#5-cdn-with-amazon-s3-cloudfront","title":"\ud83d\udd25 5. CDN with Amazon S3 &amp; CloudFront","text":"<p>\u2705 Amazon S3: - Object storage service. - Stores static content (CSS, JS, images).</p> <p>\u2705 CloudFront: - CDN service. - Reduces latency by caching at edge locations.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/","title":"\ud83c\udf10 How Cloudflare Supports 55M Requests/sec With 15 Postgres Clusters","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#1-postgresql-scalability-challenges-solutions","title":"\ud83d\udccc 1. PostgreSQL Scalability Challenges &amp; Solutions","text":"<p>\u2705 Challenge: Expensive Postgres connections &amp; tenant competition.</p> <p>\u2705 Solution: - PgBouncer (Connection Pooling):   - Acts as a TCP proxy holding a pool of connections to Postgres.   - Reduces expensive opening/closing of connections with persistent connections.   - Throttles misbehaving tenants issuing expensive queries.</p> <p>\u2705 Workflow: - Tenant \u2192 PgBouncer \u2192 Postgres (via persistent connections). - Prevents connection starvation.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#2-thundering-herd-problem","title":"\ud83d\udccc 2. Thundering Herd Problem","text":"<p>\u2705 Challenge: - Thundering Herd: When many clients query Postgres concurrently during app redeployment, causing database congestion.</p> <p>\u2705 Solution: - PgBouncer Throttling:   - Limits the number of concurrent Postgres connections.   - Prevents the thundering herd effect.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#3-performance-optimization","title":"\ud83d\udccc 3. Performance Optimization","text":"<p>\u2705 Challenge: - Cloud-hosted Postgres instances have overhead.</p> <p>\u2705 Solution: - Bare Metal Servers:   - No virtualization \u2192 Higher performance. - HAProxy (L4 Load Balancer):   - PgBouncer forwards queries to HAProxy.   - HAProxy load balances traffic across primary &amp; secondary read replicas.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#4-concurrency-management","title":"\ud83d\udccc 4. Concurrency Management","text":"<p>\u2705 Challenge: - Performance degradation due to many concurrent queries.</p> <p>\u2705 Solution: - TCP Vegas Congestion Avoidance Algorithm:   - Samples tenant's transaction round trip time (RTT).   - Increases connection pool size until RTT starts degrading.   - Throttles tenants before resource starvation.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#5-query-prioritization","title":"\ud83d\udccc 5. Query Prioritization","text":"<p>\u2705 Challenge: - Resource starvation caused by expensive queries during peak traffic.</p> <p>\u2705 Solution: - Priority Queueing at PgBouncer Layer:   - Ranks queries based on historical resource consumption.   - Expensive queries moved to the end during peak traffic.   - Improves latency for most queries.</p> <p>\u2705 Note: - Normal Traffic: No starvation; queries processed in order. - Peak Traffic: Expensive queries delayed.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#6-high-availability","title":"\ud83d\udccc 6. High Availability","text":"<p>\u2705 Challenge: - Database downtime &amp; network partitions.</p> <p>\u2705 Solution: - Stolon Cluster Manager:   - Manages PostgreSQL cluster failover.   - Elects Postgres leaders &amp; performs automatic failovers. - Replication Across 2 Regions:   - Writes \u2192 Primary region.   - Asynchronous replication \u2192 Secondary region.   - Reads \u2192 Secondary region. - Chaos Testing:   - Tests connectivity between components.   - Sets up extra network switches &amp; routes to prevent partitions. - pg_rewind Tool:   - Synchronizes clusters by replaying missing writes after failover.</p> <p>\u2705 Result: - Ensures database consistency &amp; resilience.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#must-know-concepts-for-interviews","title":"\ud83d\ude80 Must-Know Concepts for Interviews","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#1-pgbouncer-connection-pooler","title":"\ud83d\udd25 1. PgBouncer (Connection Pooler)","text":"<p>\u2705 Key Features: - Persistent Connections:   - Reduces connection overhead by keeping persistent database connections. - Throttling:   - Limits expensive queries during runtime. - TCP Proxy:   - Acts as an intermediary between tenants and Postgres.</p> <p>\u2705 Usage: - Improves connection efficiency &amp; prevents thundering herd problem.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#2-haproxy-l4-load-balancer","title":"\ud83d\udd25 2. HAProxy (L4 Load Balancer)","text":"<p>\u2705 Key Features: - Traffic Distribution:   - Balances traffic across primary &amp; secondary read replicas. - Efficiency:   - Optimizes traffic flow for high performance.</p> <p>\u2705 Usage: - Ensures even distribution of database queries.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#3-tcp-vegas-congestion-avoidance","title":"\ud83d\udd25 3. TCP Vegas (Congestion Avoidance)","text":"<p>\u2705 Key Features: - Round Trip Time (RTT):   - Samples RTT to determine optimal connection pool size. - Throttling:   - Prevents resource starvation before it occurs.</p> <p>\u2705 Usage: - Maintains optimal performance under high concurrency.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/5-scaling-cloudflare-55m-rps/#4-stolon-cluster-manager","title":"\ud83d\udd25 4. Stolon (Cluster Manager)","text":"<p>\u2705 Key Features: - Failover Management:   - Automatically handles failover and leader election. - Replication:   - Ensures database consistency across multiple regions.</p> <p>\u2705 Usage: - Provides high availability for PostgreSQL clusters.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/6-how-uber-computes-eta-500k-requests-per-second/","title":"\ud83d\ude96 How Uber Computes ETA at 500K Requests per Second","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/6-how-uber-computes-eta-500k-requests-per-second/#1-eta-use-cases","title":"\ud83d\udccc 1. ETA Use Cases","text":"<p>\u2705 Uber computes ETA in 4 scenarios: - Eyeball: When the rider enters a destination in the app. - Dispatch: To find the nearest car with the shortest waiting time. - Pick-up: To estimate the time to pick up the rider. - On-trip: Provides live updates on time to reach the destination.</p> <p>\u2705 Challenge: - A single trip generates around 1000 ETA requests. - Complex street networks \u2192 Not a straight-line distance.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/6-how-uber-computes-eta-500k-requests-per-second/#2-routing-algorithm","title":"\ud83d\udccc 2. Routing Algorithm","text":"<p>\u2705 Challenge: - Uber models the physical map as a graph:   - Nodes: Road intersections.   - Edges: Directed road segments. - Goal: Find the shortest path in the directed, weighted graph.</p> <p>\u2705 Solution: - Dijkstra\u2019s Algorithm:   - Finds the shortest path \u2192 Time complexity: O(n log n).   - Limitation: Inefficient for large maps with 500K+ intersections.</p> <ul> <li>Partitioning &amp; Precomputing:</li> <li>Partition the graph into smaller sections.</li> <li>Precompute the best path within each partition.</li> <li>Use boundary nodes to find the best path between partitions.</li> </ul> <p>\u2705 Complexity Optimization: - Without Partitioning: Time complexity \u2192 \u03c0 \u00d7 r\u00b2 (full graph traversal). - With Partitioning: Time complexity \u2192 2 \u00d7 \u03c0 \u00d7 r (boundary traversal). - Efficiency Gain: Reduced complexity from 500K \u2192 700 nodes.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/6-how-uber-computes-eta-500k-requests-per-second/#3-traffic-information","title":"\ud83d\udccc 3. Traffic Information","text":"<p>\u2705 Challenge: - Road traffic impacts travel time significantly. - Traffic is influenced by:   - Time of day \u23f0   - Weather \ud83c\udf27\ufe0f   - Vehicle density \ud83d\ude97</p> <p>\u2705 Solution: - Traffic-Aware Edge Weights:   - Graph edges are weighted with traffic data.   - Uses both real-time and historical speed information. - Benefit:   - More accurate ETAs due to better traversal data.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/6-how-uber-computes-eta-500k-requests-per-second/#4-map-matching","title":"\ud83d\udccc 4. Map Matching","text":"<p>\u2705 Challenge: - Noisy GPS signals \u2192 Lower ETA accuracy. - Multipath Effect: GPS signals reflect off buildings \u2192 Degraded signal.</p> <p>\u2705 Solution: - Map Matching: Maps raw GPS signals to actual road segments. - Techniques Used:   - Kalman Filter:     - Blends old and new GPS data \u2192 Provides more accurate locations.     - Think of it as an educated guess based on prior data.   - Viterbi Algorithm:     - Finds the most probable road segments \u2192 Dynamic programming approach.     - Works like correcting a misspelled story by looking at nearby words.</p> <p>\u2705 Outcome: - Increased ETA accuracy \u2192 Better user experience.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/6-how-uber-computes-eta-500k-requests-per-second/#must-know-concepts-for-interviews","title":"\ud83d\ude80 Must-Know Concepts for Interviews","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/6-how-uber-computes-eta-500k-requests-per-second/#1-graph-partitioning-for-routing","title":"\ud83d\udd25 1. Graph Partitioning for Routing","text":"<p>\u2705 Key Features: - Graph Representation:   - Nodes: Intersections.   - Edges: Road segments with weighted traffic data. - Partitioning Benefits:   - Reduces traversal complexity.   - Improves routing efficiency.</p> <p>\u2705 Usage: - Optimized pathfinding at massive scale (500K requests/sec).</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/6-how-uber-computes-eta-500k-requests-per-second/#2-traffic-aware-routing","title":"\ud83d\udd25 2. Traffic-Aware Routing","text":"<p>\u2705 Key Features: - Real-time + Historical Traffic Data:   - Improves edge weighting accuracy. - Traffic-aware ETA:   - More accurate time predictions.</p> <p>\u2705 Usage: - Enhances ETA reliability by considering traffic conditions.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/6-how-uber-computes-eta-500k-requests-per-second/#3-map-matching-with-kalman-viterbi-algorithms","title":"\ud83d\udd25 3. Map Matching with Kalman &amp; Viterbi Algorithms","text":"<p>\u2705 Key Features: - Kalman Filter:   - Smoothens noisy GPS data. - Viterbi Algorithm:   - Identifies the most probable road segments. - Accuracy Boost:   - Corrects GPS errors caused by tunnels or signal reflection.</p> <p>\u2705 Usage: - Increases ETA precision by mapping raw GPS signals to road segments.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/7-How_Tinder_Scaled_to_1.6_Billion_Swipes_Per_Day/","title":"\ud83d\udd25 How Tinder Scaled to 1.6 Billion Swipes per Day","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/7-How_Tinder_Scaled_to_1.6_Billion_Swipes_Per_Day/#1-user-profile-creation-location-indexing","title":"\ud83d\udccc 1. User Profile Creation &amp; Location Indexing","text":"<p>\u2705 Challenge: Efficiently indexing user locations and handling profile changes.</p> <p>\u2705 Solution: - Profile Creation:   - User info stored in Amazon DynamoDB (key-value database).   - Dynamo Streams pushes changes automatically to relevant services.   - Message Queue updates the location index.</p> <ul> <li>Location Indexing:</li> <li>S2 Library: Square-shaped hierarchical geospatial indexing system by Google.</li> <li>Divides Earth into cells with unique 64-bit IDs.</li> <li>Hilbert Curve: Preserves spatial locality, reducing shard lookups.</li> <li>Database Sharding: Nearby users stored in the same shard \u2192 Fewer queries.</li> </ul> <p>\u2705 Workflow: 1. User profile created \u2192 Added to DynamoDB \u2192 Changes streamed. 2. Location index updated \u2192 Nearby users efficiently queried.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/7-How_Tinder_Scaled_to_1.6_Billion_Swipes_Per_Day/#2-real-time-recommendations-matches","title":"\ud83d\udccc 2. Real-time Recommendations &amp; Matches","text":"<p>\u2705 Challenge: Real-time matching and swipe handling.</p> <p>\u2705 Solution: - Swipe Handling:   - Amazon Kinesis: Streams swipe events.   - Match Workers: Read the data stream and check for matches in the Likes Cache.</p> <ul> <li>Matching:</li> <li>WebSockets: Real-time, bidirectional communication.</li> <li> <p>Instantly notifies users when a match occurs.</p> </li> <li> <p>Disliked Profiles:</p> </li> <li>Stored in Amazon S3 for analytics and improved recommendations.</li> </ul> <p>\u2705 Workflow: 1. Swipe \u2192 Streamed to Kinesis \u2192 Match checked in Likes Cache. 2. Match found \u2192 WebSockets notify both users instantly.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/7-How_Tinder_Scaled_to_1.6_Billion_Swipes_Per_Day/#3-location-change-kafka-for-ordering","title":"\ud83d\udccc 3. Location Change &amp; Kafka for Ordering","text":"<p>\u2705 Challenge: Ensuring consistent location updates despite ordering issues.</p> <p>\u2705 Solution: - Location Change:   - Users can switch locations (e.g., via Tinder Passport).   - Index updated to reflect new location \u2192 Added to new location index.</p> <ul> <li>Ordering Issue:</li> <li>Apache Kafka: Ensures ordering consistency with FIFO queue.</li> <li>User data sent to the same Kafka partition \u2192 Consistent ordering.</li> <li>Kafka consumers acquire locks to avoid contention.</li> <li>Checkpointing: Enables processing to resume after crashes.</li> </ul> <p>\u2705 Workflow: 1. Location update \u2192 Kafka ensures ordered execution. 2. Consumers acquire locks \u2192 Avoid contention \u2192 Ordered execution.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/7-How_Tinder_Scaled_to_1.6_Billion_Swipes_Per_Day/#4-caching-hot-shard-prevention","title":"\ud83d\udccc 4. Caching &amp; Hot Shard Prevention","text":"<p>\u2705 Challenge: Preventing hot shard problems due to uneven traffic distribution.</p> <p>\u2705 Solution: - Hot Shard Prevention:   - S2 Library: Shards the database by geographical location.   - Randomly assigns multiple shards to the same physical server \u2192 Prevents overload.</p> <ul> <li>Caching:</li> <li>Redis Cache: Solves the read hot shard problem.</li> <li>Cache-aside pattern:<ul> <li>Data fetched from cache \u2192 If absent \u2192 Fetch from DB \u2192 Update cache.</li> </ul> </li> <li>Rate limiting: Handles the write hot shard problem.</li> </ul> <p>\u2705 Workflow: 1. Query \u2192 Check Redis Cache. 2. Cache hit \u2192 Serve data. 3. Cache miss \u2192 Query DB \u2192 Update Redis.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/7-How_Tinder_Scaled_to_1.6_Billion_Swipes_Per_Day/#must-know-concepts-for-interviews","title":"\ud83d\ude80 Must-Know Concepts for Interviews","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/7-How_Tinder_Scaled_to_1.6_Billion_Swipes_Per_Day/#1-s2-library-googles-geospatial-indexing","title":"\ud83d\udd25 1. S2 Library (Google\u2019s Geospatial Indexing)","text":"<p>\u2705 Key Features: - Square-shaped hierarchical grid:   - Efficient geospatial indexing.   - Preserves spatial locality \u2192 Nearby cells are physically close. - Hilbert Curve:   - Maps 2D points to 1D space \u2192 Reduces lookup overhead.   - Ensures spatial locality preservation. - Database Sharding:   - Nearby users stored in the same shard \u2192 Fewer lookups.</p> <p>\u2705 Usage: - Efficiently indexes and retrieves nearby users.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/7-How_Tinder_Scaled_to_1.6_Billion_Swipes_Per_Day/#2-apache-kafka-ordered-execution","title":"\ud83d\udd25 2. Apache Kafka (Ordered Execution)","text":"<p>\u2705 Key Features: - FIFO Queue:   - Ensures ordering consistency.   - Same data \u2192 Same partition \u2192 Consistent ordering. - Consumer Locks:   - Kafka consumers acquire locks \u2192 Prevents contention. - Checkpointing:   - Enables processing to resume after crashes.</p> <p>\u2705 Usage: - Guarantees ordered location updates and handles large-scale streaming data.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/7-How_Tinder_Scaled_to_1.6_Billion_Swipes_Per_Day/#3-redis-cache-hot-shard-prevention","title":"\ud83d\udd25 3. Redis Cache (Hot Shard Prevention)","text":"<p>\u2705 Key Features: - Cache-aside Pattern:   - Cache lookup first \u2192 DB lookup on miss \u2192 Cache updated. - Rate Limiting:   - Prevents write hot shard issues.</p> <p>\u2705 Usage: - Improves read performance and prevents hot shard problems.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/","title":"\ud83d\ude80 Quick Revision for Google SSE Interview: Meta's 10-Nines Cache Consistency","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#how-meta-achieves-9999999999-cache-consistency","title":"\ud83c\udfaf How Meta Achieves 99.99999999% Cache Consistency","text":"<p>Why it matters: - Avoiding coordination between distributed components is key to scaling. - Caching minimizes database load, so cache correctness becomes critical.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#background","title":"\ud83d\udcdc Background","text":"<ul> <li>Early Facebook used a simple PHP &amp; MySQL stack.</li> <li>As users grew, they added distributed caching to solve scalability.</li> <li>However, maintaining fresh cache data became challenging due to race conditions.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#race-condition-problem","title":"\u26a0\ufe0f Race Condition Problem","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#sequence","title":"\ud83e\udde9 Sequence:","text":"<ol> <li>Client queries the cache \u2192 cache miss.</li> <li>Cache queries DB \u2192 gets <code>x = 0</code>.</li> <li>DB updates <code>x = 1</code> before cache sets <code>x = 0</code>.</li> <li>Invalidation <code>x = 1</code> reaches cache.</li> <li>But then outdated <code>x = 0</code> is written \u2192 cache inconsistency.</li> </ol> <p>\u27a1\ufe0f Result: Cache = <code>0</code>, DB = <code>1</code> \u21d2 Stale data served!</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#cache-consistency-at-scale","title":"\ud83c\udf10 Cache Consistency at Scale","text":"<ul> <li>Meta now serves 10\u00b9\u2075 (quadrillion) requests/day.</li> <li>Even 1% inconsistency \u2192 10 trillion stale responses/day.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#metas-observability-driven-solution","title":"\ud83e\udde0 Meta\u2019s Observability-Driven Solution","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#1-monitoring-with-polaris","title":"1. \ud83d\udcc8 Monitoring with Polaris","text":"<ul> <li>Acts as a pseudo-cache server to detect inconsistencies.</li> <li>Workflow:<ul> <li>Listens to cache invalidation events.</li> <li>Queries actual caches to compare values.</li> <li>Queues inconsistent servers for later re-checks.</li> <li>Periodically queries DB (1, 5, or 10 mins) to reduce load.</li> <li>Uses a separate invalidation stream to avoid network partition issues.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#2-tracing-with-lightweight-logs","title":"2. \ud83d\udd0e Tracing with Lightweight Logs","text":"<ul> <li>Logs only the race window when cache inconsistency is likely.</li> <li>Indexes recently modified data to optimize log storage.</li> <li>Polaris:<ul> <li>Checks logs on inconsistency detection.</li> <li>Sends alerts if logs exist or infers missed invalidation if absent.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#bottom-line","title":"\ud83e\uddf5 Bottom Line","text":"<ul> <li>Polaris finds when inconsistency happens.</li> <li>Tracing identifies why it happened.</li> <li>Achieves 10 nines consistency = 1 stale write per 10B writes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#must-know-concepts-for-interviews","title":"\ud83d\udca1 Must-Know Concepts for Interviews","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#1-cache-invalidation-race-condition","title":"\ud83d\udccc 1. Cache Invalidation Race Condition","text":"<ul> <li>Happens when cache and DB updates are out-of-order.</li> <li>Leads to stale values in cache.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#2-observability-in-distributed-systems","title":"\ud83d\udccc 2. Observability in Distributed Systems","text":"<ul> <li>Use monitoring tools like Polaris to detect inconsistencies.</li> <li>Use tracing/logging to debug inconsistencies without full write logs.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#3-graceful-db-backoff-strategies","title":"\ud83d\udccc 3. Graceful DB Backoff Strategies","text":"<ul> <li>Query DB at scalable intervals (1, 5, 10 mins) to prevent overload.</li> <li>Balance accuracy with resource usage.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#4-event-streams-partition-tolerance","title":"\ud83d\udccc 4. Event Streams &amp; Partition Tolerance","text":"<ul> <li>Use separate event channels to mitigate network issues.</li> <li>Ensures critical events like invalidations still reach observability tools.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/8-meta-cache-architecture/#5-race-window-logging","title":"\ud83d\udccc 5. Race Window Logging","text":"<ul> <li>Trace only during sensitive windows to reduce noise.</li> <li>Optimize for read-heavy, write-light cache environments.</li> </ul> <p>\ud83e\udde0 Pro Tip: These techniques are applicable beyond Meta \u2014 any system with distributed caches (like Redis, Memcached) can benefit from lightweight tracing + smart monitoring.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/","title":"\ud83d\udcf9 Zoom Architecture \u2013 Quick Revision Notes for Google SSE Interview","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#1-video-streaming","title":"\u2699\ufe0f 1. Video Streaming","text":"<ul> <li> <p>\ud83c\udfaf Adaptive Streaming:</p> <ul> <li>Adjusts resolution based on device type and network bandwidth.</li> <li>Not scalable to send different streams for each resolution.</li> </ul> </li> <li> <p>\ud83e\uddf1 Scalable Video Coding (SVC):</p> <ul> <li>Sends a single video stream split into hierarchical layers.</li> <li>\ud83d\udce6 Lower layers = basic resolution; Upper layers = high-res details.</li> <li>\ud83c\udfaf Client decodes only layers suitable for it \u2192 Efficient + Scalable.</li> </ul> </li> </ul> <p>\u2705 Benefits: - Reduces bandwidth usage \ud83d\udcc9. - Reduces server CPU usage \ud83e\udde0. - Achieves low latency \u26a1.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#2-video-processing","title":"\ud83e\udde0 2. Video Processing","text":"<ul> <li>\ud83d\udca1 Separation of video stream processing and routing.</li> <li>\ud83e\udde9 Clients process the streams.</li> <li>\ud83d\udd04 Servers just route the streams \u2192 avoids heavy processing on servers.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#3-video-routing","title":"\ud83d\udd00 3. Video Routing","text":"<ul> <li>\ud83d\udce4 Each participant sends a separate video stream.</li> <li>\ud83d\udce5 Client decodes incoming streams.</li> <li>\u274c No transcoding on the server \u2192 saves compute.</li> </ul> <p>\u2705 Uses Multimedia Routers: - Picks best network path between call participants. - Ensures low latency and high reliability.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#4-monitoring-quality-of-service-qos","title":"\ud83d\udcca 4. Monitoring Quality of Service (QoS)","text":"<ul> <li> <p>\ud83d\udcf1 Zoom client monitors:</p> <ul> <li>Packet loss \ud83d\udcc9</li> <li>Latency \u23f1\ufe0f</li> </ul> </li> <li> <p>\ud83e\udde0 Uses proprietary algorithms to:</p> <ul> <li>Optimize video stream \ud83d\udd04</li> <li>Enhance user experience \ud83c\udfaf</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#5-network-awareness","title":"\ud83c\udf10 5. Network Awareness","text":"<ul> <li>\u26a1 Uses UDP for fast, lightweight data delivery.</li> <li> <p>\ud83d\udd04 Fallback protocols: TCP, HTTPS, HTTP.</p> </li> <li> <p>\ud83d\udc65 Peer-to-Peer connection:</p> <ul> <li>Used for 2-person calls.</li> <li>\ud83d\udeab Avoids server load.</li> <li>\u2705 Ensures low latency.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#zoom-infrastructure","title":"\ud83c\udfd7\ufe0f Zoom Infrastructure","text":"<ul> <li>\ud83e\udde9 Client-Server Architecture</li> <li>\u2601\ufe0f Hosted on Amazon Web Services (AWS)</li> <li> <p>\ud83d\udef0\ufe0f Client connects to closest data center</p> </li> <li> <p>\ud83e\uddf1 Meeting Zones:</p> <ul> <li>Servers grouped per zone.</li> <li>Zone Controller manages intra-zone activity.</li> </ul> </li> </ul> <p>\u2705 Designed for simplicity, efficiency, and scalability.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#must-know-concepts","title":"\ud83d\udca1 Must-Know Concepts","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#scalable-video-coding-svc","title":"\ud83d\udd36 Scalable Video Coding (SVC)","text":"<ul> <li>Breaks video into layers based on resolution.</li> <li>Helps in adaptive streaming without duplicating streams.</li> <li>Saves bandwidth &amp; compute.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#multimedia-routing","title":"\ud83d\udd37 Multimedia Routing","text":"<ul> <li>Sends individual streams.</li> <li>Avoids server-side transcoding.</li> <li>Ensures efficient low-latency video delivery.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#client-side-processing","title":"\ud83d\udd36 Client-Side Processing","text":"<ul> <li>Offloads video decoding &amp; optimization to client.</li> <li>Makes servers lightweight &amp; scalable.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#udp-with-fallback-protocols","title":"\ud83d\udd37 UDP with Fallback Protocols","text":"<ul> <li>UDP for speed.</li> <li>Fallback to TCP/HTTPS/HTTP for reliability.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/9-zoom-scaling-strategies/#meeting-zones-zone-controller","title":"\ud83d\udd36 Meeting Zones + Zone Controller","text":"<ul> <li>Logical separation of servers for call management.</li> <li>Helps in distributed scalability.</li> </ul> <p>\ud83e\udde0 Perfect quick review before system design interviews! Let me know if you'd like the PDF or add illustrations to this!</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/","title":"\ud83d\udcda System Design Case Studies","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#master-system-design","title":"\ud83d\ude80 Master System Design","text":"<p>\u2705 Real-World Case Studies with links to scalable architectures used by top tech companies.</p>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#short-case-studies","title":"\ud83d\udd25 Short Case Studies","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#1-how-stripe-prevents-double-payments-using-idempotent-api","title":"\ud83c\udf1f 1. How Stripe Prevents Double Payments Using Idempotent API","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#2-how-youtube-supports-249-billion-users-with-mysql","title":"\ud83c\udf1f 2. How YouTube Supports 2.49 Billion Users With MySQL","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#3-how-uber-finds-nearby-drivers-at-1m-requests-per-second","title":"\ud83c\udf1f 3. How Uber Finds Nearby Drivers at 1M Requests per Second \ud83d\ude96","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> <li>\ud83d\udd39 H3 Library:</li> <li>H3 is a discrete global grid system for geospatial indexing.</li> <li>Divides Earth's surface into cells with unique 64-bit integer identifiers.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#4-scaling-an-app-to-10-million-users-on-aws","title":"\ud83c\udf1f 4. Scaling an App to 10 Million Users on AWS","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#5-how-cloudflare-handles-55m-requests-per-second-with-15-postgres-clusters","title":"\ud83c\udf1f 5. How Cloudflare Handles 55M Requests per Second With 15 Postgres Clusters \ud83c\udf10","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#6-how-uber-computes-eta-at-500k-requests-per-second","title":"\ud83c\udf1f 6. How Uber Computes ETA at 500K Requests per Second \u23f3","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#7-how-tinder-scaled-to-16-billion-swipes-per-day","title":"\ud83c\udf1f 7. How Tinder Scaled to 1.6 Billion Swipes per Day \u2764\ufe0f","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#8-how-meta-achieves-9999999999-cache-consistency","title":"\ud83c\udf1f 8. How Meta Achieves 99.99999999% Cache Consistency \ud83c\udfd7\ufe0f","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#9-zoom-architecture","title":"\ud83c\udf1f 9. Zoom Architecture \ud83d\udcf9","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#10-how-amazon-s3-achieves-99999999999-durability","title":"\ud83c\udf1f 10. How Amazon S3 Achieves 99.999999999% Durability \u2601\ufe0f","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#11-how-paypal-handles-1b-transactionsday-with-just-8-vms","title":"\ud83c\udf1f 11. How PayPal Handles 1B Transactions/Day With Just 8 VMs \ud83d\udcb8","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#12-how-google-ads-scales-to-477b-users-with-sql","title":"\ud83c\udf1f 12. How Google Ads Scales to 4.77B Users With SQL \ud83d\udd0d","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#13-how-whatsapp-supports-50b-messagesday-with-just-32-engineers","title":"\ud83c\udf1f 13. How WhatsApp Supports 50B Messages/Day With Just 32 Engineers \ud83d\udcac","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#14-redis-use-cases","title":"\ud83c\udf1f 14. Redis Use Cases \u26a1","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#15-every-backend-engineer-needs-to-know-how-to-deal-with-payments","title":"\ud83c\udf1f 15. Every Backend Engineer needs to know how to deal with payments \ud83d\udcb3","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#16-how-do-websockets-work","title":"\ud83c\udf1f 16. How Do Websockets Work? \ud83c\udf10","text":"<ul> <li>\ud83d\udca1 Insights &amp; Learnings</li> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#long-case-studies","title":"\ud83d\udd25 Long Case Studies \ud83d\ude96","text":""},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#1-pastebin-architecture","title":"\ud83c\udf1f 1. Pastebin Architecture \ud83d\ude96","text":"<ul> <li>\ud83d\udccc Read here</li> <li>\ud83d\udd39 Key Generation Service (KGS)</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#2-gaming-leaderboard-architecture","title":"\ud83c\udf1f 2. Gaming Leaderboard Architecture \ud83c\udfae \ud83d\ude96","text":"<ul> <li>\ud83d\udccc Read here</li> <li>\ud83d\udd39 Caching Strategies: How to Choose the Right One</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#3-slack-architecture","title":"\ud83c\udf1f 3. Slack Architecture \ud83d\udcac \ud83d\ude96","text":"<ul> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#4-distributed-counter-architecture","title":"\ud83c\udf1f 4. Distributed Counter Architecture","text":"<ul> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#5-what-is-a-modular-monolith","title":"\ud83c\udf1f 5. What is a Modular Monolith? \ud83c\udfd7\ufe0f","text":"<ul> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#0-system-design-interview-cheat-sheet","title":"\ud83c\udf1f 0. System Design Interview Cheat Sheet","text":"<ul> <li>\ud83d\udccc Read here</li> <li>\ud83d\udd39 Software Engineer Interview Learning Resources: Read Here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/HLD-Interview-Questions/Case-Study-HLD/cs-index/#0-88-resources-i-dont-regret-as-a-senior-software-engineer","title":"\ud83c\udf1f 0. 88+ Resources I Don't Regret as a Senior Software Engineer \ud83d\udcda","text":"<ul> <li>\ud83d\udccc Read here</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/","title":"\ud83c\udfae Level Design Patterns","text":"<p>Welcome to the repository of Low-easy.Level Design Patterns! This repository explores various design patterns categorized under Creational, Structural, and Behavioral patterns. \ud83c\udf1f</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/#creational-patterns","title":"\ud83c\udfd7\ufe0f Creational Patterns","text":"<ol> <li>\ud83d\udd01 Singleton</li> <li>\ud83e\uddfa Object Pool</li> <li>\ud83c\udfed Factory Method</li> <li>\ud83e\uddf0 Abstract Factory</li> <li>\ud83e\uddf1 Builder</li> <li>\ud83e\uddec Prototype</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/#structural-patterns","title":"\ud83e\udde9 Structural Patterns","text":"<ol> <li>\ud83d\udd0c Adapter</li> <li>\ud83c\udf09 Bridge</li> <li>\ud83c\udf33 Composite</li> <li>\ud83c\udfa8 Decorator</li> <li>\ud83c\udff0 Facade</li> <li>\ud83e\udeb6 Flyweight</li> <li>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proxy</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/#behavioral-patterns","title":"\ud83e\udde0 Behavioral Patterns","text":"<ol> <li>\u26d3\ufe0f Chain of Responsibility</li> <li>\ud83d\udd79\ufe0f Command</li> <li>\ud83d\udde3\ufe0f Interpreter</li> <li>\ud83d\udd01 Iterator</li> <li>\ud83e\udded Mediator</li> <li>\ud83e\udde0 Memento</li> <li>\ud83d\udc41\ufe0f Observer</li> <li>\ud83d\udd04 State</li> <li>\ud83e\uddee Strategy</li> <li>\ud83d\udcdd Template Method</li> <li>\ud83d\udeab Null Object</li> <li>\ud83e\uddf3 Visitor</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/#repository-links","title":"\ud83d\udd17 Repository Links","text":"<ul> <li>\ud83d\udcd8 Design Pattern for Interview</li> <li>\ud83e\uddd1\u200d\ud83d\udcbb GitHub Repository: LLD Repository on GitHub</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/","title":"Design patterns interview summary","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#design-patterns-for-faanggoogle-level-interviews-java-focus","title":"\ud83c\udfaf Design Patterns for FAANG/Google-Level Interviews (Java Focus)","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#creational-patterns","title":"\ud83d\udce6 Creational Patterns","text":"Pattern Importance Key Use Case Notes Singleton \u2705 Must Know Global state, DB connection, config manager Thread safety &amp; lazy loading matter Factory Method \u2705 Must Know Object creation with abstraction Promotes loose coupling Abstract Factory \u2705 Must Know Cross-platform object creation Creates families of related objects Builder \u2705 Must Know Construct complex objects step-by-step Fluent interface, immutability Prototype \ud83d\udc4c Optional Cloning objects Risky in Java due to <code>clone()</code> Object Pool \ud83d\udc4c Optional Reuse costly objects like DB connections Rare in modern garbage-collected env"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#structural-patterns","title":"\ud83c\udfd7\ufe0f Structural Patterns","text":"Pattern Importance Key Use Case Notes Adapter \u2705 Must Know Interface mismatch handling (legacy support) Example: <code>java.util.Enumeration</code> Decorator \u2705 Must Know Add behavior dynamically Used in Java I/O streams Proxy \u2705 Must Know Lazy loading, access control, caching Remote Proxy, Virtual Proxy Facade \u2705 Must Know Simplify complex systems Good for subsystem encapsulation Composite \ud83d\udc4c Optional Tree structures (file systems, menus) Recursive structure Bridge \ud83d\udc4c Optional Decouple abstraction from implementation Rare but useful in UI frameworks Flyweight \ud83d\udc4c Optional Memory optimization via shared instances Used in games, text rendering"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#behavioral-patterns","title":"\ud83e\udd1d Behavioral Patterns","text":"Pattern Importance Key Use Case Notes Observer \u2705 Must Know Event systems, pub-sub UI frameworks, microservices Strategy \u2705 Must Know Replace if-else with polymorphism Sorting strategies, payment methods Template Method \u2705 Must Know Base algorithm with extensible steps Subclass custom steps Chain of Responsibility \u2705 Must Know Request pipelines, middleware Servlet filters, validation chains Command \u2705 Must Know Queueable, undoable actions UI commands, macro recording State \u2705 Must Know FSMs like ATM or traffic signals Clean state transitions Mediator \ud83d\udc4c Optional Centralized communication handler Chat systems, air traffic control Iterator \ud83d\udc4c Optional Collection traversal Already part of Java Collections Memento \ud83d\udc4c Optional Undo mechanisms Snapshot of object state Interpreter \ud83d\udc4c Optional Expression evaluators, DSLs Rare unless building language tools Null Object \ud83d\udc4c Optional Avoid null checks Safe default behavior Visitor \ud83d\udc4c Optional Operation on object structures Compiler AST traversal"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#recommended-study-order","title":"\ud83d\udcda Recommended Study Order","text":"<ol> <li>Creational \u27a1\ufe0f Singleton \u2192 Factory \u2192 Abstract Factory \u2192 Builder</li> <li>Structural \u27a1\ufe0f Adapter \u2192 Decorator \u2192 Proxy \u2192 Facade</li> <li>Behavioral \u27a1\ufe0f Observer \u2192 Strategy \u2192 Template Method \u2192 Chain of Responsibility \u2192 Command \u2192 State</li> <li>Optional Review \u27a1\ufe0f Remaining less-common patterns if time allows</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#flashcard-summary-table-interview-level","title":"\ud83c\udfaf Flashcard Summary Table (Interview-Level)","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#creational-patterns_1","title":"\ud83d\udce6 Creational Patterns","text":"\ud83e\uddf1 Pattern \ud83d\udd0d Definition \ud83d\udee0\ufe0f Use Case \ud83d\udca1 Key Concepts \u2705 Interview Tip Singleton Ensures a class has only one instance Configs, Logging, DB Connections Private constructor, static instance Know thread-safe lazy init (double-checked locking) Factory Method Creates objects without specifying the exact class Reader apps, shape factories Interface-driven creation Explain open/closed principle Abstract Factory Produces families of related objects Cross-platform GUI toolkits Multiple factory methods Distinguish from Factory Method Builder Builds complex objects step-by-step HTML builders, Pizza builder Fluent API, optional fields Use when constructors become messy Prototype Clones objects using a template instance Games, deep copies <code>clone()</code> pitfalls in Java Not frequently asked Object Pool Reuses objects instead of creating new ones DB connections, thread pools Lifecycle control Mention in performance-sensitive systems"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#structural-patterns_1","title":"\ud83c\udfd7\ufe0f Structural Patterns","text":"\ud83e\uddf1 Pattern \ud83d\udd0d Definition \ud83d\udee0\ufe0f Use Case \ud83d\udca1 Key Concepts \u2705 Interview Tip Adapter Converts interface of one class into another Legacy system support Class/Object adapter Java example: <code>InputStreamReader</code> Decorator Adds responsibilities dynamically Java I/O Streams Composition &gt; inheritance Explain how it avoids subclass explosion Proxy Placeholder for another object Lazy init, security, remote calls Access control, caching Talk about Virtual/Remote/Protection proxy types Facade Simplifies complex subsystems API gateway, subsystem encapsulation One simple interface Common in system design Composite Treat group of objects as a single object File systems, UI components Tree-like structure Recursive design pattern Bridge Decouples abstraction from implementation UI skins, devices Interface separation Useful in scalable UI components Flyweight Shares objects to reduce memory usage Text editors, games (bullets) Intrinsic vs Extrinsic state Rare, but shows memory optimization technique"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#behavioral-patterns-observer-focused","title":"\ud83e\udd1d Behavioral Patterns (Observer-Focused)","text":"\ud83e\uddf1 Pattern \ud83d\udd0d Definition \ud83d\udee0\ufe0f Use Case \ud83d\udca1 Key Concepts \u2705 Interview Tip Observer One-to-many dependency updates automatically Event systems, GUI, pub-sub Subject + Observer Implement custom observer instead of using deprecated Java APIs Strategy Encapsulates interchangeable behaviors Sorting, payment methods Interface-driven behavior Replaces conditional logic Template Method Skeleton of algorithm with customizable steps Game loops, report generation Abstract base class Show base template + overridable hooks Chain of Responsibility Pass request along a chain until handled Servlet filters, validation chains Linked handler chain Compare with decorator Command Encapsulates actions as objects GUI actions, undo-redo Action queue, invoker Decouple sender from receiver State Allows an object to alter behavior when state changes ATMs, UI workflows State transitions Clean alternative to complex conditionals Mediator Central controller for object communication Chat apps, air traffic control Reduces coupling Contrast with Observer"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/design_patterns_interview_summary/#pro-tips","title":"\u2705 Pro Tips","text":"<ul> <li>Use UML + Java Code + Real-world Analogy per pattern</li> <li>Prioritize problem-solution understanding over memorization</li> <li>Focus on applicability in system design questions</li> </ul> <p>\ud83e\udde0 Want a flashcard format or UML diagrams for top patterns? Just ask!</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/","title":"Behavioral Design Patterns","text":"<p>Behavioral design patterns are concerned with the interaction and responsibility between objects. These patterns help define how objects communicate and collaborate, promoting effective communication and reducing dependencies.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/#real-life-example","title":"Real-Life Example","text":"<p>Consider a customer service system where requests are handled by different departments (technical support, billing, etc.). Behavioral patterns facilitate the delegation of requests among the departments, ensuring efficient handling of customer inquiries.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Chain of Responsibility</li> <li>Command</li> <li>Interpreter</li> <li>Iterator</li> <li>Mediator</li> <li>Memento</li> <li>Observer</li> <li>State</li> <li>Strategy</li> <li>Template Method</li> <li>Null Object</li> <li>Visitor</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/#behavioral-patterns-overview","title":"Behavioral Patterns Overview","text":"Pattern Name Why and When to Use Real Life Example Chain of Responsibility When you want to pass a request along a chain of handlers. Customer Support System Command Encapsulates a request as an object, allowing for parameterization and queuing. Remote Control Commands Interpreter Provides a way to evaluate sentences in a language. SQL Interpreter Iterator Allows sequential access to elements in a collection without exposing its underlying representation. Java Collections Framework Mediator Centralizes complex communication between objects. Air Traffic Control Memento Captures and externalizes an object's internal state without violating encapsulation. Text Editor Undo Feature Observer Defines a one-to-many dependency between objects to notify them of state changes. Weather Monitoring System State Allows an object to change its behavior when its internal state changes. Traffic Light System Strategy Defines a family of algorithms and makes them interchangeable. Sorting Algorithms Template Method Defines the skeleton of an algorithm, deferring some steps to subclasses. Game Development Null Object Uses a special object to represent the absence of an object. Logging System Visitor Lets you define a new operation without changing the classes of the elements on which it operates. Object Structure Operations"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/#repository-links","title":"Repository Links","text":"<ul> <li>GitHub Repository</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/","title":"Chain of Responsibility Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#key-components","title":"Key Components:","text":"<pre><code>                                  +-----------------------------+\n                                  |      Abstract Handler       |\n                                  |     (LogProcessor in our    |\n                                  |     logger example)         |\n                                  +-----------------------------+\n                                               |\n                                               v\n                     +-------------------------+-------------------------+\n                     |                                                   |\n        +-----------------------------+                       +-----------------------------+\n        |    Concrete Handler A       |                       |    Concrete Handler B       |\n        |   (InfoLogProcessor)        |                       |   (ErrorLogProcessor)       |\n        +-----------------------------+                       +-----------------------------+\n                     |                                                   |\n                     v                                                   v\n         +--------------------------+                        +---------------------------+\n         |   Concrete Handler C     |                        |    Chain Ends/Next        |\n         |   (DebugLogProcessor)    |                        |    (null if last handler) |\n         +--------------------------+                        +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#logger-example","title":"Logger Example:","text":"<ul> <li>The <code>LogProcessor</code> (abstract handler) processes log messages.</li> <li><code>InfoLogProcessor</code>, <code>ErrorLogProcessor</code>, and <code>DebugLogProcessor</code> are concrete handlers.</li> <li>A log message is passed down the chain; each handler checks if it can process the log. If it cannot, it forwards it to the next handler in the chain.</li> <li>Example: Info logs are processed by <code>InfoLogProcessor</code>, Error logs by <code>ErrorLogProcessor</code>, and Debug logs by <code>DebugLogProcessor</code>.</li> <li>Log request <code>log(LogProcessor.INFO, \"Info message\")</code> is handled by the <code>InfoLogProcessor</code>.</li> <li>Log request <code>log(LogProcessor.ERROR, \"Error message\")</code> is passed down to the <code>ErrorLogProcessor</code>.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#atm-withdrawal-example","title":"ATM Withdrawal Example:","text":"<ul> <li>In an ATM, the request handler chain consists of different denomination handlers (like 100, 500, and 2000 rupees).</li> <li>If the withdrawal amount can be fulfilled by a particular handler (e.g., 2000 rupees), it processes it; otherwise, it forwards it to the next handler in the chain.</li> <li>Example: For a withdrawal request of \u20b95,600, the 2000 rupee handler processes 2 notes, the 500 handler processes 3 notes, and the 100 handler processes 1 note.</li> <li>If a user requests \u20b95,600, the handler chain processes it as:</li> <li>2 notes of \u20b92000</li> <li>3 notes of \u20b9500</li> <li>1 note of \u20b9100</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#logging-frameworks","title":"Logging Frameworks:","text":"<ul> <li>Log messages are passed through multiple log processors (Info, Error, Debug) in sequence. Each processor decides whether to log the message or pass it to the next processor in the chain.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#atm-machines","title":"ATM Machines:","text":"<ul> <li>Different handlers are responsible for dispensing various denominations of currency. The request is passed along until the correct handler processes it.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#request-handlers-in-web-frameworks","title":"Request Handlers in Web Frameworks:","text":"<ul> <li>Middleware in web servers (like request parsers, authentication, and logging) often follows a chain where requests are passed through handlers until they are fully processed.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The client doesn't need to know the exact handler that will process the request. The request can be handled dynamically by whichever handler is appropriate.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#loose-coupling","title":"Loose Coupling:","text":"<ul> <li>Handlers don't need to know about each other; they only know the next handler in the chain, adhering to the Single Responsibility Principle.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#maintainability","title":"Maintainability:","text":"<ul> <li>New handlers can be added easily to the chain without modifying the existing code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>Separation of Concerns: Each handler deals with one specific task and forwards unhandled requests down the chain.</li> <li>Dynamic Behavior: You can add, remove, or rearrange handlers in the chain to modify system behavior without changing the client code.</li> <li>Scalability: The pattern allows for easy expansion of responsibilities with minimal code changes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ChainResponsibilityPattern/#example-flowchart-logger-example","title":"Example Flowchart (Logger Example):","text":"<pre><code>        +-----------------------------------+\n        | Create LogProcessor chain:        |\n        | Info -&gt; Error -&gt; Debug            |\n        +-----------------------------------+\n        |\n        v\n        +----------------------------+\n        | Call log() on LogProcessor  |\n        +----------------------------+\n        |\n        +-----------+-----------+\n        |           |           |\n        [INFO]      [ERROR]     [DEBUG]\n        Log         Log         Log\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/","title":"Command Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#key-components","title":"Key Components:","text":"<pre><code>                            +---------------------------+\n                            |        Client (Main)      |\n                            +---------------------------+\n                                          |\n                                          v\n                            +----------------------------+          \n                            |        Invoker             |           \n                            |  (MyRemoteControl)         |\n                            +----------------------------+\n                                          |\n                                          v\n                            +----------------------------+\n                            |      Command Interface     |\n                            |      (ICommand)            |\n                            +----------------------------+\n                                                |\n                             +-----------------+------------------+\n                             |                                    |\n                 +---------------------------+      +----------------------------+\n                 |    Concrete Command A      |     |    Concrete Command B      |\n                 | (TurnACOnCommand)          |     | (TurnACOffCommand)         |\n                 +---------------------------+      +----------------------------+\n                                                |\n                                                v\n                                  +----------------------------+\n                                  |      Receiver              |\n                                  |  (AirConditioner)          |\n                                  +----------------------------+\n</code></pre> <ul> <li>No Image </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#air-conditioner-example","title":"Air Conditioner Example:","text":"<ul> <li>Receiver (AirConditioner): The actual object performing the actions, such as turning the AC on or off.</li> <li>Command Interface (ICommand): Declares the <code>execute</code> and <code>undo</code> methods.</li> <li>Concrete Command (TurnACOnCommand, TurnACOffCommand): Implements <code>ICommand</code> and defines what happens when AC is turned on or off.</li> <li>Invoker (MyRemoteControl): Stores the command and triggers execution. It can also undo the last command.</li> <li>Client (Main): Creates commands, assigns them to the remote control (invoker), and triggers the command execution.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#smart-home-automation","title":"Smart Home Automation","text":"<ul> <li>In smart home systems, you can create commands to control devices like lights, fans, or blinds.</li> <li>The user triggers these commands via an app or a remote control, similar to how the AC is controlled in our example.</li> <li>For instance, a command could turn on all lights, while another command could set the house to \"night mode\" by adjusting lights, blinds, and temperature.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#smart-home-automation_1","title":"Smart Home Automation:","text":"<ul> <li>Devices such as lights, thermostats, and blinds are controlled by sending commands (e.g., TurnLightOn, SetTemperature). Users can trigger these actions using a central controller or app.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#gui-buttons-and-menus","title":"GUI Buttons and Menus:","text":"<ul> <li>Commands can be encapsulated as objects and executed when buttons are pressed or menu items are selected (e.g., SaveCommand, OpenCommand). The commands handle the actual operations behind the scenes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#transaction-management","title":"Transaction Management:","text":"<ul> <li>Financial transactions such as \"debit\" or \"credit\" are represented as commands, which can be executed and undone. If an error occurs, the last transaction can be undone.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#loose-coupling","title":"Loose Coupling:","text":"<ul> <li>The invoker (remote) doesn\u2019t need to know the details of how the command works. It only knows it can call <code>execute</code> and <code>undo</code> methods on the command object.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#reusability","title":"Reusability:","text":"<ul> <li>Commands can be reused in different contexts (e.g., the same <code>TurnACOnCommand</code> could be used in a different remote control).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#undoredo-capability","title":"Undo/Redo Capability:","text":"<ul> <li>Command patterns inherently support undo and redo actions by storing command history.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#extensibility","title":"Extensibility:","text":"<ul> <li>New commands can be easily added without modifying existing code. You can add a new command to control more features of the air conditioner or any other appliance.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#example-flowchart-air-conditioner-example","title":"Example Flowchart (Air Conditioner Example):","text":"<pre><code>+----------------------------------------------------------+\n| Create commands (TurnACOnCommand, TurnACOffCommand)      |\n| with the receiver (AirConditioner).                      |\n+----------------------------------------------------------+\n                                            |\n                                            v\n                            +-------------------------------------+\n                            | Set command on the remote control   |\n                            +-------------------------------------+\n                                            |\n                                            v\n                            +-------------------------------------+\n                            | Press button -&gt; Execute command     |\n                            +-------------------------------------+\n                                            |\n                                            v\n                            +-----------------------------+\n                            | Command interacts with AC    |\n                            | (turnOnAC or turnOffAC)      |\n                            +-----------------------------+\n                                            |\n                                            v\n                           +-------------------------------------+\n                           | Press undo -&gt; Undo last command     |\n                           +-------------------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/CommandPattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>Encapsulation of Actions: The pattern allows encapsulating actions (like turning on/off AC) into objects, which can then be executed, queued, or undone.</li> <li>Command History: The command pattern enables tracking and undoing previous actions, making it ideal for applications that need undo functionality.</li> <li>Separation of Concerns: The invoker, command, and receiver are decoupled, making the system more flexible and easier to maintain.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/","title":"Interpreter Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#interpreter-design-pattern_1","title":"Interpreter Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#key-components","title":"Key Components:","text":"<pre><code>                        +---------------------------+\n                        |        Client (Main)      |\n                        +---------------------------+\n                                      |\n                                      v\n                        +---------------------------+\n                        |   Context (Interpreter)   |\n                        +---------------------------+\n                                      |\n                                      v\n                        +---------------------------+\n                        |    Abstract Expression    |\n                        | (AbstractExpression)      |\n                        +---------------------------+\n                                      |\n                    +-----------------+----------------+\n                    |                                  |\n       +----------------------------+     +-----------------------------+\n       |  Terminal Expression       |     | Non-Terminal Expression     |\n       | (Number, Variable, etc.)   |     | (Operation, Compound Exp.)  |\n       +----------------------------+     +-----------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Interpreter pattern is needed when you want to evaluate sentences in a language or expressions that follow specific grammar rules.</li> <li>When to Use: It is used when there is a need for a scripting language, mathematical expression evaluation, or when parsing input following a certain structure or syntax.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#real-life-example-mathematical-expression-interpreter","title":"Real-Life Example - Mathematical Expression Interpreter:","text":"<ul> <li>Client (Main): The user or system component that provides an expression to be interpreted (e.g., a math equation or formula).</li> <li>Context (Interpreter): This contains the global information necessary to interpret expressions (e.g., variable values, symbol tables).</li> <li>Abstract Expression: Defines an interface for interpreting the syntax of the expressions.</li> <li>Terminal Expression: Implements the interpretation of individual components of the expression (e.g., numbers, variables).</li> <li>Non-Terminal Expression: Represents more complex expressions or combinations of terminal expressions (e.g., addition, multiplication).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#example-arithmetic-expression","title":"Example - Arithmetic Expression:","text":"<ul> <li>Client: Provides a mathematical formula like <code>\"5 + 3 - 2\"</code>.</li> <li>Context: Defines the variables (if any) and provides the environment for interpretation.</li> <li>Terminal Expression: Handles constants or variables like <code>5</code>, <code>3</code>, or <code>2</code>.</li> <li>Non-Terminal Expression: Handles operations like <code>+</code> and <code>-</code>, which combine the results of terminal expressions.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#mathematical-expression-evaluation","title":"Mathematical Expression Evaluation:","text":"<ul> <li>A calculator uses the Interpreter pattern to evaluate mathematical expressions like <code>3 + 5 * (10 - 4)</code> by parsing the input and recursively evaluating sub-expressions.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#scripting-languages","title":"Scripting Languages:","text":"<ul> <li>In scripting languages, commands and expressions are interpreted and executed using rules defined in a formal grammar (e.g., a script interpreter for automation tasks).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#sql-query-parsing","title":"SQL Query Parsing:","text":"<ul> <li>SQL queries can be interpreted and translated into database-specific commands by interpreting expressions like <code>SELECT</code>, <code>WHERE</code>, or <code>ORDER BY</code>.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#regular-expression-evaluation","title":"Regular Expression Evaluation:","text":"<ul> <li>Regular expressions are interpreted according to a specific grammar, allowing pattern matching within text.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The pattern allows for easy modification of grammar and language rules, making it adaptable for new types of expressions or commands.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#reusability","title":"Reusability:","text":"<ul> <li>Once defined, expressions and interpreters can be reused across different contexts or systems.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#extensibility","title":"Extensibility:","text":"<ul> <li>New types of expressions (e.g., new operations or variables) can be added without modifying existing code, simply by creating new terminal or non-terminal expressions.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#readability","title":"Readability:","text":"<ul> <li>The pattern helps in structuring complex parsing or expression evaluation problems in a way that makes the code easier to understand and maintain.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#key-takeaways","title":"Key Takeaways:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#encapsulation-of-grammar","title":"Encapsulation of Grammar:","text":"<ul> <li>The pattern encapsulates grammar and rules, making the system more modular and easier to extend with new rules or expressions.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#separation-of-concerns","title":"Separation of Concerns:","text":"<ul> <li>Terminal and non-terminal expressions are clearly separated, making it easier to manage the complexity of parsing and evaluating expressions.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/InterpreterPattern/#scalability","title":"Scalability:","text":"<ul> <li>As new expressions or commands are needed, they can be added incrementally without disrupting the existing structure.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/","title":"Iterator Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#key-components","title":"Key Components:","text":"<pre><code>                        +---------------------------+\n                        |        Client (Main)      |\n                        +---------------------------+\n                                      |\n                                      v\n                        +---------------------------+\n                        |      Iterator Interface   |\n                        +---------------------------+\n                                      |\n                                      v\n                        +---------------------------+\n                        |  Concrete Iterator        |\n                        +---------------------------+\n                                      |\n                                      v\n                        +---------------------------+\n                        |  Aggregate (Collection)   |\n                        +---------------------------+\n                                      |\n                                      v\n                        +---------------------------+\n                        |  Concrete Aggregate       |\n                        +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Iterator pattern is used to provide a way to access elements of a collection sequentially without exposing the underlying structure of the collection.</li> <li>When to Use: It is useful when you need to traverse or iterate over a collection, such as a list or tree, and want to keep the iteration logic separate from the collection itself.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#real-life-example-book-collection-iterator","title":"Real-Life Example - Book Collection Iterator:","text":"<ul> <li>Client (Main): The user or system component that wants to iterate over the book collection.</li> <li>Iterator Interface: Defines the operations for traversing the collection (e.g., <code>next()</code>, <code>hasNext()</code>).</li> <li>Concrete Iterator: Implements the Iterator interface for the specific collection (e.g., iterates through a list of books).</li> <li>Aggregate (Collection): Defines the interface for creating an iterator for the collection.</li> <li>Concrete Aggregate: A specific collection (e.g., a list of books) that implements the Aggregate interface and creates an iterator.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#example-custom-list","title":"Example - Custom List:","text":"<ul> <li>Client: A user wants to iterate over a custom list of numbers.</li> <li>Iterator Interface: Defines methods like <code>next()</code>, <code>hasNext()</code>.</li> <li>Concrete Iterator: Implements the logic for traversing the list.</li> <li>Aggregate: Represents the collection (a custom list).</li> <li>Concrete Aggregate: Provides the iterator for the custom list.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#collection-traversal","title":"Collection Traversal:","text":"<ul> <li>Iterators are used to traverse various types of collections like arrays, lists, or even trees, without exposing the underlying implementation details.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#file-system-navigation","title":"File System Navigation:","text":"<ul> <li>A file system may use an iterator to traverse directories and files without exposing how the directory structure is managed.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#database-result-sets","title":"Database Result Sets:","text":"<ul> <li>Databases use iterators to loop through the results of a query without revealing the internal structure of the result set.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#encapsulation","title":"Encapsulation:","text":"<ul> <li>The Iterator pattern encapsulates the traversal logic, keeping it separate from the actual collection.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>Different types of iterators can be implemented for the same collection without modifying the collection\u2019s structure.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#simplicity","title":"Simplicity:","text":"<ul> <li>The pattern provides a clean interface for iteration, abstracting the complexity of navigating through the collection.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#key-takeaways","title":"Key Takeaways:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#separation-of-concerns","title":"Separation of Concerns:","text":"<ul> <li>The collection (Aggregate) and the iteration logic (Iterator) are clearly separated, making the code easier to manage and maintain.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#uniform-access","title":"Uniform Access:","text":"<ul> <li>Iterators provide a uniform way to traverse different types of collections, such as lists, sets, and trees.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/IteratorPattern/#scalability","title":"Scalability:","text":"<ul> <li>New iterators can be added to handle different traversal requirements without modifying the underlying collection.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/","title":"Mediator Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#key-components","title":"Key Components:","text":"<pre><code>                        +----------------------------+\n                        |        Client (Main)       |\n                        +----------------------------+\n                                          |\n                                          v\n                        +----------------------------+\n                        |     Mediator (Auction)     |\n                        +----------------------------+\n                                      |\n                    +-----------------+----------------+\n                    |                                  |\n       +-----------------------------+     +------------------------------+\n       |       Colleague A           |     |        Colleague B           |\n       |      (Bidder A)             |     |        (Bidder B)            |\n       +-----------------------------+     +------------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#key-points","title":"Key Points:","text":"<ul> <li>Auction (Mediator) handles all communication between bidders.</li> <li>Bidder (Colleague) objects communicate via the mediator, without knowing about other bidders directly.</li> <li>Each bid triggers notifications to all bidders except the one placing the bid.</li> <li>It encourages loose coupling by keeping objects from referring to each other explicitly and allow the to communicate through a mediator object.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Mediator pattern is needed to reduce the complexity of communication between objects by centralizing the interaction logic in one object (the mediator).</li> <li>When to Use: It is used when multiple objects need to communicate in a system, and you want to avoid having them directly refer to each other, creating a tightly coupled system.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#real-life-example-auction-system","title":"Real-Life Example - Auction System:","text":"<ul> <li>Client (Main): The user or system component that creates the auction and bidders.</li> <li>Mediator (Auction): Facilitates the bidding process by relaying bids and notifications between bidders.</li> <li>Colleague (Bidder): Represents an individual bidder placing bids and receiving notifications about other bids.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#example-auction-system","title":"Example - Auction System:","text":"<ul> <li>Client: Creates the auction and registers bidders to the auction.</li> <li>Mediator (Auction): Handles the logic of accepting bids and notifying other bidders of the current highest bid.</li> <li>Colleague (Bidder): Each bidder places a bid, which is communicated to all other bidders via the mediator.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#chat-room","title":"Chat Room:","text":"<ul> <li>A chat application uses the Mediator pattern to facilitate communication between users. Users send messages to the chat room (the mediator), and the chat room relays those messages to other users.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#auction-system","title":"Auction System:","text":"<ul> <li>As seen in the example, bidders interact via an auction mediator, which prevents them from directly interacting with each other.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#air-traffic-control","title":"Air Traffic Control:","text":"<ul> <li>In air traffic control, the control tower (mediator) manages communication between airplanes (colleagues), ensuring safe flight operations without direct communication between planes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#centralized-control","title":"Centralized Control:","text":"<ul> <li>The mediator centralizes communication logic, making it easier to manage and modify the interaction between objects without changing their code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#decoupling-of-colleagues","title":"Decoupling of Colleagues:","text":"<ul> <li>Colleagues are decoupled from one another, reducing dependencies and making the system easier to maintain.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>Changes to the interaction logic can be made in the mediator without affecting the colleagues, promoting flexibility in the system.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#key-takeaways","title":"Key Takeaways:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#reduces-complexity","title":"Reduces Complexity:","text":"<ul> <li>The Mediator pattern reduces the complexity of communication between multiple objects by eliminating the need for direct communication and dependencies.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#easier-maintenance","title":"Easier Maintenance:","text":"<ul> <li>Since the communication logic is centralized in the mediator, it's easier to maintain, modify, or extend without affecting other components.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MediatorPattern/#improves-modularity","title":"Improves Modularity:","text":"<ul> <li>By isolating communication logic in the mediator, the pattern improves the modularity and reusability of the system.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/","title":"Memento Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#key-components","title":"Key Components:","text":"<pre><code>                    +---------------------------+\n                    |        Client (Main)      |\n                    +---------------------------+\n                                      |\n                                      v\n                    +---------------------------+\n                    |     Originator (Editor)   |\n                    |  (ConfigurationOriginator)|\n                    +---------------------------+\n                                      |\n                                      v\n                    +---------------------------+\n                    |  Memento (Snapshot)       |\n                    | (ConfigurationMemento)    |\n                    +---------------------------+\n                                      |\n                                      v\n                    +---------------------------+\n                    |   Caretaker (History)     |\n                    | (ConfigurationCareTaker)  |\n                    +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#why-its-required-and-when-to-use","title":"Why its required and when to use?:","text":"<ul> <li>Provide an ability to revert the object to a previous i.e. UNDO capability and</li> <li>It does not expose the object internal implementation</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#real-life-example-document-editor","title":"Real-Life Example - Document Editor:","text":"<ul> <li>Originator (Editor): This is the object whose state we want to save and restore. For example, an editor where a user types text.</li> <li>Memento (Snapshot): This stores the state of the originator at a given time. In the editor example, this could be the current text content and cursor position.</li> <li>Caretaker (History): This is responsible for storing the mementos. It keeps a history of states to allow undo and redo functionality.</li> <li>Client (Main): This is the user or system component that interacts with the originator and the caretaker, performing actions like saving the state or undoing changes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#example-configuration-settings","title":"Example - Configuration Settings:","text":"<ul> <li>ConfigurationOriginator: Represents the object whose state (e.g., screen height and width) we want to save or restore.</li> <li>ConfigurationMemento: Stores the state of the <code>ConfigurationOriginator</code> (height and width).</li> <li>ConfigurationCareTaker: Manages the history of states and allows undo functionality.</li> <li>Client (Main): Creates instances of <code>ConfigurationOriginator</code>, modifies its state, saves snapshots using <code>ConfigurationMemento</code>, and interacts with <code>ConfigurationCareTaker</code> to restore states when needed.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#document-editing-eg-google-docs-ms-word","title":"Document Editing (e.g., Google Docs, MS Word):","text":"<ul> <li>Editors use mementos to save the current state of the document (content, formatting, etc.). If a user makes a mistake, they can undo changes by restoring an earlier memento.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#game-development","title":"Game Development:","text":"<ul> <li>Games use the memento pattern to store the state of the game (player's position, health, inventory, etc.). Players can save the game at a certain point (create a memento) and later load that state if needed.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#financial-software","title":"Financial Software:","text":"<ul> <li>In financial systems, the memento pattern is used to track and restore previous states of accounts, allowing for rollback functionality in case of incorrect transactions.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#preservation-of-state","title":"Preservation of State:","text":"<ul> <li>The memento pattern helps capture and store an object\u2019s state without exposing its internals, ensuring that the object's encapsulation is not broken.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#undoredo-functionality","title":"Undo/Redo Functionality:","text":"<ul> <li>This pattern is particularly useful in applications where undo/redo functionality is needed, such as text editors, games, or design tools.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/MementoPattern/#decoupling","title":"Decoupling:","text":"<ul> <li>The originator and caretaker are decoupled from the internal details of the state. The caretaker only handles the mementos and doesn't need to understand the state stored in them.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/","title":"Null Object Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#key-components","title":"Key Components:","text":"<pre><code>                        +---------------------------+\n                        |        Client (Main)      |\n                        +---------------------------+\n                                      |\n                                      v\n                        +---------------------------+\n                        |  Abstract Class/Interface |\n                        +---------------------------+\n                                      |\n                    +-----------------+----------------+\n                    |                                  |\n       +----------------------------+     +-----------------------------+\n       |    Concrete Object          |    |     Null Object             |\n       | (Real Object Implementation)|    | (Empty or Default Behavior) |\n       +----------------------------+     +-----------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Null Object Pattern is useful to eliminate the need for explicit null checks, making the code more readable and easier to maintain by handling null values through default behavior.</li> <li>When to Use: Use it when an object requires some default, non-functional behavior to avoid null references and reduce the need for conditional logic checks in your code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#real-life-example-logger-system","title":"Real-Life Example - Logger System:","text":"<ul> <li>Client (Main): The application or system component that generates log messages.</li> <li>Abstract Class/Interface: Defines the contract for logging, e.g., a <code>Logger</code> interface.</li> <li>Concrete Object: Represents an actual logger implementation, such as writing logs to a file or console.</li> <li>Null Object: Provides a do-nothing logger that silently absorbs log requests without generating output.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#example-logging-system","title":"Example - Logging System:","text":"<ul> <li>Client: Requests logging services from a <code>Logger</code>.</li> <li>Abstract Class/Interface: Defines methods like <code>logInfo</code>, <code>logError</code>, etc.</li> <li>Concrete Object: Implements the logger to write messages to the console or a file.</li> <li>Null Object: Implements the same <code>Logger</code> interface, but performs no operation when logging methods are called.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#logging-systems","title":"Logging Systems:","text":"<ul> <li>In large systems where logging may not be needed in certain environments (e.g., during testing), the Null Object pattern can provide a no-operation (NOP) logger, avoiding the need for null checks before every logging call.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#ui-development","title":"UI Development:","text":"<ul> <li>In user interface applications, Null Objects can be used for default actions when no real behavior is assigned (e.g., empty event handlers that do nothing when clicked).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#financial-applications","title":"Financial Applications:","text":"<ul> <li>When handling accounts or transactions, a Null Object can represent an inactive account or a placeholder transaction, preventing null pointer exceptions.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#reducing-null-checks","title":"Reducing Null Checks:","text":"<ul> <li>The Null Object Pattern eliminates the need for repeated null checks in code by providing a consistent default behavior for \"null\" cases.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#simplifying-code","title":"Simplifying Code:","text":"<ul> <li>It simplifies code by abstracting away the handling of null cases into the Null Object, keeping the main logic cleaner and easier to understand.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The pattern allows flexibility in defining default behavior, providing a more elegant solution than conditionally checking for nulls everywhere.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#key-takeaways","title":"Key Takeaways:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#default-behavior-encapsulation","title":"Default Behavior Encapsulation:","text":"<ul> <li>The Null Object encapsulates default, no-op behavior, ensuring that the client code does not have to worry about whether the object is null.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#separation-of-concerns","title":"Separation of Concerns:","text":"<ul> <li>By separating the handling of null cases from the core logic, the pattern improves code readability and reduces complexity.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#avoids-conditional-complexity","title":"Avoids Conditional Complexity:","text":"<ul> <li>Reduces the need for conditional logic in the client code, allowing for more streamlined and error-free execution.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#real-world-examples","title":"Real-World Examples:","text":"<ul> <li>Java's <code>Optional</code> class: Provides methods to deal with null values by encapsulating them into <code>Optional.empty()</code> objects.</li> <li>Collections.emptyList(): Returns an immutable, empty list that can be used in place of <code>null</code> to avoid <code>NullPointerException</code> in collection handling.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/NullObjectPattern/#conclusion","title":"Conclusion:","text":"<p>The Null Object Design Pattern is a valuable technique for eliminating null reference issues and simplifying code logic, especially in systems where many different objects can be used interchangeably but some do not require functionality.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/","title":"Observer Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#key-components","title":"Key Components:","text":"<pre><code>                                      +---------------------------+\n                                      |        Subject            |\n                                      | (WeatherStation in our    |\n                                      | example)                  |\n                                      +---------------------------+\n                                                 |\n                                                 | maintains\n                                                 v\n                                    +-----------------------------+\n                                    |      Observer Interface     |\n                                    | (WeatherObserver interface) |\n                                    +-----------------------------+\n                                                 |\n                            +-------------------+-------------------+\n                            |                                       |\n                            |                                       |\n                 +-----------------------------+           +--------------------------+\n                 |   Concrete Observer A       |           |   Concrete Observer B    |\n                 | (CurrentConditionsDisplay)  |           |   (StatisticsDisplay)    |\n                 +-----------------------------+           +--------------------------+\n                            |                                       |\n                            +------------------+--------------------+\n                                               |\n                                               v\n                                      +---------------------------+\n                                      |    Concrete Subject       |\n                                      |    (WeatherData in our    |\n                                      |    example)               |\n                                      +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#example-usage","title":"Example Usage:","text":"<ul> <li>The <code>WeatherStation</code> class (Subject) notifies observers (e.g., <code>CurrentConditionsDisplay</code>, <code>StatisticsDisplay</code>) when weather data changes.</li> <li>Observers register themselves with the <code>WeatherData</code> subject to receive updates.</li> <li>Observers can react to changes in the subject's state, updating their displays accordingly.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#social-media-notifications","title":"Social Media Notifications:","text":"<ul> <li>Users can follow others and receive notifications when their followed accounts post new content.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#stock-market-tracking","title":"Stock Market Tracking:","text":"<ul> <li>Investors can subscribe to stock prices and receive real-time updates when prices change.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#weather-monitoring-systems","title":"Weather Monitoring Systems:","text":"<ul> <li>Multiple displays (mobile apps, websites) receive updates from a central weather station.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#event-management","title":"Event Management:","text":"<ul> <li>Applications can notify subscribers about events (like ticket sales or concert announcements) when they occur.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#loose-coupling","title":"Loose Coupling:","text":"<ul> <li>The observer and subject are loosely coupled; changes in one do not require changes in the other.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#dynamic-relationships","title":"Dynamic Relationships:","text":"<ul> <li>Observers can be added or removed at runtime without altering the subject's code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#reusability","title":"Reusability:","text":"<ul> <li>Observers can be reused across different subjects, promoting code reuse and flexibility.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/ObserverPattern/#scalability","title":"Scalability:","text":"<ul> <li>The pattern allows for a scalable architecture where new observer types can be introduced with minimal effort.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/","title":"State Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#key-components","title":"Key Components:","text":"<pre><code>                          +---------------------------+\n                          |        Context            |\n                          | (VendingMachine in our    |\n                          |    example)               |\n                          +---------------------------+\n                                     |\n                                     | holds reference to\n                                     v\n                        +---------------------------+\n                        |        State Interface    |\n                        | (State Interface)         |\n                        +---------------------------+\n                                     |\n                +-------------------+-------------------+\n                |                                       |\n                |                                       |\n     +---------------------------+           +---------------------------+\n     |   Concrete State A         |           |   Concrete State B         |\n     | (IdleState)                |           | (HasMoneyState)            |\n     +---------------------------+           +---------------------------+\n                |                                       |\n     +---------------------------+           +---------------------------+\n     |   Concrete State C         |           |   Concrete State D         |\n     | (SelectionState)           |           | (DispenseState)            |\n     +---------------------------+           +---------------------------+\n                                     |\n                                     v\n                          +---------------------------+\n                          |     Transitions based on  |\n                          |       user actions        |\n                          +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#example-usage","title":"Example Usage:","text":"<ul> <li>The <code>VendingMachine</code> class holds the current state of the machine.</li> <li>States include: <code>IdleState</code>, <code>HasMoneyState</code>, <code>SelectionState</code>, <code>DispenseState</code>.</li> <li>The machine transitions between these states based on user interactions like inserting a coin, selecting a product, and dispensing items.</li> <li>Each state defines specific behaviors and possible transitions to other states.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#vending-machines","title":"Vending Machines:","text":"<ul> <li>A real-world vending machine where actions (inserting coins, selecting items) cause state changes (waiting for selection, dispensing).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#media-players","title":"Media Players:","text":"<ul> <li>Media players have different states like playing, paused, stopped, etc., and user actions transition between these states.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#traffic-light-systems","title":"Traffic Light Systems:","text":"<ul> <li>Traffic lights change between different states (green, yellow, red), and these changes dictate the behavior of vehicles.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#simplicity","title":"Simplicity:","text":"<ul> <li>The logic for different states is split across multiple classes, making the code easier to understand and maintain.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#flexibility","title":"Flexibility:","text":"<ul> <li>New states can be added without modifying existing code, adhering to the Open/Closed Principle.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#maintainability","title":"Maintainability:","text":"<ul> <li>The Single Responsibility Principle is followed as each state is responsible for its own logic.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StatePattern/#key-points-to-remember-for-interviews","title":"Key Points to Remember for Interviews:","text":"<ul> <li>The State Pattern allows an object to change its behavior based on its internal state.</li> <li>It helps in situations where an object can have different behaviors depending on its state.</li> <li>Each state is encapsulated as a class, promoting code reuse and flexibility.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/","title":"Strategy Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#key-components","title":"Key Components:","text":"<pre><code>                          +---------------------------+\n                          |        Context            |\n                          | (easy.educativeIO.Vehicle in our example)  |\n                          +---------------------------+\n                                     |\n                                     | uses\n                                     v\n                        +---------------------------+\n                        |      Strategy Interface   |\n                        | (DriveStrategy interface) |\n                        +---------------------------+\n                                     |\n                +-------------------+-------------------+\n                |                                       |\n                |                                       |\n     +---------------------------+           +---------------------------+\n     |   Concrete Strategy A      |           |   Concrete Strategy B      |\n     | (NormalDriveStrategy)      |           | (SportsDriveStrategy)      |\n     +---------------------------+           +---------------------------+\n                |                                       |\n                +------------------+--------------------+\n                                   |\n                                   v\n                          +---------------------------+\n                          |        Concrete Context   |\n                          |    (GoodsVehicle, Sports  |\n                          |    easy.educativeIO.Vehicle in our example)|\n                          +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#example-usage","title":"Example Usage:","text":"<ul> <li>The <code>easy.educativeIO.Vehicle</code> class uses <code>DriveStrategy</code> to define behavior.</li> <li><code>GoodsVehicle</code> uses <code>NormalDriveStrategy</code>.</li> <li><code>SportsVehicle</code> uses <code>SportsDriveStrategy</code>.</li> <li>The behavior (driving type) can be changed dynamically.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#example-usage_1","title":"Example Usage:","text":"<ul> <li>The <code>easy.educativeIO.Vehicle</code> class uses <code>DriveStrategy</code> to define behavior.</li> <li><code>GoodsVehicle</code> uses <code>NormalDriveStrategy</code>.</li> <li><code>SportsVehicle</code> uses <code>SportsDriveStrategy</code>.</li> <li>The behavior (driving type) can be changed dynamically.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#payment-methods-in-e-commerce","title":"Payment Methods in E-commerce:","text":"<ul> <li>Different payment strategies (credit card, PayPal, crypto) can be selected dynamically.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#sorting-algorithms","title":"Sorting Algorithms:","text":"<ul> <li>Programs that require support for multiple sorting algorithms (merge sort, quick sort) can switch strategies dynamically.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#document-rendering","title":"Document Rendering:","text":"<ul> <li>Rendering strategies (PDF, HTML, plain text) can be swapped based on user preference.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#game-ai","title":"Game AI:","text":"<ul> <li>Different AI strategies (aggressive, defensive) can be used depending on game conditions or player behavior.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The behavior of a class can change dynamically without modifying the class itself.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#reusability","title":"Reusability:","text":"<ul> <li>Algorithms and behaviors are encapsulated in separate strategy classes and can be reused across different parts of the application.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/StrategyPattern/#maintainability","title":"Maintainability:","text":"<ul> <li>Adhering to Single Responsibility and Open/Closed Principle makes code easier to maintain and extend. Each strategy is modular and can evolve independently without impacting the core functionality.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/","title":"Template Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#key-components","title":"Key Components:","text":"<pre><code>                      +----------------------------+\n                      |      Abstract Class        |\n                      |     (PaymentFlow in our    |\n                      |     example)               |\n                      +----------------------------+\n                                     |\n                                     | defines template method\n                                     v\n                        +----------------------------+\n                        |   Template Method          |\n                        |   (sendMoney method)       |\n                        +----------------------------+\n                                     |\n                +-------------------+-------------------+\n                |                                       |\n                |                                       |\n     +---------------------------+           +---------------------------+\n     |   Concrete Class A         |           |   Concrete Class B       |\n     |   (PayToFriend)            |           |   (PayToMerchantFlow)    |\n     +---------------------------+           +---------------------------+\n                |                                       |\n                | customizes                            | customizes\n                v                                       v\n     +----------------------------+           +----------------------------+\n     |  PayToFriend:              |           |  PayToMerchantFlow:        |\n     |  0% fees, full credit      |           |  2% fees, partial credit   |\n     +----------------------------+           +----------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#why-its-required-and-when-to-use","title":"Why its required and when to use?:","text":"<ul> <li>whn you want all classes to follow the specific steps to process the task but also</li> <li>Need to provide the flexibility that each class can have their own logic in that specific steps.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#example-usage","title":"Example Usage:","text":"<ul> <li>The <code>PaymentFlow</code> abstract class defines the template method <code>sendMoney</code>, which outlines the sequence of operations (steps like <code>validateRequest</code>, <code>debitAmount</code>, etc.).</li> <li><code>PayToFriend</code> and <code>PayToMerchantFlow</code> are concrete classes that provide specific implementations for these steps.</li> <li>The template method ensures the order of execution remains consistent, while allowing different behavior for each step depending on the subclass.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#payment-gateways","title":"Payment Gateways:","text":"<ul> <li>Payment systems often have a fixed flow (e.g., validate transaction, debit account, calculate fees, and credit amount). Different types of payments, like friend transfers and merchant payments, follow this common template but with customized rules for fees and validation.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#online-orders","title":"Online Orders:","text":"<ul> <li>When placing an online order, various steps such as validation, payment processing, and order fulfillment are executed in a specific sequence. Different types of orders (physical goods, digital products) can customize these steps, while following the same overall process.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#document-processing","title":"Document Processing:","text":"<ul> <li>A document processing system might follow a template for handling documents (open, process, save). Different document types (PDF, Word, Excel) can implement specific logic for each step.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#consistent-process","title":"Consistent Process:","text":"<ul> <li>The template method ensures that the core process remains the same across all subclasses, promoting consistency.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#flexibility","title":"Flexibility:","text":"<ul> <li>Subclasses can override specific steps to provide their own behavior while following the defined order of execution.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#code-reusability","title":"Code Reusability:","text":"<ul> <li>The abstract class contains reusable logic for common steps, reducing code duplication across subclasses.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Behavioural-Design-Patterns/TemplatePattern/#maintainability","title":"Maintainability:","text":"<ul> <li>The design adheres to the Single Responsibility Principle by keeping the core process structure in the abstract class and the details of each step in the subclasses.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/","title":"Creational Design Patterns","text":"<p>Creational design patterns are a category of design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. These patterns increase the flexibility and reuse of existing code.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/#real-life-example","title":"Real-Life Example","text":"<p>Imagine a scenario where you need to create a connection to a database. Depending on the load and requirements, you might want a single connection (Singleton), a pool of connections (Object Pool), or even create different types of connections based on the type of database (Factory Method or Abstract Factory).</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Singleton</li> <li>Object Pool</li> <li>Factory Method</li> <li>Abstract Factory</li> <li>Builder</li> <li>Prototype</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/#creational-patterns","title":"Creational Patterns","text":"Pattern Name Why and When to Use Real Life Example Singleton When you need exactly one instance of a class and provide a global point of access to it. Database Connection Object Pool When you need to manage a pool of reusable objects, limiting the number of instances to reduce resource usage. Connection Pooling Factory Method When a class cannot anticipate the class of objects it needs to create. UI Component Factory Abstract Factory When you need to create families of related or dependent objects without specifying their concrete classes. GUI Framework Builder When you want to create complex objects step by step, allowing for different representations of the object. Meal Preparation Prototype When you want to create new objects by copying an existing object, avoiding the overhead of creating a new instance. Cloning Objects"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/#repository-links","title":"Repository Links","text":"<ul> <li>GitHub Repository</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/","title":"Abstract Factory Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#key-components","title":"Key Components:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#factory-of-factory","title":"Factory of Factory","text":"<pre><code>+------------------+       +-------------------+\n|      Client      | --&gt;   | Abstract Producer |\n+------------------+       +-------------------+\n                                  |\n                                  |\n                       +-------------------+   \n                       | Abstract Factory  |                    \n                       +-------------------+  \n                                  |\n                                  |\n                +-----------------+----------------+\n                |                                  |\n        +-------+-------+                  +--------+--------+\n        | Economic easy.educativeIO.Car  |                  |  Luxury easy.educativeIO.Car     |\n        |   Factory     |                  |    Factory      |\n        +---------------+                  +-----------------+\n                |                                  |\n                |                                  |\n                +--------------+-------------------+\n                               |\n                               |\n                     +-----------------+\n                     |       easy.educativeIO.Car       |\n                     +-----------------+\n                               |\n         +---------------------+---------------------+\n         |                     |                     |\n +-------+-------+     +-------+-------+     +-------+-------+\n | Economic Car1 |     | Economic Car2 |     | Economic Car3 |\n +---------------+     +---------------+     +---------------+\n                                                  |\n +---------------+     +---------------+     +---------------+\n |  Luxury Car1  |     |  Luxury Car2  |     |  Luxury Car3  |\n +---------------+     +---------------+     +---------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#explanation","title":"Explanation:","text":"<ul> <li>Client (Main): The main class that interacts with the <code>CarFactory</code> to create cars.</li> <li>CarFactory (Abstract): An interface for creating different types of cars (Luxury and Ordinary).</li> <li>Concrete Factories (LuxuryCarFactory, OrdinaryCarFactory): Implementations of the abstract factory that create luxury and ordinary cars respectively.</li> <li>Abstract Product (easy.educativeIO.Car): An interface that defines the structure for the products that the factories will produce.</li> <li>Concrete Products (LuxuryCar, OrdinaryCar): Specific implementations of the easy.educativeIO.Car interface.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#easyeducativeiocar-manufacturing-example","title":"easy.educativeIO.Car Manufacturing Example:","text":"<ul> <li>Client (Main): Creates instances of car factories and utilizes them to create cars.</li> <li>CarFactory (Abstract): Declares the <code>createCar()</code> method for producing different car types.</li> <li>Concrete Factories: Each factory creates specific car types, adhering to the <code>easy.educativeIO.Car</code> interface.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#automotive-industry","title":"Automotive Industry:","text":"<ul> <li>Abstract factories can be utilized to create different types of vehicles (e.g., cars, trucks) based on customer preferences, such as luxury, economy, or performance.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#ui-components","title":"UI Components:","text":"<ul> <li>In GUI applications, different themes can be managed by different factories (e.g., dark mode factory, light mode factory), allowing easy switching of components while maintaining consistent interfaces.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#furniture-manufacturing","title":"Furniture Manufacturing:","text":"<ul> <li>Furniture factories can produce different types of furniture (modern, classical) by adhering to a specific interface, allowing for flexibility in design.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The abstract factory pattern allows for easy addition of new products without modifying existing code, facilitating scalability.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#consistency","title":"Consistency:","text":"<ul> <li>Ensures that products created from a factory are compatible with one another, promoting a cohesive system.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#separation-of-concerns","title":"Separation of Concerns:","text":"<ul> <li>By separating the creation of objects from their usage, the pattern enhances maintainability and readability of code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#example-flowchart-easyeducativeiocar-manufacturing-example","title":"Example Flowchart (easy.educativeIO.Car Manufacturing Example):","text":"<pre><code>+-------------------------------------------------------------+\n| Create car factories (LuxuryCarFactory, OrdinaryCarFactory) |\n+-------------------------------------------------------------+\n                                            |\n                                            v\n                            +--------------------------------------+\n                            | Use factory to create a specific car |\n                            +--------------------------------------+\n                                            |\n                                            v\n                            +-------------------------------------+\n                            | Call method to drive the car        |\n                            +-------------------------------------+\n                                            |\n                                            v\n                            +------------------------------+\n                            |   easy.educativeIO.Car is driven (output)     |\n                            +------------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/AbstractFactoryPattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>The Abstract Factory Pattern provides a way to encapsulate the creation of families of related objects without specifying their concrete classes.</li> <li>It enhances flexibility and consistency in systems that require multiple products to be created simultaneously, promoting a scalable architecture.</li> <li>The pattern separates the construction process of products from their representation, allowing for more manageable code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/","title":"Builder Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#overview","title":"Overview:","text":"<p>The Builder Design Pattern is a creational design pattern that provides a step-by-step approach to construct complex objects, focusing on solving the problem of creating objects with many optional parameters. Instead of relying on constructors with numerous arguments, the Builder Pattern provides flexibility and readability by enabling the object to be built through method chaining.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#why-use-the-builder-pattern","title":"Why Use the Builder Pattern?","text":"<ul> <li> <p>What Problem It's Solving:</p> <ul> <li>The Builder Pattern helps when there are many optional fields in a class, making constructor overloads impractical and unreadable.</li> <li>It ensures the object is created in a controlled, step-by-step manner, preventing inconsistencies in object states.</li> </ul> </li> <li> <p>Problem It's Solving:</p> <ul> <li>Handling classes with many optional fields without requiring multiple constructors.</li> <li>It avoids creating objects with invalid states by controlling the sequence of the building process.</li> </ul> </li> <li> <p>Step-by-Step Object Creation:</p> <ul> <li>The Builder allows you to construct an object gradually, by calling methods for each attribute, improving readability and maintainability.</li> </ul> </li> <li> <p>Builder vs Decorator:</p> <ul> <li>Builder focuses on object creation step by step.</li> <li>Decorator enhances an existing object\u2019s behavior without modifying its structure, focusing on adding responsibilities to an object dynamically.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#key-components-of-the-builder-design-pattern","title":"Key Components of the Builder Design Pattern:","text":"<pre><code>                            +---------------------------+\n                            |        Client (Main)      |\n                            +---------------------------+\n                                          |\n                                          v\n                            +---------------------------+          \n                            |     StudentBuilder        |           \n                            |    (Abstract Builder)     |\n                            +---------------------------+\n                                          |\n                 +------------------------+------------------------+\n                 |                                                 |\n                 v                                                 v\n     +---------------------------+                    +---------------------------+\n     | EngineeringStudentBuilder |                    |   MBAStudentBuilder       |\n     |    (Concrete Builder)     |                    |    (Concrete Builder)     |\n     +---------------------------+                    +---------------------------+\n                                          |\n                                          v\n                            +---------------------------+\n                            |         Student           |\n                            |       (Product)           |\n                            +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#has-a-and-is-a-relationships","title":"Has-A and Is-A Relationships:","text":"<ul> <li>StudentBuilder Has-A: Methods for setting the attributes of the <code>Student</code> class (roll number, age, name, etc.).</li> <li>EngineeringStudentBuilder and MBAStudentBuilder Is-A: Concrete implementations of the <code>StudentBuilder</code> abstract class.</li> <li>Student Has-A: A student object is created with the attributes set by the builder methods.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#home-builder-example","title":"Home Builder Example","text":"<pre><code>                +-----------------------+\n                |  Abstract Homebuilder |\n                +-----------------------+\n                | + createWalls()       |\n                | + createRoof()        |\n                | + createDoors()       |\n                | + createWindows()     |\n                | + build()             |\n                +-----------------------+\n                          |\n                          |\n                +---------+---------+\n                |                   |\n        +---------------------+   +--------------------+\n        |   Flat Homebuilder  |   | Duplex Homebuilder |\n        +---------------------+   +--------------------+\n                          |\n                          |\n                   +------+-----------+\n                   |      Home        |\n                   | (Actual Product) |\n                   +------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#differences-between-builder-and-decorator-patterns","title":"Differences Between Builder and Decorator Patterns:","text":"Aspect Builder Pattern Decorator Pattern Purpose To construct complex objects with multiple optional fields. To add responsibilities or behaviors to objects dynamically. Object Focus Focuses on object creation. Focuses on enhancing existing objects. Structure Typically has a separate Builder class to create the object. Wraps the original object to provide additional functionality. Usage Context Used when the creation of an object is complex and needs to be constructed step by step. Used when object functionality needs to be extended without modifying the object itself."},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#student-creation-example","title":"Student Creation Example:","text":"<ul> <li>Client (Main): The entry point for creating <code>Student</code> objects.</li> <li>StudentBuilder: Abstract builder that defines methods to set student attributes.</li> <li>EngineeringStudentBuilder: A concrete builder for constructing engineering student objects.</li> <li>MBAStudentBuilder: A concrete builder for constructing MBA student objects.</li> <li>Student (Product): The final student object created by the builder.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":"<ul> <li> <p>Form Building:   When creating forms where not all fields are required, the builder pattern can be used to incrementally add only the fields that are necessary, improving flexibility.</p> </li> <li> <p>UI Component Configuration:   The builder pattern can be used to configure UI components with optional parameters, such as color, size, and behavior, allowing for clean and manageable code.</p> </li> <li> <p>Database Query Building:   The Builder Pattern can be used in SQL query builders, where multiple optional parameters (like where clauses, joins, etc.) can be added incrementally.</p> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#key-benefits","title":"Key Benefits:","text":"<ul> <li> <p>Flexibility:   The Builder Pattern allows the client to choose which attributes to set, making it ideal for handling objects with optional fields.</p> </li> <li> <p>Readability:   Instead of having long constructors with multiple parameters, the builder pattern offers a clear, readable chain of method calls that build up the object step by step.</p> </li> <li> <p>Separation of Concerns:   The object-building logic is separated from the final product, making the code cleaner and easier to maintain.</p> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/BuilderPattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>The Builder Pattern is especially useful when constructing complex objects with many optional parameters.</li> <li>It promotes code readability and flexibility by allowing step-by-step object creation.</li> <li>Compared to the Factory Pattern, which focuses on instantiating objects, the Builder Pattern emphasizes the controlled and gradual construction of an object.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/","title":"Factory Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#key-components","title":"Key Components:","text":"<pre><code>                            +---------------------------+\n                            |        Client (Main)      |\n                            +---------------------------+\n                                          |\n                                          v\n                            +---------------------------+          \n                            |         CarFactory        |           \n                            +---------------------------+\n                                          |\n                 +------------------------+------------------------+\n                 |                                                 |\n                 v                                                 v\n     +---------------------------+                    +---------------------------+\n     |     LuxuryCarFactory      |                    |   OrdinaryCarFactory      |\n     |    (Concrete Factory)     |                    |    (Concrete Factory)     |\n     +---------------------------+                    +---------------------------+\n                 |                                                 |\n                 |                                                 |\n                 v                                                 v\n     +---------------------------+                    +---------------------------+\n     |       LuxuryCar           |                    |      OrdinaryCar          |\n     |    (Concrete Product)     |                    |    (Concrete Product)     |\n     +---------------------------+                    +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#has-a-and-is-a-relationships","title":"Has-A and Is-A Relationships:","text":"<ul> <li>CarFactory Has-A: <code>CarFactory</code> is an abstract class that has methods to create cars.</li> <li>LuxuryCarFactory Is-A: <code>LuxuryCarFactory</code> is a concrete implementation of the <code>CarFactory</code> abstract class.</li> <li>OrdinaryCarFactory Is-A: <code>OrdinaryCarFactory</code> is another concrete implementation of the <code>CarFactory</code> abstract class.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#shape-class-example","title":"Shape Class Example:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#differences-between-factory-and-abstract-factory-patterns","title":"Differences Between Factory and Abstract Factory Patterns:","text":"Aspect Factory Pattern Abstract Factory Pattern Purpose To create a single product. To create families of related products. Structure Typically has a single factory class. Composed of multiple factory classes, each responsible for a family of products. Product Variation Produces one type of product at a time. Can produce different types of products based on a family. Usage Context Used when a system should be independent of how its products are created. Used when the system needs to work with multiple families of products."},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#easyeducativeiocar-manufacturing-example","title":"easy.educativeIO.Car Manufacturing Example:","text":"<ul> <li>Client (Main): The main application that requires cars of different types.</li> <li>CarFactory: An abstract factory interface for creating cars.</li> <li>LuxuryCarFactory: A factory that produces luxury cars.</li> <li>OrdinaryCarFactory: A factory that produces ordinary cars.</li> <li>Concrete Products: <code>LuxuryCar</code> and <code>OrdinaryCar</code> implement the easy.educativeIO.Car interface and represent specific car types.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#easyeducativeiocar-manufacturing","title":"easy.educativeIO.Car Manufacturing:","text":"<ul> <li>In a car manufacturing system, different types of cars (e.g., luxury, sports, ordinary) can be produced by respective factory classes, providing a clear separation of responsibilities.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#ui-component-libraries","title":"UI Component Libraries:","text":"<ul> <li>Different styles of UI components (e.g., buttons, dialogs) can be created using an abstract factory, allowing for different themes to be implemented while maintaining a consistent interface.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#game-development","title":"Game Development:","text":"<ul> <li>In game development, various types of characters or items may be created using different factory classes, allowing for scalability and organization.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The Factory Pattern allows the system to be flexible in terms of which class gets instantiated, promoting loose coupling.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#scalability","title":"Scalability:","text":"<ul> <li>New product types can be added easily without changing existing code, adhering to the Open/Closed Principle.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#encapsulation","title":"Encapsulation:","text":"<ul> <li>Factories encapsulate the logic of creating products, allowing the client code to remain clean and focused on its own responsibilities.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/FactoryPattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>The Factory Pattern promotes encapsulation and flexibility in object creation.</li> <li>It supports the separation of concerns by keeping the instantiation logic separate from the client.</li> <li>The Abstract Factory Pattern allows for the creation of families of related products, making it easier to manage variations in product design.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/","title":"Object Pool Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#key-components","title":"Key Components:","text":"<pre><code>                            +---------------------------+\n                            |        Client (Main)      |\n                            +---------------------------+\n                                          |\n                                          v\n                            +---------------------------+          \n                            |   DBConnectionPoolManager |           \n                            +---------------------------+\n                            | - freeConnectionsInPool   |\n                            | - connectionsInUse        |\n                            +---------------------------+\n                                          |\n                 +----------------------+---------------------+\n                 |                                            |\n                 v                                            v\n      +---------------------------+                +---------------------------+\n      |       DBConnection        |                |  DBConnectionPoolManager  |\n      |    (Reusable Object)      |                |      (Singleton)          |\n      +---------------------------+                +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#has-a-and-is-a-relationships","title":"Has-A and Is-A Relationships:","text":"<ul> <li>DBConnectionPoolManager Has-A: <code>DBConnectionPoolManager</code> has lists of <code>DBConnection</code> objects for managing the connection pool.</li> <li>DBConnection Is-A: <code>DBConnection</code> is a connection object used to interact with the database. </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#advantages","title":"Advantages:","text":"<ul> <li>Resource Management: Efficiently manages the pool of reusable objects like <code>DBConnection</code>.</li> <li>Performance: Reduces the overhead of creating and destroying frequently required objects, which are generally resource-intensive.</li> <li>Latency Reduction: Utilizes pre-initialized objects, minimizing latency in acquiring connections.</li> <li>Resource Control: Prevents resource exhaustion by limiting the number of active connections.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#disadvantages","title":"Disadvantages:","text":"<ul> <li>Resource Leakage: Can occur if objects are not handled properly and not returned to the pool.</li> <li>Memory Overhead: Requires more memory due to the management of the object pool.</li> <li>Thread Safety: Managing the pool requires thread safety, introducing additional overhead.</li> <li>Complexity: Increases application complexity due to the need for pool management.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#database-connection-pooling-example","title":"Database Connection Pooling Example:","text":"<ul> <li>Client (Main): The main application that requires database connections.</li> <li>DBConnectionPoolManager: A singleton that manages the pool of <code>DBConnection</code> objects.</li> <li>DBConnection: Represents an individual database connection, which can be reused.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#web-applications","title":"Web Applications:","text":"<ul> <li>In web applications, a pool of database connections can be reused to handle multiple client requests without incurring the overhead of creating new connections.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#game-development","title":"Game Development:","text":"<ul> <li>Object pools can manage frequently created objects like bullets or enemies to optimize performance and memory usage.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#network-connections","title":"Network Connections:","text":"<ul> <li>Pooling network connections can improve the responsiveness of applications that frequently communicate with external services.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The Object Pool Pattern allows for the controlled allocation and deallocation of resources, improving resource management.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#performance-optimization","title":"Performance Optimization:","text":"<ul> <li>By reusing objects, it minimizes the overhead associated with object creation and destruction.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#simplified-resource-management","title":"Simplified Resource Management:","text":"<ul> <li>Centralizes the management of object lifecycles, making the system easier to maintain and scale.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/ObjectPoolPattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>The Object Pool Pattern is particularly useful for managing resource-intensive objects that are frequently required.</li> <li>It promotes performance optimization and resource management while introducing some complexity and potential pitfalls.</li> <li>The pattern is often used in conjunction with the Singleton Pattern to ensure that only one instance of the pool exists.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/","title":"Prototype Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#key-components","title":"Key Components:","text":"<pre><code>                            +---------------------+\n                            |       Client        |\n                            +---------------------+\n                                      |\n                                      v\n                            +---------------------+\n                            |      Prototype      |\n                            |      (Interface)    |\n                            +---------------------+\n                                      |\n                                      v\n                            +---------------------+\n                            |      Student        |\n                            |   (Concrete Class)  |\n                            +---------------------+\n                                      |\n                                      v\n                            +---------------------+\n                            |       Cloning       |\n                            |   (Using clone)     |\n                            +---------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#has-a-and-is-a-relationships","title":"Has-A and Is-A Relationships:","text":"<ul> <li>Student Is-A: <code>Student</code> implements the <code>Prototype</code> interface.</li> <li>Prototype Has-A: <code>Prototype</code> defines the contract for cloning.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#purpose-of-the-prototype-pattern","title":"Purpose of the Prototype Pattern:","text":"<ul> <li>The Prototype Pattern is used when we have to make copies or clones from existing objects, providing a flexible and efficient way to create new instances.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#student-cloning-example","title":"Student Cloning Example:","text":"<ul> <li>Client: The main application that requires the cloning of <code>Student</code> objects.</li> <li>Prototype: An interface defining the <code>clone</code> method for duplicating objects.</li> <li>Student: A concrete class implementing the <code>Prototype</code> interface and defining the attributes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#object-cloning","title":"Object Cloning:","text":"<ul> <li>In applications where object creation is resource-intensive, cloning existing objects can be more efficient than instantiating new ones.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#configuration-objects","title":"Configuration Objects:","text":"<ul> <li>When configurations need to be created from existing settings, the Prototype Pattern can help replicate the state of an object quickly.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#game-development","title":"Game Development:","text":"<ul> <li>Cloning game entities (e.g., characters, items) can simplify the creation of similar objects with varying attributes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#efficiency","title":"Efficiency:","text":"<ul> <li>Cloning can be faster and consume less memory than creating a new instance from scratch, especially for complex objects.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The Prototype Pattern allows for dynamic object creation based on existing instances, enabling runtime adjustments.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#simplicity","title":"Simplicity:","text":"<ul> <li>The pattern simplifies the code by allowing objects to be created without specifying their concrete classes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/PrototypePattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>The Prototype Pattern is valuable for creating copies of existing objects efficiently.</li> <li>It promotes flexibility and reuse in object-oriented design by allowing the creation of new instances from prototypes.</li> <li>The pattern helps in managing resource-intensive object creation by enabling the use of existing objects as templates.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/","title":"Singleton Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#key-components","title":"Key Components:","text":"<pre><code>                +-----------------------+\n                |     Singleton Class   |\n                +-----------------------+\n                           |\n                           |\n              +------------+-------------+\n              |                          |\n              |                          |\n     +--------+--------+        +--------+---------+\n     | Eager Singleton |        |  Lazy Singleton  |\n     +-----------------+        +------------------+\n                           |\n                           |\n                +----------+------------+\n                |                       |\n                |                       |\n     +----------+--------------+     +-------------------------+\n     | Synchronized Singleton  |     |  Double-Checked Locking |\n     +-------------------------+     +-------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#core-principle","title":"Core Principle","text":"<p>The Singleton Design Pattern is used when we need to create only one instance of a class, ensuring a global point of access to that instance.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#singleton-implementations-and-problems","title":"Singleton Implementations and Problems","text":"Singleton Type Problem Solution Eager Singleton Instance created at class loading, wasting resources. Use lazy initialization if instance is not always needed. Lazy Singleton Not thread-safe, allowing multiple instances in a concurrent environment. Implement synchronization to ensure a single instance. Synchronized Singleton Expensive due to locking on each access, impacting performance. Optimize locking with a double-checked locking pattern. Double-Checked Locking Singleton Complexity in implementation; requires careful coding. Simplifies performance while maintaining thread safety."},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#double-checked-locking-singleton-memory-issues","title":"Double-Checked Locking Singleton - Memory Issues","text":"<ul> <li>There are 2 Memory issues present in Double Checked Locking Solution of Singleton Pattern:</li> <li>Check this video if any confusion: video</li> </ul> Problem Solution Instruction Reordering Issue Use the <code>volatile</code> keyword to prevent the reordering of instructions and ensure a properly constructed object is visible. L1 Caching Issue The <code>volatile</code> keyword also ensures that changes to the instance are visible across all threads, preventing stale data. <pre><code>  +-----------------------------------------------------------+\n  |                   Thread 1 (Creates Instance)             |\n  +-----------------------------------------------------------+\n  |\n  v\n  +-----------------------------------------------------------+\n  |     Checks: Is connectionObj == null in Main Memory?      |\n  +-----------------------------------------------------------+\n  |\n  v\n  +-----------------------------------------------------------+\n  |        Synchronizes and writes volatile connectionObj     |\n  |          directly to main memory, skipping L1 cache       |\n  +-----------------------------------------------------------+\n  |\n  v\n  +-----------------------------------------------------------+\n  |                Volatile ensures visibility                |\n  |      Connection object available in main memory for all   |\n  +-----------------------------------------------------------+\n  |\n  v\n  +-----------------------------------------------------------+\n  |                   Thread 2 (Access Instance)              |\n  +-----------------------------------------------------------+\n  |\n  v\n  +-----------------------------------------------------------+\n  |      Reads volatile connectionObj directly from memory,   |\n  |    skipping cache to get the latest instance immediately  |\n  +-----------------------------------------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#avoid-synchronized-overhead","title":"Avoid <code>synchronized</code> overhead","text":"<ul> <li>The synchronized block in the double-checked locking pattern can cause some performance overhead, even though it's minimized by checking the instance twice. </li> <li>To avoid the overhead of synchronization entirely, you can use other approaches.</li> </ul> Approach Advantages Disadvantages Double-Checked Locking Good trade-off between performance and thread-safety, but still has some synchronization overhead. Slower compared to lock-free approaches. Bill Pugh Singleton No synchronization overhead, lazy initialization, thread-safe. More complex for beginners. Enum Singleton Easiest to implement, thread-safe, handles serialization automatically. Enum cannot be extended (no inheritance). <ul> <li>Bill Pugh Singleton and Enum Singleton are both great alternatives if you're looking to avoid the synchronized overhead while maintaining thread-safety.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#singleton-code-implementations","title":"Singleton Code Implementations:","text":"<ol> <li> <p>Eager Singleton: Instance is created at the time of class loading. This may waste resources if the instance is never used.    <code>java    public class EagerDBConnection {        private static final EagerDBConnection instance = new EagerDBConnection();        private EagerDBConnection() { /* Initialize DB connection */ }        public static EagerDBConnection getInstance() { return instance; }    }</code></p> </li> <li> <p>Lazy Singleton: Instance is created when first accessed. However, it is not thread-safe, leading to multiple instances in a concurrent environment.    <code>java     public class LazyDBConnection {     private static LazyDBConnection instance;       private LazyDBConnection() { /* Initialize DB connection */ }        public static LazyDBConnection getInstance() {            if (instance == null) { instance = new LazyDBConnection(); }            return instance;       }     }</code></p> </li> <li> <p>Synchronized Singleton:  Uses a synchronized method for thread safety, but this is expensive due to locking on each access.    <code>java    public class SynchronizedDBConnection {         private static SynchronizedDBConnection instance;             private SynchronizedDBConnection() { /* Initialize DB connection */ }             public synchronized static SynchronizedDBConnection getInstance() {             if (instance == null) { instance = new SynchronizedDBConnection(); }             return instance;         }    }</code></p> </li> <li> <p>Double-Checked Locking Singleton:  Combines lazy initialization with synchronization to enhance performance while ensuring thread safety. It solves the overhead issue of synchronized methods.    <code>java    public class DoubleCheckedLockingDBConnection {         private static DoubleCheckedLockingDBConnection instance;             private DoubleCheckedLockingDBConnection() { /* Initialize DB connection */ }             public static DoubleCheckedLockingDBConnection getInstance() {                 if (instance == null) {                   synchronized (DoubleCheckedLockingDBConnection.class) {                     if (instance == null) { instance = new DoubleCheckedLockingDBConnection();}                   }                 }             return instance;         }    }</code></p> </li> <li> <p>Bill Pugh Singleton:  A nested static helper class ensures thread-safe, lazy initialization without synchronized overhead.    <code>java    public class BillPughSingleton {     private BillPughSingleton() { /* Initialize resources */ }     private static class SingletonHelper {         private static final BillPughSingleton INSTANCE = new BillPughSingleton();     }     public static BillPughSingleton getInstance() { return SingletonHelper.INSTANCE; }    }</code></p> </li> <li> <p>Enum Singleton:  Uses an enum to enforce single instance and is thread-safe by nature.    <code>java    public enum EnumSingleton {     INSTANCE;     // Additional methods can be defined    }</code></p> </li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#consistency","title":"Consistency:","text":"<ul> <li>Ensures that the application has a single point of access to the DB connection.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#resource-management","title":"Resource Management:","text":"<ul> <li>Manages resources effectively by preventing the creation of multiple instances of the connection.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The pattern allows the client code to work with any DB connection instance without changing the underlying logic.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Creational-Design-Patterns/SingletonPattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>The Singleton Design Pattern promotes the management of a single instance of a class.</li> <li>It provides a global access point while maintaining control over instance creation.</li> <li>Different implementations of the Singleton pattern can be applied based on specific needs regarding thread safety and resource management.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/","title":"Structural Design Patterns","text":"<p>Structural design patterns focus on how objects and classes are composed to form larger structures. These patterns help ensure that if one part of a system changes, the entire system doesn't need to do the same, promoting flexibility and reusability.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/#real-life-example","title":"Real-Life Example","text":"<p>Consider a computer system where various components (keyboard, monitor, printer) need to work together seamlessly. Structural patterns assist in organizing these components, enabling efficient management of their interactions.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Adapter</li> <li>Bridge</li> <li>Composite</li> <li>Decorator</li> <li>Facade</li> <li>Flyweight</li> <li>Proxy</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/#structural-patterns-overview","title":"Structural Patterns Overview","text":"Pattern Name Why and When to Use Real Life Example Adapter Enables incompatible interfaces to work together. Voltage Adapter Bridge Decouples an abstraction from its implementation, allowing them to vary independently. Remote Control Composite Treats individual objects and compositions of objects uniformly. File System Decorator Adds responsibilities to objects dynamically and transparently without affecting others. Coffee with Add-ons Facade Provides a simplified interface to a complex subsystem. Home Theater System Flyweight Minimizes memory use by sharing data with similar objects. Text Formatting Proxy Provides a surrogate or placeholder to control access to another object. Virtual Proxy for Images"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/#repository-links","title":"Repository Links","text":"<ul> <li>GitHub Repository</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/","title":"Adapter Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#key-components","title":"Key Components:","text":"<pre><code>                    +---------------------------+\n                    |        Client (Main)      |\n                    +---------------------------+\n                                  |\n                                  v\n                    +---------------------------+\n                    |    Target Interface       |\n                    +---------------------------+\n                                  |\n                                  v\n                    +---------------------------+\n                    |       Adapter Class       |\n                    +---------------------------+\n                                  |\n                                  v\n                    +---------------------------+\n                    |    Adaptee (Existing)     |\n                    +---------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#explanation","title":"Explanation:","text":"<ul> <li>Client (Main): The main class that requires functionality that is not compatible with its current system.</li> <li>Target Interface: The desired interface or contract that the client expects to interact with.</li> <li>Adapter Class: A bridge between the Client and the Adaptee, adapting the interface of the Adaptee to match the Target Interface.</li> <li>Adaptee (Existing Class): The class that has existing functionality but does not match the interface the client requires.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#has-a-and-is-a-relationship","title":"Has-A and Is-A Relationship:","text":"<ul> <li>Adapter Has-A Adaptee: The <code>Adapter</code> holds a reference to the <code>Adaptee</code>, demonstrating a has-a relationship. This allows the <code>Adapter</code> to call the necessary methods of the <code>Adaptee</code>.</li> <li>Adapter Is-A Target: The <code>Adapter</code> implements the <code>Target Interface</code>, demonstrating an is-a relationship. The <code>Client</code> interacts with the <code>Adapter</code> as if it were a <code>Target</code>.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Adapter pattern is required when you have an existing class that does not meet the interface expected by the client. This pattern allows you to convert the interface of a class into another interface that the client expects.</li> <li>When to Use: Use this pattern when you want to integrate a class that doesn't conform to the desired interface or when working with legacy code that needs to fit into a new system without modification.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#_1","title":"Adapter Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#real-life-example-plug-adapter","title":"Real-Life Example - Plug Adapter:","text":"<ul> <li>Client (Main): A device that needs to use a plug with a different shape or voltage.</li> <li>Target Interface: The desired plug shape or voltage that the client expects.</li> <li>Adapter Class: A plug adapter that converts the plug shape/voltage to be compatible with the client's needs.</li> <li>Adaptee (Existing Class): The existing plug that is incompatible with the client's requirements.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#filesystem-hierarchy","title":"Filesystem Hierarchy:","text":"<ul> <li>Filesystems might use adapters to integrate different types of storage (e.g., a cloud storage API integrated into a local filesystem interface).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#organization-hierarchy","title":"Organization Hierarchy:","text":"<ul> <li>A company's old systems might not have a standard interface. Adapters allow different organizational systems to communicate by converting the interface from one system into the desired structure.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#gui-frameworks","title":"GUI Frameworks:","text":"<ul> <li>In graphical user interfaces, adapter classes can convert a non-standard component interface into a form that is usable within the standard framework. For example, adapting a non-standard button widget to fit into a standard UI framework.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#compatibility","title":"Compatibility:","text":"<ul> <li>The Adapter pattern allows two incompatible interfaces to work together, enabling integration without modifying existing code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#reusability","title":"Reusability:","text":"<ul> <li>Existing classes can be reused in new systems by adapting them without modifying their internal logic, saving time and effort.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#single-responsibility","title":"Single Responsibility:","text":"<ul> <li>The Adapter pattern follows the principle of Single Responsibility by keeping the conversion logic separate from the actual business logic.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#key-takeaways","title":"Key Takeaways:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>By using an adapter, a system can work with previously incompatible components, providing flexibility when integrating different libraries or modules.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#encapsulation-of-conversion","title":"Encapsulation of Conversion:","text":"<ul> <li>The adapter pattern encapsulates the interface conversion logic, keeping the system organized and making it easier to manage.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#extensibility","title":"Extensibility:","text":"<ul> <li>Adapters allow systems to be extended without significant changes to the existing codebase. New adapters can be created for new types of interfaces as the system grows.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/AdapterPattern/#code-example-recap","title":"Code Example Recap:","text":"<ol> <li>Client (Main): Requires an interface that is incompatible with the current system.</li> <li>Target Interface: Defines the desired interface that the client expects.</li> <li>Adapter Class: Implements the target interface and adapts the existing class (Adaptee) to it.</li> <li>Adaptee: Contains the existing functionality but does not conform to the target interface.</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/","title":"Bridge Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/#key-components","title":"Key Components:","text":"<pre><code>                        +-----------------------+\n                        |     BreathingMethod   |\n                        |     (Implementor)     |\n                        +-----------------------+\n                                  |\n                                  v\n                        +-----------------------+\n                        |       Species         |  &lt;------  is-a\n                        |      (Abstraction)    |\n                        +-----------------------+\n                                  |\n                                  v\n              +------------------------+      +-----------------------+\n              |      Human             |      |        Fish           |\n              | (RefinedAbstraction)   |      | (RefinedAbstraction)  |\n              +------------------------+      +-----------------------+\n                      |                             |\n                      v                             v\n             +-----------------------+        +-----------------------+\n             |     Lungs             |        |       Gills           |\n             | (ConcreteImplementor) |        | (ConcreteImplementor) |\n             +-----------------------+        +-----------------------+\n                     |                              |\n                     v                              v\n            +-------------------+           +--------------------+\n            |  Method: breathe()|           |  Method: breathe() |\n            +-------------------+           +--------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/#key-relationships","title":"Key Relationships:","text":"<ul> <li>has-a: Each <code>Species</code> has a <code>BreathingMethod</code> (Lungs or Gills) to perform breathing.</li> <li>is-a: <code>Human</code> and <code>Fish</code> are specific types of <code>Species</code>.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Bridge Design Pattern allows for the decoupling of abstraction from implementation, enabling both to evolve independently. In this example, it separates the species (abstraction) from their breathing methods (implementation), facilitating changes without affecting each other.</li> <li>When to Use: Use the Bridge Pattern when you want to avoid a permanent binding between an abstraction and its implementation or when both can change independently.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/#breathing-example","title":"Breathing Example:","text":"<ul> <li>Abstraction: <code>Species</code> represents the concept of breathing without specifying how.</li> <li>Implementor: <code>BreathingMethod</code> defines how breathing occurs.</li> <li>Concrete Implementors: <code>Lungs</code> and <code>Gills</code> provide specific implementations for breathing.</li> <li>Refined Abstractions: <code>Human</code> and <code>Fish</code> use the breathing methods to perform the action of breathing.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/#core-principle-and-relationships","title":"Core Principle and Relationships:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/#decoupling-abstraction-and-implementation","title":"Decoupling Abstraction and Implementation:","text":"<ul> <li>The Bridge Pattern allows independent variation of both the species and the breathing methods. You can add new species or breathing methods without modifying existing code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>Simplification: Decouples the abstraction (Species) from the implementation (BreathingMethod).</li> <li>Flexibility: Both species and breathing methods can evolve independently.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/BridgePattern/#bridge-vs-strategy-pattern","title":"Bridge vs. Strategy Pattern:","text":"Bridge Pattern Strategy Pattern Decouples abstraction from implementation. Focuses on switching between algorithms for a specific behavior. Involves an abstraction with multiple implementations that can vary independently. Involves a context that delegates to a strategy interface to perform a specific behavior. Example: Different species breathing in different ways (Lungs, Gills). Example: Switching between different breathing techniques (shallow vs. deep breathing). <ul> <li>Bridge focuses on separating abstraction and implementation, while Strategy emphasizes interchangeable algorithms for a behavior.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/","title":"Composite Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#key-components","title":"Key Components:","text":"<pre><code>                    +---------------------------+\n                    |        Client (Main)      |\n                    +---------------------------+\n                                  |\n                                  v\n                    +---------------------------+\n                    |      FileSystem (Intf)     |\n                    +---------------------------+\n                                  |\n                +----------------+----------------+\n                |                                 |\n+---------------------------+        +---------------------------+\n|      Directory (Composite) |        |       File (Leaf)         |\n+---------------------------+        +---------------------------+\n                |\nhas-a List&lt;FileSystem&gt; (File or Directory)\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#explanation","title":"Explanation:","text":"<ul> <li>Client (Main): The main application or system that interacts with composite and leaf objects.</li> <li>FileSystem (Interface): A common interface for all components (<code>Directory</code> and <code>File</code>), representing the abstraction of a filesystem element.</li> <li>Directory (Composite): A class that can contain a collection of <code>FileSystem</code> objects (either <code>File</code> or <code>Directory</code>). This demonstrates a has-a relationship where a <code>Directory</code> can have multiple <code>FileSystem</code> objects.</li> <li>File (Leaf): A class that represents a leaf node in the composite structure. It cannot contain other <code>FileSystem</code> objects and defines behavior for individual files.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Composite Pattern is essential when you need to treat individual objects and compositions of objects uniformly.</li> <li>When to Use: This pattern is useful when you have a hierarchical structure (like a filesystem or an organization chart) where individual components and their compositions should be interacted with in the same way.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#_1","title":"Composite Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#real-life-example-file-system","title":"Real-Life Example - File System:","text":"<ul> <li>Client (Main): The user or system that creates and interacts with <code>File</code> and <code>Directory</code> objects.</li> <li>FileSystem (Interface): Defines the common operations (e.g., <code>ls()</code> in our example) that are shared between <code>File</code> and <code>Directory</code>.</li> <li>Directory (Composite): Represents a folder that can contain other <code>FileSystem</code> objects, such as files or other directories. It recursively performs operations on its children.</li> <li>File (Leaf): Represents a single file in the system and implements the <code>FileSystem</code> interface but does not have any child elements.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#filesystem-hierarchy","title":"Filesystem Hierarchy:","text":"<ul> <li>Operating systems use this pattern to represent files and directories. Each directory can contain files or other directories, and both are treated with similar operations like <code>ls</code>, <code>copy</code>, etc.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#organization-hierarchy","title":"Organization Hierarchy:","text":"<ul> <li>Companies use the composite pattern to represent organizational structures, where each department or employee can be part of a hierarchy that can be managed in a uniform way.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#gui-component-trees","title":"GUI Component Trees:","text":"<ul> <li>In graphical user interfaces, components like windows, buttons, and containers are organized in a tree structure. Composite components can contain other components, while individual components like buttons cannot.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#uniformity","title":"Uniformity:","text":"<ul> <li>The pattern allows you to treat individual objects and composite objects uniformly. This simplifies client code since it doesn't need to distinguish between leaf nodes and composite nodes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#extensibility","title":"Extensibility:","text":"<ul> <li>New types of components (e.g., new file types or directory-like structures) can be easily added without changing the client code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#structural-hierarchy","title":"Structural Hierarchy:","text":"<ul> <li>The composite pattern provides a structured way to represent a tree hierarchy where both the leaf and composite elements follow the same interface, making it scalable and easy to navigate.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#key-takeaways","title":"Key Takeaways:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#composite-design","title":"Composite Design:","text":"<ul> <li>The pattern is designed for situations where you need to represent part-whole hierarchies (e.g., files and directories, organization charts).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#flexibility","title":"Flexibility:","text":"<ul> <li>By using the same interface for individual objects and compositions of objects, you gain the flexibility to work with objects without needing to know their specific type.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/CompositePattern/#recursive-structure","title":"Recursive Structure:","text":"<ul> <li>The composite pattern\u2019s recursive nature allows it to work well for hierarchical data structures like trees, where components can contain other components.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/","title":"Decorator Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#key-components","title":"Key Components:","text":"<pre><code>                        +--------------------------+\n                        |       Client (Main)      |\n                        +--------------------------+\n                                      |\n                                      v\n                        +--------------------------+\n                        |     BasePizza (Abstract) |\n                        +--------------------------+\n                                      |\n                    +-----------------+----------------+\n                    |                                  |\n       +-----------------------------+     +-----------------------------+\n       |   Concrete Pizzas           |     |     ToppingDecorator        |\n       |  (Margherita, Farmhouse)    |     |  (ExtraCheese, Mushroom)    |\n       +-----------------------------+     +-----------------------------+\n                                      |\n                                      v\n                        +----------------------------+\n                        |  Concrete Toppings (e.g.)  |\n                        |   ExtraCheese, Mushroom    |\n                        +----------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Decorator Pattern is needed when we want to dynamically add or enhance the functionality of an object at runtime without modifying the original object's code structure.</li> <li>When to Use: Use this pattern when an object needs additional functionalities but modifying its core structure is not feasible or would lead to code duplication.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#real-life-example-pizza-ordering-system","title":"Real-Life Example - Pizza Ordering System:","text":"<ul> <li>Client (Main): The customer ordering a pizza.</li> <li>BasePizza (Abstract): Defines the core pizza interface with a method like <code>cost()</code>.</li> <li>Concrete Pizzas: Represents specific types of pizzas like <code>Margherita</code>, <code>Farmhouse</code>.</li> <li>ToppingDecorator (Abstract): A wrapper that can decorate or add features to a <code>BasePizza</code> object (e.g., extra cheese or mushrooms).</li> <li>Concrete Toppings: Specific decorators like <code>ExtraCheese</code> and <code>Mushroom</code> that add functionality (like additional cost).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#example-adding-toppings-to-pizza","title":"Example - Adding Toppings to Pizza:","text":"<ul> <li>Client: Orders a <code>Margherita</code> and adds <code>ExtraCheese</code> and <code>Mushroom</code> as toppings.</li> <li>BasePizza: <code>Margherita</code> has a base cost of 100.</li> <li>ToppingDecorator: <code>ExtraCheese</code> and <code>Mushroom</code> increase the cost by 10 and 15 respectively, without altering the <code>Margherita</code> class.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#1-coffee-shop","title":"1. Coffee Shop:","text":"<ul> <li>At a coffee shop, you order a base coffee and add toppings like whipped cream, syrup, or an extra shot of espresso. The price increases with each addition.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#2-window-systems","title":"2. Window Systems:","text":"<ul> <li>In GUI applications, a window can have multiple scrollbars, borders, or decorations applied dynamically without altering the core window class.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#3-file-io-streams","title":"3. File I/O Streams:","text":"<ul> <li>In I/O streams, the base class provides reading/writing functionality, and decorators like buffered, compressed, or encrypted streams add extra features at runtime.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The pattern allows you to add functionality to individual objects without affecting other objects of the same class.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#reusability","title":"Reusability:","text":"<ul> <li>Once defined, decorators can be reused and applied in various combinations to different objects.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#extensibility","title":"Extensibility:","text":"<ul> <li>New decorators can be easily added to the system without modifying existing code, making it easy to extend functionality.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#avoids-class-explosion","title":"Avoids Class Explosion:","text":"<ul> <li>Instead of creating multiple subclasses for each combination of functionalities, decorators can be combined dynamically to add functionalities as needed.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#key-takeaways","title":"Key Takeaways:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#separation-of-concerns","title":"Separation of Concerns:","text":"<ul> <li>The base object\u2019s core responsibilities are separated from additional functionalities, which are implemented as decorators.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#dynamic-behavior","title":"Dynamic Behavior:","text":"<ul> <li>The pattern allows you to add behavior dynamically at runtime, making it very flexible for scenarios where functionalities vary frequently.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/DecoratorPattern/#composition-over-inheritance","title":"Composition over Inheritance:","text":"<ul> <li>Decorators favor composition (wrapping objects) rather than inheritance, allowing for more dynamic behavior without an excessive class hierarchy.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/","title":"Facade Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#key-components","title":"Key Components:","text":"<pre><code>                        +-----------------------+\n                        |     Client (Main)     |\n                        +-----------------------+\n                                  |\n                                  v\n                        +-----------------------+\n                        |       Facade          |  &lt;------  is-a\n                        +-----------------------+\n                                  |\n                                  v\n             +------------------------+      +-----------------------+\n             | Subsystem A            |      |    Subsystem B        |\n             +------------------------+      +-----------------------+\n                      |                          |\n                      v                          v\n             +------------------+       +-------------------+\n             |  Class A1, A2    |       |  Class B1, B2     |\n             +------------------+       +-------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#key-relationships","title":"Key Relationships:","text":"<ul> <li>has-a: The Facade has access to multiple subsystems (<code>Subsystem A</code>, <code>Subsystem B</code>).</li> <li>is-a: The Facade represents the client\u2019s simplified interface to these subsystems.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Facade Design Pattern simplifies complex systems by providing a unified interface. It hides the complexities of subsystems and allows the client to interact with a single, cohesive interface.</li> <li>When to Use: Use a facade when you need to simplify interactions with a complex system, or when clients should not be exposed to the entire functionality of subsystems.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#_1","title":"Facade Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#real-life-example-home-theater-system","title":"Real-Life Example - Home Theater System:","text":"<ul> <li>Client (Main): The user who interacts with the home theater system.</li> <li>Facade: A simplified <code>HomeTheaterFacade</code> class that controls all components like <code>Amplifier</code>, <code>DVD Player</code>, <code>Projector</code>, and <code>Lights</code>.</li> <li>Subsystems: Individual components such as <code>Amplifier</code>, <code>DVD Player</code>, and <code>Projector</code>, which provide the actual functionality but are too complex for the user to manage independently.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#example-home-theater","title":"Example - Home Theater:","text":"<ul> <li>Client: The user who wants to turn on the home theater.</li> <li>Facade: <code>HomeTheaterFacade</code> which provides methods like <code>startMovie()</code> and <code>endMovie()</code>.</li> <li>Subsystems: The classes that handle individual tasks like turning on the amplifier, setting up the projector, and lowering the lights.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#core-principle-and-relationships","title":"Core Principle and Relationships:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#hide-complexity","title":"Hide Complexity:","text":"<ul> <li>Facade hides the complexity of interacting with multiple subsystems. Instead of the client manually interacting with each subsystem (e.g., turning on the amplifier, DVD player, etc.), the client only interacts with the facade.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#not-mandatory-for-the-client","title":"Not Mandatory for the Client:","text":"<ul> <li>Direct Access: The client can directly access subsystems if needed. The facade just provides an optional, simpler interface but does not force its usage.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#facade-using-other-facades","title":"Facade Using Other Facades:","text":"<ul> <li>A facade can delegate tasks to another facade. For example, a <code>ComputerFacade</code> might use a <code>HardDriveFacade</code> and a <code>MemoryFacade</code> to interact with hardware subsystems.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#facade-vs-proxy","title":"Facade vs. Proxy:","text":"Facade Proxy Simplifies and hides complexity. Controls access to an object. Focuses on interaction with multiple subsystems. Focuses on controlling or restricting access. Can manage multiple subsystems at once. Usually works with a single object or service. <ul> <li>Facade is about providing a simpler interface for complex systems.</li> <li>Proxy controls access to an object, typically to add functionality like lazy initialization, logging, or security.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#facade-vs-adapter","title":"Facade vs. Adapter:","text":"Facade Adapter Provides a unified, simpler interface for multiple subsystems. Converts one interface to another so that incompatible systems can work together. Hides the complexity of subsystems without changing them. Adapts the interface of one class to make it compatible with another class. Goal: Simplify. Goal: Adapt. <ul> <li>Facade is about simplifying interactions with multiple classes.</li> <li>Adapter is about converting one interface to make it compatible with another interface.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#home-theater-systems","title":"Home Theater Systems:","text":"<ul> <li>A <code>HomeTheaterFacade</code> simplifies the process of turning on the TV, setting the sound system, and adjusting lighting.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#complex-library-management","title":"Complex Library Management:","text":"<ul> <li>In complex systems like software libraries, a facade can simplify the interface, allowing developers to use a high-level API without worrying about the underlying details.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#e-commerce-systems","title":"E-commerce Systems:","text":"<ul> <li>A facade can simplify the process of placing an order by interacting with multiple subsystems like <code>Inventory</code>, <code>Payments</code>, and <code>Shipping</code>.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#hides-complexity","title":"Hides Complexity:","text":"<ul> <li>Facade simplifies complex systems by hiding their internal workings and providing a clean, easy-to-use interface for clients.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#flexibility","title":"Flexibility:","text":"<ul> <li>The client can choose to use the facade or directly interact with subsystems as needed, providing more flexibility.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#decoupling","title":"Decoupling:","text":"<ul> <li>The facade helps decouple the client from the subsystem implementations. This makes the system easier to maintain and change without affecting the client.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#key-takeaways","title":"Key Takeaways:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#simplification","title":"Simplification:","text":"<ul> <li>Facade simplifies the interaction between the client and the complex subsystems.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#optional-use","title":"Optional Use:","text":"<ul> <li>Clients can interact with the facade or directly with the subsystems, making it an optional convenience layer.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FacadePattern/#subsystem-management","title":"Subsystem Management:","text":"<ul> <li>The facade doesn\u2019t alter subsystems but simply provides a more approachable interface.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/","title":"Flyweight Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#key-components","title":"Key Components:","text":"<pre><code>                        +-----------------------+\n                        |     Client (Main)     |\n                        +-----------------------+\n                                  |\n                                  v\n                        +-----------------------+\n                        |    Flyweight Factory  |  &lt;------  is-a\n                        +-----------------------+\n                                  |\n                                  v\n                    +---------------------------+\n                    |  Flyweight Interface      |  &lt;------  is-a\n                    +---------------------------+\n                                  |\n                                  v\n            +----------------------+      +----------------------+\n            | Concrete Flyweight A |      | Concrete Flyweight B |\n            +----------------------+      +----------------------+\n                        |                              |\n                        v                              v\n            +----------------------+          +----------------------+\n            | Intrinsic Properties |          | Intrinsic Properties |\n            +----------------------+          +----------------------+\n                        |\n                        v\n            +-------------------------------+\n            | Extrinsic Properties (Client) |\n            +-------------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#key-relationships","title":"Key Relationships:","text":"<ul> <li>has-a: The Flyweight Factory has access to multiple concrete flyweight objects.</li> <li>is-a: The Concrete Flyweight objects implement the shared Flyweight Interface, representing shared intrinsic properties.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#why-its-required-and-when-to-use","title":"Why It\u2019s Required and When to Use:","text":"<ul> <li>Why: The Flyweight Pattern is useful when many objects share the same data, enabling memory optimization. It minimizes memory usage by sharing as much data as possible among similar objects.</li> <li>When to Use: Use when you need to create a large number of similar objects that share intrinsic data, and memory optimization is critical, such as in graphic systems, word processors, or games.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#example-usage","title":"Example Usage:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#real-life-example-word-processor","title":"Real-Life Example - Word Processor:","text":"<ul> <li>Client (Main): The user typing in a word processor.</li> <li>Flyweight Factory: Manages character objects, ensuring only one instance of each character and font style is created and reused.</li> <li>Flyweights (Concrete Flyweight): Characters like 'A', 'B', etc., which share the same font and glyph but have different positions on the document.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#example-word-processor","title":"Example - Word Processor:","text":"<ul> <li>Client: The user writing a document.</li> <li>Flyweight Factory: <code>CharacterFactory</code> that manages shared character glyphs.</li> <li>Concrete Flyweights: Characters such as 'A', 'B', which reuse the same memory for characters with the same font and style.</li> <li>Extrinsic State: The position of characters and specific formatting (bold, italic) passed at runtime.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#core-principle-and-relationships","title":"Core Principle and Relationships:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#efficient-memory-usage","title":"Efficient Memory Usage:","text":"<ul> <li>Flyweight allows efficient memory usage by sharing intrinsic data (e.g., character glyphs) while keeping external properties (e.g., position) separate and unique for each object.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#flyweight-factory","title":"Flyweight Factory:","text":"<ul> <li>The Flyweight Factory manages shared flyweight objects, ensuring that memory is not wasted on duplicate objects with the same intrinsic state.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#intrinsic-and-extrinsic-state","title":"Intrinsic and Extrinsic State:","text":"<ul> <li>Intrinsic: Shared state (e.g., character shape, font) that is stored once.</li> <li>Extrinsic: Unique state (e.g., position in a document, color) that is passed in by the client when needed.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#flyweight-vs-prototype","title":"Flyweight vs. Prototype:","text":"Flyweight Prototype Focuses on reusing objects with shared intrinsic data. Focuses on cloning existing objects. Efficient for memory optimization. Efficient for object creation when cloning is easier than creating from scratch. Intrinsic and extrinsic states separate. Clones entire object including all its state. <ul> <li>Flyweight is about sharing intrinsic data to save memory.</li> <li>Prototype is about cloning objects to avoid complex initialization.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#real-world-use-cases","title":"Real-World Use Cases:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#word-processors","title":"Word Processors:","text":"<ul> <li>Characters like 'A', 'B', and 'C' are repeated throughout a document. Using flyweight reduces memory usage by sharing these character objects.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#game-development","title":"Game Development:","text":"<ul> <li>In games, objects like trees, rocks, and enemies often share similar appearances but are positioned differently on the screen. Flyweight allows reusing these shared elements while storing only the unique positioning data.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#key-benefits","title":"Key Benefits:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#memory-optimization","title":"Memory Optimization:","text":"<ul> <li>Flyweight saves memory by sharing large amounts of data that are common across many objects, making it ideal for applications where many similar objects are created.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#flexibility","title":"Flexibility:","text":"<ul> <li>Allows customization through extrinsic properties, which can be passed at runtime without modifying the shared intrinsic data.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#decoupling","title":"Decoupling:","text":"<ul> <li>Intrinsic and extrinsic data are decoupled, making it easier to manage large datasets.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#key-takeaways","title":"Key Takeaways:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#efficient-resource-management","title":"Efficient Resource Management:","text":"<ul> <li>Flyweight reduces the number of objects needed by sharing common data, thereby optimizing memory usage.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#separation-of-concerns","title":"Separation of Concerns:","text":"<ul> <li>Intrinsic state is stored in the flyweight, while extrinsic state is provided by the client, promoting cleaner, more maintainable code.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/FlyWeightPattern/#reuse","title":"Reuse:","text":"<ul> <li>Encourages reuse of objects, reducing the overhead of memory allocation and improving performance.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/","title":"Proxy Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#overview","title":"Overview","text":"<p>The Proxy Design Pattern provides a surrogate or placeholder object to control access to another object. It can add functionality like access control, caching, lazy initialization, and logging without changing the original object's code.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#core-principle","title":"Core Principle","text":"<ul> <li>Access Restriction: Controls access to an object based on permissions.</li> <li>Caching: Can cache results of expensive operations and return cached data to improve performance.</li> <li>Pre-processing &amp; Post-processing: Handles tasks before or after the actual operation (e.g., logging, validation).</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#key-components","title":"Key Components:","text":"<pre><code>+----------------------------+    'is-a'       +-------------------------+\n|        Client (Main)        |&lt;---------------|  EmployeeDaoProxy       |\n+----------------------------+                 +-------------------------+\n                                      |                     ^\n                                      v                   'has-a'\n                            +-------------------------+\n                            |     EmployeeDaoImpl     |\n                            +-------------------------+\n                                      |\n                                      v\n                            +-------------------------+\n                            |      EmployeeDo         |\n                            +-------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#explanation-of-key-relationships","title":"Explanation of Key Relationships:","text":"<ul> <li>is-a: <code>EmployeeDaoProxy</code> implements the <code>EmployeeDao</code> interface, meaning it can act as an <code>EmployeeDao</code> and perform operations on the employee.</li> <li>has-a: The <code>EmployeeDaoProxy</code> has-a <code>EmployeeDaoImpl</code>, which means it holds a reference to the real object that performs the actual operations.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#why-use-the-proxy-design-pattern","title":"Why Use the Proxy Design Pattern?","text":"<ul> <li>Access Restriction: The proxy restricts access to certain operations based on client roles (e.g., only <code>ADMIN</code> can create or delete employees).</li> <li>Caching: It can cache results for read operations to avoid calling the actual object multiple times for the same data.</li> <li>Pre-processing and Post-processing: Before delegating the call to the real object, the proxy can add additional steps like security checks, logging, or data validation.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#_1","title":"Proxy Design Pattern","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#example-access-control-proxy","title":"Example: Access Control Proxy","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#code-explanation","title":"Code Explanation:","text":"<ul> <li>Client: The main function which interacts with the <code>EmployeeDaoProxy</code>.</li> <li>Proxy (<code>EmployeeDaoProxy</code>): Controls access to the actual implementation (<code>EmployeeDaoImpl</code>).</li> <li>Real Object (<code>EmployeeDaoImpl</code>): Performs the actual operations like creating, deleting, and retrieving employee data.</li> <li>EmployeeDo: The data object representing an employee.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#flowchart-explanation","title":"Flowchart Explanation:","text":"<ul> <li>The Client interacts with the EmployeeDaoProxy, which then checks permissions (access control) and forwards the request to the EmployeeDaoImpl.</li> <li>The has-a relationship between <code>EmployeeDaoProxy</code> and <code>EmployeeDaoImpl</code> indicates that the proxy holds an instance of the real object and delegates tasks to it.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#usage-scenarios","title":"Usage Scenarios:","text":"<ul> <li>Access Restriction: Use a proxy to control access to methods based on user roles or permissions.</li> <li>Caching: Use a proxy to cache expensive operations and return cached data for repeated calls.</li> <li>Pre-processing and Post-processing: Log information, validate inputs, or enforce security checks before forwarding the call to the actual object.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#key-benefits","title":"Key Benefits:","text":"<ul> <li>Control Access: Proxies provide a way to control access to objects, enabling actions like access restriction or validation.</li> <li>Flexible Caching: Proxies can act as cache handlers to reduce redundant calls to expensive resources.</li> <li>Decoupling: The client interacts with the proxy, which hides the complexity of the underlying object and its processes.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Design-Patterns/Structural-Design-Patterns/ProxyPattern/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>The Proxy simplifies controlling access to the actual object.</li> <li>It is used for access control, caching, and pre- or post-processing of data.</li> <li>has-a and is-a relationships are important for understanding how proxies interact with real objects.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/","title":"\ud83d\udd25 LLD Interview Questions","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ol> <li>\ud83d\ude97 Design Parking Lot</li> <li>\u274c\u2b55 Tic Tac Toe</li> <li>\ud83d\uded7 Elevator System</li> <li>\ud83d\ude99 Car Rental System</li> <li>\ud83d\udc0d\ud83c\udfb2 Snake and Ladder</li> <li>\ud83c\udfa5 BookMyShow</li> <li>\ud83d\udcb3 Design ATM</li> <li>\ud83d\udcb0 Split Wise</li> <li>\ud83c\udfcf Design Cricbuzz</li> <li>\ud83d\udce6 Design Inventory Management System</li> <li>\ud83d\uded2 Apply Coupons on Shopping Cart Product</li> <li>\ud83d\udcb5 Payment Gateway</li> <li>\ud83d\udcda Library Management System</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/","title":"\ud83c\udfe7 ATM","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>\ud83d\ude80 Educative.IO - Skeleton Code</li> <li>\ud83d\udc64 Shreyansh Jain</li> <li>\ud83d\udd10 Security Diagram</li> <li>\ud83c\udfa8 Design Doc</li> <li>\ud83d\udd17 Resources<ul> <li>\ud83d\udc64 - Udemy</li> <li>\ud83d\udcbb Code</li> <li>\ud83d\udcbb GitHub Code</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/","title":"\ud83d\udd10 Security Design for ATM \u2013 End-to-End Architecture","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#1-key-security-considerations","title":"\ud83d\ude80 1. Key Security Considerations","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#security-goals","title":"\ud83d\udccc Security Goals:","text":"<ul> <li>\ud83d\udd12 Data Privacy: Protect user PIN, account details, and transactions.</li> <li>\ud83d\udd10 Integrity: Prevent unauthorized modifications to transactions.</li> <li>\u2699\ufe0f Availability: Ensure uptime and prevent ATM downtime due to attacks.</li> <li>\u2705 Compliance: Adhere to PCI-DSS, EMV, and OWASP security standards.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#2-security-architecture-flow","title":"\ud83d\udee0\ufe0f 2. Security Architecture Flow","text":"<pre><code>[User] \u2192 [ATM Machine] \u2192 [Bank Server] \u2192 [Payment Network] \u2192 [Card Issuer Bank]\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#security-layers-across-the-flow","title":"\u2705 Security Layers Across the Flow:","text":"<ul> <li>ATM Machine Security:<ul> <li>\ud83d\udd12 Card skimmer protection, tamper detection.</li> <li>\ud83d\udd10 PIN encryption at input.</li> </ul> </li> <li>Communication Security:<ul> <li>\ud83d\udd25 TLS 1.3 for encrypted communication.</li> <li>\ud83d\udd10 Mutual authentication between ATM and bank server.</li> </ul> </li> <li>Bank Server Security:<ul> <li>\u2699\ufe0f Rate limiting, fraud detection.</li> <li>\ud83d\udd12 Transaction validation &amp; monitoring.</li> </ul> </li> <li>Payment Network:<ul> <li>\ud83d\udd10 PCI-DSS compliant data handling.</li> <li>\u2705 Tokenization &amp; encryption of sensitive data.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#3-security-design-components","title":"\ud83d\udd25 3. Security Design Components","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#1-atm-authentication-authorization","title":"\ud83d\udd10 1. ATM Authentication &amp; Authorization","text":"<p>\u2705 Techniques: - Card &amp; PIN Verification:     - \ud83d\udd25 EMV chip authentication for card validation.     - \ud83d\udd12 PIN block encryption before transmission. - Multi-Factor Authentication (MFA):     - \ud83d\udd25 Biometric verification (fingerprint, iris scan).     - \ud83d\udd10 OTP verification for high-value transactions.</p> <p>\u2705 Best Practices: - \ud83d\udd25 PIN retry limits \u2192 lockout after 3 failed attempts. - \ud83d\udd10 Tamper-proof hardware \u2192 shutdown ATM on tampering.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#2-communication-security","title":"\ud83d\udee1\ufe0f 2. Communication Security","text":"<p>\u2705 Techniques: - Encryption in Transit:     - \ud83d\udd12 TLS 1.3 with mutual authentication.     - \ud83d\udd10 HSM (Hardware Security Module) for key management. - Tokenization:     - \ud83d\udd25 Replace card data with tokens during transmission.</p> <p>\u2705 Best Practices: - \ud83d\udd25 Replay attack prevention: Include timestamps in transactions. - \ud83d\udd10 End-to-end encryption for sensitive data.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#3-data-security","title":"\ud83d\udd12 3. Data Security","text":"<p>\u2705 Techniques: - Encryption:     - \ud83d\udd12 At rest: Encrypt PINs, account info with AES-256.     - \ud83d\udd10 In transit: Use TLS 1.3 for data transmission. - Data Masking:     - \ud83d\udd25 Mask card numbers except for the last 4 digits.     - \ud83d\udd10 Mask transaction details on user receipts.</p> <p>\u2705 Best Practices: - \ud83d\udd25 HSM for PIN encryption \u2192 ensures secure PIN handling. - \ud83d\udd10 Access control policies for sensitive data.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#4-payment-security","title":"\ud83d\udee1\ufe0f 4. Payment Security","text":"<p>\u2705 Techniques: - Tokenization:     - \ud83d\udd25 Replace card data with tokens to prevent theft.     - \ud83d\udd10 Use HMAC signature verification for transaction callbacks. - Fraud Detection:     - \ud83d\udd25 AI-based fraud detection systems.     - \ud83d\udd10 Real-time anomaly detection.</p> <p>\u2705 Best Practices: - \ud83d\udd25 Transaction velocity monitoring \u2192 detect suspicious activity. - \ud83d\udd10 Timeouts for inactive sessions.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#5-ddos-and-rate-limiting-protection","title":"\ud83d\udd25 5. DDoS and Rate Limiting Protection","text":"<p>\u2705 Techniques: - Rate Limiting:     - \u2699\ufe0f Transaction rate limiting \u2192 prevent brute force.     - \ud83d\udd25 Geo-fencing \u2192 block unusual locations. - DDoS Protection:     - \ud83d\udd10 WAF (Web Application Firewall) \u2192 block malicious traffic.     - \ud83d\udd25 Use CDN-level protection (e.g., Akamai).</p> <p>\u2705 Best Practices: - \ud83d\udd25 Circuit breakers to prevent cascading failures. - \ud83d\udd10 Real-time alerts for suspicious activities.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#6-logging-monitoring","title":"\u2699\ufe0f 6. Logging &amp; Monitoring","text":"<p>\u2705 Techniques: - Centralized logging:     - \ud83d\udd25 Use ELK stack (Elasticsearch, Logstash, Kibana).     - \ud83d\udd10 Real-time transaction monitoring. - Anomaly Detection:     - \ud83d\udd25 Use Prometheus + Grafana for visualization.     - \ud83d\udd10 AI-based anomaly detection.</p> <p>\u2705 Best Practices: - \ud83d\udd25 Log retention for audit purposes. - \ud83d\udd10 Mask sensitive data in logs.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#7-secure-deployment-cicd","title":"\ud83d\udd0d 7. Secure Deployment &amp; CI/CD","text":"<p>\u2705 Techniques: - Code Analysis:     - \ud83d\udd25 SonarQube for static analysis.     - \ud83d\udd10 Dynamic testing with Zap or Burp Suite. - Secrets Management:     - \ud83d\udd12 Use AWS Secrets Manager / HashiCorp Vault.</p> <p>\u2705 Best Practices: - \ud83d\udd25 Automate code reviews with security checks. - \ud83d\udd10 Infrastructure as Code (IaC) with security policies.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#4-security-architecture-diagram","title":"\ud83c\udf1f 4. Security Architecture Diagram","text":"<pre><code>               +-----------------------+\n               |       ATM User        |\n               +-----------------------+\n                          \u2193\n       +----------------------------------+\n       |         ATM Machine (TLS 1.3)    |\n       +----------------------------------+\n                 \u2193              \u2193\n     +----------------+    +-----------------+\n     | Bank Server    |    | Payment Gateway |\n     +----------------+    +-----------------+\n            \u2193                       \u2193\n+---------------------+    +---------------------+\n|    User DB (AES-256)  |    |  PCI-DSS Gateway   |\n+---------------------+    +---------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#5-key-takeaways","title":"\ud83d\ude80 5. Key Takeaways","text":"<p>\u2705 Authentication: EMV chip + PIN encryption + MFA \u2705 Communication Security: TLS 1.3 + HSM + Tokenization \u2705 Data Protection: AES-256 encryption + masking \u2705 Fraud Prevention: Geo-fencing + transaction velocity monitoring \u2705 Monitoring: Real-time alerts + AI-based anomaly detection \u2705 Compliance: PCI-DSS + EMV standards</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/ATM-security-design/#final-verdict","title":"\ud83d\udd25 Final Verdict","text":"<ul> <li>This multi-layered security design ensures robust protection against common vulnerabilities.</li> <li>It covers data privacy, payment security, DDoS protection, and compliance, making it secure and scalable for ATM platforms. \ud83d\ude80</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design-doc/","title":"\ud83c\udfe7 ATM","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design-doc/#references","title":"\ud83d\udd17 References:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design-doc/#-video-link","title":"- Video - link","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/","title":"\ud83c\udfe7 Design an ATM System","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#overview","title":"\ud83d\udee0\ufe0f Overview","text":"<p>An Automated Teller Machine (ATM) is an electronic telecommunications device that provides clients of a financial institution access to financial transactions in a public space without needing a cashier or bank teller. ATMs offer convenience as they operate even when bank branches are closed.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#requirements-and-goals","title":"\u2705 Requirements and Goals","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#main-components-of-the-atm","title":"\ud83d\udd25 Main Components of the ATM:","text":"<ul> <li>\ud83d\udcb3 Card Reader: Reads the users' ATM cards.</li> <li>\ud83d\udd22 Keypad: Allows users to enter information (e.g., PIN).</li> <li>\ud83d\udda5\ufe0f Screen: Displays messages and instructions.</li> <li>\ud83d\udcb5 Cash Dispenser: Dispenses cash to customers.</li> <li>\ud83d\udcb0 Deposit Slot: Enables users to deposit cash or checks.</li> <li>\ud83d\udda8\ufe0f Printer: Prints receipts for transactions.</li> <li>\ud83c\udf10 Communication/Network Infrastructure:<ul> <li>Ensures the ATM communicates with the bank during transactions.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#supported-transactions","title":"\ud83d\udee1\ufe0f Supported Transactions:","text":"<ul> <li>\ud83d\udcb0 Balance Inquiry: Check the account balance.</li> <li>\ud83d\udcb5 Deposit Cash: Add cash to the account.</li> <li>\ud83d\udcdd Deposit Check: Add check deposits (pending verification).</li> <li>\ud83d\udcb8 Withdraw Cash: Withdraw money from checking accounts.</li> <li>\ud83d\udd01 Transfer Funds: Transfer money between accounts.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#how-atm-works","title":"\ud83d\udd25 How ATM Works?","text":"<ul> <li>The ATM is managed by an operator who refills it with cash and receipts.</li> <li>It serves one customer at a time and should not shut down mid-service.</li> <li>Transaction Flow:<ol> <li>Insert ATM card \u2192 Identify user.</li> <li>Enter PIN \u2192 Authenticate with the bank.</li> <li>Perform transactions (balance inquiry, withdrawal, deposit, etc.).</li> <li>Session ends \u2192 ATM ejects the card.</li> </ol> </li> <li>The ATM maintains an internal transaction log for hardware failures, aiding the operator in resolving issues.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#use-case-diagram","title":"\ud83c\udfad Use Case Diagram","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#actors-in-the-system","title":"\ud83d\udee1\ufe0f Actors in the System:","text":"<ul> <li> <p>\ud83d\udee0\ufe0f Operator:</p> <ul> <li>Turn ATM ON/OFF using a key-switch.</li> <li>Refill cash and receipts.</li> <li>Replace printer ink.</li> <li>Remove deposited cash and checks.</li> </ul> </li> <li> <p>\ud83d\udc64 Customer:</p> <ul> <li>Balance Inquiry: View account balance.</li> <li>Cash Withdrawal: Withdraw a specified amount.</li> <li>Deposit Funds: Deposit cash or checks.</li> <li>Transfer Funds: Transfer money between accounts.</li> </ul> </li> <li> <p>\ud83c\udfe6 Bank Manager:</p> <ul> <li>Generate reports for total deposits and withdrawals.</li> <li>Print deposit/withdrawal reports.</li> <li>Check the remaining cash in the ATM.</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#class-diagram","title":"\ud83d\udcc4 Class Diagram","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#main-classes","title":"\ud83d\udcda Main Classes:","text":"<ul> <li>\ud83c\udfe7 ATM:<ul> <li>Core component of the system.</li> <li>Attributes: <code>atmID</code> (unique ID) and <code>location</code> (physical address).</li> </ul> </li> <li>\ud83d\udcb3 CardReader:<ul> <li>Reads customer ATM cards for authentication.</li> </ul> </li> <li>\ud83d\udcb5 CashDispenser:<ul> <li>Dispenses cash during withdrawal.</li> </ul> </li> <li>\ud83d\udd22 Keypad:<ul> <li>Used to enter PINs and transaction details.</li> </ul> </li> <li>\ud83d\udda5\ufe0f Screen:<ul> <li>Displays messages and transaction options.</li> </ul> </li> <li>\ud83d\udda8\ufe0f Printer:<ul> <li>Prints transaction receipts.</li> </ul> </li> <li>\ud83d\udcb0 DepositSlot:<ul> <li>Allows users to deposit cash or checks.</li> </ul> </li> <li>\ud83c\udfe6 Bank:<ul> <li>Contains all account information.</li> <li>ATM communicates with the bank for transactions.</li> </ul> </li> <li>\ud83d\udc64 Account:<ul> <li>Two types:<ul> <li><code>Checking</code>: Regular account for daily transactions.</li> <li><code>Savings</code>: Account for storing funds with limited transactions.</li> </ul> </li> </ul> </li> <li>\ud83d\udc65 Customer:<ul> <li>Represents the ATM\u2019s customer.</li> <li>Attributes: <code>name</code>, <code>email</code>, etc.</li> </ul> </li> <li>\ud83d\udcb3 Card:<ul> <li>Represents the customer\u2019s debit/credit card used for authentication.</li> </ul> </li> <li>\ud83d\udd25 Transaction:<ul> <li>Encapsulates all possible transactions:<ul> <li><code>BalanceInquiry</code></li> <li><code>Deposit</code></li> <li><code>Withdraw</code></li> <li><code>Transfer</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#code","title":"\ud83d\udcbb Code","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#high-level-class-definitions","title":"\ud83d\udd25 High-Level Class Definitions:","text":"<ul> <li>\ud83d\udccc Enums and Constants:<ul> <li>Includes required enums, data types, and constants.</li> </ul> </li> <li>\ud83d\udc64 Customer, Card, and Account:<ul> <li><code>Customer</code>: Encapsulates the ATM user.</li> <li><code>Card</code>: Represents the ATM card.</li> <li><code>Account</code>: Contains two types: <code>Checking</code> and <code>Savings</code>.</li> </ul> </li> <li>\ud83c\udfe6 Bank, ATM, CashDispenser, Keypad, Screen, Printer, and DepositSlot:<ul> <li>Defines core ATM components and their interactions.</li> </ul> </li> <li>\ud83d\udd25 Transaction and its Subclasses:<ul> <li>Encapsulates various customer transactions:<ul> <li><code>BalanceInquiry</code></li> <li><code>Deposit</code></li> <li><code>Withdraw</code></li> <li><code>Transfer</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#concurrency-and-security","title":"\u2699\ufe0f Concurrency and Security","text":"<p>To ensure security and reliability: - \u2705 Use transaction logs to track all ATM activities. - \ud83d\udd12 Implement PIN authentication with multiple retries before locking the account. - \ud83d\udd25 Session management:     - Card remains inserted until the transaction session ends.     - Eject card on session completion. - \ud83d\udeab Check Deposits:     - Subject to manual verification by the bank. - \ud83c\udf10 Communication with the Bank:     - Bank stores all account information.     - ATM communicates with the bank for every transaction.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#references","title":"\ud83d\udd17 References:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#-hldlld-design","title":"- HLD/LLD - Design","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/ATM/design_ATM_skeleton/#references_1","title":"\ud83d\udd17 References:","text":"<ul> <li>Udemy</li> <li>Security Design</li> </ul> <p>\u2705 This document provides a structured breakdown of the <code>ATM Design</code>. Happy coding! \ud83d\ude80</p> <p></p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/","title":"\ud83c\udfa5 Car Rental System","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/#car-rental-system_1","title":"\ud83d\udd27 Car Rental System","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/#flow","title":"\ud83d\ude97 Flow :","text":"<ol> <li> <p>Search Capability: <code>User</code> \u2192 <code>Store</code> \u2192 <code>Filter</code> \u2192 <code>Vehicle</code></p> </li> <li> <p>Reservation: <code>User</code> \u2192 <code>Location</code> \u2192 <code>Vehicle</code> \u2192 <code>Reserve</code> \u2192 <code>Bill</code> \u2192 <code>Payment</code></p> </li> <li> <p>Return: <code>User</code> \u2192 <code>Vehicle Submit</code></p> </li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/#core-object","title":"\ud83e\uddf1 Core Object:","text":"<ol> <li><code>User</code></li> <li><code>Location</code></li> <li><code>Store</code></li> <li><code>Vehicle</code> -&gt; Manage from VehicleInventoryManagement</li> <li><code>Reserve</code></li> <li><code>Bill</code></li> <li><code>Payment</code></li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>\ud83d\ude80 Educative.IO - Skeleton Code</li> <li>\ud83d\udc64 Shreyansh Jain</li> <li>\ud83d\udd10 Security Diagram</li> <li>\ud83c\udfa8 Design Doc</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/#resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>\ud83d\udc64 Shreyansh Jain - Udemy</li> <li>\ud83d\udcbb Code</li> <li>\ud83d\udcbb GitHub Code</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/","title":"\ud83d\ude97 Design a Car Rental System","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#overview","title":"\ud83d\udee0\ufe0f Overview","text":"<p>An online car rental system allows customers to search for available cars, reserve them, make payments, and manage their bookings. It facilitates car providers to list and manage their fleet across various locations.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#requirements-and-goals","title":"\u2705 Requirements and Goals","text":"<p>The car rental system should meet the following requirements:</p> <ul> <li>\ud83d\uddfa\ufe0f Location Management: List all available pickup and drop-off locations.</li> <li>\ud83d\ude98 Fleet Management: Each rental location can have multiple cars available in various categories.</li> <li>\ud83d\udd0d Search Functionality: Customers can search for cars based on:</li> <li>Car Type (e.g., SUV, Sedan, Hatchback)</li> <li>Brand</li> <li>Fuel Type</li> <li>Availability Dates</li> <li>Pickup Location</li> <li>\ud83d\udcc5 Reservation and Booking:</li> <li>View car availability</li> <li>Select pickup and return dates and locations</li> <li>Confirm reservation and generate booking details</li> <li>\ud83d\udcb3 Payments:</li> <li>Customers can pay via credit/debit cards, net banking, UPI, etc.</li> <li>Discount coupons can be applied</li> <li>\ud83d\udd14 Notifications:</li> <li>Booking confirmation, reminders, and cancellation notices</li> <li>\ud83d\udeab Concurrency Control:</li> <li>Prevent double booking of the same vehicle</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#use-case-diagram","title":"\ud83c\udfad Use Case Diagram","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#top-use-cases","title":"\ud83d\udccc Top Use Cases:","text":"<ul> <li>\ud83d\udd0d Search Cars: Based on location, type, and availability</li> <li>\ud83d\udcc5 Create/View/Cancel Booking: Manage rental reservations</li> <li>\ud83d\udcb3 Make Payment: Complete payment with available options</li> <li>\ud83c\udfab Apply Coupons: Discounts on valid bookings</li> <li>\ud83d\ude97 Pickup/Return Car: Track vehicle pickup and return</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#class-diagram","title":"\ud83d\udcc4 Class Diagram","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#main-classes","title":"\ud83d\udcda Main Classes:","text":"<ul> <li>\ud83d\udc64 Account:</li> <li>\ud83d\udc65 Person, Admin, Customer, FrontDeskAgent, Guest:</li> <li>\ud83c\udfe2 Branch and Address:</li> <li>\ud83d\ude98 Vehicle and VehicleType:</li> <li>\ud83d\udcc5 Booking and Payment:</li> <li>\ud83d\udd14 Notification:</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#activity-diagram","title":"\ud83d\udd25 Activity Diagram","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#make-a-booking","title":"\ud83d\ude97 Make a Booking:","text":"<ol> <li>Search for available cars</li> <li>Select car and booking dates</li> <li>Provide pickup and return locations</li> <li>Make payment</li> <li>Receive booking confirmation</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#cancel-a-booking","title":"\u274c Cancel a Booking:","text":"<ol> <li>Search for booking</li> <li>Request cancellation</li> <li>Process refund if eligible</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#code-overview","title":"\ud83d\ude80 Code Overview","text":"<p>Here is the high-level definition for the classes described above.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#enums-data-types-and-constants","title":"\ud83d\udd22 Enums, Data Types, and Constants","text":"<p>These are the required enums, data types, and constants used throughout the system.</p> <pre><code>public enum BillItemType {\n  BASE_CHARGE, ADDITIONAL_SERVICE, FINE, OTHER\n}\n\npublic enum VehicleLogType {\n  ACCIDENT, FUELING, CLEANING_SERVICE, OIL_CHANGE, REPAIR, OTHER\n}\n\npublic enum VanType {\n  PASSENGER, CARGO\n}\n\npublic enum CarType {\n  ECONOMY, COMPACT, INTERMEDIATE, STANDARD, FULL_SIZE, PREMIUM, LUXURY\n}\n\npublic enum VehicleStatus {\n  AVAILABLE, RESERVED, LOANED, LOST, BEING_SERVICED, OTHER\n}\n\npublic enum ReservationStatus {\n  ACTIVE, PENDING, CONFIRMED, COMPLETED, CANCELLED, NONE\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#people-classes","title":"\ud83d\udc65 People Classes","text":"<p>Account, Member, Receptionist, and Additional Driver These classes represent different people that interact with our system.</p> <pre><code>// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic abstract class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n  private Person person;\n\n  public boolean resetPassword();\n}\n\npublic class Member extends Account {\n  private int totalVehiclesReserved;\n\n  public List&lt;VehicleReservation&gt; getReservations();\n}\n\npublic class Receptionist extends Account {\n  private Date dateJoined;\n\n  public List&lt;Member&gt; searchMember(String name);\n}\n\npublic class AdditionalDriver {\n  private String driverID;\n  private Person person;\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#top-level-system-classes","title":"\ud83c\udfe2 Top-Level System Classes","text":"<p>CarRentalSystem and CarRentalLocation These classes represent the top-level structure of the car rental system.</p> <pre><code>public class CarRentalLocation {\n  private String name;\n  private Address location;\n\n  public Address getLocation();\n}\n\npublic class CarRentalSystem {\n  private String name;\n  private List&lt;CarRentalLocation&gt; locations;\n\n  public boolean addNewLocation(CarRentalLocation location);\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#vehicle-and-reservation-classes","title":"\ud83d\ude97 Vehicle and Reservation Classes","text":"<p>Vehicle, VehicleLog, and VehicleReservation - <code>Vehicle</code>: Represents each vehicle with unique attributes. - <code>VehicleLog</code>: Tracks all vehicle-related events. - <code>VehicleReservation</code>: Responsible for processing the reservation and return of a vehicle.</p> <pre><code>public abstract class Vehicle {\n  private String licenseNumber;\n  private String stockNumber;\n  private int passengerCapacity;\n  private String barcode;\n  private boolean hasSunroof;\n  private VehicleStatus status;\n  private String model;\n  private String make;\n  private int manufacturingYear;\n  private int mileage;\n\n  private List&lt;VehicleLog&gt; log;\n\n  public boolean reserveVehicle();\n\n  public boolean returnVehicle();\n}\n\npublic class Car extends Vehicle {\n  private CarType type;\n}\n\npublic class Van extends Vehicle {\n  private VanType type;\n}\n\npublic class Truck extends Vehicle {\n  private String type;\n}\n\n// We can have similar definition for other vehicle types\n\n//...\n\npublic class VehicleLog {\n  private String id;\n  private VehicleLogType type;\n  private String description;\n  private Date creationDate;\n\n  public bool update();\n\n  public List&lt;VehicleLogType&gt; searchByLogType(VehicleLogType type);\n}\n\npublic class VehicleReservation {\n  private String reservationNumber;\n  private Date creationDate;\n  private ReservationStatus status;\n  private Date dueDate;\n  private Date returnDate;\n  private String pickupLocationName;\n  private String returnLocationName;\n\n  private int customerID;\n  private Vehicle vehicle;\n  private Bill bill;\n  private List&lt;AdditionalDriver&gt; additionalDrivers;\n  private List&lt;Notification&gt; notifications;\n  private List&lt;RentalInsurance&gt; insurances;\n  private List&lt;Equipment&gt; equipments;\n  private List&lt;Service&gt; services;\n\n  public static VehicleReservation fetchReservationDetails(String reservationNumber);\n\n  public List&lt;Passenger&gt; getAdditionalDrivers();\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#inventory-and-search-interface","title":"\ud83d\udd0d Inventory and Search Interface","text":"<p>VehicleInventory and Search - <code>VehicleInventory</code> implements the <code>Search</code> interface - Facilitates searching of vehicles in the catalog.</p> <pre><code>public interface Search {\n  public List&lt;Vehicle&gt; searchByType(String type);\n  public List&lt;Vehicle&gt; searchByModel(String model);\n}\n\npublic class VehicleInventory implements Search {\n  private HashMap&lt;String, List&lt;Vehicle&gt;&gt; vehicleTypes;\n  private HashMap&lt;String, List&lt;Vehicle&gt;&gt; vehicleModels;\n\n  public List&lt;Vehicle&gt; searchByType(String query) {\n    // return all vehicles of the given type.\n    return vehicleTypes.get(query);\n  }\n\n  public List&lt;Vehicle&gt; searchByModel(String query) {\n    // return all vehicles of the given model.\n    return vehicleModels.get(query);\n  }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Car-Rental-System/car-rental-system-skeleton/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>\ud83d\udc64 Udemy</li> </ul> <p>\u2705 This document provides a structured breakdown of the <code>Car Rental System</code>. Happy coding! \ud83d\ude80</p> <p></p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/IRCTC/","title":"\ud83c\udf9f\ufe0f Ticket Booking System (CLI-Based)","text":"<p>This project is my first Java-based Ticket Booking System, designed to strengthen my Object-Oriented Programming (OOP) skills while implementing practical functionalities like user authentication, train search, ticket booking, and cancellation. Special thanks to Lovepreet Singh for his amazing tutorials and projects. His teaching helped me a lot! </p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/IRCTC/#features","title":"\ud83d\ude80 Features","text":"<p>\u2714\ufe0f User Authentication \u2013 Secure sign-up and login system \u2714\ufe0f Train Search \u2013 Find trains between selected stations \u2714\ufe0f Seat Availability \u2013 View available seats before booking \u2714\ufe0f Booking Management \u2013 Reserve and cancel train seats \u2714\ufe0f Data Persistence \u2013 Store user and booking information  </p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/IRCTC/#technologies-used","title":"\ud83d\udee0\ufe0f Technologies Used","text":"<p>\ud83d\udd39 Java \u2013 Core logic and implementation \ud83d\udd39 Gradle \u2013 Build automation and dependency management \ud83d\udd39 Collections &amp; Streams API \u2013 Efficient data handling \ud83d\udd39 OOP Principles \u2013 Encapsulation, Abstraction, and Polymorphism  </p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/IRCTC/#setup-run","title":"\ud83d\udce6 Setup &amp; Run","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/IRCTC/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/Sameer07x19/TicketBookingSystem.git\ncd TicketBookingSystem\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/IRCTC/#step-2-build-the-project","title":"Step 2: Build the Project","text":"<pre><code>./gradlew build\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/IRCTC/#step-3-run-the-application","title":"Step 3: Run the Application","text":"<pre><code>./gradlew run\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/IRCTC/#how-to-use","title":"\ud83d\udccc How to Use","text":"<p>1\ufe0f\u20e3 Sign Up \u2013 Register a new account 2\ufe0f\u20e3 Login \u2013 Access your account securely 3\ufe0f\u20e3 Search Trains \u2013 Enter source and destination 4\ufe0f\u20e3 View Seats \u2013 Check seat availability before booking 5\ufe0f\u20e3 Book a Seat \u2013 Select and confirm your seat 6\ufe0f\u20e3 Cancel Booking \u2013 Remove an existing reservation 7\ufe0f\u20e3 Exit \u2013 Close the application  </p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/IRCTC/#future-enhancements","title":"\ud83c\udfd7\ufe0f Future Enhancements","text":"<p>\ud83d\ude80 Graphical User Interface (GUI) \u2013 Improve user experience \ud83d\udcbe Database Integration \u2013 Store user and train data persistently \ud83d\udd27 Admin Panel \u2013 Manage train schedules and user bookings  </p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/","title":"Library Management System","text":"<ul> <li>Google Doc Notes  - Link</li> <li>Educative.IO Code - Link</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/#resources","title":"Resources:","text":"<p>-</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/library_system_skeleton/","title":"\ud83d\udcda Design a Library Management System","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/library_system_skeleton/#code","title":"\ud83d\udcbb Code","text":"<p>Here is the code for the use cases mentioned above:</p> <ul> <li>\u2705 Check-out a book</li> <li>\u2705 Return a book</li> <li>\u2705 Renew a book</li> </ul> <p>Note: This code only focuses on the design part of the use cases. Since you are not required to write a fully executable code in an interview, you can assume parts of the code to interact with the database, payment system, etc.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/library_system_skeleton/#code-overview","title":"\ud83d\udee0\ufe0f Code Overview","text":"<p>Below is the structured breakdown of our Library Management System:</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/library_system_skeleton/#enums-and-constants","title":"\ud83d\udccc Enums and Constants","text":"<p>\ud83d\udd39 Defines the required enums, data types, and constants used in the system.</p> <pre><code>public enum BookFormat {\n    HARDCOVER, PAPERBACK, AUDIO_BOOK, EBOOK, NEWSPAPER, MAGAZINE, JOURNAL\n}\n\npublic enum BookStatus {\n    AVAILABLE, RESERVED, LOANED, LOST\n}\n\npublic enum ReservationStatus {\n    WAITING, PENDING, CANCELED, NONE\n}\n\npublic enum AccountStatus {\n    ACTIVE, CLOSED, CANCELED, BLACKLISTED, NONE\n}\n\npublic class Address {\n    private String street;\n    private String city;\n    private State state;\n    private String zipCode;\n    private String country;\n}\n\npublic class Person {\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n}\n\npublic class Constants {\n    public static final int MAX_BOOK_ISSUED_TO_A_USER = 5;\n    public static final int MAX_LENDING_DAYS = 5;\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/library_system_skeleton/#account-member-and-librarian","title":"\ud83d\udc64 Account, Member, and Librarian","text":"<p>\ud83d\udd39 These classes represent various users who interact with the library system.</p> <pre><code>// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\npublic abstract class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n    private Person person;\n\n    public boolean resetPassword();\n} \n\npublic class Librarian extends Account {\n    public boolean addBookItem(BookItem bookItem);\n    public boolean blockMember(Member member);\n    public boolean unblockMember(Member member);\n}\n\npublic class Member extends Account {\n    private Date datOfMembership;\n    private int getTotalBooksCheckedOut;\n\n    public int getGetTotalBooksCheckedOut();\n    public boolean reserveBookItem();\n\n    private void incrementTotalBookCheckedOut();\n\n    public boolean checkoutBookItem(BookItem bookItem) {\n        if (this.getTotalBooksCheckedOut() &gt;= Constants.MAX_BOOKS_ISSUED_TO_A_USER) {\n            ShowError(\"The user has already checked-out maximum number of books\");\n            return false;\n        }\n        BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode);\n        if (bookReservation != null &amp;&amp; bookReservation.getMemberId() != this.getId()) {\n            // book item has a pending reservation from another user\n            ShowError(\"This book is reserved by another member\");\n            return false;\n        } else if (bookReservation != null) {\n            // book item has a pending reservation from the give member, update it\n            bookReservation.updateStatus(ReservationStatus.COMPLETED);\n        }\n\n        if (!bookItem.checkout(this.getId())) {\n            return false;\n        }\n        this.incrementTotalBookCheckedOut();\n        return true;\n    }\n\n    private void checkForFine(String bookItemBarcode) {\n        BookLending bookLending = BookLending.fetchLendingDetails(bookItemBarcode);\n        Date dueDate = bookLending.getDueDate();\n        Date today = new Date();\n        // check if the book has been returned within the due date\n        if (today.compareTO(dueDate)) {\n            long diff = today.getTime() - dueDate.getTime();\n            long diffDays = diff / (24 * 60 * 60 * 1000);\n            Fine.collectFine(memberId, diffDays);\n        }\n    }\n\n    public void returnBookItem(BookItem bookItem) {\n        this.checkForFine(bookItem.getBarcode());\n        BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());\n        if (bookReservation != null) {\n            // book item has a pending reservation\n            bookItem.updateBookItemStatus(BookStatus.RESERVED);\n            bookReservation.sendBookAvailableNotification();\n        }\n        bookItem.updateBookItemStatus(BookStatus.AVAILABLE);\n    }\n\n    public bool renewBookItem(BookItem bookItem) {\n        this.checkForFine(bookItem.getBarcode());\n        BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());\n        // check if this book item has a pending reservation from another member\n        if (bookReservation != null &amp;&amp; bookReservation.getMemberId() != this.getMemberId()) {\n            ShowError(\"This book is reserved by another member\");\n            member.decrementTotalBooksCheckedout();\n            bookItem.updateBookItemState(BookStatus.RESERVED);\n            bookReservation.sendBookAvailableNotification();\n            return false;\n        } else if (bookReservation != null) {\n            // book item has a pending reservation from this member\n            bookReservation.updateStatus(ReservationStatus.COMPLETED);\n        }\n        BookLending.lendBook(bookItem.getBarCode(), this.getMemberId());\n        bookItem.updateDueDate(LocalDate.now().plusDays(Constants.MAX_LENDING_DAYS));\n        return true;\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/library_system_skeleton/#book-reservation-lending-and-fine-management","title":"\ud83d\udcd6 Book Reservation, Lending, and Fine Management","text":"<p>\ud83d\udd39 These classes handle book reservations, lending transactions, and fine collections.</p> <pre><code>public class BookReservation {\n    private Date creationDate;\n    private ReservationStatus status;\n    private String bookItemBarcode;\n    private String memberId;\n\n    public static BookReservation fetchReservationDetails(String barcode);\n}\n\npublic class BookLending {\n    private Date creationDate;\n    private Date dueDate;\n    private Date returnDate;\n    private String bookItemBarcode;\n    private String memberId;\n\n    public static boolean lendBook(String barcode, String memberId);\n    public static BookLending fetchLendingDetails(String barcode);\n}\n\npublic class Fine {\n    private Date creationDate;\n    private double bookItemBarcode;\n    private String memberId;\n\n    public static void collectFine(String memberId, long days) {}\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/library_system_skeleton/#book-item","title":"\ud83d\udcda Book Item","text":"<p>\ud83d\udd39 Encapsulates a book item and is responsible for reservation, return, and renewal operations.</p> <pre><code>public abstract class Book {\n  private String ISBN;\n  private String title;\n  private String subject;\n  private String publisher;\n  private String language;\n  private int numberOfPages;\n  private List&lt;Author&gt; authors;\n}\n\npublic class BookItem extends Book {\n    private String barcode;\n    private boolean isReferenceOnly;\n    private Date borrowed;\n    private Date dueDate;\n    private double price;\n    private BookFormat format;\n    private BookStatus status;\n    private Date dateOfPurchase;\n    private Date publicationDate;\n    private Rack placedAt;\n\n    public boolean checkout(String memberId) {\n        if(bookItem.getIsReferenceOnly()) {\n            ShowError(\"This book is Reference only and can't be issued\");\n            return false;\n        }\n        if(!BookLending.lendBook(this.getBarCode(), memberId)){\n            return false;\n        }\n        this.updateBookItemStatus(BookStatus.LOANED);\n        return true;\n    }\n}\n\npublic class Rack {\n    private int number;\n    private String locationIdentifier;\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Library-Management-System/library_system_skeleton/#search-interface-and-catalog","title":"\ud83d\udd0e Search Interface and Catalog","text":"<p>\ud83d\udd39 The Catalog class implements the Search interface to facilitate book searches.</p> <pre><code>public interface Search {\n  public List&lt;Book&gt; searchByTitle(String title);\n  public List&lt;Book&gt; searchByAuthor(String author);\n  public List&lt;Book&gt; searchBySubject(String subject);\n  public List&lt;Book&gt; searchByPubDate(Date publishDate);\n}\n\npublic class Catalog implements Search {\n  private HashMap&lt;String, List&lt;Book&gt;&gt; bookTitles;\n  private HashMap&lt;String, List&lt;Book&gt;&gt; bookAuthors;\n  private HashMap&lt;String, List&lt;Book&gt;&gt; bookSubjects;\n  private HashMap&lt;String, List&lt;Book&gt;&gt; bookPublicationDates;\n\n  public List&lt;Book&gt; searchByTitle(String query) {\n    // return all books containing the string query in their title.\n    return bookTitles.get(query);\n  }\n\n  public List&lt;Book&gt; searchByAuthor(String query) {\n    // return all books containing the string query in their author's name.\n    return bookAuthors.get(query);\n  }\n}\n</code></pre> <p>\u2705 This document provides an organized breakdown of the Library Management System structure. Happy coding! \ud83d\ude80</p> <p></p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/","title":"Index","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/#movie-ticket-booking-system","title":"\ud83c\udfa5 Movie Ticket Booking System","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>\ud83d\ude80 Educative.IO - Skeleton Code</li> <li>\ud83d\udc64 Shreyansh Jain</li> <li>\ud83d\udd10 Security Diagram</li> <li>\ud83c\udfa8 Design Doc</li> <li>\ud83d\udd17 Resources<ul> <li>\ud83d\udc64 Shreyansh Jain - Udemy</li> <li>\ud83d\udd25 Must Watch: To understand <code>Concurrency Management</code> (Pessimistic and Optimistic)<ul> <li>\u23f1\ufe0f Timestamp: <code>26:00</code></li> <li>\ud83d\udccc Watch Here</li> </ul> </li> <li>\ud83d\udcbb Code</li> <li>\ud83d\udcbb GitHub Code</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/","title":"\ud83d\udd10 Security Design for BookMyShow \u2013 End-to-End Architecture","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#1-key-security-considerations","title":"\ud83d\ude80 1. Key Security Considerations","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#security-goals","title":"\ud83d\udccc Security Goals:","text":"<ul> <li>\ud83d\udd12 Data Privacy: Protect user data (personal info, payment details).</li> <li>\ud83d\udd10 Integrity: Prevent unauthorized modification of data.</li> <li>\u2699\ufe0f Availability: Ensure uptime and mitigate DDoS attacks.</li> <li>\u2705 Compliance: Adhere to PCI-DSS, GDPR, and OWASP security standards.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#2-security-architecture-flow","title":"\ud83d\udee0\ufe0f 2. Security Architecture Flow","text":"<pre><code>[User] \u2192 [Web/App] \u2192 [API Gateway] \u2192 [Microservices] \u2192 [Databases] \u2192 [External Payment System]\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#security-layers-across-the-flow","title":"\u2705 Security Layers Across the Flow:","text":"<ul> <li>Client-Side Security:<ul> <li>\ud83d\udd10 Authentication &amp; session management</li> <li>\ud83d\udd12 Secure cookies &amp; tokens</li> </ul> </li> <li>API Gateway Security:<ul> <li>\u2699\ufe0f Rate limiting, token validation</li> <li>\ud83d\udd25 WAF (Web Application Firewall)</li> </ul> </li> <li>Microservices Layer:<ul> <li>\ud83d\udd12 Authorization, data validation</li> </ul> </li> <li>Database Security:<ul> <li>\ud83d\udd10 Data encryption, access control</li> </ul> </li> <li>Payment Gateway:<ul> <li>\u2705 PCI-DSS compliance, tokenization</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#3-security-design-components","title":"\ud83d\udd25 3. Security Design Components","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#1-authentication-authorization","title":"\ud83d\udd10 1. Authentication &amp; Authorization","text":"<p>\u2705 Techniques: - OAuth 2.0 + JWT:     - \ud83d\udd25 Use OAuth for third-party integrations (e.g., Google, Facebook login).     - \ud83d\udd10 Issue JWT tokens for authenticated API calls. - Session Management:     - \ud83d\udee0\ufe0f Store sessions in Redis with expiry.     - \ud83d\udd12 Use secure cookies with <code>HttpOnly</code> and <code>SameSite</code> attributes.</p> <p>\u2705 Best Practices: - \ud83d\udd25 Implement Multi-Factor Authentication (MFA) for admin access. - \ud83d\udd10 Use RBAC (Role-Based Access Control) \u2192 restrict access based on roles (user, admin).</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#2-api-security","title":"\ud83d\udee1\ufe0f 2. API Security","text":"<p>\u2705 Techniques: - API Gateway:     - \u2699\ufe0f Apply rate limiting to prevent abuse (e.g., 100 requests/min).     - \ud83d\udd25 Use throttling to prevent brute force attacks. - Token Validation:     - \ud83d\udd12 Validate JWT tokens for authentication.     - \ud83d\udd10 Use API keys for external integrations.</p> <p>\u2705 Best Practices: - \ud83d\udd25 Use HMAC or SHA-256 hashing for API keys. - \ud83d\udd10 Reject unencrypted HTTP requests \u2192 enforce HTTPS.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#3-data-security","title":"\ud83d\udd12 3. Data Security","text":"<p>\u2705 Techniques: - Encryption:     - \ud83d\udd12 At rest: Encrypt sensitive data (user details, payment info) using AES-256.     - \ud83d\udd10 In transit: Use TLS 1.3 for data transmission. - Data Masking &amp; Tokenization:     - \ud83d\udd25 Mask sensitive data (e.g., partially hide card numbers).     - \ud83d\udd10 Use tokenization for payment data.</p> <p>\u2705 Best Practices: - \ud83d\udd25 No plaintext storage of sensitive data. - \ud83d\udd10 Database access controls:     - \u2705 Role-based permissions for DB access.     - \ud83d\udd12 Use VPC peering to isolate DB traffic.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#4-payment-security","title":"\ud83d\udee1\ufe0f 4. Payment Security","text":"<p>\u2705 Techniques: - Use PCI-DSS compliant payment gateways (e.g., Razorpay, Stripe). - Tokenization:     - \ud83d\udd25 Store only payment tokens, not card details.     - \ud83d\udd10 Use HMAC signature verification for payment callbacks.</p> <p>\u2705 Best Practices: - \ud83d\udd25 Timeouts and expiry for payment tokens. - \ud83d\udd10 Fraud detection algorithms \u2192 flag suspicious transactions.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#5-ddos-and-rate-limiting-protection","title":"\ud83d\udd25 5. DDoS and Rate Limiting Protection","text":"<p>\u2705 Techniques: - WAF (Web Application Firewall):     - \ud83d\udd25 Block suspicious requests (SQLi, XSS, etc.).     - \ud83d\udd10 Protect against botnet traffic. - Rate Limiting:     - \u2699\ufe0f API Gateway rate limiting: prevent abuse.     - \ud83d\udd25 Use CDN-level DDoS protection (e.g., Cloudflare, Akamai).</p> <p>\u2705 Best Practices: - \ud83d\udd25 Use caching strategies to reduce DB hits. - \ud83d\udd10 Apply circuit breakers to prevent cascading failures.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#6-logging-monitoring","title":"\u2699\ufe0f 6. Logging &amp; Monitoring","text":"<p>\u2705 Techniques: - Centralized logging with ELK stack (Elasticsearch, Logstash, Kibana). - Real-time monitoring:     - \ud83d\udd25 Use Prometheus + Grafana to monitor anomalies.     - \ud83d\udd10 Set up alerts for suspicious activities.</p> <p>\u2705 Best Practices: - \ud83d\udd25 Retain logs for compliance audits. - \ud83d\udd10 Mask sensitive data in logs.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#7-secure-deployment-cicd","title":"\ud83d\udd0d 7. Secure Deployment &amp; CI/CD","text":"<p>\u2705 Techniques: - Static &amp; Dynamic Code Analysis:     - \ud83d\udd25 Use SonarQube for static analysis.     - \ud83d\udd10 Zap or Burp Suite for dynamic testing. - Secrets Management:     - \ud83d\udd12 Use AWS Secrets Manager / HashiCorp Vault for secret storage.</p> <p>\u2705 Best Practices: - \ud83d\udd25 Automate code reviews with security checks. - \ud83d\udd10 Use Infrastructure as Code (IaC) with security policies.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#4-security-architecture-diagram","title":"\ud83c\udf1f 4. Security Architecture Diagram","text":"<pre><code>               +---------------------+\n               |    User (Web/App)   |\n               +---------------------+\n                          \u2193\n       +----------------------------------------+\n       |       API Gateway (WAF + Rate Limit)   |\n       +----------------------------------------+\n                 \u2193              \u2193\n     +----------------+    +---------------------+\n     |  Auth Service  |    |   Payment Service   |\n     +----------------+    +---------------------+\n            \u2193                       \u2193\n+---------------------+    +------------------------+\n|   User DB (AES-256)  |   |  Payment Gateway (PCI) |\n+---------------------+    +------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#5-key-takeaways","title":"\ud83d\ude80 5. Key Takeaways","text":"<p>\u2705 Authentication: OAuth 2.0 + JWT + MFA \u2705 API Security: WAF + Rate limiting + TLS 1.3 \u2705 Data Protection: AES-256 encryption + masking \u2705 DDoS Protection: CDN + Rate limiting \u2705 Monitoring: Real-time alerts + anomaly detection \u2705 Compliance: PCI-DSS + GDPR</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/BookMyShow-security-design/#final-verdict","title":"\ud83d\udd25 Final Verdict","text":"<ul> <li>This multi-layered security design ensures robust protection against common vulnerabilities.</li> <li>It covers data privacy, API security, DDoS protection, and compliance, making it scalable and resilient for BookMyShow-like platforms. \ud83d\ude80</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/design-doc/","title":"\ud83c\udfa5 Design a Movie Ticket Booking System","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/design-doc/#references","title":"\ud83d\udd17 References:","text":"<ul> <li>Video - link</li> <li>Udemy</li> <li>Must Watch to understand <code>Concurrency Management</code> Pessimistic and Optimistic [<code>Timestamp - 26:00</code>] - Link</li> <li>Security Design</li> <li>\u2705 Read JDBC Transaction Isolation Levels for details.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/design-doc/#-code-link","title":"- Code  - link","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/","title":"\ud83c\udfa5 Design a Movie Ticket Booking System","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#overview","title":"\ud83d\udee0\ufe0f Overview","text":"<p>An online movie ticket booking system facilitates the purchasing of movie tickets by customers. E-ticketing systems allow customers to browse through movies currently playing and book seats, anywhere and anytime.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#requirements-and-goals","title":"\u2705 Requirements and Goals","text":"<p>The ticket booking service should meet the following requirements:</p> <ul> <li>\ud83c\udfd9\ufe0f City Listing: List the cities where affiliate cinemas are located.</li> <li>\ud83c\udf9e\ufe0f Cinemas and Halls: Each cinema can have multiple halls, and each hall can run one movie show at a time.</li> <li>\u23f1\ufe0f Multiple Shows: Each movie will have multiple shows.</li> <li>\ud83d\udd0e Search Functionality: Customers can search movies by:</li> <li>Title</li> <li>Language</li> <li>Genre</li> <li>Release date</li> <li>City name</li> <li>\ud83c\udf9f\ufe0f Show and Booking:</li> <li>Display cinemas running the selected movie and its available shows.</li> <li>Let customers select a show at a particular cinema and book tickets.</li> <li>\ud83d\udcba Seat Selection:</li> <li>Show the seating arrangement of the cinema hall.</li> <li>Customers can select multiple seats based on preference.</li> <li>Distinguish between available and booked seats.</li> <li>\ud83d\udd14 Notifications:</li> <li>Send notifications for new movies, bookings, and cancellations.</li> <li>\ud83d\udcb3 Payments:</li> <li>Customers can pay with credit cards or cash.</li> <li>Add discount coupons during payments.</li> <li>\ud83d\udeab Concurrency Control:</li> <li>Ensure no two customers can reserve the same seat.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#use-case-diagram","title":"\ud83c\udfad Use Case Diagram","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#actors-in-the-system","title":"\ud83d\udee1\ufe0f Actors in the System:","text":"<ul> <li>\ud83d\udc68\u200d\ud83d\udcbb Admin:</li> <li>Add/remove movies and shows.</li> <li>Cancel movies or shows.</li> <li>Block/unblock customers.</li> <li>\ud83d\udcbc FrontDeskOfficer:</li> <li>Book/cancel tickets.</li> <li>\ud83e\uddd1\u200d\ud83c\udf93 Customer:</li> <li>View movie schedules.</li> <li>Book and cancel tickets.</li> <li>\ud83d\udc64 Guest:</li> <li>Search movies (but must register to book seats).</li> <li>\u2699\ufe0f System:</li> <li>Send notifications for new movies, bookings, and cancellations.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#top-use-cases","title":"\ud83d\udccc Top Use Cases:","text":"<ul> <li>\ud83d\udd0e Search Movies: By title, genre, language, release date, and city name.</li> <li>\ud83c\udf9f\ufe0f Create/Modify/View Booking: Book a show ticket, cancel it, or view details.</li> <li>\ud83d\udcb3 Make Payment: Pay for the booking.</li> <li>\ud83c\udfab Add Coupon: Apply a discount coupon during payment.</li> <li>\ud83d\udcba Assign Seat: Display a seat map for customers to select seats.</li> <li>\ud83d\udcb0 Refund Payment: Refund the amount if the booking is canceled within the allowed timeframe.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#class-diagram","title":"\ud83d\udcc4 Class Diagram","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#main-classes","title":"\ud83d\udcda Main Classes:","text":"<ul> <li>\ud83d\udc64 Account:</li> <li>Admin: Add/remove movies and shows, block/unblock accounts.</li> <li>Customers: Search movies and make bookings.</li> <li>FrontDeskOfficer: Book tickets for movie shows.</li> <li>\ud83d\udc65 Guest:</li> <li>Search and view movie descriptions.</li> <li>Must register to make bookings.</li> <li>\ud83c\udfa5 Cinema:</li> <li>The organization for which the software is designed.</li> <li>Attributes: <code>name</code>, <code>location</code>, etc.</li> <li>\ud83c\udfe2 CinemaHall:</li> <li>Each cinema has multiple halls with multiple seats.</li> <li>\ud83c\udfd9\ufe0f City:</li> <li>Each city can have multiple cinemas.</li> <li>\ud83c\udfac Movie:</li> <li>Attributes: <code>title</code>, <code>description</code>, <code>language</code>, <code>genre</code>, <code>release date</code>, <code>city name</code>.</li> <li>\u23f1\ufe0f Show:</li> <li>Each movie can have many shows played in different halls.</li> <li>\ud83d\udcba CinemaHallSeat:</li> <li>Represents individual seats in a cinema hall.</li> <li>\ud83c\udf9f\ufe0f ShowSeat:</li> <li>Links a <code>Show</code> with a <code>CinemaHallSeat</code>.</li> <li>Customers book against <code>ShowSeat</code>.</li> <li>\ud83d\udcc4 Booking:</li> <li>Contains details such as:<ul> <li>Unique booking number</li> <li>Number of seats</li> <li>Booking status</li> </ul> </li> <li>\ud83d\udcb3 Payment:</li> <li>Handles payment transactions.</li> <li>\ud83d\udd14 Notification:</li> <li>Sends notifications to customers.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#activity-diagram","title":"\ud83d\udd25 Activity Diagram","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#make-a-booking","title":"\ud83c\udf9f\ufe0f Make a Booking:","text":"<p>Any customer can perform this activity. Steps: 1. Search for the movie. 2. Select the cinema and show. 3. Choose seats. 4. Make the payment. 5. Receive booking confirmation.</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#cancel-a-booking","title":"\u274c Cancel a Booking:","text":"<p>Steps: 1. Search for the booking. 2. Select the booking to cancel. 3. Confirm cancellation. 4. Receive refund (if eligible).</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#code","title":"\ud83d\udcbb Code","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#high-level-class-definitions","title":"\ud83d\udd25 High-Level Class Definitions:","text":"<ul> <li>\ud83d\udccc Enums, Data Types, and Constants:</li> <li>Contains the required enums, data types, and constants.   ```java   public enum BookingStatus {     REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED   } </li> </ul> <p>public enum SeatType {     REGULAR, PREMIUM, SILVER, GOLD, PLATINUM   }</p> <p>public enum AccountStatus {     ACTIVE, BLOCKED, BANNED, COMPROMISED   }</p> <p>public enum PaymentStatus {     PENDING, COMPLETED, FAILED, REFUNDED   }</p> <p>public class Address {       private String street;       private String city;       private String state;       private String zipCode;       private String country;   }   ```  </p> <ul> <li>\ud83d\udc65 Account, Customer, Admin, FrontDeskOfficer, and Guest:</li> <li>Represents people interacting with the system.   ```java   // For simplicity, we are not defining getter and setter functions. The reader can   // assume that all class attributes are private and accessed through their respective   // public getter method and modified only through their public setter method.</li> </ul> <p>public class Account {     private String id;     private String password;     private AccountStatus status;</p> <pre><code>public boolean resetPassword();\n</code></pre> <p>}</p> <p>public class Person {     private String name;     private Address address;     private String email;     private String phone;</p> <pre><code>private Account account;\n</code></pre> <p>}</p> <p>public class Customer extends Person {     public boolean makeBooking(Booking booking);     public List getBookings();   } <p>public class Admin extends Person {     public boolean addMovie(Movie movie);     public boolean addShow(Show show);     public boolean blockUser(Customer customer);   }</p> <p>public class FrontDeskOfficer extends Person {     public boolean createBooking(Booking booking);   }</p> <p>public class Guest {     public boolean registerAccount();   }   ```</p> <ul> <li>\ud83c\udfac Show and Movie:</li> <li>Each movie has multiple shows.   ```java   public class Show {     private int showId;     private Date creationDate;     private Date startDate;     private Date endDate;     private CinemaHall playedAt;     private Movie movie;   }</li> </ul> <p>public class Movie {     private String title;     private String description;     private int durationInMinutes;     private String language;     private Date releaseDate;     private String country;     private String genre;     private Admin movieAddedBy;</p> <pre><code>private List&lt;Show&gt; shows;\nprivate List&lt;Show&gt; getShows();\n</code></pre> <p>}   ```</p> <ul> <li>\ud83c\udf9f\ufe0f Booking, ShowSeat, and Payment:</li> <li> <p>Customers reserve seats with a booking and make payments.   ```java   public class Booking {     private String bookingNumber;     private int numberOfSeats;     private Date createdOn;     private BookingStatus status;</p> <p>private Show show; private List seats; private Payment payment; <p>public boolean makePayment(Payment payment); public boolean cancel(); public boolean assignSeat(List seats);   } <p>public class ShowSeat extends CinemaHallSeat{     private int showSeatId;     private boolean isReserved;     private double price;   }</p> <p>public class Payment {      private double amount;     private Date createdOn;     private int transactionId;     private PaymentStatus status;   }   ```</p> <ul> <li>\ud83c\udfd9\ufe0f City, Cinema, and CinemaHall:</li> <li>Each city has multiple cinemas with multiple halls.   ```java   public class City {     private String name;     private String state;     private String zipCode;   }</li> </ul> <p>public class Cinema {     private String name;     private int totalCinemaHalls;     private Address location;</p> <pre><code>private List&lt;CinemaHall&gt; halls;\n</code></pre> <p>}</p> <p>public class CinemaHall {     private String name;     private int totalSeats;</p> <pre><code>private List&lt;CinemaHallSeat&gt; seats;\nprivate List&lt;Show&gt; shows;\n</code></pre> <p>}   ```</p> <ul> <li>\ud83d\udd0d Search Interface and Catalog:</li> <li><code>Catalog</code> implements <code>Search</code> to facilitate searching.</li> </ul> <pre><code>public interface Search {\n  public List&lt;Movie&gt; searchByTitle(String title);\n  public List&lt;Movie&gt; searchByLanguage(String language);\n  public List&lt;Movie&gt; searchByGenre(String genre);\n  public List&lt;Movie&gt; searchByReleaseDate(Date relDate);\n  public List&lt;Movie&gt; searchByCity(String cityName);\n}\n\npublic class Catalog implements Search {\n   HashMap&lt;String, List&lt;Movie&gt;&gt; movieTitles;\n   HashMap&lt;String, List&lt;Movie&gt;&gt; movieLanguages;\n   HashMap&lt;String, List&lt;Movie&gt;&gt; movieGenres;\n   HashMap&lt;Date, List&lt;Movie&gt;&gt; movieReleaseDates;\n   HashMap&lt;String, List&lt;Movie&gt;&gt; movieCities;\n\n  public List&lt;Movie&gt; searchByTitle(String title) {\n    return movieTitles.get(title);\n  }\n\n  public List&lt;Movie&gt; searchByLanguage(String language) {\n    return movieLanguages.get(language);\n  }\n\n  //...\n\n  public List&lt;Movie&gt; searchByCity(String cityName) {\n    return movieCities.get(cityName);\n  }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#concurrency-management","title":"\u2699\ufe0f Concurrency Management","text":"<p>To prevent multiple users from booking the same seat: - \u2705 Use transactions in SQL databases. - \ud83d\udd12 Leverage Transaction Isolation Levels to lock rows before updating them. - Example (SQL Server):</p> <pre><code>SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;  \nBEGIN TRANSACTION;  \n\n-- Reserve three seats (IDs: 54, 55, 56) for ShowID=99  \nSELECT * FROM ShowSeat  \nWHERE ShowID = 99  \nAND ShowSeatID IN (54, 55, 56)  \nAND isReserved = 0;  \n\n-- If the number of rows returned is NOT three, return failure.  \nUPDATE ShowSeat ...  \nUPDATE Booking ...  \n\nCOMMIT TRANSACTION;  \n</code></pre> <ul> <li>\ud83d\udd12<code>Serializable</code> isolation level ensures safety from Dirty, Nonrepeatable, and Phantom Reads.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#here-is-the-sample-java-code","title":"\u2705 Here is the sample Java code:","text":"<pre><code>import java.sql.DriverManager;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.ResultSet;\n\npublic class Customer extends Person {\n\n  public boolean makeBooking(Booking booking) {\n    List&lt;ShowSeat&gt; seats = booking.getSeats();\n    Integer seatIds[] = new Integer[seats.size()];\n    int index = 0;\n    for(ShowSeat seat : seats) {\n      seatIds[index++] = seat.getShowSeatId();\n    }\n\n    Connection dbConnection = null;\n    try {\n      dbConnection = getDBConnection();\n      dbConnection.setAutoCommit(false);\n      // \u2018Serializable\u2019 is the highest isolation level and guarantees safety from\n      // Dirty, Nonrepeatable, and Phantoms reads\n      dbConnection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n\n      Statement st = dbConnection.createStatement();\n      String selectSQL = \"Select * From ShowSeat where ShowID=? &amp;&amp; ShowSeatID in (?) &amp;&amp; isReserved=0\";\n      PreparedStatement preparedStatement = dbConnection.prepareStatement(selectSQL);\n      preparedStatement.setInt(1, booking.getShow().getShowId());\n      Array array = dbConnection.createArrayOf(\"INTEGER\", seatIds);\n      preparedStatement.setArray(2, array);\n\n      ResultSet rs = preparedStatement.executeQuery();\n      // With TRANSACTION_SERIALIZABLE all the read rows will have the write lock, so we can\n      // safely assume that no one else is modifying them.\n      if (rs.next()) {\n        rs.last(); // move to the last row, to calculate the row count\n        int rowCount = rs.getRow();\n        // check if we have expected number of rows, if not, this means another process is\n        // trying to process at least one of the same row, if that is the case we\n        // should not process this booking.\n        if(rowCount == seats.size()) {\n          // update ShowSeat table...\n          // update Booking table ...\n          dbConnection.commit();\n          return true;\n        }\n      }\n    } catch (SQLException e) {\n      dbConnection.rollback();\n      System.out.println(e.getMessage());\n    }\n    return false;\n  }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#references","title":"\ud83d\udd17 References:","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#-hldlld-design","title":"- HLD/LLD - Design","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Movie-Ticket-Booking-Sysytem/movie-ticket-booking-system-skeleton/#references_1","title":"\ud83d\udd17 References:","text":"<ul> <li>Udemy</li> <li>Must Watch to understand <code>Concurrency Management</code> Pessimistic and Optimistic [<code>Timestamp - 26:00</code>] - Link</li> <li>Security Design</li> <li>\u2705 Read JDBC Transaction Isolation Levels for details.</li> </ul> <p>\u2705 This document provides a structured breakdown of the <code>Movie Ticket Booking System</code>. Happy coding! \ud83d\ude80</p> <p></p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/","title":"Design Parking Lot","text":"<ul> <li>Google Doc Notes  - Link</li> <li>Educative.IO Code - Link</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/#flowchart-of-parking-lot-process","title":"Flowchart of Parking Lot Process","text":"<pre><code>     +-----------------------------------+\n     |           Vehicle IN              |\n     +-----------------------------------+\n                      |\n                      v\n     +-----------------------------------+\n     |           Entry Gate              |\n     |      - Generate Ticket            |\n     |      - Find Parking Spot          |\n     +-----------------------------------+\n                      |\n                      v\n     +-----------------------------------+\n     |        Assign Nearest Spot        |\n     +-----------------------------------+\n                      |\n                      v\n     +-----------------------------------+\n     |            Parking Spot           |\n     |      - Mark as Occupied           |\n     +-----------------------------------+\n                      |\n                      v\n     +-----------------------------------+\n     |            Exit Gate              |\n     |      - Calculate Cost             |\n     |      - Process Payment            |\n     +-----------------------------------+\n                      |\n                      v\n     +-----------------------------------+\n     |                OUT                |\n     +-----------------------------------+\n</code></pre> <pre><code>+-------------------------+                +-----------------------+\n|   ParkingLot**          |                | VehicleType (enum)**  |\n+-------------------------+                +-----------------------+\n| - instance: ParkingLot  |                |      Bike             |\n| - levels: List&lt;Level&gt;   |                |      Car              |\n+-------------------------+                |      Truck            |\n| + getInstance(...)      |                +-----------------------+\n| + parkVehicle(...)      |\n| + unparkVehicle(...)    |\n| + printStatus()         |\n+-------------------------+\n            |\n            | has-a\n            |\n+-----------------------------------+\n|           **Level**               |\n+-----------------------------------+\n| - levelNumber: int                |\n| - parkingSpots: List&lt;ParkingSpot&gt; |\n+-----------------------------------+\n| + parkVehicle(...)                |\n| + unparkVehicle(...)              |\n| + toString()                      |\n+-----------------------------------+\n                |\n                | has-a\n                |\n+-----------------------------------+\n| **ParkingSpot**                   |\n+-----------------------------------+\n| - spotNumber: int                 |\n| - spotType: VehicleType           |\n| - currentVehicle: Vehicle         |\n+-----------------------------------+\n| + canFitVehicle(...)              |\n| + park(...)                       |\n| + unpark()                        |\n| + isAvailable()                   |\n| + getVehicle()                    |\n| + toString()                      |\n+-----------------------------------+\n                |\n                | has-a\n                |\n+---------------------------------+\n| **Vehicle (abstract)**          |\n+---------------------------------+\n| - licensePlate: String          |\n| - vehicleType: VehicleType      |\n+---------------------------------+\n| + getVehicleType()              |\n| + getLicensePlate()             |\n+---------------------------------+\n                |\n                | is-a\n+---------------------------------+\n|               |                 |\n+---------+  +----------+   +-----------+\n| + easy.educativeIO.Car() |  | + easy.Bike() |   | + easy.educativeIO.Truck() |\n+---------+  +----------+   +-----------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/#requirements-and-considerations","title":"Requirements and Considerations","text":"<ul> <li>Near-Spot Preference: Parking spots should prioritize availability closest to the entrance.</li> <li>Single Entrance and Exit: Only one entry and exit gate for now, but designed to add multiple gates if needed.</li> <li>Spot Types: Separate spots for Two Wheeler and Four Wheeler vehicles; scalable to other types.</li> <li>Charge Type: Supports both hourly and minute-based charges or a hybrid approach.</li> <li>easy.Level Scaling: Designed with a flexible structure to add multiple floors if required later.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/#code","title":"Code","text":"<ol> <li>The parking lot should have multiple levels, each level with a certain number of parking spots.</li> <li>The parking lot should support different types of vehicles, such as cars, motorcycles, and trucks.</li> <li>Each parking spot should be able to accommodate a specific type of vehicle.</li> <li>The system should assign a parking spot to a vehicle upon entry and release it when the vehicle exits.</li> <li>The system should track the availability of parking spots and provide real-time information to customers.</li> <li>The system should handle multiple entry and exit points and support concurrent access.</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/#classes-interfaces-and-enumerations","title":"Classes, Interfaces and Enumerations","text":"<ol> <li>The easy.educativeIO.ParkingLot class follows the Singleton pattern to ensure only one instance of the parking lot exists. It maintains a list of levels and provides methods to park and unpark vehicles.</li> <li>The easy.Level class represents a level in the parking lot and contains a list of parking spots. It handles parking and unparking of vehicles within the level.</li> <li>The easy.educativeIO.ParkingSpot class represents an individual parking spot and tracks the availability and the parked vehicle.</li> <li>The easy.educativeIO.Vehicle class is an abstract base class for different types of vehicles. It is extended by easy.educativeIO.Car, Motorcycle, and easy.educativeIO.Truck classes.</li> <li>The easy.educativeIO.VehicleType enum defines the different types of vehicles supported by the parking lot.</li> <li>Multi-threading is achieved through the use of synchronized keyword on critical sections to ensure thread safety.</li> <li>The Main class demonstrates the usage of the parking lot system.</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/#resources","title":"Resources:","text":"<ul> <li>Parking Lot Code</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/parking_lot_system_skeleton/","title":"\ud83d\ude97 Design a Parking Lot","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/parking_lot_system_skeleton/#code-overview","title":"\ud83d\udee0\ufe0f Code Overview","text":"<p>Below is the skeleton code for our parking lot system:</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/parking_lot_system_skeleton/#enums-and-constants","title":"\ud83d\udccc Enums and Constants","text":"<p>\ud83d\udd39 Defines the required enums, data types, and constants used in the system.</p> <pre><code>public enum VehicleType {\n    CAR, TRUCK, ELECTRIC, VAN, MOTORBIKE\n}\n\npublic enum ParkingSpotType {\n    HANDICAPPED, COMPACT, LARGE, MOTORBIKE, ELECTRIC\n}\n\npublic enum AccountStatus {\n    ACTIVE, BLOCKED\n}\n\npublic enum ParkingTicketStatus {\n    ACTIVE, PAID, LOST\n}\n\npublic class Address {\n    private String streetAddress;\n    private String city;\n    private String state;\n    private String zipCode;\n    private String country;\n}\n\npublic class Person {\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/parking_lot_system_skeleton/#account-admin-and-parking-attendant","title":"\ud83d\udc64 Account, Admin, and Parking Attendant","text":"<p>\ud83d\udd39 These classes represent various people who interact with the parking lot system.</p> <pre><code>// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\npublic abstract class Account {\n    private String username;\n    private String password;\n    private AccountStatus status;\n    private Person person;\n\n    public boolean resetPassword();\n}\n\npublic class Admin extends Account {\n    public bool addParkingFloor(ParkingFloor floor);\n    public bool addParkingSpot(String floorName, ParkingSpot spot);\n    public bool addParkingDisplayBoard(String floorName, ParkingDisplayBoard displayBoard);\n    public bool addCustomerInfoPanel(String floorName, CustomerInfoPanel infoPanel);\n\n    public bool addEntrancePanel(EntrancePanel entrancePanel);\n    public bool addExitPanel(ExitPanel exitPanel);\n}\n\npublic class ParkingAttendant extends Account {\n    public bool processTicket(string TicketNumber);\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/parking_lot_system_skeleton/#parking-spot","title":"\ud83c\udd7f\ufe0f Parking Spot","text":"<p>\ud83d\udd39 Definition of <code>ParkingSpot</code> and its child classes.</p> <pre><code>public abstract class ParkingSpot {\n    private String number;\n    private boolean free;\n    private Vehicle vehicle;\n    private final ParkingSpotType type;\n\n    public boolean IsFree();\n\n    public ParkingSpot(ParkingSpotType type) {\n        this.type = type;\n    }\n\n    public boolean assignVehicle(Vehicle vehicle) {\n        this.vehicle = vehicle;\n        free = false;\n    }\n\n    public boolean removeVehicle() {\n        this.vehicle = null;\n        free = true;\n    }\n\n    public class HandicappedSpot extends ParkingSpot {\n        public HadicappedSpot() {\n            super(ParkingSpotType.HANDICAPPED);\n        }\n    }\n\n    public class CompactSpot extends ParkingSpot {\n        public CompactSpot() {\n            super(ParkingSpotType.COMPACT);\n        }\n    }\n\n    public class LargeSpot extends ParkingSpot {\n        public LargeSpot() {\n            super(ParkingSpotType.LARGE);\n        }\n    }\n\n    public class MotorbikeSpot extends ParkingSpot {\n        public MotorbikeSpot() {\n            super(ParkingSpotType.MOTORBIKE);\n        }\n    }\n\n    public class ElectricSpot extends ParkingSpot {\n        public ElectricSpot() {\n            super(ParkingSpotType.ELECTRIC);\n        }\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/parking_lot_system_skeleton/#vehicle","title":"\ud83d\ude98 Vehicle","text":"<p>\ud83d\udd39 Definition of <code>Vehicle</code> and its child classes.</p> <pre><code>public abstract class Vehicle {\n    private String licenseNumber;\n    private final VehicleType type;\n    private ParkingTicket ticket;\n\n    public VehicleType(VehicleType type) {\n        this.type = type;\n    }\n\n    public void assignTicket(ParkingTicket ticket) {\n        this.ticket = ticket;\n    }\n}\n\npublic class Car extends Vehicle {\n    public Car(){\n        super(VehicleType.CAR);\n    }\n}\npublic class Truck extends Vehicle {\n    public Truck() {\n        super(VehicleType.TRUCK);\n    }\n}\n\n// Similarly we can define classes for Motorcycle and Electric vehicles\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/parking_lot_system_skeleton/#parking-floor","title":"\ud83c\udfe2 Parking Floor","text":"<p>\ud83d\udd39 Encapsulates a parking floor.</p> <pre><code>public class ParkingFloor {\n    private String name;\n    private HashMap&lt;String, HandicappedSpot&gt; handicappedSpots;\n    private HashMap&lt;String, CompactSpot&gt; compactSpots;\n    private HashMap&lt;String, LargeSpot&gt; largeSpots;\n    private HashMap&lt;String, MotorbikeSpot&gt; motorbikeSpots;\n    private HashMap&lt;String, ElectricSpot&gt; electricSpots;\n    private HashMap&lt;String, CustomerInfoPortal&gt; infoPortals;\n    private ParkingDisplayBoard displayBoard;\n\n    public ParkingFloor(String name) {\n        this.name = name;\n    }\n\n    public void addParkingSpot(ParkingSpot spot) {\n        switch (spot.getType()) {\n            case ParkingSpotType.HANDICAPPED:\n                handicappedSpots.put(spot.getNumber(), spot);\n                break;\n            case ParkingSpotType.COMPACT:\n                compactSpots.put(spot.getNumber(), spot);\n                break;\n            case ParkingSpotType.LARGE:\n                largeSpots.put(spot.getNumber(), spot);\n                break;\n            case ParkingSpotType.MOTORBIKE:\n                motorbikeSpots.put(spot.getNumber(), spot);\n                break;\n            case ParkingSpotType.ELECTRIC:\n                electricSpots.put(spot.getNumber(), spot);\n                break;\n            default:\n                print(\"Wrong parking spot type!\");\n        }\n    }\n\n    public void assignVehicleToSpot(Vehicle vehicle, ParkingSpot spot) {\n        spot.assignVehicle(vehicle);\n        switch (spot.getType()) {\n            case ParkingSpotType.HANDICAPPED:\n                updateDisplayBoardForHandicapped(spot);\n                break;\n            case ParkingSpotType.COMPACT:\n                updateDisplayBoardForCompact(spot);\n                break;\n            case ParkingSpotType.LARGE:\n                updateDisplayBoardForLarge(spot);\n                break;\n            case ParkingSpotType.MOTORBIKE:\n                updateDisplayBoardForMotorbike(spot);\n                break;\n            case ParkingSpotType.ELECTRIC:\n                updateDisplayBoardForElectric(spot);\n                break;\n            default:\n                print(\"Wrong parking spot type!\");\n        }\n    }\n\n    public void updateDisplayBoardForHandicapped(ParkingSpot spot){\n        if (this.displayBoard.getHandicappedFreeSpot().getNumber() == spot.getNumber()){\n            // find another free handicapped parking and assign to displayBoard\n            for (String key : handicappedSpots.keySet()){\n                if (handicappedSpots.get(key).isFree()){\n                    this.displayBoard.setHandicappedFreeSpot(handicappedSpots.get(key));\n                }\n            }\n            this.displayBoard.showEmptySpotNumber();\n        }\n    }\n\n    private void updateDisplayBoardForCompact(ParkingSpot spot) {\n        if (this.displayBoard.getCompactFreeSpot().getNumber() == spot.getNumber()) {\n            // find another free compact parking and assign to displayBoard\n            for (String key : compactSpots.keySet()) {\n                if (compactSpots.get(key).isFree()) {\n                    this.displayBoard.setCompactFreeSpot(compactSpots.get(key));\n                }\n            }\n            this.displayBoard.showEmptySpotNumber();\n        }\n    }\n\n    public void freeSpot(ParkingSpot spot) {\n        spot.removeVehicle();\n        switch (spot.getType()) {\n            case ParkingSpotType.HANDICAPPED:\n                freeHandicappedSpotCount++;\n                break;\n            case ParkingSpotType.COMPACT:\n                freeCompactSpotCount++;\n                break;\n            case ParkingSpotType.LARGE:\n                freeLargeSpotCount++;\n                break;\n            case ParkingSpotType.MOTORBIKE:\n                freeMotorbikeSpotCount++;\n                break;\n            case ParkingSpotType.ELECTRIC:\n                freeElectricSpotCount++;\n                break;\n            default:\n                print(\"Wrong parking spot type!\");\n        }\n    }\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/parking_lot_system_skeleton/#parking-display-board","title":"\ud83d\udcdf Parking Display Board","text":"<p>\ud83d\udd39 Encapsulates a parking display board.</p> <pre><code>public class ParkingDisplayBoard {\n    private String id;\n    private Handicapped handicappedFreeSpot;\n    private CompactSpot compactFreeSpot;\n    private LargeSpot largeFreeSpot;\n    private MotorbikeSpot motorbikeFreeSpot;\n    private ElectricSpot electricFreeSpot;\n\n    public void showEmptySpotNumber(){\n        String message = \"\";\n        if (handicappedFreeSpot.IsFree()) {\n            message += \"Free Handicapped: \" + handicappedFreeSpot.getNumber();\n        } else {\n            message += \"Handicapped is full\";\n        }\n        message += System.lineSeparator();\n        if(compactFreeSpot.IsFree()){\n            message += \"Free Compact: \" + compactFreeSpot.getNumber();\n        } else {\n            message += \"Compact is full\";\n        }\n        message += System.lineSeparator();\n\n        if(largeFreeSpot.IsFree()){\n            message += \"Free Large: \" + largeFreeSpot.getNumber();\n        } else {\n            message += \"Large is full\";\n        }\n        message += System.lineSeparator();\n\n        if(motorbikeFreeSpot.IsFree()){\n            message += \"Free Motorbike: \" + motorbikeFreeSpot.getNumber();\n        } else {\n            message += \"Motorbike is full\";\n        }\n        message += System.lineSeparator();\n\n        if(electricFreeSpot.IsFree()){\n            message += \"Free Electric: \" + electricFreeSpot.getNumber();\n        } else {\n            message += \"Electric is full\";\n        }\n\n        Show(message);\n    }\n\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Parking-Lot/parking_lot_system_skeleton/#parking-lot-singleton-pattern","title":"\ud83d\udd04 Parking Lot (Singleton Pattern)","text":"<p>\ud83d\udd39 Our system will have only one object of this class, enforced using the Singleton pattern. \ud83d\udd39 The Singleton pattern is a software design pattern that restricts the instantiation of a class to a single object.</p> <pre><code>import java.util.HashMap;\n\npublic class ParkingLot {\n    private String name;\n    private Address address;\n    private ParkingRate parkingRate;\n\n    private int compactSpotCount;\n    private int largeSpotCount;\n    private int motorbikeSpotCount;\n    private int electricSpotCount;\n    private final int maxCompactCount;\n    private final int maxLargeCount;\n    private final int maxMotorbikeCount;\n    private final int maxElectricCount;\n\n    private HashMap&lt;String, EntrancePanel&gt; entrancePanels;\n    private HashMap&lt;String, ExitPanel&gt; exitPanels;\n    private HashMap&lt;String, ParkingFloor&gt; parkingFloors;\n    // all active parking tickets, identified by their ticketNumber\n    private HashMap&lt;String, ParkingTicket&gt; activeTicket;\n    // singleton ParkingLot to ensure only one object of ParkingLot in the system,\n    // all entrance panels will use this object to create new parking ticket: getNewParkingTicket(),\n    // similarly exit panels will also use this object to close parking tickets\n    private static ParkingLor parkingLot = null;\n    // private constructor to restrict for singleton\n    private ParkingLot() {\n        // 1. initialize variables: read name, address and parkingRate from database\n        // 2. initialize parking floors: read the parking floor map from database,\n        //  this map should tell how many parking spots are there on each floor. This\n        //  should also initialize max spot counts too.\n        // 3. initialize parking spot counts by reading all active tickets from database\n        // 4. initialize entrance and exit panels: read from database\n    }\n    public static ParkingLot getInstance() {\n        if (parkingLot == null) {\n            parkingLot = new ParkingLot();\n        }\n        return parkingLot;\n    }\n\n    // note that the following method is 'synchronized' to allow multiple entrances\n    // panels to issue a new parking ticket without interfering with each other\n    public synchronized ParkingTicket getNewParkingTicket(Vehicle vehicle) throws ParkingFullException {\n        if (this.isFull(vehicle.getType())){\n            throw new ParkingFullException();\n        }\n        ParkingTicket ticket = new ParkingTicket();\n        vehicle.assignTicket(ticket);\n        ticket.saveInDB();\n        // if the ticket is successfully saved in the database, we can increment the parking spot count\n        this.incrementSpotCount(vehicle.getType());\n        this.activeTickets.put(ticket.getTicketNumber(), ticket);\n        return ticket;\n    }\n\n    public boolean isFull(VehicleType type) {\n        // trucks and vans can only be parked in LargeSpot\n        if (type == VehicleType.Truck || type == VehicleType.Van) {\n            return largeSpotCount &gt;= maxLargeCount;\n        }\n\n        // motorbikes can only be parked at motorbike spots\n        if (type == VehicleType.Motorbike) {\n            return motorbikeSpotCount &gt;= maxMotorbikeCount;\n        }\n\n        // cars can be parked at compact or large spots\n        if (type == VehicleType.Car) {\n            return (compactSpotCount + largeSpotCount) &gt;= (maxCompactCount + maxLargeCount);\n        }\n\n        // electric car can be parked at compact, large or electric spots\n        return (compactSpotCount + largeSpotCount + electricSpotCount) &gt;= (maxCompactCount + maxLargeCount\n                + maxElectricCount);\n    }\n\n    // increment the parking spot count based on the vehicle type\n    private boolean incrementSpotCount(VehicleType type) {\n        if (type == VehicleType.Truck || type == VehicleType.Van) {\n            largeSpotCount++;\n        } else if (type == VehicleType.Motorbike) {\n            motorbikeSpotCount++;\n        } else if (type == VehicleType.Car) {\n            if (compactSpotCount &lt; maxCompactCount) {\n                compactSpotCount++;\n            } else {\n                largeSpotCount++;\n            }\n        } else { // electric car\n            if (electricSpotCount &lt; maxElectricCount) {\n                electricSpotCount++;\n            } else if (compactSpotCount &lt; maxCompactCount) {\n                compactSpotCount++;\n            } else {\n                largeSpotCount++;\n            }\n        }\n    }\n\n    public boolean isFull() {\n        for (String key : parkingFloors.keySet()) {\n            if (!parkingFloors.get(key).isFull()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public void addParkingFloor(ParkingFloor floor) {\n        /* store in database */ \n    }\n\n    public void addEntrancePanel(EntrancePanel entrancePanel) {\n        /* store in database */ \n    }\n\n    public void addExitPanel(ExitPanel exitPanel) {\n        /* store in database */ \n    }\n}\n</code></pre> <p>\u2705 This document provides an organized breakdown of the Parking Lot system structure. Happy coding! \ud83d\ude80</p> <p></p> <p>Shrayansh Jain - https://www.udemy.com/course/system_design_lld_hld/learn/lecture/41933070#overview</p>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/","title":"\ud83c\udfc6 Design Stack Overflow","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#top-use-cases","title":"\ud83d\udccc Top Use Cases","text":"<p>Here are the main functionalities of Stack Overflow:</p> <ul> <li>\ud83d\udd0d Search Questions</li> <li>\ud83d\udcdd Create a New Question (with bounty and tags)</li> <li>\u270d\ufe0f Add/Modify Answers to questions</li> <li>\ud83d\udcac Add Comments to questions or answers</li> <li>\ud83d\udd27 Moderator Actions (Close, delete, and un-delete any question)</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#class-diagram","title":"\ud83c\udfd7\ufe0f Class Diagram","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#question","title":"\u2753 Question","text":"<ul> <li>Central part of the system with Title and Description</li> <li>Tracks views, votes, status, and closing remarks</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#answer","title":"\u2705 Answer","text":"<ul> <li>Contains text and view count</li> <li>Tracks votes, flags, and accepted answer status</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#comment","title":"\ud83d\udcac Comment","text":"<ul> <li>Similar to answers, tracks text, views, votes, and flags</li> <li>Members can add comments to questions and answers</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#tag","title":"\ud83d\udd16 Tag","text":"<ul> <li>Identified by name and description</li> <li>Tracks daily and weekly usage frequency</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#badge","title":"\ud83c\udfc5 Badge","text":"<ul> <li>Similar to tags, with name and description</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#photo","title":"\ud83d\udcf8 Photo","text":"<ul> <li>Questions or answers can include photos</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#bounty","title":"\ud83d\udcb0 Bounty","text":"<ul> <li>Users can place a bounty on a question to draw attention</li> <li>Bounties have reputation value and an expiry date</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#account","title":"\ud83d\udc64 Account","text":"<ul> <li>Four types of accounts:<ul> <li>Guest: Can search and view questions</li> <li>Member: Can ask questions and earn reputation from answers &amp; bounties</li> <li>Admin</li> <li>Moderator</li> </ul> </li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#notification","title":"\ud83d\udd14 Notification","text":"<ul> <li>Sends notifications to members</li> <li>Assigns badges based on reputation</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#code-structure","title":"\ud83d\udee0\ufe0f Code Structure","text":""},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#enums-data-types-and-constants","title":"\ud83d\udccc Enums, Data Types, and Constants","text":"<p>Defines the required enums, data types, and constants.</p> <pre><code>public enum QuestionStatus {\n    OPEN, \n    CLOSED, \n    ON_HOLD, \n    DELETED\n}\n\npublic enum QuestionClosingRemark {\n    DUPLICATE,\n    OFF_TOPIC,\n    TOO_BROAD,\n    NON_CONSTRUCTIVE,\n    NOT_A_REAL_QUESTION,\n    PRIMARILY_OPINION_BASED\n}\n\npublic enum AccountStatus {\n    ACTIVE,\n    CLOSED,\n    BLACKLISTED,\n    BLOCKED\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#account-member-admin-and-moderator","title":"\ud83d\udc64 Account, Member, Admin, and Moderator","text":"<p>Represents different user roles interacting with the system.</p> <pre><code>// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n    private String name;\n    private String email;\n    private String phone;\n    private int reputation;\n\n    public boolean resetPassword();\n}\n\npublic class Member {\n    private Account account;\n    private List&lt;Badge&gt; badges;\n\n    public int getReputation();\n    public String getEmail();\n    public boolean createQuestion(Question question);\n    public boolean createTag(Tag tag);\n}\n\npublic class Admin extends Member {\n    public boolean blockMember(Member member);\n    public boolean unblockMember(Member member);\n}\n\npublic class Moderator extends Member {\n    public boolean closeQuestion(Question question);\n    public boolean undeleteQuestion(Question question);\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#badge-tag-and-notification","title":"\ud83c\udf96\ufe0f Badge, Tag, and Notification","text":"<ul> <li>Members have badges</li> <li>Questions have tags</li> <li>Notifications alert users about relevant updates</li> </ul> <pre><code>public class Badge {\n    private String name;\n    private String description;\n}\n\npublic class Tag {\n    private String name;\n    private String description;\n    private long dailyAskedFrequency;\n    private long weeklyAskedFrequency;\n}\n\npublic Notification {\n    private int notificationId;\n    private Date createdOn;\n    private String content;\n\n    public boolean sendNotification();\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#photo-and-bounty","title":"\ud83d\uddbc\ufe0f Photo and \ud83d\udcb0 Bounty","text":"<ul> <li>Questions and Answers can have multiple photos</li> <li>Bounties can be placed to attract attention</li> </ul> <pre><code>public class photo {\n  private int photoId;\n  private String photoPath;\n  private Date creationDate;\n\n  private Member creatingMember;\n\n  public boolean delete();\n}\n\npublic class Bounty {\n    private int reputation;\n    private Date expiry;\n\n    public boolean modifyReputation(int reputation);\n}\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/LLD-Interview-Questions/Stack-Overflow/stack-overflow-skeleton/#question-comment-and-answer","title":"\u2753 Question, \ud83d\udcac Comment, and \u2705 Answer","text":"<ul> <li>Members can ask questions</li> <li>Members can add answers to any question</li> <li>All members can add comments to any open question or answer</li> </ul> <pre><code>public interface Search {\n    public static List&lt;Question&gt; search(String query);\n}\n\npublic class Question implements Search {\n    private String title;\n    private String description;\n    private int viewCount;\n    private int voteCount;\n    private Date creationTime;\n    private Date updateDate;\n    private QuestionStatus status;\n    private QuestionClosingRemark closingRemark;\n\n    private Member askingMember;\n    private Bounty bounty;\n    private List&lt;Photo&gt; photos;\n    private List&lt;Comment&gt; comments;\n    private List&lt;Answer&gt; answer;\n\n    public boolean close();\n    public boolean undelete();\n    public boolean addComment(Comment comment);\n    private boolean addBounty(Bounty bounty);\n\n    public static  List&lt;Question&gt; search(String query){\n      // return all questions containing the string query in their title or description.\n    }\n}\n\npublic class Comment {\n    private  String text;\n    private Date creationTime;\n    private int flagCount;\n    private voteCount;\n\n    private Member askingMember;\n\n    public boolean incrementVoteCount();\n}\n\npublic class Answer {\n  private String answerText;\n  private boolean accepted;\n  private int voteCount;\n  private int flagCount;\n  private Date creationTime;\n\n  private Member creatingMember;\n  private List&lt;Photo&gt; photos;\n\n  public boolean incrementVoteCount();\n}\n</code></pre> <p>\u2705 This document provides a structured breakdown of the Stack Overflow system. Happy coding! \ud83d\ude80  </p> <p></p>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/","title":"SOLID Principles in Java","text":""},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#overview","title":"Overview","text":"<p>This project demonstrates the application of the SOLID principles using Java classes. SOLID is an acronym for five design principles intended to make software designs more understandable, flexible, and maintainable. The principles are:</p> <ol> <li>Single Responsibility Principle (SRP)</li> <li>Open/Closed Principle (OCP)</li> <li>Liskov Substitution Principle (LSP)</li> <li>Interface Segregation Principle (ISP)</li> <li>Dependency Inversion Principle (DIP)</li> </ol>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<pre><code>                              +-------------------------+\n                              |   SingleResponsibility  |\n                              |       (Main Class)      |\n                              +-------------------------+\n                                           |\n                  +------------------------+------------------------+\n                  |                                                 |\n    +------------------------+                      +-------------------------+\n    |        Marker          |                      |        Invoice          |\n    |   (Holds marker data)  |                      | (Calculates total cost) |\n    +------------------------+                      +-------------------------+\n    |                                                           |\n    +------------------------+                      +-------------------------+\n    | - getName()            |                      | - getMarker()           |\n    | - getColor()           |                      | - getQuantity()         |\n    | - getYear()            |                      | - calculateTotal()      |\n    | - getPrice()           |                      +-------------------------+\n    +------------------------+                                \n    +-------------------------+\n    |      InvoiceDao         |\n    |  (Saves to Database)    |\n    +-------------------------+\n    | - saveToDatabase()      |\n    +-------------------------+\n    |\n    +-------------------------+\n    |    InvoicePrinter       |\n    |  (Prints Invoice Info)  |\n    +-------------------------+\n    | - print()               |\n    +-------------------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#class-descriptions","title":"Class Descriptions","text":"<ul> <li>Marker: Represents a marker with properties like name, color, year, and price. It has a single responsibility of managing marker information.</li> <li>Invoice: Manages the relationship between a Marker and its quantity. It calculates the total price based on the marker's price and quantity.</li> <li>InvoiceDao: Handles the persistence of the Invoice data, such as saving it to a database.</li> <li>InvoicePrinter: Prints invoice details to the console, adhering to the SRP by handling only printing logic.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#openclosed-principle-ocp","title":"Open/Closed Principle (OCP)","text":"<pre><code>                            +---------------------+\n                            |    InvoiceDao       |\n                            |  (Interface)        |\n                            +---------------------+\n                                      |\n      +-------------------------------+------------------------------+\n      |                                                              |\n+------------------------+                               +------------------------+\n|   DatabaseInvoiceDao   |                               |    FileInvoiceDao      |\n| (Implements InvoiceDao)|                               | (Implements InvoiceDao)|\n+------------------------+                               +------------------------+\n            |                                                            |\n            v                                                            v\nsave(Invoice) (Saves to DB)                                   save(Invoice) (Saves to File)\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#classes-involved","title":"Classes Involved:","text":"<ul> <li>InvoiceDao (interface)</li> <li>DatabaseInvoiceDao</li> <li>FileInvoiceDao</li> </ul> <p>The Open/Closed Principle states that software entities should be open for extension but closed for modification. This means that new functionality should be added with new code, without altering existing code.</p>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#class-descriptions_1","title":"Class Descriptions","text":"<ul> <li>InvoiceDao: An interface that declares a method <code>save(Invoice invoice)</code> for saving invoices. Different implementations can extend this interface.</li> <li>DatabaseInvoiceDao: Implements <code>InvoiceDao</code> to save invoices to a database.</li> <li>FileInvoiceDao: Implements <code>InvoiceDao</code> to save invoices to a file.</li> <li>Main Class: <code>OpenClosed_2</code> demonstrates the use of different <code>InvoiceDao</code> implementations without changing the class itself.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<pre><code>                      +------------------------+\n                      |     easy.educativeIO.Vehicle            |\n                      |  + getNumberOfWheels() |\n                      +------------------------+\n                             /     \\\n       +----------------+   +------------------+\n       | EngineVehicle  |   |     Bicycle      |\n       | + hasEngine()  |   |  (No Engine)     |\n       | (4 wheels)     |   |  (2 wheels)      |\n       +----------------+   +------------------+\n         /        \\\n+---------------+ +---------------+\n|      easy.educativeIO.Car      | |  MotorCycle   |\n| (inherits EV) | | (inherits EV) |\n+---------------+ +---------------+\n</code></pre>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#classes-involved_1","title":"Classes Involved:","text":"<ul> <li>easy.educativeIO.Vehicle (Base class)</li> <li>EngineVehicle (Derived class)</li> <li>easy.educativeIO.Car, MotorCycle, Bicycle (Subclasses)</li> </ul> <p>The Liskov Substitution Principle states that objects of a derived class should be able to replace objects of the base class without affecting the correctness of the program.</p>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#class-descriptions_2","title":"Class Descriptions","text":"<ul> <li>easy.educativeIO.Vehicle: A base class representing general vehicles with a method <code>getNumberOfWheels</code>.</li> <li>EngineVehicle: Extends <code>easy.educativeIO.Vehicle</code> to include engine-specific behavior. Represents vehicles with engines.</li> <li>easy.educativeIO.Car and MotorCycle: Extend <code>EngineVehicle</code>, inheriting properties of vehicles with engines.</li> <li>Bicycle: Extends <code>easy.educativeIO.Vehicle</code> without adding or modifying behavior related to engines, adhering to LSP.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<pre><code>+--------------------+                +--------------------+\n| WaiterInterface    |                | ChefInterface      |\n+--------------------+                +--------------------+\n| + serve()          |                | + cookFood()       |\n| + takeOrder()      |                | + decideMenu()     |\n+--------------------+                +--------------------+\n           |                                    |\n+------------------+                  +------------------+\n| Waiter           |                  | Chef             |\n+------------------+                  +------------------+\n| + serve()        |                  | + cookFood()     |\n| + takeOrder()    |                  | + decideMenu()   |\n+------------------+                  +------------------+\n</code></pre> <p>This principle ensures that no client is forced to depend on methods it does not use.</p>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#explanation","title":"Explanation","text":"<p>The <code>WaiterInterface</code> and <code>ChefInterface</code> segregate responsibilities, ensuring that the <code>Waiter</code> and <code>Chef</code> classes implement only the methods they need.</p>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#has-a-relationship","title":"Has-a Relationship:","text":"<ul> <li>Waiter has actions like <code>serve</code> and <code>takeOrder</code>.</li> <li>Chef has actions like <code>cookFood</code> and <code>decideMenu</code>.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#is-a-relationship","title":"Is-a Relationship:","text":"<ul> <li>Waiter is a <code>WaiterInterface</code>.</li> <li>Chef is a <code>ChefInterface</code>.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<pre><code>+--------------------+         +--------------------+\n|   Keyboard         |         |      Mouse         |\n+--------------------+         +--------------------+\n| + type()           |         | + click()          |\n+--------------------+         +--------------------+\n/      \\                      /       \\\n+---------------+         +------------------------+\n| WiredKeyboard |         |      WiredMouse        |\n+---------------+         +------------------------+\n| + type()      |         | + click()              |\n+---------------+         +------------------------+\n\n+-----------------------+    +---------------------------+\n|  BluetoothKeyboard    |    |     BluetoothMouse        |\n+-----------------------+    +---------------------------+\n| + type()              |    | + click()                 |\n+-----------------------+    +---------------------------+\n\n+-------------------------------------------------------+\n|                        MacBook                        |\n+-------------------------------------------------------+\n| - keyboard: Keyboard                                  |\n| - mouse: Mouse                                        |\n+-------------------------------------------------------+\n| + useLaptop()                                         |\n+-------------------------------------------------------+\n</code></pre> <p>This principle states that high-level modules should depend on abstractions rather than concrete implementations.</p>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#explanation_1","title":"Explanation","text":"<p>The <code>MacBook</code> class depends on the abstractions <code>Keyboard</code> and <code>Mouse</code> rather than specific implementations, allowing flexible configuration with different peripheral types.</p>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#has-a-relationship_1","title":"Has-a Relationship:","text":"<ul> <li>MacBook has a <code>Keyboard</code> and a <code>Mouse</code>.</li> </ul>"},{"location":"Notes/Interview-Coding-Practice/src/Solid-Principles/#is-a-relationship_1","title":"Is-a Relationship:","text":"<ul> <li>WiredKeyboard and BluetoothKeyboard are types of <code>Keyboard</code>.</li> <li>WiredMouse and BluetoothMouse are types of <code>Mouse</code>.</li> </ul>"},{"location":"Notes/interview-prep/","title":"\ud83e\udde9 Interview Preparation Hub","text":"<p>Welcome to the Interview Preparation section \u2014 your one-stop guide to acing software engineering interviews. This section is organized into structured and categorized notes based on real interview experiences, technical subjects, and behavioral aspects.</p>"},{"location":"Notes/interview-prep/#contents","title":"\ud83d\udcc2 Contents","text":"<ul> <li>Overview \u2013 Introduction to the interview preparation structure and how to use these notes effectively.</li> <li>Experience-Based Insights:<ul> <li>About Me</li> <li>Thales Interview Experience</li> <li>Oracle Interview Experience</li> <li>Delhivery &amp; CallHealth</li> </ul> </li> <li>Behavioral &amp; Soft Skills \u2013 Learn how to frame your experiences and communicate effectively.</li> <li>Technical Round Preparation:<ul> <li>Backend Development</li> <li>Frontend Development</li> <li>Databases</li> <li>Testing &amp; Code Quality</li> <li>DevOps &amp; CI/CD</li> <li>Agile Methodologies</li> </ul> </li> </ul> <p>\ud83d\udccc These notes are regularly updated to reflect real-world expectations from top tech companies like Google, Microsoft, Oracle, and more.</p>"},{"location":"Notes/interview-prep/Agile/","title":"\ud83d\udce6 Agile Practices \u2013 Interview Mock Test","text":""},{"location":"Notes/interview-prep/Agile/#1-how-do-you-handle-changing-requirements-in-an-agile-project","title":"\ud83d\udd04 1. How do you handle changing requirements in an Agile project?","text":"<ul> <li>I stay flexible and open to change, as it's part of Agile principles (Responding to change over following a plan).</li> <li>I communicate with the Product Owner to understand the intent and priority.</li> <li>Assess the impact on current sprint goals.</li> <li>If it fits the sprint, realign tasks; otherwise, update the backlog for future sprints.</li> <li>Keep the team informed and aligned to avoid surprises.</li> </ul>"},{"location":"Notes/interview-prep/Agile/#2-what-tools-have-you-used-for-agile-development","title":"\ud83d\udee0\ufe0f 2. What tools have you used for Agile development?","text":"<ul> <li>\u2705 Jira \u2013 for sprint planning, backlog grooming, creating epics/stories, and tracking progress via dashboards.</li> <li>\u2705 Azure DevOps \u2013 used Boards for user stories/tasks, and linked them to CI/CD pipelines and commits.</li> <li>\u2705 Trello \u2013 used for lightweight task tracking and Kanban boards in smaller teams or POCs.</li> </ul>"},{"location":"Notes/interview-prep/Agile/#3-how-do-you-estimate-effort-for-user-stories-or-tasks","title":"\ud83e\udde0 3. How do you estimate effort for user stories or tasks?","text":"<ul> <li>Use story points for estimating complexity during backlog refinement or sprint planning.</li> <li>Apply Planning Poker to gather team consensus.</li> <li>Consider edge cases, testing effort, integration time, and unknowns.</li> <li>For granular tasks, use time-based estimates (hours/days) if story points are not enough.</li> </ul>"},{"location":"Notes/interview-prep/Agile/#4-how-do-you-ensure-continuous-improvement-in-your-agile-team","title":"\ud83d\udd0d 4. How do you ensure continuous improvement in your Agile team?","text":"<ul> <li>Participate in retrospectives actively \u2013 reflect on what went well and what didn\u2019t.</li> <li>Contribute ideas for process improvements.</li> <li>Act on action items\u2014e.g., improving story slicing, reducing carry-over, or automating tests.</li> </ul>"},{"location":"Notes/interview-prep/Agile/#5-whats-your-approach-when-user-stories-are-not-well-defined","title":"\ud83e\udde9 5. What\u2019s your approach when user stories are not well-defined?","text":"<ul> <li>Communicate early with the PO to clarify acceptance criteria.</li> <li>Suggest splitting large or vague stories into smaller, well-scoped tasks.</li> <li>Flag risks during backlog grooming.</li> </ul>"},{"location":"Notes/interview-prep/Agile/#6-describe-how-your-team-handles-daily-standups","title":"\ud83d\udcac 6. Describe how your team handles daily standups.","text":"<ul> <li>15-minute focused sync: Each member shares \u2013 What they did, what they\u2019ll do today, and blockers.</li> <li>If issues arise, follow up offline.</li> <li>Keep it consistent and time-bound to build team rhythm.</li> </ul>"},{"location":"Notes/interview-prep/Agile/#7-how-do-you-handle-blockers-in-agile","title":"\ud83d\udea7 7. How do you handle blockers in Agile?","text":"<ul> <li>Immediately highlight blockers in standup or via tools like Jira.</li> <li>Reach out to the relevant person or stakeholder for support.</li> <li>If unresolved, escalate to Scrum Master or PO.</li> <li>Log them visibly to track impact on sprint goals.</li> </ul>"},{"location":"Notes/interview-prep/Agile/#bonus-tip","title":"\u2705 Bonus Tip:","text":"<ul> <li>Remember the Agile Manifesto values and 12 principles\u2014they often come up in behavioral rounds.</li> </ul> <p>Would you like to simulate a mock Agile interview next?</p>"},{"location":"Notes/interview-prep/Behavioral/","title":"\ud83e\udde0 Behavioral &amp; Soft Skills (STAR-based)","text":""},{"location":"Notes/interview-prep/Behavioral/#tell-me-about-a-time-you-collaborated-with-a-product-owner-or-designer-how-did-you-handle-differing-viewpoints","title":"\u2b50\u2b50 Tell me about a time you collaborated with a Product Owner or Designer. How did you handle differing viewpoints? \ud83e\udd1d","text":"<ul> <li>\ud83c\udfe2 Context: Collaborated with Product Owners at CallHealth (Insurance &amp; Blog modules) and Delhivery (FMS, Billing).</li> <li>\ud83c\udfaf Role: Responsible for aligning backend implementation with business goals.</li> <li>\ud83d\udd04 Challenge: Faced conflicts regarding technical feasibility and timeline expectations.</li> <li> <p>\ud83d\udee0\ufe0f Action Taken:</p> <ul> <li>Clearly explained technical constraints and trade-offs.</li> <li>Proposed feasible alternatives with logical reasoning.</li> <li>Used examples to demonstrate real-world impact.</li> <li> <p>\u2705 Outcome:</p> </li> <li> <p>Achieved mutual understanding.</p> </li> <li>Strengthened trust and collaboration across teams.</li> </ul> </li> </ul> <p>\ud83d\udca1 Example: In Billing, real-time bulk invoice generation was requested. I proposed batch processing instead to handle performance constraints \u2014 this was accepted.</p>"},{"location":"Notes/interview-prep/Behavioral/#describe-a-situation-where-you-had-to-quickly-learn-a-new-tool-or-technology-what-was-the-outcome","title":"\u2b50\u2b50 Describe a situation where you had to quickly learn a new tool or technology. What was the outcome? \u26a1","text":"<ul> <li>\ud83c\udfe2 Context: Required to use Kafka for billing events at Delhivery.</li> <li>\ud83c\udfaf Task: Implement new Kafka event flow in a tight sprint deadline.</li> <li> <p>\ud83d\udee0\ufe0f Action Taken:</p> <ul> <li>Referred to internal and online Kafka resources.</li> <li>Pair-programmed initial tasks with experienced colleagues.</li> <li> <p>\u2705 Outcome:</p> </li> <li> <p>Delivered Kafka integration in under a week.</p> </li> <li>Later handled other Kafka-based services confidently.</li> </ul> </li> </ul> <p>\ud83d\udca1 Tip: Always emphasize tool/tech name, learning approach, and business impact.</p>"},{"location":"Notes/interview-prep/Behavioral/#have-you-ever-received-constructive-feedback-on-your-code-how-did-you-respond-and-what-did-you-do-next","title":"\u2b50 Have you ever received constructive feedback on your code? How did you respond, and what did you do next? \ud83d\udcda","text":"<ul> <li>\ud83c\udfe2 Context: Code review feedback at Delhivery.</li> <li>\ud83c\udfaf Issue: API logic too tightly coupled with DB schema.</li> <li> <p>\ud83d\udee0\ufe0f Action Taken:</p> <ul> <li>Used DTOs and service abstraction.</li> <li>Applied the same pattern in future projects.</li> <li> <p>\u2705 Outcome:</p> </li> <li> <p>Improved maintainability.</p> </li> <li>Gained recognition to mentor juniors on service design.</li> </ul> </li> </ul> <p>\ud83d\udca1 Tip: Show you value feedback and act on it constructively.</p>"},{"location":"Notes/interview-prep/Behavioral/#tell-us-about-a-time-when-your-code-caused-a-bug-in-production-what-did-you-learn-from-it","title":"\u2b50\u2b50 Tell us about a time when your code caused a bug in production. What did you learn from it? \u26a0\ufe0f","text":"<ul> <li>\ud83c\udfe2 Context: Date parsing error in FMS during quick production release.</li> <li>\ud83c\udfaf Impact: Shipment processing affected.</li> <li> <p>\ud83d\udee0\ufe0f Action Taken:</p> <ul> <li>Rolled back release.</li> <li>Delivered hotfix in an hour.</li> <li>Added automated tests and logging for date formats.</li> <li> <p>\u2705 Outcome:</p> </li> <li> <p>Improved early detection.</p> </li> <li>Reduced future production issues.</li> </ul> </li> </ul> <p>\ud83d\udca1 Tip: Own the mistake, highlight fixes and preventive measures.</p>"},{"location":"Notes/interview-prep/Behavioral/#describe-how-you-contribute-to-maintaining-or-improving-code-quality-in-your-team","title":"\u2b50\u2b50 Describe how you contribute to maintaining or improving code quality in your team. \ud83d\udee0\ufe0f","text":"<ul> <li>\ud83c\udfe2 Context: Critical in high-scale systems like Delhivery.</li> <li> <p>\ud83d\udee0\ufe0f Initiatives Taken:</p> <ul> <li>Active participation in code reviews.</li> <li>Introduced code linters and pre-commit hooks.</li> <li>Initiated team-wide code walkthroughs.</li> <li> <p>\u2705 Outcome:</p> </li> <li> <p>Reduced bugs.</p> </li> <li>Faster onboarding of new developers.</li> <li>Increased code consistency.</li> </ul> </li> </ul> <p>\ud83d\udca1 Tip: Mention tooling, mentoring, or process improvements.</p>"},{"location":"Notes/interview-prep/Behavioral/#how-do-you-manage-competing-priorities-in-your-projects","title":"\u2b50\u2b50 How do you manage competing priorities in your projects? \u23f3","text":"<ul> <li>\ud83c\udfe2 Context: Multiple ongoing high-priority features.</li> <li> <p>\ud83d\udee0\ufe0f Action Taken:</p> <ul> <li>Close coordination with POs/PMs to prioritize.</li> <li>Broke features into milestones.</li> <li>Set clear expectations with stakeholders.</li> <li> <p>\u2705 Outcome:</p> </li> <li> <p>Delivered without compromising on quality.</p> </li> <li>Improved delivery predictability.</li> </ul> </li> </ul> <p>\ud83d\udca1 Tip: Showcase communication and time management skills.</p>"},{"location":"Notes/interview-prep/Behavioral/#tell-me-about-a-time-when-you-had-to-deal-with-a-difficult-stakeholder-how-did-you-handle-the-situation","title":"\u2b50\u2b50 Tell me about a time when you had to deal with a difficult stakeholder. How did you handle the situation? \ud83d\udcac","text":"<ul> <li>\ud83c\udfe2 Context: Timeline concerns in FMS module.</li> <li> <p>\ud83d\udee0\ufe0f Action Taken:</p> <ul> <li>Scheduled a dedicated sync-up.</li> <li>Shared current status, risks, and revised plan.</li> <li> <p>\u2705 Outcome:</p> </li> <li> <p>Stakeholder appreciated transparency.</p> </li> <li>Project delivered on time.</li> </ul> </li> </ul> <p>\ud83d\udca1 Tip: Be empathetic, transparent, and solution-focused.</p>"},{"location":"Notes/interview-prep/Behavioral/#how-do-you-ensure-smooth-collaboration-with-cross-functional-teams-product-design-etc","title":"\u2b50 How do you ensure smooth collaboration with cross-functional teams (Product, Design, etc.)? \ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1","text":"<ul> <li>\ud83c\udfe2 Context: Backend-Frontend-Product coordination at Delhivery.</li> <li> <p>\ud83d\udee0\ufe0f Action Taken:</p> <ul> <li>Regular syncs with Product, Design, QA.</li> <li>Shared backend progress.</li> <li>Gathered early feedback to prevent rework.</li> <li> <p>\u2705 Outcome:</p> </li> <li> <p>Timely delivery of features.</p> </li> <li>Alignment on user expectations.</li> </ul> </li> </ul> <p>\ud83d\udca1 Tip: Highlight proactive communication and stakeholder engagement.</p>"},{"location":"Notes/interview-prep/Behavioral/#describe-a-challenge-you-faced-while-scaling-a-system-how-did-you-overcome-it","title":"\u2b50\u2b50\u2b50 Describe a challenge you faced while scaling a system. How did you overcome it? \ud83d\ude80","text":"<ul> <li>\ud83c\udfe2 Context: Scaling Delhivery's billing system for peak season.</li> <li>\ud83c\udfaf Challenge: Performance degradation due to load.</li> <li> <p>\ud83d\udee0\ufe0f Action Taken:</p> <ul> <li>Identified bottlenecks.</li> <li>Introduced caching and optimized DB queries.</li> <li>Scaled infrastructure.</li> <li> <p>\u2705 Outcome:</p> </li> <li> <p>Smooth functioning during high load.</p> </li> <li>No performance-related incidents.</li> </ul> </li> </ul> <p>\ud83d\udca1 Tip: Name specific optimization strategies or tools used.</p>"},{"location":"Notes/interview-prep/Behavioral/#whats-your-approach-to-learning-and-staying-updated-in-the-fast-evolving-tech-landscape","title":"\u2b50\u2b50 What\u2019s your approach to learning and staying updated in the fast-evolving tech landscape? \ud83d\udcda\ud83c\udf10","text":"<ul> <li>\ud83e\udde0 Mindset: Continuous learner.</li> <li>\ud83d\udcc5 Routine: Weekly slots for learning.</li> <li> <p>\ud83d\udee0\ufe0f Sources:</p> <ul> <li>Tech blogs, newsletters (e.g., Medium, InfoQ).</li> <li>Webinars and YouTube channels.</li> <li>Online courses on Udemy, Coursera.</li> <li> <p>\u2705 Impact:</p> </li> <li> <p>Quickly adapt to new tech stacks.</p> </li> <li>Applied learnings to deliver better backend solutions.</li> </ul> </li> </ul> <p>\ud83d\udca1 Tip: Always link learning to practical outcomes.</p> <p>\u2728 This mock test reflects real-world senior engineer challenges. Revisit regularly before interviews to stay sharp and confident.</p>"},{"location":"Notes/interview-prep/Code-Quality/","title":"\ud83e\uddea Testing &amp; Code Quality - Mock Interview Questions","text":""},{"location":"Notes/interview-prep/Code-Quality/#1-what-is-test-driven-development-tdd-and-how-have-you-applied-it-in-your-past-work","title":"\u2b50\u2b50 1. \u2705 What is Test-Driven Development (TDD), and how have you applied it in your past work?","text":"<ul> <li>\ud83e\udde0 TDD is a development approach where tests are written before writing production code.</li> <li>\ud83d\udd01 Follows the Red-Green-Refactor cycle:<ul> <li>\u274c Write a failing test</li> <li>\u2705 Write just enough code to pass the test</li> <li>\u267b Refactor the code for maintainability</li> </ul> </li> <li>\ud83d\udcbc With 8+ years of experience, I\u2019ve:<ul> <li>\u26d3\ufe0f Applied TDD in microservice-based backends using PyTest and Jest</li> <li>\ud83d\udd0d Reduced production bugs by proactively defining edge cases</li> <li>\ud83e\udde9 Improved code modularity, enabling better collaboration during team development</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Code-Quality/#2-what-kind-of-tests-do-you-usually-write-can-you-provide-an-example","title":"\u2b50\u2b50 2. \ud83d\udcca What kind of tests do you usually write? Can you provide an example?","text":"<ul> <li>\ud83e\uddea Unit Tests: For pure logic validation (e.g., validators, parsers)</li> <li>\ud83d\udd17 Integration Tests: Ensure service-to-service or API-DB connectivity works as expected</li> <li>\ud83c\udfaf End-to-End Tests: Simulate user journeys in the actual system</li> <li>\ud83d\udee0\ufe0f Tools I\u2019ve used across different layers:<ul> <li>\u2705 Jest for JS/TS logic</li> <li>\ud83d\udd0d Supertest for API testing in Node.js</li> <li>\ud83e\uddea Cypress for full UI regression</li> <li>\ud83e\uddec Postman and Newman for API automation in CI</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Code-Quality/#3-what-are-the-principles-of-clean-code-you-follow-in-your-work","title":"\u2b50 3. \ud83e\udd16 What are the principles of clean code you follow in your work?","text":"<ul> <li>\ud83e\uddfe Use clear, expressive naming for variables, functions, and classes</li> <li>\ud83d\udd01 Apply DRY and KISS principles to avoid redundancy and over-engineering</li> <li>\ud83d\udccf Ensure single-responsibility methods that are small and testable</li> <li>\u2696 Maintain consistency in coding style and patterns across the codebase</li> <li>\u274c Avoid magic numbers, nested complexity, and over-commenting</li> <li>\u2705 Emphasize self-documenting code through meaningful structure and naming</li> </ul>"},{"location":"Notes/interview-prep/Code-Quality/#4-how-do-you-handle-code-reviews-both-giving-and-receiving-feedback","title":"\u2b50\u2b50 4. \ud83d\uddd0\ufe0f How do you handle code reviews \u2013 both giving and receiving feedback?","text":"<ul> <li> <p>\ud83c\udf81 While giving:</p> <ul> <li>\ud83e\udde0 Focus on logic correctness, readability, and test coverage</li> <li>\ud83e\udd1d Encourage discussion instead of pushing personal preferences</li> <li>\ud83d\udccc Suggest refactors with reasoning and examples</li> </ul> </li> <li> <p>\ud83d\ude4c While receiving:</p> <ul> <li>\ud83e\uddd8\u200d\u2642\ufe0f Stay open-minded and treat reviews as a learning opportunity</li> <li>\ud83d\udd0d Ask clarifying questions instead of assuming</li> <li>\ud83d\udcc8 Apply feedback promptly and acknowledge contributions</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Code-Quality/#additional-questions-you-should-prepare-for","title":"\u2795 Additional Questions You Should Prepare For:","text":""},{"location":"Notes/interview-prep/Code-Quality/#5-what-tools-and-frameworks-do-you-use-for-test-automation","title":"\u2b50 5. \ud83c\udfa1 What tools and frameworks do you use for test automation?","text":"<ul> <li>\ud83d\udcbb Backend:<ul> <li>Jest, Mocha \u2192 JS/TS unit testing</li> <li>PyTest, unittest \u2192 Python logic testing</li> </ul> </li> <li>\ud83c\udf10 API Testing:<ul> <li>Postman, Newman</li> </ul> </li> <li>\ud83d\udda5\ufe0f Frontend:<ul> <li>Cypress, Playwright \u2192 E2E testing</li> </ul> </li> <li>\u2699 CI Integration:<ul> <li>Included test jobs in GitLab CI, GitHub Actions, and Jenkins pipelines</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Code-Quality/#6-how-do-you-ensure-your-tests-run-efficiently-in-cicd-pipelines","title":"\u2b50\u2b50 6. \ud83c\udf0e How do you ensure your tests run efficiently in CI/CD pipelines?","text":"<ul> <li>\u26a1 Prioritize unit tests early in the pipeline for fast feedback</li> <li>\ud83e\uddf1 Use test stages \u2013 unit \u2192 integration \u2192 e2e</li> <li>\ud83e\uddca Dockerized tests for consistent and isolated test environments</li> <li>\ud83d\ude80 Use parallel test execution and dependency caching to speed up builds</li> <li>\ud83d\udd0d Trigger targeted test suites based on code diff using tagging or paths</li> </ul>"},{"location":"Notes/interview-prep/Code-Quality/#7-how-do-you-measure-test-coverage-and-quality","title":"\u2b50 7. \ud83d\udcca How do you measure test coverage and quality?","text":"<ul> <li>\ud83d\udee0\ufe0f Tools I\u2019ve worked with:<ul> <li>Istanbul (JS/TS), coverage.py (Python), SonarQube for code quality</li> </ul> </li> <li>\ud83d\udcc8 Key Metrics:<ul> <li>\ud83d\udd0d Line and branch coverage %</li> <li>\ud83e\uddec Mutation testing to assess test effectiveness</li> <li>\ud83d\udea8 Coverage thresholds enforced in CI for quality gates</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Code-Quality/#8-can-you-write-a-pseudo-test-case-for-a-simple-function","title":"\u2b50 8. \u274e Can you write a pseudo test case for a simple function?","text":"<p>Function: <code>calculate_discount(price, is_premium)</code></p> <pre><code>Test Case 1:\n  - Input: price = 100, is_premium = true\n  - Expected Output: 90\n\nTest Case 2:\n  - Input: price = 100, is_premium = false\n  - Expected Output: 95\n</code></pre>"},{"location":"Notes/interview-prep/Code-Quality/#final-tip","title":"\ud83d\udca1 Final Tip","text":"<ul> <li>\ud83d\udea8 Be ready with real bug stories or incidents where testing caught critical issues</li> <li>\u26a1 Emphasize how your testing mindset contributed to early detection, faster delivery, or better developer velocity</li> </ul>"},{"location":"Notes/interview-prep/Databases/","title":"\ud83d\uddc4\ufe0f Databases Interview Mock (Based on Experience)","text":""},{"location":"Notes/interview-prep/Databases/#1-write-an-sql-query-to-find-the-second-highest-salary-from-an-employees-table","title":"\u2b50\u2b50 1. Write an SQL query to find the second highest salary from an employees table.","text":"<ul> <li>\u2705 Using LIMIT and OFFSET:</li> </ul> <p><code>sql   SELECT DISTINCT salary FROM employees ORDER BY salary DESC OFFSET 1 LIMIT 1;</code> * \u2705 Using Subquery and MAX:</p> <p><code>sql   SELECT MAX(salary) AS second_highest_salary FROM employees WHERE salary &lt; (SELECT MAX(salary) FROM employees);</code> * \ud83d\udca1 Tip: Use <code>DISTINCT</code> if duplicate salaries exist to avoid incorrect results.</p>"},{"location":"Notes/interview-prep/Databases/#2-what-are-some-best-practices-for-optimizing-queries-in-postgresql","title":"\u2b50\u2b50\u2b50 2. What are some best practices for optimizing queries in PostgreSQL?","text":"<ul> <li>\ud83c\udff7\ufe0f Use Indexes Wisely: Apply indexes on columns used in WHERE, JOIN, and ORDER BY clauses.</li> <li>\ud83e\uddfe Avoid SELECT *: Always retrieve only the needed columns to reduce I/O.</li> <li>\ud83d\udee1\ufe0f Use Parameterized Queries: Prevents SQL injection and improves performance via query plan reuse.</li> <li>\ud83d\udd04 Analyze &amp; Vacuum: Regular use of <code>ANALYZE</code> and <code>VACUUM</code> maintains up-to-date stats for query planner.</li> <li>\ud83d\udd0d Use EXPLAIN ANALYZE: Analyze query execution plans to identify slow operations.</li> <li>\ud83d\udcc9 Limit Result Sets: Use <code>LIMIT</code> and <code>OFFSET</code> for paginated responses to avoid over-fetching.</li> <li>\u2699\ufe0f Use CTEs &amp; Materialized Views Appropriately: Optimize complex data retrievals when needed.</li> </ul>"},{"location":"Notes/interview-prep/Databases/#3-have-you-ever-performed-basic-db-admin-tasks-backups-indexing-schema-changes","title":"\u2b50\u2b50 3. Have you ever performed basic DB admin tasks (backups, indexing, schema changes)?","text":"<p>Yes, with over 8+ years of experience, I've often collaborated on DB admin tasks:</p> <ul> <li>\ud83d\udd0d Optimized Reports: Indexed <code>order_date</code> and <code>customer_id</code>, improving report generation time.</li> <li>\ud83c\udfd7\ufe0f Schema Updates: Performed schema changes using <code>ALTER TABLE</code> with downtime mitigation.</li> <li>\ud83d\udcbe Backup &amp; Restore: Worked with DevOps to verify daily <code>pg_dump</code> backups and tested <code>pg_restore</code>.</li> </ul>"},{"location":"Notes/interview-prep/Databases/#4-how-do-you-ensure-data-integrity-in-your-applications","title":"\u2b50\u2b50 4. How do you ensure data integrity in your applications?","text":"<ul> <li>\ud83d\udd10 Database Constraints: Use of PRIMARY KEY, FOREIGN KEY, UNIQUE constraints.</li> <li>\ud83e\uddea App-Level Validation: Inputs validated at service layer before hitting the DB.</li> <li>\ud83d\udce6 Transactional Safety: Wrap operations within <code>BEGIN</code>, <code>COMMIT</code>, and <code>ROLLBACK</code> to ensure atomicity.</li> <li>\u2705 Testing: Automated unit/integration tests to enforce schema and data rules.</li> </ul>"},{"location":"Notes/interview-prep/Databases/#5-how-do-you-manage-database-migrations-in-your-team","title":"\u2b50\u2b50\u2b50 5. How do you manage database migrations in your team?","text":"<ul> <li>\ud83d\udee0\ufe0f Migration Tools: Flyway/Sequelize CLI for version-controlled schema changes.</li> <li>\ud83d\udd0d Pre-Migration Testing: Validate each migration in staging with production-like data.</li> <li>\ud83d\udea6 CI/CD Integration: Apply migrations via automated pipelines or manual with rollback plans.</li> <li>\ud83d\udcd1 Changelog Maintenance: Track and document all changes across environments.</li> </ul>"},{"location":"Notes/interview-prep/Databases/#6-whats-the-difference-between-a-clustered-and-a-non-clustered-index","title":"\u2b50\u2b50 6. What\u2019s the difference between a clustered and a non-clustered index?","text":"<ul> <li> <p>\ud83c\udf33 Clustered Index:</p> <ul> <li>Defines physical order of table data.</li> <li>Only one per table.</li> <li>Speeds up range queries.</li> </ul> </li> <li> <p>\ud83e\uddee Non-clustered Index:</p> <ul> <li>Separate structure pointing to physical data rows.</li> <li>Multiple allowed.</li> <li>Ideal for point lookups and covering queries.</li> </ul> </li> </ul> <p>\ud83d\udccc Use clustered index for range-heavy queries; non-clustered for column-specific lookups.</p> <p>Would you like to include NoSQL interview questions as well? \ud83e\udd14</p>"},{"location":"Notes/interview-prep/Delhivery-CallHealth-Experience/","title":"\ud83d\udc68\u200d\ud83d\udcbb Professional Experience: Delhivery &amp; CallHealth","text":""},{"location":"Notes/interview-prep/Delhivery-CallHealth-Experience/#delhivery-fleet-management-system","title":"\ud83d\ude9a Delhivery (Fleet Management System)","text":"<p>Role: Core Development Team Member Tech Stack: Python (Django), AWS (EC2, RDS, S3, VPC, SNS, Lambda, Elasticsearch, DynamoDB, Athena), Apache Kafka</p>"},{"location":"Notes/interview-prep/Delhivery-CallHealth-Experience/#key-contributions","title":"\ud83c\udf1f Key Contributions:","text":"<ul> <li>\ud83e\udde0 Designed architecture for Invoice and Billing Microservice.</li> <li> <p>\ud83d\udd04 Implemented and maintained RESTful APIs for critical modules:</p> <ul> <li>Attendance management</li> <li>Contact handling for both Air and Road transport.</li> <li>\ud83d\udce6 Built scalable and maintainable microservices using Python Django.</li> <li>\u2601\ufe0f Deployed services using AWS cloud components, enabling high availability and performance.</li> <li>\u26a1 Used Kafka for distributed streaming and Athena for SQL-based data analytics over S3.</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Delhivery-CallHealth-Experience/#technologies-concepts-used","title":"\ud83d\udd0d Technologies &amp; Concepts Used:","text":"<ul> <li>AWS Lambda: Event-driven serverless compute service</li> <li>AWS Elasticsearch: Real-time search and analytics engine</li> <li>Amazon DynamoDB: NoSQL database with partition and composite keys</li> <li>AWS Athena: Serverless querying using SQL on S3</li> <li>Apache Kafka: Stream-processing for distributed systems</li> </ul>"},{"location":"Notes/interview-prep/Delhivery-CallHealth-Experience/#callhealth","title":"\ud83c\udfe5 CallHealth","text":"<p>Role: Full-Stack Developer (Associate Interface Team) Tech Stack: REST APIs, CMS, Internal Tools Integration</p>"},{"location":"Notes/interview-prep/Delhivery-CallHealth-Experience/#key-projects","title":"\ud83d\udca1 Key Projects:","text":"<ul> <li>\ud83e\udde9 CallHealth Blog: Integrated CMS for non-tech business teams</li> <li>\ud83d\udd17 Associate Interface: Developed internal RESTful APIs</li> <li>\ud83d\udcde CRM Operations: Implemented API-driven architecture for managing customer relationships</li> <li> <p>\ud83d\udee1\ufe0f Insurance Module:</p> <ul> <li>Owner of the project (similar to Policy Bazaar)</li> <li>Implemented full-stack integration and web services</li> <li> <p>\ud83c\udf10 Tribal Welfare (Telangana Government):</p> </li> <li> <p>Built REST APIs for web and mobile application integration</p> </li> <li>Delivered end-to-end solution including deployment</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Delhivery-CallHealth-Experience/#summary","title":"\ud83e\udde0 Summary:","text":"<ul> <li>Strong experience designing scalable backend systems using Python and AWS</li> <li>Proven track record of taking ownership and delivering critical business modules</li> <li>Hands-on with large-scale distributed systems, serverless architecture, and secure integration for public sector and healthcare</li> </ul> <p>Feel free to tailor specific examples during your interview depending on whether the interviewer is interested in:</p> <ul> <li>Microservice architecture</li> <li>API design</li> <li>Government or healthcare projects</li> <li>AWS services expertise</li> <li>Stream-processing with Kafka</li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/","title":"\u2601\ufe0f DevOps / Cloud / CI-CD Mock Interview for 8+ Years Experience","text":""},{"location":"Notes/interview-prep/Dev-Ops/#1-whats-your-experience-with-docker-can-you-explain-how-youd-containerize-a-web-application","title":"\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f 1. What\u2019s your experience with Docker? Can you explain how you'd containerize a web application?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-points","title":"\ud83e\udde0 Key Points:","text":"<ul> <li>\ud83d\udc33 Extensive experience containerizing frontend and backend apps using Docker.</li> <li>\ud83d\udee0\ufe0f Steps to containerize a web app:<ul> <li>\ud83d\udcc4 Write a Dockerfile:<ul> <li>Choose base image (e.g., <code>node:18-alpine</code> for Node.js).</li> <li>Copy application source code.</li> <li>Install dependencies.</li> <li>Expose required ports.</li> <li>Define <code>CMD</code> to run app.</li> </ul> </li> <li>\ud83d\udd28 Build image using:   <code>bash   docker build -t my-app .</code></li> <li>\u25b6\ufe0f Run container using:   <code>bash   docker run -p 3000:3000 my-app</code></li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/#2-how-would-you-set-up-a-cicd-pipeline-in-gitlab-for-a-full-stack-application","title":"\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f 2. How would you set up a CI/CD pipeline in GitLab for a full-stack application?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-points_1","title":"\ud83e\udde0 Key Points:","text":"<ul> <li>\ud83d\udcc4 Use <code>.gitlab-ci.yml</code> to define pipeline stages: <code>install</code>, <code>build</code>, <code>test</code>, <code>deploy</code>.</li> <li>\ud83d\udcbc Split jobs:<ul> <li><code>frontend-build</code>: Build/test frontend.</li> <li><code>backend-build</code>: Build/test backend.</li> </ul> </li> <li>\ud83d\udc33 Use Docker runners for environment consistency.</li> <li>\u26a1 Cache dependencies to improve build speed.</li> <li>\u2705 Run tests using commands like <code>npm test</code> or <code>pytest</code>.</li> <li>\ud83d\ude80 Automate deployment to staging/production (can integrate with Kubernetes).</li> <li>\ud83d\udd10 Manage secrets using GitLab CI/CD environment variables.</li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/#3-what-are-the-basic-components-of-kubernetes-you-need-to-deploy-a-service","title":"\ud83c\udf1f\ud83c\udf1f 3. What are the basic components of Kubernetes you need to deploy a service?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-components","title":"\ud83e\udde0 Key Components:","text":"<ul> <li>\ud83d\udce6 Pod \u2013 Smallest deployable unit, contains container(s).</li> <li>\ud83e\udde9 Deployment \u2013 Handles replica sets, scaling, and updates.</li> <li>\ud83c\udf10 Service \u2013 Exposes Pods (types: ClusterIP, NodePort, LoadBalancer).</li> <li>\u2699\ufe0f ConfigMap &amp; Secrets \u2013 For non-sensitive and sensitive configurations respectively.</li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/#4-what-experience-do-you-have-with-azure-and-how-would-you-provision-a-basic-virtual-machine-or-storage-account-using-the-azure-cli-or-portal","title":"\ud83c\udf1f\ud83c\udf1f 4. What experience do you have with Azure, and how would you provision a basic virtual machine or storage account using the Azure CLI or portal?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-points_2","title":"\ud83e\udde0 Key Points:","text":"<ul> <li>\ud83d\udcbb Experience with hosting apps, managing VMs, and provisioning resources on Azure.</li> <li>\u2699\ufe0f Azure CLI Examples:<ul> <li>Provision VM:   <code>bash   az vm create --resource-group myGroup --name myVM --image UbuntuLTS --generate-ssh-keys</code></li> <li>Provision storage account:   <code>bash   az storage account create --name mystorage --resource-group myGroup --location eastus --sku Standard_LRS</code></li> </ul> </li> <li>\ud83d\uddb1\ufe0f Azure Portal: GUI-based provisioning via web interface.</li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/#5-can-you-explain-the-difference-between-continuous-integration-continuous-delivery-and-continuous-deployment","title":"\ud83c\udf1f\ud83c\udf1f 5. Can you explain the difference between Continuous Integration, Continuous Delivery, and Continuous Deployment?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-concepts","title":"\ud83e\udde0 Key Concepts:","text":"<ul> <li>\ud83d\udd01 CI (Continuous Integration):<ul> <li>Frequent code merges.</li> <li>Automated build &amp; test validation.</li> </ul> </li> <li>\ud83d\ude80 CD (Continuous Delivery):<ul> <li>Code is always production-ready.</li> <li>Auto-deploy to staging.</li> </ul> </li> <li>\u2699\ufe0f CD (Continuous Deployment):<ul> <li>Auto-deploy to production after tests pass.</li> <li>Enables fast, reliable releases.</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/#6-how-would-you-monitor-and-troubleshoot-a-kubernetes-cluster","title":"\ud83c\udf1f\ud83c\udf1f 6. How would you monitor and troubleshoot a Kubernetes cluster?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-tools-methods","title":"\ud83e\udde0 Key Tools &amp; Methods:","text":"<ul> <li>\ud83d\udd0d Use <code>kubectl</code> for basic diagnostics:<ul> <li><code>kubectl get pods</code></li> <li><code>kubectl logs &lt;pod&gt;</code></li> <li><code>kubectl describe &lt;resource&gt;</code></li> </ul> </li> <li>\ud83d\udcca Prometheus + Grafana for metric collection and dashboards.</li> <li>\ud83d\udd01 Kube-state-metrics for resource-level insights.</li> <li>\ud83d\udea8 Set up alerting with Alertmanager for anomaly detection.</li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/#7-how-do-you-manage-infrastructure-as-code-can-you-give-an-example-using-terraform-or-azure-resource-manager","title":"\ud83c\udf1f\ud83c\udf1f 7. How do you manage infrastructure as code? Can you give an example using Terraform or Azure Resource Manager?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-points_3","title":"\ud83e\udde0 Key Points:","text":"<ul> <li>\ud83c\udfd7\ufe0f Manage infrastructure using Terraform and ARM templates.</li> <li>\ud83d\udcc4 Terraform steps:<ul> <li>Define <code>.tf</code> files for resources (VMs, storage, etc.).</li> <li>Run:   <code>bash   terraform plan   terraform apply</code></li> <li>Sample VM resource:   <code>hcl   resource \"azurerm_virtual_machine\" \"example\" {     name                = \"example-vm\"     location            = \"East US\"     resource_group_name = azurerm_resource_group.example.name     ...   }</code></li> </ul> </li> <li>\ud83d\udd04 Benefits: reproducibility, version control, easy updates.</li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/#8-can-you-explain-the-concept-of-blue-green-deployments-how-does-it-work-in-a-cicd-pipeline","title":"\ud83c\udf1f\ud83c\udf1f 8. Can you explain the concept of Blue-Green Deployments? How does it work in a CI/CD pipeline?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-points_4","title":"\ud83e\udde0 Key Points:","text":"<ul> <li>\ud83c\udfaf Deploy to Green (new) environment while Blue (current) serves traffic.</li> <li>\ud83d\udd04 After verification, switch traffic to Green.</li> <li>\ud83d\udd19 Blue acts as fallback in case of failure.</li> <li>\u2705 In pipeline:<ol> <li>Deploy to Green.</li> <li>Test.</li> <li>Shift traffic.</li> <li>Optionally decommission Blue.</li> </ol> </li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/#9-how-would-you-secure-sensitive-data-like-api-keys-passwords-in-a-cicd-pipeline","title":"\ud83c\udf1f\ud83c\udf1f 9. How would you secure sensitive data (like API keys, passwords) in a CI/CD pipeline?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-practices","title":"\ud83e\udde0 Key Practices:","text":"<ul> <li>\ud83d\udd10 Use environment variables and encrypted secrets in GitLab/GitHub CI.</li> <li>\ud83e\uddf0 Use secret managers like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault.</li> <li>\ud83e\uddf7 Encrypt data in transit &amp; at rest.</li> <li>\ud83d\udc65 Implement strict RBAC for secret access.</li> </ul>"},{"location":"Notes/interview-prep/Dev-Ops/#10-whats-your-experience-with-monitoring-and-logging-for-cloud-applications","title":"\ud83c\udf1f\ud83c\udf1f 10. What\u2019s your experience with monitoring and logging for cloud applications?","text":""},{"location":"Notes/interview-prep/Dev-Ops/#key-tools","title":"\ud83e\udde0 Key Tools:","text":"<ul> <li>\ud83d\udd2d Monitoring:<ul> <li>CloudWatch (AWS), Azure Monitor, Prometheus, Grafana.</li> </ul> </li> <li>\ud83d\udcdd Logging:<ul> <li>Use frameworks like Winston (Node.js) to send logs to ELK or CloudWatch Logs.</li> </ul> </li> <li>\ud83d\udea8 Alerting based on key metrics: CPU, memory, response time, error rates.</li> </ul> <p>\u2705 This structured guide prepares you for DevOps-focused interviews, crafted for a seasoned professional with 8+ years of experience in Cloud, Docker, CI/CD, and Kubernetes.</p>"},{"location":"Notes/interview-prep/Intro/","title":"\ud83d\udc4b Introduction &amp; Experience Notes for Interviews","text":""},{"location":"Notes/interview-prep/Intro/#brief-introduction","title":"\ud83e\uddd1\u200d\ud83d\udcbc Brief Introduction","text":"<p>I am Prakash Rabidas, a Senior Software Engineer with 8+ years of experience in designing and developing scalable systems, specializing in backend development and RESTful APIs.</p> <p>I've worked with top organizations like Thales, Oracle, Delhivery, and CallHealth, delivering high-impact projects in Cloud HSM, Oracle Cloud Infrastructure, and Fleet Management Systems.</p> <p>My core strengths include:</p> <ul> <li>\ud83d\udcbb Languages: Python, Java, Golang</li> <li>\u2601\ufe0f Cloud Platforms: AWS, GCP, Oracle Cloud</li> <li>\ud83e\uddf1 Architecture: Microservices, Scalable System Design</li> <li>\ud83e\uddd1\u200d\ud83d\udd27 Development: Agile Practices, CI/CD, REST APIs</li> </ul>"},{"location":"Notes/interview-prep/Intro/#conflict-resolution-challenging-collaboration","title":"\ud83d\udd27 Conflict Resolution / Challenging Collaboration","text":""},{"location":"Notes/interview-prep/Intro/#project-oracle-cloud-infrastructure-oci-pool-management","title":"\ud83e\udde0 Project: Oracle Cloud Infrastructure (OCI) - Pool Management","text":"<ul> <li>Situation: Conflict over implementation approach for Virtual Private Database (VPD).</li> <li>Task: Harmonize the team and deliver a secure, scalable database access solution.</li> <li> <p>Action:</p> <ul> <li>Facilitated a brainstorming session to align understanding and goals.</li> <li>Created a prototype to validate and demonstrate the selected approach.</li> <li>Broke tasks into modules to ensure everyone's contribution.</li> <li> <p>Result:</p> </li> <li> <p>Delivered a successful VPD integration, enhancing security. \ud83d\udd10</p> </li> <li>Promoted better team collaboration and future coordination. \ud83e\udd1d</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Intro/#challenging-project-overcoming-it","title":"\ud83e\uddd7\u200d\u2642\ufe0f Challenging Project &amp; Overcoming It","text":""},{"location":"Notes/interview-prep/Intro/#project-delhivery-fleet-management-system-invoice-billing","title":"\ud83d\ude9a Project: Delhivery - Fleet Management System (Invoice &amp; Billing)","text":"<ul> <li>Situation: Lead the development of Invoice &amp; Billing microservice under time pressure.</li> <li>Task: Ensure robustness, scalability, and business alignment.</li> <li> <p>Action:</p> <ul> <li>Designed a modular architecture with Django (Python).</li> <li>Used Apache Kafka for async communication. \u2699\ufe0f</li> <li>Maintained constant communication with stakeholders.</li> <li> <p>Result:</p> </li> <li> <p>Delivered ahead of schedule \u2705</p> </li> <li>Achieved faster billing, reduced processing time \ud83d\udcc9</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Intro/#summary-of-key-projects","title":"\ud83d\udccc Summary of Key Projects","text":""},{"location":"Notes/interview-prep/Intro/#thales-cloud-hsm","title":"\ud83d\udee1\ufe0f Thales (Cloud HSM)","text":"<ul> <li>Built RESTful APIs for Thales Payment HSMs</li> <li>Worked on data ingestion, cloud security, and microservices</li> </ul>"},{"location":"Notes/interview-prep/Intro/#oracle-cloud-infrastructure-oci","title":"\ud83e\udde9 Oracle Cloud Infrastructure (OCI)","text":"<ul> <li>Designed Pool Management using VPD</li> <li>Developed REST APIs for Control Panel (CP)</li> </ul>"},{"location":"Notes/interview-prep/Intro/#delhivery-fleet-management","title":"\ud83d\ude9a Delhivery (Fleet Management)","text":"<ul> <li>Led Invoice &amp; Billing microservice development</li> <li>Developed REST APIs for Attendance &amp; Contact Management</li> </ul>"},{"location":"Notes/interview-prep/Intro/#callhealth-associate-interface","title":"\ud83c\udfe5 CallHealth (Associate Interface)","text":"<ul> <li>Led Insurance Project, managing full lifecycle</li> <li>Built services for internal use &amp; government healthcare integration</li> </ul> <p>\u2705 These points help structure responses for any resume-based or experience-oriented questions in interviews.</p> <p>\ud83d\udcdd Tip: Always align your answers with the STAR (Situation, Task, Action, Result) format!</p>"},{"location":"Notes/interview-prep/Oracle-experience/","title":"\ud83d\udcbc Oracle Experience","text":""},{"location":"Notes/interview-prep/Oracle-experience/#oracle-scm-supply-chain-management","title":"\ud83c\udfe2 Oracle SCM (Supply Chain Management)","text":"<ul> <li>\ud83d\udc68\u200d\ud83d\udcbb Role: Member of the Fusion Development Team.</li> <li>\ud83d\udce6 Domain: Supply Chain Management \u2014 Oracle SCM Cloud.</li> <li>\ud83d\udce1 Responsibility: Worked on Oracle Supplier Network Setup for Procure-To-Pay messaging.</li> <li>\ud83e\udd16 Automation: Automated CI/CD pipelines for CMK (Collaboration Messaging Framework) using Python.</li> <li> <p>\ud83e\uddf0 Tech Stack:</p> <ul> <li>Java (Oracle ADF)</li> <li>Python</li> <li>Oracle Database</li> </ul> </li> </ul> <p>\ud83d\udcac \"I contributed to building a seamless and automated messaging setup between buyers and suppliers, ensuring procurement operations remained fast and error-free.\"</p> <ul> <li>\ud83d\udeaa Reason for Moving: Limited scope for learning and technical growth.</li> </ul>"},{"location":"Notes/interview-prep/Oracle-experience/#oracle-cloud-infrastructure-oci-governance","title":"\u2601\ufe0f Oracle Cloud Infrastructure (OCI) \u2013 Governance","text":"<ul> <li> <p>\ud83d\udc68\u200d\ud83d\udcbb Role: Full-stack Software Engineer in the Oracle Identity Management - Governance Team.</p> </li> <li> <p>\ud83e\uddf1 Key Contribution:</p> <ul> <li>Designed and implemented Pool Management (core module) for Oracle DB connectivity using Virtual Private Database (VPD).</li> <li>Built secure and scalable RESTful APIs for the Control Panel (CP).</li> </ul> </li> <li> <p>\ud83e\uddf0 Tech Stack:</p> <ul> <li>Java (Dropwizard Framework)</li> <li>Oracle Cloud Infrastructure (OCI)</li> <li>Oracle DB</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Oracle-experience/#identity-governance-concepts-simplified","title":"\ud83d\udd10 Identity Governance: Concepts Simplified","text":"<ul> <li> <p>\ud83c\udfaf Purpose:</p> <ul> <li>Show who has access to what</li> <li>Enforce and automate access control</li> <li>Support on-demand and contextual access assignment</li> </ul> </li> <li> <p>\ud83d\udee1\ufe0f Why VPD?</p> <ul> <li>Enables fine-grained access control.</li> <li>Ensures data-level security in multi-tenant systems.</li> </ul> </li> <li> <p>\ud83d\ude80 Framework Used:</p> <ul> <li>Dropwizard: Lightweight Java framework used for rapid development of high-performance RESTful services.</li> </ul> </li> </ul>"},{"location":"Notes/interview-prep/Oracle-experience/#key-learnings","title":"\ud83e\udde0 Key Learnings","text":"<ul> <li>Mastery in RESTful API development using Java + Dropwizard.</li> <li>Hands-on with secure identity governance models and OCI.</li> <li>Improved proficiency in DevOps automation, CI/CD, and cross-functional collaboration.</li> </ul> <p>\ud83d\udcac \"My work in Oracle's governance team gave me deep insights into secure system architecture, identity access control, and cloud-native development.\"</p>"},{"location":"Notes/interview-prep/Oracle-experience/#why-it-matters","title":"\ud83c\udf1f Why It Matters","text":"<ul> <li>Built systems that scale securely and comply with governance policies.</li> <li>Directly impacted cloud product usability and security infrastructure.</li> <li>Gained valuable experience working on enterprise-scale cloud solutions.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Backend/","title":"\ud83d\udcbb Technical \u2013 Backend Interview Mock Test (8+ YOE)","text":""},{"location":"Notes/interview-prep/Technical-Backend/#1-explain-how-you-design-a-rest-api-what-best-practices-do-you-follow","title":"\u2b50\u2b50 1. Explain how you design a REST API. What best practices do you follow?","text":"<ul> <li>\ud83d\udcdd Start with Business Requirements: Understand core functionality, edge cases, expected usage.</li> <li>\ud83d\udce6 Resource-Oriented Endpoints: Use nouns for URIs (e.g., <code>/users</code>, <code>/orders</code>).</li> <li>\ud83d\udd01 HTTP Methods: Follow RESTful verbs - <code>GET</code>, <code>POST</code>, <code>PUT/PATCH</code>, <code>DELETE</code>.</li> <li>\ud83d\udccc Versioning: Use URI versioning like <code>/api/v1/...</code> to maintain backward compatibility.</li> <li>\ud83d\udcdf Status Codes: Return proper HTTP status codes (200, 400, 401, 403, 500).</li> <li>\ud83d\udd0d Pagination &amp; Filtering: Enable for large lists using query params (<code>?page=1&amp;limit=20</code>).</li> <li>\ud83d\udea8 Structured Error Handling: Standardize errors with code, message, and field.</li> <li>\ud83d\udcc4 API Documentation: Use OpenAPI/Swagger for collaboration and clarity.</li> </ul> <p>\ud83d\udd27 Real Use Case: At Delhivery, designed billing APIs with versioning and robust filtering, enabling scalable invoice generation.</p>"},{"location":"Notes/interview-prep/Technical-Backend/#2-whats-your-approach-to-securing-apis","title":"\u2b50\u2b50 2. What\u2019s your approach to securing APIs?","text":"<ul> <li>\ud83d\udd10 Authentication: Implement JWT tokens with expiry and refresh token strategies.</li> <li>\ud83d\udee1\ufe0f Authorization (RBAC): Enforce endpoint-level role-based access policies.</li> <li>\ud83d\udce1 HTTPS Only: Encrypt all data in transit.</li> <li>\ud83d\udeab Rate Limiting: Throttle requests via API gateway to prevent abuse.</li> <li>\ud83e\uddfc Input Validation: Sanitize and validate all inputs at multiple layers.</li> <li>\ud83e\uddfe Audit Logging: Log suspicious requests and authentication failures.</li> </ul> <p>\ud83d\udee0 Example: At Thales Gambit, used OAuth2 + JWT + key manager policy mapping for layered API security.</p>"},{"location":"Notes/interview-prep/Technical-Backend/#3-can-you-walk-us-through-how-you-would-implement-authentication-and-rbac-in-a-backend-system","title":"\u2b50\u2b50 3. Can you walk us through how you would implement authentication and RBAC in a backend system?","text":"<ul> <li>\ud83d\udd11 JWT Authentication: Issue token post-login with user context, signed and time-bound.</li> <li> <p>\ud83e\udded RBAC Enforcement:</p> <ul> <li>Define roles (Admin, Viewer, etc.)</li> <li>Map roles to permissions</li> <li>Use middleware/decorators to enforce access checks.</li> <li>\ud83d\uddc2\ufe0f Policy Store: Maintain centralized policy-to-role mapping in a config store or DB.</li> </ul> </li> </ul> <p>\u2699\ufe0f Example: Used API Gateway with RBAC middleware in Thales Gambit to secure sensitive endpoints.</p>"},{"location":"Notes/interview-prep/Technical-Backend/#4-if-given-a-java-or-nodejspythongo-service-that-crashes-under-load-how-would-you-troubleshoot-and-optimize-it","title":"\u2b50\u2b50 4. If given a Java (or Node.js/Python/Go) service that crashes under load, how would you troubleshoot and optimize it?","text":"<ul> <li>\ud83e\uddea Load Testing: Use JMeter, k6, or Locust to simulate production-like traffic.</li> <li>\ud83d\udcca Analyze Logs and Metrics: CPU, memory, heap, GC logs, thread dumps.</li> <li>\ud83e\udde0 Profiling: Tools like VisualVM, Py-Spy, Go pprof to locate bottlenecks.</li> <li> <p>\ud83d\udd04 Optimizations:</p> <ul> <li>Refactor tight loops / memory leaks</li> <li>Minimize DB round-trips</li> <li>Introduce caching and async calls</li> <li>Tune server threads / scale horizontally</li> <li>\u267b\ufe0f Validation: Rerun performance tests post-fix to verify improvements.</li> </ul> </li> </ul> <p>\ud83c\udfaf Real Case: At Delhivery, converted DB-heavy operations into async Redis-backed queues reducing response time by 40%.</p>"},{"location":"Notes/interview-prep/Technical-Backend/#5-how-do-you-ensure-that-your-backend-services-are-scalable-and-maintainable-in-the-long-term","title":"\u2b50\u2b50 5. How do you ensure that your backend services are scalable and maintainable in the long term?","text":"<ul> <li>\ud83e\uddf1 Microservices: Independent deployments, fault isolation, horizontal scaling.</li> <li>\ud83e\udded Service Discovery: Dynamically route service calls in distributed systems.</li> <li>\u2696\ufe0f Stateless Design: Enables autoscaling and better fault recovery.</li> <li>\ud83e\udde9 DB Sharding: Distributes load across partitions.</li> <li>\ud83d\udcec Asynchronous Processing: Decouple with Kafka or RabbitMQ.</li> <li>\ud83e\uddea CI/CD Pipelines: Automate testing, deployment, and rollback.</li> </ul> <p>\ud83d\udccc Example: At Delhivery, helped migrate billing system to microservices with load-balanced sharding support.</p>"},{"location":"Notes/interview-prep/Technical-Backend/#6-can-you-explain-your-approach-to-handling-large-datasets-and-ensuring-optimal-performance","title":"\u2b50 6. Can you explain your approach to handling large datasets and ensuring optimal performance?","text":"<ul> <li>\ud83e\uddee Indexing: Speed up frequent queries with well-planned indexes.</li> <li>\u26a1 Caching: Redis/Memcached for hot data and repeated queries.</li> <li>\ud83d\udce6 Batch Processing: Avoid long-running ops with chunked execution.</li> <li>\ud83d\uddc3\ufe0f Partitioning: Split data (e.g., by date or region) for performance.</li> <li>\ud83d\udd04 ETL Pipelines: Extract, transform, and load data efficiently.</li> </ul> <p>\ud83d\udcca Example: At Delhivery, used Redis and time-based partitioning to enhance analytics query speed by 60%.</p>"},{"location":"Notes/interview-prep/Technical-Backend/#7-how-do-you-handle-error-logging-and-monitoring-in-production","title":"\u2b50 7. How do you handle error logging and monitoring in production?","text":"<ul> <li>\ud83d\udcda Centralized Logging: ELK, Splunk, or Cloud-native tools (e.g., GCP Logging).</li> <li>\ud83d\udea6 Log Levels: Categorize logs (INFO, WARN, ERROR, FATAL).</li> <li>\ud83d\udce2 Alerting: Alertmanager, PagerDuty, or CloudWatch Alarms for critical incidents.</li> <li>\u2764\ufe0f Health Checks: Integrate liveness/readiness probes with infra orchestration.</li> <li>\ud83e\uddf9 Retention &amp; Rotation: Efficient storage by archiving and cleaning old logs.</li> </ul> <p>\ud83d\udccc Example: At Thales, we used Kibana dashboards and proactive alerting to monitor system health.</p>"},{"location":"Notes/interview-prep/Technical-Backend/#additional-questions-you-should-know","title":"\ud83d\udca1 Additional Questions You Should Know","text":""},{"location":"Notes/interview-prep/Technical-Backend/#8-how-do-you-approach-testing-in-your-backend-services","title":"\ud83d\udd39 8. How do you approach testing in your backend services?","text":"<ul> <li>\u2705 Unit Testing: Mock external services and isolate logic.</li> <li>\ud83d\udd04 Integration Testing: Test modules/services together with real dependencies.</li> <li>\ud83d\udccc TDD: Write test cases before writing production code.</li> <li>\ud83d\udee0\ufe0f Frameworks: JUnit (Java), PyTest (Python), Mocha (Node.js).</li> </ul>"},{"location":"Notes/interview-prep/Technical-Backend/#9-what-strategies-do-you-use-to-handle-high-concurrency-in-backend-systems","title":"\ud83d\udd39 9. What strategies do you use to handle high concurrency in backend systems?","text":"<ul> <li>\ud83e\uddf5 Thread Pools / Async Handling: Efficient thread/resource usage.</li> <li>\ud83d\udcca Optimized DB Transactions: Minimize locking and deadlocks.</li> <li>\ud83c\udf10 Load Balancing: Distribute requests across replicas.</li> <li>\u2696\ufe0f Horizontal Scaling: Scale instances with autoscaling groups.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/","title":"\ud83c\udfa8 Technical \u2013 Frontend Interview Preparation (8+ YOE)","text":""},{"location":"Notes/interview-prep/Technical-Frontend/#1-what-frontend-framework-are-you-most-comfortable-with-and-why","title":"\u2b50\u2b50 1. What frontend framework are you most comfortable with, and why?","text":"<ul> <li>\u2705 Most comfortable with AngularJS and Angular.</li> <li>\ud83c\udfd7\ufe0f Used extensively in projects involving admin dashboards and dynamic forms.</li> <li>\ud83e\udde0 Appreciate Angular\u2019s structured architecture and dependency injection.</li> <li>\ud83d\udd01 While I haven\u2019t used React or Vue in production, I\u2019ve explored both via side projects and documentation.</li> <li>\ud83d\ude80 With my experience, I can quickly adapt to any modern frontend framework as required.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/#2-how-do-you-ensure-a-design-system-like-mui-is-followed-consistently-across-your-components","title":"\u2b50\u2b50 2. How do you ensure a design system like MUI is followed consistently across your components?","text":"<ul> <li>\ud83e\udde9 Leverage pre-built components and theme configurations.</li> <li>\u2728 Apply design tokens like typography, spacing, layout consistently.</li> <li>\ud83d\udcd8 Align development with MUI documentation and Figma/Zeplin specs.</li> <li>\ud83d\udd04 Create reusable wrappers/components to enforce consistency.</li> <li>\ud83e\uddea Have applied similar principles using Angular Material in large-scale apps.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/#3-how-do-you-manage-component-state-and-data-flow-in-react-or-angularvue","title":"\u2b50\u2b50\u2b50 3. How do you manage component state and data flow in React (or Angular/Vue)?","text":"<ul> <li>\ud83d\udce5 In Angular, I use <code>@Input()</code> and <code>@Output()</code> for parent-child communication.</li> <li>\ud83d\udce1 For shared/global state, I use RxJS services with BehaviorSubject or ReplaySubject.</li> <li>\ud83d\udd04 Follow reactive programming principles for predictable data flow.</li> <li>\ud83d\udd0d Though not in production, I understand React\u2019s <code>useState</code>, <code>useEffect</code>, <code>Context API</code>, and their impact on rendering behavior.</li> <li>\ud83d\udcda Actively building prototypes in React to stay hands-on and relevant.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/#4-can-you-describe-how-you-might-implement-a-responsive-ui-for-a-complex-dashboard","title":"\u2b50\u2b50\u2b50 4. Can you describe how you might implement a responsive UI for a complex dashboard?","text":"<ul> <li>\ud83d\udcd0 Use CSS Grid or Flexbox for adaptive layout.</li> <li>\ud83d\udcf1 Implement media queries for breakpoints (mobile, tablet, desktop).</li> <li>\u267b\ufe0f Create modular, reusable components with responsive containers.</li> <li>\ud83d\udee0\ufe0f Leverage responsive utilities from MUI/Angular Material where available.</li> <li>\ud83e\uddea Test across screen sizes using Chrome DevTools, BrowserStack, and Lighthouse.</li> <li>\u2705 Delivered dashboards optimized for tablets, desktops, and large screens.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/#5-how-do-you-optimize-the-performance-of-a-frontend-application","title":"\u2b50\u2b50\u2b50 5. How do you optimize the performance of a frontend application?","text":"<ul> <li>\ud83d\udce6 Use lazy loading and code splitting to reduce bundle size.</li> <li>\ud83d\uddbc\ufe0f Optimize assets with responsive images using <code>srcset</code> and image compression.</li> <li>\ud83d\udca4 Defer non-critical scripts, fonts, and resources using lazy loading.</li> <li>\ud83d\udd27 Minify and bundle assets via Webpack or Angular CLI build tools.</li> <li>\ud83e\udded Implement service workers for offline caching and reduced network load.</li> <li>\ud83d\udcca Monitor using Lighthouse, Chrome DevTools, and performance budgets.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/#6-can-you-describe-a-time-when-you-had-to-handle-cross-browser-compatibility-issues-how-did-you-resolve-them","title":"\u2b50\u2b50 6. Can you describe a time when you had to handle cross-browser compatibility issues? How did you resolve them?","text":"<ul> <li>\ud83e\uddea Faced layout issues specifically on IE11 and Safari.</li> <li>\ud83e\uddf0 Used Autoprefixer to manage vendor-specific CSS.</li> <li>\ud83d\udcd0 Provided CSS Grid fallback styles for older browsers.</li> <li>\ud83e\uddef Applied feature detection and Safari-specific tweaks in isolated stylesheets.</li> <li>\ud83d\udcf1 Conducted thorough testing using BrowserStack and real devices.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/#7-how-do-you-ensure-code-quality-and-maintainability-in-your-frontend-projects","title":"\u2b50\u2b50\u2b50 7. How do you ensure code quality and maintainability in your frontend projects?","text":"<ul> <li>\ud83e\udde9 Break down UI into modular, reusable components.</li> <li>\u2705 Perform peer code reviews to maintain consistency and quality.</li> <li>\ud83e\uddea Write unit/integration tests using tools like Jasmine, Karma, or Jest.</li> <li>\ud83c\udfaf Maintain code hygiene using ESLint, Prettier, and pre-commit hooks.</li> <li>\ud83d\udcdd Add documentation and comments for complex flows or third-party integrations.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/#8-how-do-you-handle-error-handling-and-logging-in-frontend-applications","title":"\u2b50\u2b50 8. How do you handle error handling and logging in frontend applications?","text":"<ul> <li>\ud83e\uddf1 Use Error Boundaries in React to catch component errors.</li> <li>\ud83d\udea8 Integrate error logging platforms like Sentry, LogRocket, or Firebase Crashlytics.</li> <li>\ud83e\udded Display user-friendly fallback UIs or custom error pages (e.g. 404, 500).</li> <li>\ud83c\udf10 Handle API failures with try/catch, toast notifications, and graceful retries.</li> <li>\ud83d\udcc9 Implement fallback mechanisms for network failures or offline mode.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/#9-what-are-some-of-the-challenges-youve-faced-while-working-with-frontend-frameworks-and-how-did-you-overcome-them","title":"\u2b50 9. What are some of the challenges you\u2019ve faced while working with frontend frameworks, and how did you overcome them?","text":"<ul> <li>\ud83e\uddfe Managed complex, deeply nested Angular forms with dynamic validation.</li> <li>\ud83d\udee0\ufe0f Used Reactive Forms to improve control and validation.</li> <li>\ud83e\udde9 Broke down large forms into smaller reusable components.</li> <li>\ud83c\udf10 Implemented async validators for API-based checks (e.g., username availability).</li> <li>\ud83d\udd0d Maintained performance and readability with form state management via services.</li> </ul>"},{"location":"Notes/interview-prep/Technical-Frontend/#10-how-do-you-stay-updated-with-the-latest-trends-and-technologies-in-frontend-development","title":"\u2b50 10. How do you stay updated with the latest trends and technologies in frontend development?","text":"<ul> <li>\ud83d\udcd6 Follow popular blogs: CSS-Tricks, Smashing Magazine, Dev.to.</li> <li>\ud83c\udfa5 Attend webinars, meetups, and frontend conferences.</li> <li>\ud83d\udcac Engage with communities like StackOverflow, r/frontend, and Twitter/X.</li> <li>\ud83d\udd28 Build personal projects with new tools like Vite, Tailwind, and React 18.</li> <li>\ud83e\uddea Experiment regularly with frameworks, build tools, and UI libraries.</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/","title":"Thales Experience","text":""},{"location":"Notes/interview-prep/Thales-experience/#thales-hsm-experience-interview-ready-notes","title":"\ud83c\udf10 Thales HSM Experience: Interview-Ready Notes","text":""},{"location":"Notes/interview-prep/Thales-experience/#introduction","title":"\ud83d\udc68\u200d\ud83d\udcbb Introduction","text":"<p>I was part of the Microservices Team at Thales, working on modernizing the use of Hardware Security Modules (HSMs) for payment and general-purpose cryptographic operations. My role involved designing scalable cloud-native solutions for HSM provisioning and integrating them into secure financial ecosystems.</p>"},{"location":"Notes/interview-prep/Thales-experience/#what-is-a-hardware-security-module-hsm","title":"\ud83d\udd10 What is a Hardware Security Module (HSM)?","text":"<p>A Hardware Security Module (HSM) is a tamper-resistant physical device used for secure storage and management of cryptographic keys. It performs operations like:</p> <ul> <li>\ud83d\udd11 Key generation and management</li> <li>\ud83d\udd10 Encryption/Decryption</li> <li>\u270d\ufe0f Digital Signing</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#key-features","title":"\ud83d\udd0d Key Features:","text":"<ul> <li>Physical Security: Anti-tamper protections</li> <li>Cryptographic Processing: Offloads cryptographic tasks</li> <li>Compliance: Meets standards like PCI-DSS, FIPS 140-2</li> <li>Scalability: Easily integrates with modern systems</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#types-of-hsms","title":"\ud83e\udde9 Types of HSMs","text":"<ul> <li>General-Purpose HSM: For broad cryptographic use (e.g., SafeNet Luna)</li> <li>Payment HSM: For PIN, EMV card, transaction security (e.g., Thales payShield)</li> <li>Network-Attached HSM: Services multiple systems via network (e.g., AWS CloudHSM)</li> <li>Embedded HSM: Built into hardware (e.g., TPM in laptops)</li> <li>Cloud-Based HSM: Fully managed HSM-as-a-Service (e.g., Azure Dedicated HSM)</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#project-highlights-at-thales","title":"\ud83d\ude80 Project Highlights at Thales","text":""},{"location":"Notes/interview-prep/Thales-experience/#1-cloud-based-hsm-provisioning","title":"1\ufe0f\u20e3 Cloud-Based HSM Provisioning","text":"<ul> <li>Previously, HSMs were installed on-premise (e.g., RBI, SBI).</li> <li>We automated provisioning of HSM in Thales datacenter via one-click cloud subscription (e.g., Azure HSM).</li> <li>Solved major maintenance and scalability issues.</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#2-multi-purpose-hsm-design","title":"2\ufe0f\u20e3 Multi-Purpose HSM Design","text":"<ul> <li>Innovated a unified HSM that supports both general-purpose and payment-specific operations.</li> <li>Helped reduce hardware dependency and simplified deployment.</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#3-microservice-api-development","title":"3\ufe0f\u20e3 Microservice API Development","text":"<ul> <li>Built RESTful APIs using Golang and Python automation.</li> <li>Developed tools like Gambit to support HSM provisioning workflows.</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#tech-stack","title":"\ud83d\udee0\ufe0f Tech Stack","text":"<ul> <li>Languages: Golang, Python</li> <li>Database: MySQL</li> <li>Cloud Services: Azure HSM, Thales Cloud Infrastructure</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#why-hsms-are-critical","title":"\ud83e\udde0 Why HSMs are Critical","text":"<ul> <li>\ud83d\udee1\ufe0f Key Security: Protects keys from breaches</li> <li>\ud83d\udcdc Compliance: Meets legal and industry requirements</li> <li>\u2699\ufe0f Performance: Offloads CPU-intensive cryptography</li> <li>\ud83d\udd12 Tamper Resistance: Advanced physical protections</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#use-cases","title":"\ud83d\uddc2\ufe0f Use Cases","text":"<ul> <li>\ud83d\udcb3 Payment Processing (e.g., Visa, MasterCard)</li> <li>\u2601\ufe0f Cloud Key Management (e.g., AWS CloudHSM)</li> <li>\ud83d\udd0f Public Key Infrastructure (e.g., CAs like DigiCert)</li> <li>\ud83d\udda5\ufe0f Secure Boot (e.g., IoT Devices)</li> <li>\ud83e\uddee Database Encryption (e.g., Oracle DB Vault)</li> <li>\ud83e\ude99 Blockchain Wallets (e.g., Ledger)</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#evolution-timeline","title":"\ud83d\udcc5 Evolution Timeline","text":"<ul> <li>1970s: Early military/banking use</li> <li>1980s: First PIN-focused HSMs</li> <li>1990s: Compliance standards emerge (FIPS)</li> <li>2000s: PKI growth and cloud HSMs</li> <li>2010s: Blockchain &amp; IoT adoption</li> <li>2020s: AI, Quantum-Resistant Crypto, Cloud-native services</li> </ul>"},{"location":"Notes/interview-prep/Thales-experience/#summary","title":"\u2705 Summary","text":"<p>My contribution at Thales revolved around modernizing legacy cryptographic systems into cloud-native HSM services, enhancing both security and operational agility. I played a key role in bridging compliance needs with innovative microservice-driven architecture.</p>"}]}