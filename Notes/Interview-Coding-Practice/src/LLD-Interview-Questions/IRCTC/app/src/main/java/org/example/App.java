/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import ticket.booking.entities.Train;
import ticket.booking.entities.User;
import ticket.booking.services.UserBookingService;
import ticket.booking.utils.UserServiceUtil;

import java.io.IOException;
import java.util.*;

public class App {

    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        UserBookingService userBookingService;

        System.out.println("🚆 Welcome to IRCTC Express Booking System 🚉");
        System.out.println("==============================================");

        try {
            userBookingService = new UserBookingService();
        } catch (IOException ex) {
            System.out.println("❌ Initialization failed: " + ex.getMessage());
            return;
        }

        int option = 0;
        Train trainSelectedForBooking = null;

        while (option != 7) {
            System.out.println("\n🔘 Choose an option:");
            System.out.println("1️⃣  Sign Up");
            System.out.println("2️⃣  Login");
            System.out.println("3️⃣  View My Bookings");
            System.out.println("4️⃣  Search Trains");
            System.out.println("5️⃣  Book a Seat");
            System.out.println("6️⃣  Cancel a Booking");
            System.out.println("7️⃣  Exit");

            try {
                option = Integer.parseInt(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.println("⚠️ Please enter a valid number.");
                continue;
            }

            switch (option) {
                case 1:
                    System.out.println("📝 Sign Up");
                    String username;
                    while (true) {
                        System.out.print("👤 Enter a username: ");
                        username = scanner.nextLine().trim();
                        if (username.contains(" ")) {
                            System.out.println("⚠️ Username should not contain spaces.");
                        } else {
                            break;
                        }
                    }

                    System.out.print("🔐 Enter your password: ");
                    String password = scanner.nextLine();

                    User newUser = new User(username, password,
                            UserServiceUtil.hashPassword(password),
                            new ArrayList<>(),
                            UUID.randomUUID().toString());

                    if (userBookingService.signUp(newUser)) {
                        System.out.println("✅ Signup complete. You can now login!");
                    }
                    break;

                case 2:
                    System.out.println("🔐 Login");
                    System.out.print("👤 Username: ");
                    String loginUser = scanner.nextLine().trim();

                    System.out.print("🔑 Password: ");
                    String loginPass = scanner.nextLine();

                    Optional<User> existing = userBookingService.getUserByUsername(loginUser);
                    if (existing.isPresent() && UserServiceUtil.checkPassword(loginPass, existing.get().getHashedPassword())) {
                        System.out.println("✅ Login successful. Welcome, " + loginUser + "!");
                        userBookingService.setUser(existing.get());
                    } else {
                        System.out.println("❌ Invalid credentials. Please try again.");
                    }
                    break;

                case 3:
                    System.out.println("📄 My Bookings:");
                    userBookingService.fetchBookings();
                    break;

                case 4:
                    System.out.println("🚉 Search Trains");

                    System.out.print("Enter source station: ");
                    String source = scanner.nextLine().toLowerCase();

                    System.out.print("Enter destination station: ");
                    String destination = scanner.nextLine().toLowerCase();

                    List<Train> trains = userBookingService.getTrains(source, destination);

                    if (trains.isEmpty()) {
                        System.out.println("🚫 No trains found from " + source + " to " + destination);
                        break;
                    }

                    System.out.println("\n📋 Available Trains:");
                    for (int i = 0; i < trains.size(); i++) {
                        Train t = trains.get(i);
                        System.out.println("🔢 " + (i + 1) + ". Train ID: " + t.getTrainId() + " | No: " + t.getTrainNo());
                        System.out.println("   📍 Route: " + String.join(" ➝ ", t.getStations()));
                        System.out.println("   ⏱️ Timings:");
                        for (Map.Entry<String, String> time : t.getStationTimes().entrySet()) {
                            System.out.println("     🕒 " + time.getKey() + " - " + time.getValue());
                        }
                    }

                    System.out.print("\n👉 Choose a train (1 - " + trains.size() + "): ");
                    int selectedTrain = scanner.nextInt();
                    scanner.nextLine(); // consume newline

                    if (selectedTrain < 1 || selectedTrain > trains.size()) {
                        System.out.println("❗ Invalid train selection.");
                        break;
                    }

                    trainSelectedForBooking = trains.get(selectedTrain - 1);
                    System.out.println("✅ Train Selected: " + trainSelectedForBooking.getTrainId());

                    System.out.println("💺 Seat Layout (0 = Available, 1 = Booked):");
                    for (List<Integer> row : trainSelectedForBooking.getSeats()) {
                        row.forEach(seat -> System.out.print((seat == 0 ? "🟩" : "🟥") + " "));
                        System.out.println();
                    }
                    break;

                case 5:
                    if (trainSelectedForBooking == null) {
                        System.out.println("⚠️ Please search and select a train first (option 4).");
                        break;
                    }

                    System.out.println("🎫 Booking Seat - Available Layout:");
                    List<List<Integer>> layout = userBookingService.fetchSeats(trainSelectedForBooking);
                    for (List<Integer> row : layout) {
                        row.forEach(seat -> System.out.print((seat == 0 ? "T" : "F") + " "));
                        System.out.println();
                    }

                    System.out.print("Enter Row: ");
                    int row = scanner.nextInt();
                    System.out.print("Enter Column: ");
                    int col = scanner.nextInt();
                    scanner.nextLine(); // consume newline

                    System.out.println("🔄 Booking in progress...");
                    if (userBookingService.bookTrainSeat(trainSelectedForBooking, row, col)) {
                        System.out.println("✅ Seat booked successfully! 🧾");
                    } else {
                        System.out.println("❌ Could not book the selected seat.");
                    }
                    break;

                case 6:
                    System.out.print("🧾 Enter Ticket ID to cancel: ");
                    String ticketId = scanner.nextLine();
                    if (userBookingService.cancelBooking(ticketId)) {
                        System.out.println("❌ Ticket canceled successfully.");
                    } else {
                        System.out.println("🚫 No matching ticket found.");
                    }
                    break;

                case 7:
                    System.out.println("👋 Thank you for using IRCTC Express! Safe travels! 🧳");
                    break;

                default:
                    System.out.println("⚠️ Invalid choice. Please choose between 1 and 7.");
            }
        }
    }
}


